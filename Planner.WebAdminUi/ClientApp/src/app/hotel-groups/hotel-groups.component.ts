import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { GetHotelGroupDetailsQuery, GetPageOfHotelGroupsQuery, HotelClient, HotelGroupClient, HotelGroupData, HotelGroupDetailsData, InsertHotelGroupCommand, PageOfOfHotelGroupData, ProcessResponse, ProcessResponseOfGuid, UpdateHotelGroupCommand } from '../core/autogenerated-clients/api-client';
import { LoadingService } from '../core/services/loading.service';

@Component({
  selector: 'app-hotel-groups',
  templateUrl: './hotel-groups.component.html',
  styleUrls: ['./hotel-groups.component.scss']
})
export class HotelGroupsComponent implements OnInit {
  sorts = [
    { key: 'NAME_ASC', value: 'Name A to Z' },
    { key: 'NAME_DESC', value: 'Name Z to A' },
  ];

  filterForm: FormGroup;

  isLoadingHotelGroupDetails$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  showLoadMore$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  loadedNumberOfHotelGroups$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  totalNumberOfHotelGroups$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  selectedHotelGroupId$: BehaviorSubject<string> = new BehaviorSubject<string>(null);
  hotelGroups$: BehaviorSubject<HotelGroupData[]> = new BehaviorSubject<HotelGroupData[]>([]);
  areDetailsDisplayed$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  selectedHotelGroupDetails$: BehaviorSubject<HotelGroupDetailsData> = new BehaviorSubject<HotelGroupDetailsData>(new HotelGroupDetailsData({
    id: null,
    isActive: true,
    key: null,
    name: null,
    connectionStringDatabase: null,
    connectionStringHost: null,
    connectionStringPassword: null,
    connectionStringPooling: true,
    connectionStringPort: null,
    connectionStringUserId: null,
  }));

  loading: LoadingService;

  constructor(
    private _formBuilder: FormBuilder,
    private _route: ActivatedRoute,
    private hotelGroupClient: HotelGroupClient,
    private hotelClient: HotelClient,
    private toastr: ToastrService
  ) {
    this.loading = new LoadingService();
  }

  ngOnInit() {
    this.filterForm = this._formBuilder.group({
      sortKey: ['NAME_ASC'],
      keywords: [''],
      activeStatusKey: ['ANY']
    });

    this.filterForm.valueChanges
      .pipe(
        debounceTime(250)
      )
      .subscribe(formValues => {
      this.loadMore(0);
    });

    this.newHotelGroup();
    this.loadMore(0);
  }

  newHotelGroup() {
    this.selectedHotelGroupId$.next(null);
    this.selectedHotelGroupDetails$.next(this._createNewHotelGroupDetails());
    this.areDetailsDisplayed$.next(true);
  }

  loadMore(skip: number) {
    if (!skip) {
      skip = this.hotelGroups$.value.length;
    }

    this.loading.start();

    let filterValues = this.filterForm.getRawValue();
    let request: GetPageOfHotelGroupsQuery = new GetPageOfHotelGroupsQuery({
      skip: skip,
      take: 20,
      keywords: filterValues.keywords,
      sortKey: filterValues.sortKey,
      activeStatusKey: filterValues.activeStatusKey
    });

    this.hotelGroupClient.getPageOfHotelGroups(request).subscribe(
      (response: PageOfOfHotelGroupData) => {
        if (skip === 0) {
          this.hotelGroups$.next(response.items);
          this.loadedNumberOfHotelGroups$.next(response.items.length);
        } else {
          this.hotelGroups$.next([...this.hotelGroups$.value, ...response.items]);
          this.loadedNumberOfHotelGroups$.next(this.hotelGroups$.value.length);
        }

        this.totalNumberOfHotelGroups$.next(response.totalNumberOfItems);
        this.showLoadMore$.next(this.loadedNumberOfHotelGroups$.value !== this.totalNumberOfHotelGroups$.value);
      },
      (error: Error) => { this.toastr.error(error.message); },
      () => { this.loading.stop(); }
    );
  }

  selectHotelGroup(hotelGroup: HotelGroupData) {
    this.selectedHotelGroupId$.next(hotelGroup.id);

    this.loading.start();
    this.isLoadingHotelGroupDetails$.next(true);

    let request: GetHotelGroupDetailsQuery = new GetHotelGroupDetailsQuery({
      id: hotelGroup.id
    });

    this.hotelGroupClient.getHotelGroupDetails(request).subscribe(
      (response: HotelGroupDetailsData) => {
        this.selectedHotelGroupDetails$.next(response);
      },
      (error: Error) => { this.toastr.error(error.message); },
      () => {
        this.loading.stop();
        this.isLoadingHotelGroupDetails$.next(false);
      }
    );
  }

  onHotelGroupInserted(hotelGroup: HotelGroupDetailsData) {
    this.hotelGroups$.next([hotelGroup, ...this.hotelGroups$.value]);
    this.totalNumberOfHotelGroups$.next(this.totalNumberOfHotelGroups$.value + 1);
    this.loadedNumberOfHotelGroups$.next(this.loadedNumberOfHotelGroups$.value + 1);
    this.selectedHotelGroupId$.next(hotelGroup.id);
    this.selectedHotelGroupDetails$.next(hotelGroup);
  }

  onHotelGroupUpdated(hg: HotelGroupDetailsData) {
    this.selectedHotelGroupDetails$.next(hg);
    let hotelGroups = [...this.hotelGroups$.value];
    let hotelGroup = hotelGroups.find(u => u.id === hg.id);

    hotelGroup.isActive = hg.isActive;
    hotelGroup.key = hg.key;
    hotelGroup.name = hg.name;

    this.hotelGroups$.next(hotelGroups);
  }

  onHotelGroupCancelled() {
    this.newHotelGroup();
  }

  private _createNewHotelGroupDetails(): HotelGroupDetailsData {
    return new HotelGroupDetailsData({
      id: null,
      isActive: true,
      key: null,
      name: null,
      connectionStringDatabase: null,
      connectionStringHost: null,
      connectionStringPassword: null,
      connectionStringPooling: true,
      connectionStringPort: null,
      connectionStringUserId: null,
    });
  }

}
