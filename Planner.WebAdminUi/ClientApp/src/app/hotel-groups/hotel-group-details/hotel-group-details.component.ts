import { Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges } from '@angular/core';
import { FormBuilder, FormGroup, ValidationErrors, Validators } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { CookieService } from 'ngx-cookie-service';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject, Subscription } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { MustMatch } from 'src/app/shared/helpers/must-match-validator';
import { GetPageOfHotelGroupHotelsQuery, HotelGroupClient, HotelGroupDetailsData, HotelGroupHotelData, HotelGroupUserData, InsertHotelGroupCommand, InsertHotelGroupHotelCommand, PageOfOfHotelGroupHotelData, ProcessResponse, ProcessResponseOfGuid, TimeZoneData, UpdateHotelGroupCommand, UpdateHotelGroupHotelCommand } from '../../core/autogenerated-clients/api-client';
import { LoadingService } from '../../core/services/loading.service';

@Component({
  selector: 'app-hotel-group-details',
  templateUrl: './hotel-group-details.component.html'
})
export class HotelGroupDetailsComponent implements OnInit, OnChanges, OnDestroy {
  sorts = [
    { key: 'NAME_ASC', value: 'Name A to Z' },
    { key: 'NAME_DESC', value: 'Name Z to A' },
  ];

  @Input() hotelGroup: HotelGroupDetailsData;

  @Output() deleted: EventEmitter<string> = new EventEmitter<string>();
  @Output() inserted: EventEmitter<HotelGroupDetailsData> = new EventEmitter<HotelGroupDetailsData>();
  @Output() updated: EventEmitter<HotelGroupDetailsData> = new EventEmitter<HotelGroupDetailsData>();
  @Output() cancelled: EventEmitter<boolean> = new EventEmitter<boolean>();

  selectedTabKey$: BehaviorSubject<string> = new BehaviorSubject<string>("HOTELS"); // HOTELS, USERS, ROOMS, ROOM_CATEGORIES, ASSETS, TASKS, RESERVATIONS

  isCreateNew: boolean = true;
  hotelGroupForm: FormGroup;

  loading: LoadingService;

  hotelsFilterForm: FormGroup;
  hotelDetailsForm: FormGroup;
  hotels$: BehaviorSubject<HotelGroupHotelData[]> = new BehaviorSubject<HotelGroupHotelData[]>([]);
  totalNumberOfHotels$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  loadedNumberOfHotels$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  showLoadMoreHotels$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  showHotelDetails$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  isNewHotel$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);

  usersFilterForm: FormGroup;
  userDetailsForm: FormGroup;
  users$: BehaviorSubject<HotelGroupUserData[]> = new BehaviorSubject<HotelGroupUserData[]>([]);
  totalNumberOfUsers$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  loadedNumberOfUsers$: BehaviorSubject<number> = new BehaviorSubject<number>(0);

  timeZones: TimeZoneData[] = [];
  filteredTimeZones$: BehaviorSubject<TimeZoneData[]> = new BehaviorSubject<TimeZoneData[]>([]);
  windowsTimeZoneIdChangedSubscription: Subscription;
  connectionKeySubscription: Subscription;

  private _defaultTimeZoneName = "Central European Standard Time";

  constructor(
    private _toastr: ToastrService,
    private _formBuilder: FormBuilder,
    private _hotelGroupClient: HotelGroupClient,
    private _cookieService: CookieService,
    private _route: ActivatedRoute
  ) {
    this.loading = new LoadingService();
  }

  ngOnInit() {
    this._initialize();

    if (!this.isCreateNew) {
      this._loadTabData();
    }
  }

  ngOnChanges(changes: SimpleChanges): void {
    if (changes.hotelGroup && !changes.hotelGroup.firstChange) {
      this._initialize();

      if (!this.isCreateNew) {
        this._loadTabData();
      }
    }
  }

  ngOnDestroy() {
    if (this.windowsTimeZoneIdChangedSubscription) {
      this.windowsTimeZoneIdChangedSubscription.unsubscribe();
    }

    if (this.connectionKeySubscription) {
      this.connectionKeySubscription.unsubscribe();
    }
  }

  selectTab(key: string) {
    this.selectedTabKey$.next(key);
    this._loadTabData();
  }

  newHotel() {
    let defaultTimeZone = this.timeZones.find(tz => tz.name === this._defaultTimeZoneName);

    this.hotelDetailsForm.controls.name.setValue("");
    this.hotelDetailsForm.controls.name.markAsUntouched();
    this.hotelDetailsForm.controls.name.markAsPristine();
    this.hotelDetailsForm.controls.id.setValue("");
    this.hotelDetailsForm.controls.id.markAsUntouched();
    this.hotelDetailsForm.controls.id.markAsPristine();
    this.hotelDetailsForm.controls.id.enable();
    this.hotelDetailsForm.controls.windowsTimeZone.setValue(defaultTimeZone);
    this.hotelDetailsForm.controls.windowsTimeZone.markAsUntouched();
    this.hotelDetailsForm.controls.windowsTimeZone.markAsPristine();

    this.isNewHotel$.next(true);
    this.showHotelDetails$.next(true);
  }

  selectHotel(hotel: HotelGroupHotelData) {
    let timeZone = this.timeZones.find(tz => tz.id === hotel.windowsTimeZoneId);

    this.hotelDetailsForm.controls.name.setValue(hotel.name);
    this.hotelDetailsForm.controls.name.markAsUntouched();
    this.hotelDetailsForm.controls.name.markAsPristine();
    this.hotelDetailsForm.controls.id.setValue(hotel.id);
    this.hotelDetailsForm.controls.id.markAsUntouched();
    this.hotelDetailsForm.controls.id.markAsPristine();
    this.hotelDetailsForm.controls.id.disable();
    this.hotelDetailsForm.controls.windowsTimeZone.setValue(timeZone);
    this.hotelDetailsForm.controls.windowsTimeZone.markAsUntouched();
    this.hotelDetailsForm.controls.windowsTimeZone.markAsPristine();

    this.isNewHotel$.next(false);
    this.showHotelDetails$.next(true);
  }

  private _setConnectionStringValidators(connectionKey: string) {

    let connectionStringValidators = [];
    if (this.isCreateNew) {
      if (connectionKey === "CUSTOM_SERVER") {
        connectionStringValidators = [Validators.required];
      }
    }
    this.hotelGroupForm.controls.connectionStringUserId.setValidators(connectionStringValidators);
    this.hotelGroupForm.controls.connectionStringUserId.updateValueAndValidity();
    this.hotelGroupForm.controls.connectionStringPassword.setValidators(connectionStringValidators);
    this.hotelGroupForm.controls.connectionStringPassword.updateValueAndValidity();
    this.hotelGroupForm.controls.connectionStringHost.setValidators(connectionStringValidators);
    this.hotelGroupForm.controls.connectionStringHost.updateValueAndValidity();
    this.hotelGroupForm.controls.connectionStringPort.setValidators(connectionStringValidators);
    this.hotelGroupForm.controls.connectionStringPort.updateValueAndValidity();
    this.hotelGroupForm.controls.connectionStringPooling.setValidators(connectionStringValidators);
    this.hotelGroupForm.controls.connectionStringPooling.updateValueAndValidity();
  }

  saveHotel() {
    this.loading.start();

    if (!this.hotelDetailsForm.valid) {
      this.hotelDetailsForm.markAllAsTouched();
      this.hotelDetailsForm.markAsDirty({ onlySelf: false });
      this._toastr.error("You have to fix form errors before you can continue.");
      this.loading.stop();
      return;
    }

    let formValues = this.hotelDetailsForm.getRawValue();

    if (this.isNewHotel$.value) {
      let insertRequest: InsertHotelGroupHotelCommand = new InsertHotelGroupHotelCommand({
        id: formValues.id,
        name: formValues.name,
        windowsTimeZoneId: formValues.windowsTimeZone.id
      });

      this._hotelGroupClient.insertHotelGroupHotel(insertRequest).subscribe(
        (response: ProcessResponse) => {
          if (!response.isSuccess) {
            this._toastr.error(response.message);
            this._setFormValidationErrors(response, this.hotelGroupForm);
          }
          else {
            let newHotel: HotelGroupHotelData = new HotelGroupHotelData({
              id: insertRequest.id,
              name: insertRequest.name,
              ianaTimeZoneId: "",
              windowsTimeZoneId: insertRequest.windowsTimeZoneId
            });

            this.hotels$.next([...this.hotels$.value, newHotel]);
            this.totalNumberOfHotels$.next(this.totalNumberOfHotels$.value + 1);
            this.loadedNumberOfHotels$.next(this.loadedNumberOfHotels$.value + 1);
            this.isNewHotel$.next(false);

            this.hotelDetailsForm.controls.id.disable();
            this._toastr.success(response.message);
          }
        },
        (error: Error) => { this._toastr.error(error.message); },
        () => {
          this.loading.stop();
        }
      );
    }
    else {
      let updateRequest: UpdateHotelGroupHotelCommand = new UpdateHotelGroupHotelCommand({
        id: formValues.id,
        name: formValues.name,
        windowsTimeZoneId: formValues.windowsTimeZone.id
      });

      this._hotelGroupClient.updateHotelGroupHotel(updateRequest).subscribe(
        (response: ProcessResponse) => {
          if (!response.isSuccess) {
            this._toastr.error(response.message);
            this._setFormValidationErrors(response, this.hotelGroupForm);
          }
          else {
            let theHotel: HotelGroupHotelData = new HotelGroupHotelData({
              id: updateRequest.id,
              name: updateRequest.name,
              ianaTimeZoneId: "",
              windowsTimeZoneId: updateRequest.windowsTimeZoneId
            });

            let hotels = [...this.hotels$.value];
            let hotel = hotels.find(u => u.id === theHotel.id);

            hotel.name = theHotel.name;
            hotel.windowsTimeZoneId = theHotel.windowsTimeZoneId;
            hotel.ianaTimeZoneId = theHotel.ianaTimeZoneId;

            this.hotels$.next(hotels);

            this._toastr.success(response.message);
          }
        },
        (error: Error) => { this._toastr.error(error.message); },
        () => {
          this.loading.stop();
        }
      );
    }
  }

  cancelSaveHotel() {
    this.isNewHotel$.next(false);
    this.showHotelDetails$.next(false);
  }

  loadMoreHotels() {
    this._loadMoreHotels(this.hotels$.value.length);
  }

  private _loadTabData() {
    let key: string = this.selectedTabKey$.value;
    switch (key) {
      case "HOTELS":
        this._loadHotelsState();
        break;
      case "USER_ROLES":
        break;
      case "USERS":
        break;
      case "ROOM_CATEGORIES":
        break;
      case "ROOMS":
        break;
      case "ASSETS":
        break;
      case "TASKS":
        break;
      case "RESERVATIONS":
        break;
    }
  }

  private _loadHotelsState() {
    if (!this.hotelsFilterForm) {
      this.hotelsFilterForm = this._formBuilder.group({
        keywords: [""],
        sortKey: ["NAME_ASC"],
      });

      this.hotelsFilterForm
        .valueChanges
        .pipe(
          debounceTime(250)
        )
        .subscribe((formValues) => {
        this._loadMoreHotels(0);
      });
    }

    if (!this.hotelDetailsForm) {
      let defaultTimeZone = this.timeZones.find(tz => tz.name === this._defaultTimeZoneName);

      this.hotelDetailsForm = this._formBuilder.group({
        id: ["", [Validators.required]],
        name: ["", [Validators.required]],
        windowsTimeZone: [defaultTimeZone, [Validators.required]],
      });

      this.windowsTimeZoneIdChangedSubscription = this.hotelDetailsForm.controls.windowsTimeZone.valueChanges
        .pipe(
          debounceTime(250)
        )
        .subscribe((group: any) => {
          if (typeof (group) === "string") {
            this.filteredTimeZones$.next(this._filterWindowsTimeZones(group));
          }
          else if (typeof (group) === "object") {
            //this._selectHotelGroup(group);
            this.filteredTimeZones$.next(this.timeZones);
          }
        });
    }

    this._loadMoreHotels(0);

    this.showHotelDetails$.next(false);
    this.isNewHotel$.next(true);
  }

  displayTimeZoneName(timeZoneValue) {
    if (timeZoneValue && typeof (timeZoneValue) === "object") {
      return timeZoneValue.name;
    }
    return "";
  }

  private _filterWindowsTimeZones(value) {
    if (!value) {
      return this.timeZones;
    }

    const filterValue = value.toLowerCase();
    return this.timeZones.filter(a => a.name.toLowerCase().indexOf(filterValue) >= 0);
  }

  private _loadMoreHotels(skip: number) {
    let formValues = this.hotelsFilterForm.getRawValue();

    let request: GetPageOfHotelGroupHotelsQuery = new GetPageOfHotelGroupHotelsQuery({
      skip: skip,
      take: 20,
      activeStatusKey: "ANY",
      keywords: formValues.keywords,
      sortKey: formValues.sortKey
    });
    this._hotelGroupClient.getPageOfHotelGroupHotels(request).subscribe((response: PageOfOfHotelGroupHotelData) => {
      if (skip === 0) {
        this.hotels$.next(response.items);
      } else {
        this.hotels$.next([...this.hotels$.value, ...response.items])
      }
      this.totalNumberOfHotels$.next(response.totalNumberOfItems);
      this.loadedNumberOfHotels$.next(this.hotels$.value.length);
      this.showLoadMoreHotels$.next(response.totalNumberOfItems !== this.hotels$.value.length);
    });
  }

  private _setHotelGroupCookie() {
    this._cookieService.delete("hotel_group_key");
    if (this.isCreateNew) {
      this._cookieService.delete("hotel_group_id");
      return;
    }

    if (!this.hotelGroup) {
      this._cookieService.delete("hotel_group_id");
      return;
    }

    this._cookieService.set("hotel_group_id", this.hotelGroup.id);
  }


  private _initialize() {
    let connectionStringValidators = [];
    if (this.hotelGroup.id) {
      this.isCreateNew = false;
    }
    else {
      this.isCreateNew = true;
      connectionStringValidators = [Validators.required];
    }

    this._setHotelGroupCookie();

    if (this.hotelGroupForm) {
      if (this.isCreateNew) {
        this.hotelGroupForm.controls.connectionKey.setValue("TEST_SERVER");
        //this.hotelGroupForm.controls.connectionKey.updateValueAndValidity();

        this.hotelGroupForm.controls.connectionStringUserId.setValue(null);
        this.hotelGroupForm.controls.connectionStringPassword.setValue(null);
        this.hotelGroupForm.controls.connectionStringHost.setValue(null);
        this.hotelGroupForm.controls.connectionStringPort.setValue(null);
        this.hotelGroupForm.controls.connectionStringPooling.setValue(null);
      }
      else {
        this.hotelGroupForm.controls.connectionKey.setValue("NOT_IMPORTANT");
        this.hotelGroupForm.controls.connectionKey.updateValueAndValidity();
      }

      this.hotelGroupForm.controls.connectionStringDatabase.setValue(this.hotelGroup.connectionStringDatabase);
      this.hotelGroupForm.controls.name.setValue(this.hotelGroup.name);
      this.hotelGroupForm.controls.isActive.setValue(this.hotelGroup.isActive);
      this.hotelGroupForm.controls.key.setValue(this.hotelGroup.key);

      this.hotelGroupForm.markAsPristine({ onlySelf: false });
      this.hotelGroupForm.markAsUntouched({ onlySelf: false });
    }
    else {
      this.hotelGroupForm = this._formBuilder.group({
        connectionKey: ["TEST_SERVER", [Validators.required]], // "TEST_SERVER", "DEV_SERVER", "CUSTOM_SERVER"
        name: [this.hotelGroup.name, [Validators.required]],
        isActive: [this.hotelGroup.isActive, [Validators.required]],
        key: [this.hotelGroup.key, [Validators.required]],
        connectionStringUserId: [this.hotelGroup.connectionStringUserId, connectionStringValidators],
        connectionStringPassword: [this.hotelGroup.connectionStringPassword, connectionStringValidators],
        connectionStringHost: [this.hotelGroup.connectionStringHost, connectionStringValidators],
        connectionStringPort: [this.hotelGroup.connectionStringPort, connectionStringValidators],
        connectionStringDatabase: [this.hotelGroup.connectionStringDatabase, [Validators.required]],
        connectionStringPooling: [this.hotelGroup.connectionStringPooling, connectionStringValidators],
      });

      this.connectionKeySubscription = this.hotelGroupForm.controls.connectionKey.valueChanges.subscribe((connectionKey: string) => {
        this._setConnectionStringValidators(connectionKey);
      });

      this._setConnectionStringValidators("TEST_SERVER");
    }

    this.timeZones = this._route.snapshot.data.timeZones || [];
  }

  cancel() {
    this.cancelled.next(true);
  }

  private _setFormValidationErrors(response: ProcessResponse, form: FormGroup) {
    for (let error of response.modelErrors) {
      let control = form.get(error.key);

      if (control) {
        var errors: ValidationErrors = {};
        errors[error.validatorKey] = true;

        control.setErrors(errors)
        control.markAsDirty();
        control.markAsTouched();
      }
    }
  }

  save() {
    this.loading.start();

    if (!this.hotelGroupForm.valid) {
      this.hotelGroupForm.markAllAsTouched();
      this.hotelGroupForm.markAsDirty({ onlySelf: false });
      this._toastr.error("You have to fix form errors before you can continue.");
      this.loading.stop();
      return;
    }

    let formValues = this.hotelGroupForm.getRawValue();

    if (this.isCreateNew) {
      let insertRequest: InsertHotelGroupCommand = new InsertHotelGroupCommand({
        connectionKey: formValues.connectionKey,
        name: formValues.name,
        isActive: formValues.isActive,
        key: formValues.key,
        connectionStringDatabase: formValues.connectionStringDatabase,
        connectionStringHost: formValues.connectionStringHost,
        connectionStringPassword: formValues.connectionStringPassword,
        connectionStringPooling: true, //formValues.connectionStringPooling,
        connectionStringPort: formValues.connectionStringPort,
        connectionStringUserId: formValues.connectionStringUserId,
      });

      this._hotelGroupClient.insertHotelGroup(insertRequest).subscribe(
        (response: ProcessResponseOfGuid) => {
          if (!response.isSuccess) {
            this._toastr.error(response.message);
            this._setFormValidationErrors(response, this.hotelGroupForm);
          }
          else {
            let newHotelGroup: HotelGroupDetailsData = new HotelGroupDetailsData({
              id: response.data,
              name: insertRequest.name,
              isActive: insertRequest.isActive,
              key: insertRequest.key,
              connectionStringPooling: insertRequest.connectionStringPooling,
              connectionStringDatabase: insertRequest.connectionStringDatabase,
              connectionStringHost: insertRequest.connectionStringHost,
              connectionStringPassword: insertRequest.connectionStringPassword,
              connectionStringPort: insertRequest.connectionStringPort,
              connectionStringUserId: insertRequest.connectionStringUserId,
            });

            this.inserted.next(newHotelGroup);
            this._toastr.success(response.message);
          }
        },
        (error: Error) => { this._toastr.error(error.message); },
        () => {
          this.loading.stop();
        }
      );
    }
    else {
      let updateRequest: UpdateHotelGroupCommand = new UpdateHotelGroupCommand({
        id: this.hotelGroup.id,
        connectionKey: formValues.connectionKey,
        name: formValues.name,
        isActive: formValues.isActive,
        key: formValues.key,
        connectionStringDatabase: formValues.connectionStringDatabase,
        connectionStringHost: formValues.connectionStringHost,
        connectionStringPassword: formValues.connectionStringPassword,
        connectionStringPooling: true, //formValues.connectionStringPooling,
        connectionStringPort: formValues.connectionStringPort,
        connectionStringUserId: formValues.connectionStringUserId,
      });

      this._hotelGroupClient.updateHotelGroup(updateRequest).subscribe(
        (response: ProcessResponse) => {
          if (!response.isSuccess) {
            this._toastr.error(response.message);
            this._setFormValidationErrors(response, this.hotelGroupForm);
          }
          else {
            let hotelGroup: HotelGroupDetailsData = new HotelGroupDetailsData({
              id: updateRequest.id,
              name: updateRequest.name,
              isActive: updateRequest.isActive,
              key: updateRequest.key,
              connectionStringPooling: updateRequest.connectionStringPooling,
              connectionStringDatabase: updateRequest.connectionStringDatabase,
              connectionStringHost: updateRequest.connectionStringHost,
              connectionStringPassword: updateRequest.connectionStringPassword,
              connectionStringPort: updateRequest.connectionStringPort,
              connectionStringUserId: updateRequest.connectionStringUserId,
            });

            this.updated.next(hotelGroup);
            this._toastr.success(response.message);
          }
        },
        (error: Error) => { this._toastr.error(error.message); },
        () => {
          this.loading.stop();
        }
      );
    }
  }
}

