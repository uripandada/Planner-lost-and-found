import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';
import { FormControl } from '@angular/forms';
import { CookieService } from 'ngx-cookie-service';
import { BehaviorSubject, Observable, Subscription } from 'rxjs';
import { debounceTime, map, startWith } from 'rxjs/operators';
import { GetHotelGroupsQuery, GetHotelsQuery, HotelClient, HotelGridData, HotelGroupClient, HotelGroupGridData } from '../../../core/autogenerated-clients/api-client';

@Component({
  selector: 'app-hotel-group-picker',
  templateUrl: './hotel-group-picker.component.html',
  styleUrls: ['./hotel-group-picker.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class HotelGroupPickerComponent implements OnInit, OnDestroy {
  @Input() hotelGroupControl: FormControl;

  @Output() hotelGroupSelected: EventEmitter<HotelGroupGridData> = new EventEmitter<HotelGroupGridData>();

  groupChangedSubscription: Subscription;
  hotelGroups$: BehaviorSubject<HotelGroupGridData[]> = new BehaviorSubject<HotelGroupGridData[]>([]);
  filteredHotelGroups$: BehaviorSubject<HotelGroupGridData[]> = new BehaviorSubject<HotelGroupGridData[]>([]);

  constructor(private hotelClient: HotelClient, private hotelGroupClient: HotelGroupClient, private cookieService: CookieService) { }

  ngOnDestroy(): void {
    if (this.groupChangedSubscription) {
      this.groupChangedSubscription.unsubscribe();
    }
  }

  ngOnInit(): void {
    this.groupChangedSubscription = this.hotelGroupControl.valueChanges
      .pipe(
        debounceTime(250)
      )
      .subscribe((group: any) => {
      if (typeof (group) === "string") {
        this.filteredHotelGroups$.next(this._filter(group));
      }
      else if (typeof (group) === "object") {
        this._selectHotelGroup(group);
        this.filteredHotelGroups$.next(this.hotelGroups$.value);
      }
    });

    this._loadHotelGroups();
  }

  private _selectHotelGroup(group: HotelGroupGridData) {
    let groupId = group.id ?? null;
    if (groupId) {
      this.cookieService.set("hotel_group_id", groupId);
    }
    else {
      this.cookieService.delete("hotel_group_id");
    }

    this.hotelGroupSelected.next(group);
  }

  private _loadHotelGroups() {
    this.hotelGroupClient.getHotelGroups(new GetHotelGroupsQuery({})).subscribe((hotelGroups: HotelGroupGridData[]) => {
      this.hotelGroups$.next(hotelGroups);
      this.filteredHotelGroups$.next(hotelGroups);
    });
  }

  displayHotelGroupName(hotelGroup) {
    if (hotelGroup && typeof (hotelGroup) === "object") {
      return hotelGroup.name;
    }
    return "";
  }

  private _filter(value) {
    if (!value) {
      return this.hotelGroups$.value;
    }

    const filterValue = value.toLowerCase();
    return this.hotelGroups$.value.filter(a => a.name.toLowerCase().indexOf(filterValue) >= 0);
  }
}
