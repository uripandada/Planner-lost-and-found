import { Component, ElementRef, Input, OnInit, ViewChild } from '@angular/core';
import { FormArray, FormBuilder, FormControl } from '@angular/forms';
import { Observable } from 'rxjs';
import { map, startWith } from 'rxjs/operators';
import { HotelRoomData } from '../../../core/autogenerated-clients/api-client';
import { LoadingService } from '../../../core/services/loading.service';

export class HotelRoomCreditsItem {
  room: HotelRoomData;
  credits: number;
}

@Component({
  selector: 'app-room-credits-multiselect',
  templateUrl: './room-credits-multiselect.component.html',
  styleUrls: ['./room-credits-multiselect.component.scss']
})
export class RoomCreditsMultiselectComponent implements OnInit {
  @ViewChild('multiselectInputOne', { static: true }) multiselectInput: ElementRef;
  @Input() allRooms: Array<HotelRoomData> = [];
  @Input() roomsArray: FormArray = new FormArray([]);

  selectedRoomControl: FormControl;
  filteredRooms$: Observable<HotelRoomData[]>;

  constructor(private _formBuilder: FormBuilder, public loading: LoadingService) { }

  ngOnInit(): void {

    this.selectedRoomControl = new FormControl("");

    this.filteredRooms$ = this.selectedRoomControl.valueChanges
      .pipe(
        startWith(''),
        map(value => {
          if (typeof (value) === "string") {
            return this._filterRooms(value);
          }
          else {
            this.addSelectedRoom(value);
            return this.allRooms;
          }
        })
      );
  }

  public displayRoom(room: HotelRoomData): string {
    return '';
  }

  public blurAutocomplete() {
    this.multiselectInput.nativeElement.blur();
  }

  private _filterRooms(value: string): HotelRoomData[] {
    let valueParam: string = value.toLowerCase();
    return this.allRooms.filter(a => a.name.toLowerCase().indexOf(valueParam) > -1);
  }

  addSelectedRoom(room: HotelRoomData): void {
    this.roomsArray.push(this._formBuilder.group({
      id: [{ value: room.id, disabled: true }],
      name: [{ value: room.name, disabled: true }],
      building: [{ value: room.building, disabled: true }],
      floor: [{ value: room.floor, disabled: true }],
      section: [{ value: room.section, disabled: true }],
      subSection: [{ value: room.subSection, disabled: true }],
      credits: [0]
    }));
  }

  removeSelectedRoom(roomIndex: number): void {
    this.roomsArray.removeAt(roomIndex);
  }
}
