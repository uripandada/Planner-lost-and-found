import { Component, OnInit, Input, EventEmitter, Output, ViewChild, ElementRef, Inject, Optional } from '@angular/core';
import { AuthorizeService, IUser } from '../../../../api-authorization/authorize.service';
import { Observable, BehaviorSubject } from 'rxjs';
import { HttpClient, HttpEvent, HttpEventType } from '@angular/common/http';
import { ToastrService } from 'ngx-toastr';
import { API_BASE_URL } from '../../../core/autogenerated-clients/api-client';
import { map, startWith } from 'rxjs/operators';
import { FormArray, FormControl } from '@angular/forms';

export class TagItem {
  public key: string;
  public value: string;
}

@Component({
  selector: 'app-tags-multiselect',
  templateUrl: './tags-multiselect.component.html',
  styleUrls: ['./tags-multiselect.component.scss']
})
export class TagsMultiselectComponent implements OnInit {

  @Input() tags: Array<TagItem> = [];
  @Input() tagsFormArray: FormArray;
  @Output() tagAdded: EventEmitter<TagItem> = new EventEmitter<TagItem>();
  @Output() tagRemoved: EventEmitter<number> = new EventEmitter<number>();

  selectTagControl: FormControl;
  filteredTags$: Observable<Array<TagItem>>;

  constructor() {
  }

  ngOnInit(): void {
    this.selectTagControl = new FormControl('');
    //this.filteredTags$.next(this.tags);

    this.filteredTags$ = this.selectTagControl.valueChanges
      .pipe(
        startWith(''),
        map(value => this._filter(value))
      );
  }

  private _filter(value) {
    if (typeof (value) === "string") {
      const filterValue = value.toLowerCase();
      return this.tags.filter(a => a.value.toLowerCase().indexOf(filterValue) >= 0);
    }
    else {
      return this.tags;
    }
  }

  displayTagName(tag) {
    if (tag && typeof (tag) === "object") {
      return tag.value;
    }
    return "";
  }

  removeTag(tagIndex: number) {
    this.tagRemoved.next(tagIndex);
  }

  addTag() {
    let tagValue: any = this.selectTagControl.value;
    if (typeof (tagValue) === "object") {
      this.tagAdded.next({
        key: tagValue.key,
        value: tagValue.value
      });
    }
    else {
      this.tagAdded.next({
        key: tagValue,
        value: tagValue
      });
    }

    this.selectTagControl.setValue('');
  }
}

