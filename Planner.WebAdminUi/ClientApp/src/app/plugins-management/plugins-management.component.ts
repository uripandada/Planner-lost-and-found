import { CdkDragDrop } from '@angular/cdk/drag-drop';
import { Component, OnInit } from '@angular/core';
import { FormArray, FormBuilder, FormGroup } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { CookieService } from 'ngx-cookie-service';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject } from 'rxjs';
import { CleaningPluginGridData, CleaningPluginsClient, CleaningPluginsConfigurationData, DeleteCleaningPluginCommand, GetHotelCleaningPluginsQuery, GetHotelsQuery, HotelClient, HotelGridData, HotelGroupGridData, ProcessResponse, ProductListItem, UpdatePluginOrderCommand, UpdatePluginOrderItem } from '../core/autogenerated-clients/api-client';
import { LoadingService } from '../core/services/loading.service';

@Component({
  selector: 'app-plugins-management',
  templateUrl: './plugins-management.component.html',
  styleUrls: ['./plugins-management.component.scss']
})
export class PluginsManagementComponent implements OnInit {
  hotelSelectionForm: FormGroup;
  pluginDetailsForm: FormGroup;

  hotels$: BehaviorSubject<HotelGridData[]> = new BehaviorSubject<HotelGridData[]>([]);
  numberOfCleaningPlugins$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  cleaningPlugins$: BehaviorSubject<CleaningPluginGridData[]> = new BehaviorSubject<CleaningPluginGridData[]>([]);
  //selectedCleaningPluginId$: BehaviorSubject<string> = new BehaviorSubject<string>(null);
  selectedCleaningPlugin$: BehaviorSubject<CleaningPluginGridData> = new BehaviorSubject<CleaningPluginGridData>(null);
  configuration$: BehaviorSubject<CleaningPluginsConfigurationData> = new BehaviorSubject<CleaningPluginsConfigurationData>(null);

  areCleaningPluginsLoaded$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  //products: Array<ProductListItem> = [];

  //nextOrdinalNumber$: BehaviorSubject<number> = new BehaviorSubject<number>(1);


  //regularCleaningPlugins$: BehaviorSubject<CleaningPluginGridData[]> = new BehaviorSubject<CleaningPluginGridData[]>([]);
  //topRuleCleaningPlugins$: BehaviorSubject<CleaningPluginGridData[]> = new BehaviorSubject<CleaningPluginGridData[]>([]);
  

  loading: LoadingService;

  get weekBasedCleaningTypeWeeksArray(): FormArray {
    return this.pluginDetailsForm.controls.weekBasedCleaningTypeWeeks as FormArray;
  }

  constructor(
    private _toastr: ToastrService,
    private _formBuilder: FormBuilder,
    private _cookieService: CookieService,
    private _hotelClient: HotelClient,
    private _route: ActivatedRoute,
    private _cleaningPluginsClient: CleaningPluginsClient
  ) {
    this.loading = new LoadingService();
  }

  onCleaningPluginListItemDropped(eventData: CdkDragDrop<CleaningPluginGridData[]>) {
    this.loading.start();

    let sourceIndex: number = eventData.previousIndex;
    let destinationIndex: number = eventData.currentIndex;

    if (sourceIndex === destinationIndex)
      return;

    let cleaningPlugins = [...this.cleaningPlugins$.value];
    // FIRST RESET ORDINAL NUMBERS IN CASE THEY ARE INCORRECT.
    for (let pIndex = 0; pIndex < cleaningPlugins.length; pIndex++) {
      cleaningPlugins[pIndex].ordinalNumber = pIndex + 1;
    }

    // Moving plugin down
    if (destinationIndex > sourceIndex) {
      cleaningPlugins[sourceIndex].ordinalNumber = destinationIndex + 1;

      for (let pIndex = sourceIndex + 1; pIndex <= destinationIndex; pIndex++) {
        cleaningPlugins[pIndex].ordinalNumber--;
      }
    }
    // Moving plugin up
    else {
      cleaningPlugins[sourceIndex].ordinalNumber = destinationIndex + 1;

      for (let pIndex = destinationIndex; pIndex < sourceIndex; pIndex++) {
        cleaningPlugins[pIndex].ordinalNumber++;
      }
    }

    cleaningPlugins = cleaningPlugins.sort((a, b) => a.ordinalNumber > b.ordinalNumber ? 1 : -1);

    let updateRequest: UpdatePluginOrderCommand = new UpdatePluginOrderCommand({
      hotelId: this.hotelSelectionForm.controls.hotel.value.id,
      orderedPluginIds: []
    });

    this.cleaningPlugins$.next(cleaningPlugins);
    updateRequest.orderedPluginIds = cleaningPlugins.map(cp => new UpdatePluginOrderItem({ pluginId: cp.id, ordinalNumber: cp.ordinalNumber }));

    this._cleaningPluginsClient.updatePluginOrder(updateRequest).subscribe(
      (response: ProcessResponse) => {
        if (response.hasError) {
          this._toastr.error(response.message);
          return;
        }

        this._toastr.success(response.message);
      },
      (error: Error) => {
        this._toastr.error(error.message);
      },
      () => {
        this.loading.stop();
      }
    );
  }

  private _setupHotelSelectionForm(): void {
    this.hotelSelectionForm = this._formBuilder.group({
      hotel: [null],
      hotelGroup: [null],
    });

    // On group change, load the hotels
    this.hotelSelectionForm.controls.hotelGroup.valueChanges.subscribe((group: HotelGroupGridData) => {
      let groupId = group.id ?? null;
      if (groupId) {
        this._cookieService.set("hotel_group_id", groupId);
      }
      else {
        this._cookieService.delete("hotel_group_id");
        this.hotels$.next([]);
      }

      if (groupId) {
        this._hotelClient.getHotels(new GetHotelsQuery({})).subscribe((hotels: HotelGridData[]) => {
          this.hotelSelectionForm.controls.hotel.setValue(null);
          this.hotels$.next(hotels);
        });
      }
    });
    // On group change, load the hotels
    this.hotelSelectionForm.controls.hotel.valueChanges.subscribe((group: HotelGroupGridData) => {
      //this.selectedCleaningPluginId$.next(null);
      //this.selectedCleaningPlugin$.next(null);

    });
  }

  ngOnInit() {
    console.log("PLUGINS MANAGEMENT ON INIT");
    this.configuration$.next(this._route.snapshot.data.configuration);
    this.newCleaningPlugin();
    this._setupHotelSelectionForm();
  }

  ngOnDestroy(): void {
  }

  onHotelGroupSelected(hotelGroup: HotelGroupGridData) {
    console.log("HOTEL GROUP SELECTED!", hotelGroup);
    //if (hotelGroup && hotelGroup.id) {
    //  this._hotelClient.getHotels(new GetHotelsQuery({})).subscribe((hotels: HotelGridData[]) => {
    //    this.hotels$.next(hotels);
    //  });
    //}
    //else {
    //  this.hotels$.next([]);
    //}
    //this.hotelSelectionForm.controls.hotel.setValue(null);
  }

  onHotelSelected(hotel: HotelGridData) {
    this.areCleaningPluginsLoaded$.next(false);

    if (!hotel) {
      this.newCleaningPlugin();
      return;
    }

    this._cleaningPluginsClient.getHotelCleaningPlugins(new GetHotelCleaningPluginsQuery({ hotelId: hotel.id })).subscribe((plugins: CleaningPluginGridData[]) => {

      //console.log("HOTEL CLEANING PLUGINS");
      //let regularPlugins: CleaningPluginGridData[] = [];
      //let topRulePlugins: CleaningPluginGridData[] = [];

      //for (let p of plugins) {
      //  if (p.isTopRule) {
      //    topRulePlugins.push(p);
      //  }
      //  else {
      //    regularPlugins.push(p);
      //  }
      //}

      this.cleaningPlugins$.next(plugins);
      //this.topRuleCleaningPlugins$.next(topRulePlugins);
      //this.regularCleaningPlugins$.next(regularPlugins);
      this.numberOfCleaningPlugins$.next(plugins.length);
      //this.nextOrdinalNumber$.next(plugins.length + 1);
      this.newCleaningPlugin();
      this.areCleaningPluginsLoaded$.next(true);
    });
  }

  newCleaningPlugin() {
    //console.log("NEW CLEANING PLUGIN: ");
    //this.selectedCleaningPluginId$.next(null);
    this.selectedCleaningPlugin$.next(new CleaningPluginGridData({ id: null, name: null, typeDescription: null,isActive: true, isTopRule: false, ordinalNumber: this.cleaningPlugins$.value.length + 1, typeKey: "" }));
  }

  selectCleaningPlugin(plugin: CleaningPluginGridData) {
    //console.log("CLEANING PLUGIN SELECTED: ", plugin);
    //this.selectedCleaningPluginId$.next(plugin.id);
    this.selectedCleaningPlugin$.next(plugin);

    //let cp: CleaningPluginGridData = new CleaningPluginGridData({ id: null, name: null, typeDescription: null });
    //this.selectedCleaningPlugin$.next(cp);
  }

  onPluginInserted(plugin: { id: string, name: string, isActive: boolean, isTopRule: boolean, ordinalNumber: number }) {
    let pluginData: CleaningPluginGridData = new CleaningPluginGridData({ id: plugin.id, name: plugin.name, typeDescription: "", typeKey: "", isActive: plugin.isActive, isTopRule: plugin.isTopRule, ordinalNumber: plugin.ordinalNumber });
    this.cleaningPlugins$.next([...this.cleaningPlugins$.value, pluginData]);
    //if (pluginData.isTopRule) {
    //  this.topRuleCleaningPlugins$.next([...this.topRuleCleaningPlugins$.value, pluginData]);
    //}
    //else {
    //  this.regularCleaningPlugins$.next([...this.regularCleaningPlugins$.value, pluginData]);
    //}


    this.selectedCleaningPlugin$.next(pluginData);
    //this.selectedCleaningPluginId$.next(plugin.id);
    this.numberOfCleaningPlugins$.next(this.cleaningPlugins$.value.length);
    //this.nextOrdinalNumber$.next(this.cleaningPlugins$.value.length + 1);
  }

  onPluginUpdated(plugin: { id: string, name: string, isActive: boolean, isTopRule: boolean, ordinalNumber: number }) {
    console.log("on plugin updated", plugin);

    let cleaningPlugins = this.cleaningPlugins$.value;
    let cleaningPlugin = cleaningPlugins.find(p => p.id === plugin.id);
    cleaningPlugin.name = plugin.name;
    cleaningPlugin.isActive = plugin.isActive;
    cleaningPlugin.isTopRule = plugin.isTopRule;
    cleaningPlugin.ordinalNumber = plugin.ordinalNumber;

    this.cleaningPlugins$.next(cleaningPlugins);


    //if (plugin.isTopRule) {
    //  let cleaningPlugins = this.topRuleCleaningPlugins$.value;
    //  let cleaningPlugin = cleaningPlugins.find(p => p.id === plugin.id);
    //  cleaningPlugin.name = plugin.name;
    //  cleaningPlugin.isActive = plugin.isActive;
    //  cleaningPlugin.isTopRule = plugin.isTopRule;
    //  cleaningPlugin.ordinalNumber = plugin.ordinalNumber;

    //  this.topRuleCleaningPlugins$.next(cleaningPlugins);
    //}
    //else {
    //  let cleaningPlugins = this.regularCleaningPlugins$.value;
    //  let cleaningPlugin = cleaningPlugins.find(p => p.id === plugin.id);
    //  cleaningPlugin.name = plugin.name;
    //  cleaningPlugin.isActive = plugin.isActive;
    //  cleaningPlugin.isTopRule = plugin.isTopRule;
    //  cleaningPlugin.ordinalNumber = plugin.ordinalNumber;

    //  this.regularCleaningPlugins$.next(cleaningPlugins);
    //}
  }

  deleteCleaningPlugin(pluginIndex: number, pluginId: string, isTopRule: boolean) {
    this.loading.start();

    this._cleaningPluginsClient.deleteCleaningPlugin(new DeleteCleaningPluginCommand({ id: pluginId })).subscribe((response: ProcessResponse) => {

      if (response.hasError) {
        this._toastr.error(response.message);
        return;
      }

      //if (isTopRule) {
      //  let plugins = [...this.topRuleCleaningPlugins$.value];
      //  plugins.splice(pluginIndex, 1);
      //  this.topRuleCleaningPlugins$.next(plugins);
      //}
      //else {

      //  let plugins = [...this.regularCleaningPlugins$.value];
      //  plugins.splice(pluginIndex, 1);
      //  this.regularCleaningPlugins$.next(plugins);
      //}

      let plugins = [...this.cleaningPlugins$.value];
      plugins.splice(pluginIndex, 1);
      this.cleaningPlugins$.next(plugins);

      //let plugins = [...this.cleaningPlugins$.value];
      //plugins.splice(pluginIndex, 1);
      //this.cleaningPlugins$.next(plugins);
      this.numberOfCleaningPlugins$.next(this.numberOfCleaningPlugins$.value - 1);
      this.newCleaningPlugin();
      this._toastr.success(response.message);
    },
      (error: Error) => { this._toastr.error(error.message); },
      () => { this.loading.stop(); }
    );
  }

  private _recalculateListOrdinalNumbers(): void {
    let ordinalNumber: number = 1;
    let cleaningPlugins = this.cleaningPlugins$.value.map(cp => {
      cp.ordinalNumber = ordinalNumber;
      ordinalNumber++;
      return cp;
    });
    this.cleaningPlugins$.next(cleaningPlugins);
  }
}
