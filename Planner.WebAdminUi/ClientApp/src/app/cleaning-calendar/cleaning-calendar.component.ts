import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { MAT_MOMENT_DATE_ADAPTER_OPTIONS, MAT_MOMENT_DATE_FORMATS } from '@angular/material-moment-adapter';
import { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';
import moment, { Moment } from 'moment';
import { CookieService } from 'ngx-cookie-service';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { CalendarDay, CleaningCalendarClient, CleaningCalendarIntervalResult, CleaningCalendarRoom, GetHotelsQuery, GetWeeklyCleaningCalendarQuery, HotelClient, HotelGridData, HotelGroupGridData } from '../core/autogenerated-clients/api-client';
import { CustomDateAdapter } from '../core/custom-date-adapter';
import { HotelService } from '../core/services/hotel.service';
import { LoadingService } from '../core/services/loading.service';
import { MomentDateHelper } from './../shared/helpers/moment-date.helper';

@Component({
  selector: 'app-cleaning-calendar',
  templateUrl: './cleaning-calendar.component.html',
  styleUrls: ['./cleaning-calendar.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush,
  providers: [
    // `MomentDateAdapter` and `MAT_MOMENT_DATE_FORMATS` can be automatically provided by importing
    // `MatMomentDateModule` in your applications root module. We provide it at the component level
    // here, due to limitations of our example generation script.
    { provide: DateAdapter, useClass: CustomDateAdapter, deps: [MAT_DATE_LOCALE] },
    { provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS },
    { provide: MAT_MOMENT_DATE_ADAPTER_OPTIONS, useValue: { useUtc: true } },
  ],
})
export class CleaningCalendarComponent implements OnInit {
  hotels$: BehaviorSubject<HotelGridData[]> = new BehaviorSubject<HotelGridData[]>([]);
  isCalendarLoading$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  isHotelLoaded$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);

  calendarDays$: BehaviorSubject<CalendarDay[]> = new BehaviorSubject<CalendarDay[]>([]);
  
  calendarRooms$: BehaviorSubject<CleaningCalendarRoom[]> = new BehaviorSubject<CleaningCalendarRoom[]>([]);
  private _allCalendarRooms: CleaningCalendarRoom[] = [];

  private _resettingFilterForm: boolean = false;

  constructor(
    private _toastr: ToastrService,
    private _formBuilder: FormBuilder,
    private _cookieService: CookieService,
    private _hotelClient: HotelClient,
    private _cleaningCalendarClient: CleaningCalendarClient,
    public loading: LoadingService,
    public hotelService: HotelService) {
  }

  selectCalendarForm: FormGroup;

  ngOnInit(): void {
    this.loading.reset();
    this.selectCalendarForm = this._createSelectCalendarForm();
  }

  private _createSelectCalendarForm(): FormGroup {
    let form: FormGroup = this._formBuilder.group({
      dateFrom: [moment().startOf('week').add(1, 'day')],
      dateTo: [moment().startOf('week').add(7, 'day')],
      keywords: [""],
      hotel: [null],
      hotelGroup: [null],
    });

    // On group change, load the hotels
    form.controls.hotelGroup.valueChanges.subscribe((group: HotelGroupGridData) => {
      this.isHotelLoaded$.next(false);

      let groupId = group.id ?? null;
      if (groupId) {
        this._cookieService.set("hotel_group_id", groupId);
      }
      else {
        this._cookieService.delete("hotel_group_id");
        this.hotels$.next([]);
      }

      this._hotelClient.getHotels(new GetHotelsQuery({})).subscribe((hotels: HotelGridData[]) => {
        this._resetFilterForm();
        form.controls.hotel.setValue(null);
        this.hotels$.next(hotels);
      });
    });

    // On group change, load the hotels
    form.controls.hotel.valueChanges.subscribe((hotel: HotelGridData) => {
      let isHotelLoaded: boolean = hotel !== null;
      this.isHotelLoaded$.next(isHotelLoaded);

      if (isHotelLoaded) {
        console.log("HOTEL CHANGED, loading cleaning calendar");
        this._loadCleaningCalendar();
      }
    });

    form.controls.keywords.valueChanges
      .pipe(
        debounceTime(250)
      )
      .subscribe((keywords: string) => {
        if (this._resettingFilterForm)
          return;

        this._filterCleaningCalendar(keywords);
      });

    return form;
  }

  onWeekChanged(weekDates: { startDate: Moment, endDate: Moment }) {
    this._loadCleaningCalendar();
  }

  nextWeek() {
    let startDate: Moment = this.selectCalendarForm.controls.dateFrom.value;
    let nextWeekStartDate = startDate.clone().add(7, 'day');
    let nextWeekEndDate = nextWeekStartDate.clone().add(7, 'day');

    this.selectCalendarForm.controls.dateFrom.setValue(nextWeekStartDate);
    this.selectCalendarForm.controls.dateTo.setValue(nextWeekEndDate);

    this._loadCleaningCalendar();
  }

  previousWeek() {
    let startDate: Moment = this.selectCalendarForm.controls.dateFrom.value;
    let previousWeekStartDate = startDate.clone().subtract(7, 'day');
    let previousWeekEndDate = startDate.clone();

    this.selectCalendarForm.controls.dateFrom.setValue(previousWeekStartDate);
    this.selectCalendarForm.controls.dateTo.setValue(previousWeekEndDate);

    this._loadCleaningCalendar();
  }

  private _resetFilterForm() {
    this._resettingFilterForm = true;

    this.selectCalendarForm.controls.keywords.setValue(null);
    this.selectCalendarForm.controls.dateFrom.setValue(moment().startOf('week').add(1, 'day'));
    this.selectCalendarForm.controls.dateTo.setValue(moment().startOf('week').add(7, 'day'));

    this._resettingFilterForm = false;
  }

  private _loadCleaningCalendar() {
    let formValues = this.selectCalendarForm.getRawValue();

    if (!formValues.hotel) {
      return;
    }

    // before posting to the server, the dates should be transformed to the hotel time zone.

    let request: GetWeeklyCleaningCalendarQuery = new GetWeeklyCleaningCalendarQuery({
      fromDate: MomentDateHelper.getDateAtMidnight(formValues.dateFrom), //moment(formValues.dateFrom.format('YYYY-MM-DD') +'T00:00:00+00:00'),
      toDate: MomentDateHelper.getDateAtMidnight(formValues.dateTo),
      hotelId: formValues.hotel?.id
    });

    this._cleaningCalendarClient.getWeeklyCleaningCalendar(request).subscribe((calendar: CleaningCalendarIntervalResult) => {
      console.log("LOADED calendar data: ", calendar);
      this.calendarDays$.next(calendar.days);
      this._allCalendarRooms = calendar.rooms;
      this.calendarRooms$.next(calendar.rooms);
    });
  }

  private _filterCleaningCalendar(keywords: string) {
    let rooms = this._allCalendarRooms.filter(r =>
      r.name.indexOf(keywords) >= 0 // if the room name contains the keywords
      ||
      (r.days.filter(d =>
        (d.reservations.filter(re => re.guestName.indexOf(keywords) >= 0)).length > 0
        ||
        (d.cleanings.filter(cl => cl.cleaningName.indexOf(keywords) >= 0)).length > 0
      )).length > 0);
    this.calendarRooms$.next(rooms);
  }

}
