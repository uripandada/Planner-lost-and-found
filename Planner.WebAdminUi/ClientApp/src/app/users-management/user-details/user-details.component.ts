import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { InsertUserCommand, UpdateUserCommand, UserDetailsData } from 'src/app/core/autogenerated-clients/api-client';
import { MustMatch } from 'src/app/shared/helpers/must-match-validator';

@Component({
  selector: 'app-user-details',
  templateUrl: './user-details.component.html',
  styleUrls: ['./user-details.component.scss']
})
export class UserDetailsComponent implements OnInit, OnChanges {

  @Input() user: UserDetailsData;

  @Output() deleted: EventEmitter<string> = new EventEmitter<string>();
  @Output() inserted: EventEmitter<InsertUserCommand> = new EventEmitter<InsertUserCommand>();
  @Output() updated: EventEmitter<UpdateUserCommand> = new EventEmitter<UpdateUserCommand>();
  @Output() cancelled: EventEmitter<boolean> = new EventEmitter<boolean>();

  isCreateNew: boolean = true;
  userForm: FormGroup;

  constructor(private _toastr: ToastrService, private _formBuilder: FormBuilder) { }
   

  ngOnInit() {
    this._initialize();
    //let validators = [Validators.required];
    //if (this.user.id) {
    //  this.isCreateNew = false;
    //  validators = [];
    //}

    //this.userForm = this._formBuilder.group({
    //  username: [this.user.username],
    //  email: [this.user.email],
    //  password: ['', validators],
    //  passwordAgain: ['', validators]
    //}, {
    //  validator: MustMatch('password', 'passwordAgain')
    //});
  }
  ngOnChanges(changes: SimpleChanges): void {
    console.log("CHANGED: ", changes);
    if (changes.user && !changes.user.firstChange) {
      this._initialize();
    }
  }

  private _initialize() {
    let validators = [];
    if (this.user.id) {
      this.isCreateNew = false;
      validators = [];
    }
    else {
      this.isCreateNew = true;
      validators = [Validators.required];
    }

    this.userForm = this._formBuilder.group({
      username: [this.user.username, [Validators.required]],
      email: [this.user.email, [Validators.required]],
      password: ['', validators],
      passwordConfirmation: ['', validators]
    }, {
        validator: MustMatch('password', 'passwordConfirmation')
    });
  }

  cancel() {
    this.cancelled.next(true);
  }

  save() {
    if (!this.userForm.valid) {
      this.userForm.markAllAsTouched();
      this.userForm.markAsDirty({ onlySelf: false });
      this._toastr.error("You have to fix form errors before you can continue.");
      return;
    }

    let formValues = this.userForm.getRawValue();

    if (this.isCreateNew) {
      let insertRequest: InsertUserCommand = new InsertUserCommand({
        userName: formValues.username,
        email: formValues.email,
        password: formValues.password ? formValues.password : null
      });
      this.inserted.next(insertRequest);
    }
    else {
      let updateRequest: UpdateUserCommand = new UpdateUserCommand({
        id: this.user.id,
        userName: formValues.username,
        email: formValues.email,
        password: formValues.password ? formValues.password : null
      });
      this.updated.next(updateRequest);
    }
  }
}

