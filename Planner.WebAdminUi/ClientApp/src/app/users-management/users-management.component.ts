import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject } from 'rxjs';
import { GetPageOfUsersQuery, GetUserDetailsQuery, InsertUserCommand, PageOfOfUserGridData, ProcessResponse, ProcessResponseOfGuid, UpdateUserCommand, UserDetailsData, UserGridData, UserManagementClient } from '../core/autogenerated-clients/api-client';
import { LoadingService } from '../core/services/loading.service';

@Component({
  selector: 'app-users-management',
  templateUrl: './users-management.component.html',
  styleUrls: ['./users-management.component.scss']
})
export class UsersManagementComponent implements OnInit {
  sorts = [
    { key: 'NAME_ASC', value: 'Name A to Z' },
    { key: 'NAME_DESC', value: 'Name Z to A' },
  ];

  filterForm: FormGroup;

  isLoadingUserDetails$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  showLoadMore$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  loadedNumberOfUsers$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  totalNumberOfUsers$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  selectedUserId$: BehaviorSubject<string> = new BehaviorSubject<string>(null);
  users$: BehaviorSubject<UserGridData[]> = new BehaviorSubject<UserGridData[]>([]);
  areDetailsDisplayed$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  selectedUserDetails$: BehaviorSubject<UserDetailsData> = new BehaviorSubject<UserDetailsData>(new UserDetailsData({
    id: null,
    email: null,
    username: null
  }));

  loading: LoadingService;

  constructor(
    private _formBuilder: FormBuilder,
    private _route: ActivatedRoute,
    private userManagementClient: UserManagementClient,
    private toastr: ToastrService
  ) {
    this.loading = new LoadingService();
  }

  ngOnInit() {
    this.filterForm = this._formBuilder.group({
      sortKey: ['NAME_ASC'],
      keywords: [''],
    });

    this.newUser();
    this.loadMoreUsers(0);
  }

  newUser() {
    this.selectedUserId$.next(null);
    this.selectedUserDetails$.next(this._createNewUserDetails());
    this.areDetailsDisplayed$.next(true);
  }

  loadMoreUsers(skip: number) {
    this.loading.start();

    let filterValues = this.filterForm.getRawValue();
    let request: GetPageOfUsersQuery = new GetPageOfUsersQuery({
      skip: skip,
      take: 20,
      keywords: filterValues.keywords,
      sortKey: filterValues.sortKey
    });

    this.userManagementClient.getPageOfUsers(request).subscribe(
      (response: PageOfOfUserGridData) => {
        if (skip === 0) {
          this.users$.next(response.items);
          this.loadedNumberOfUsers$.next(response.items.length);
        } else {
          this.users$.next([...this.users$.value, ...response.items]);
          this.loadedNumberOfUsers$.next(this.users$.value.length);
        }

        this.totalNumberOfUsers$.next(response.totalNumberOfItems);
        this.showLoadMore$.next(this.loadedNumberOfUsers$.value !== this.totalNumberOfUsers$.value);
      },
      (error: Error) => { this.toastr.error(error.message); },
      () => { this.loading.stop(); }
    );
  }

  selectUser(user: UserGridData) {
    this.selectedUserId$.next(user.id);

    this.loading.start();
    this.isLoadingUserDetails$.next(true);

    let request: GetUserDetailsQuery = new GetUserDetailsQuery({
      id: user.id
    });

    this.userManagementClient.getUserDetails(request).subscribe(
      (response: UserDetailsData) => {
        this.selectedUserDetails$.next(response);
      },
      (error: Error) => { this.toastr.error(error.message); },
      () => {
        this.loading.stop();
        this.isLoadingUserDetails$.next(false);
      }
    );
  }

  onUserInserted(command: InsertUserCommand) {
    this.loading.start();

    this.userManagementClient.insertUser(command).subscribe(
      (response: ProcessResponseOfGuid) => {
        if (!response.isSuccess) {
          this.toastr.error(response.message);
        }
        else {
          let newUser: UserDetailsData = new UserDetailsData({
            id: response.data,
            email: command.email,
            username: command.userName
          });

          this.users$.next([newUser, ...this.users$.value]);
          this.totalNumberOfUsers$.next(this.totalNumberOfUsers$.value + 1);
          this.loadedNumberOfUsers$.next(this.loadedNumberOfUsers$.value + 1);
          this.selectedUserId$.next(newUser.id);
          this.selectedUserDetails$.next(newUser);
          this.toastr.success(response.message);
        }
      },
      (error: Error) => { this.toastr.error(error.message); },
      () => {
        this.loading.stop();
      }
    );
  }
  onUserUpdated(command: UpdateUserCommand) {
    this.loading.start();

    this.userManagementClient.updateUser(command).subscribe(
      (response: ProcessResponse) => {
        if (!response.isSuccess) {
          this.toastr.error(response.message);
        }
        else {
          let newUser: UserDetailsData = new UserDetailsData({
            id: command.id,
            email: command.email,
            username: command.userName
          });

          this.selectedUserDetails$.next(newUser);
          this.toastr.success(response.message);

          let users = [...this.users$.value];
          let user = users.find(u => u.id === newUser.id);
          user.email = newUser.email;
          user.username = newUser.username;
          this.users$.next(users);
        }
      },
      (error: Error) => { this.toastr.error(error.message); },
      () => {
        this.loading.stop();
      }
    );
  }
  onUserCancelled() {
    this.newUser();
  }

  private _createNewUserDetails(): UserDetailsData {
    return new UserDetailsData({
      id: null,
      email: null,
      username: null
    });
  }

}
