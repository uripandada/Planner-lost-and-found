import { CdkDragDrop } from '@angular/cdk/drag-drop';
import { Component, OnInit } from '@angular/core';
import { FormArray, FormBuilder, FormGroup } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { CookieService } from 'ngx-cookie-service';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject } from 'rxjs';
import { AutomaticHousekeepingUpdateCleaningStatusTo, AutomaticHousekeepingUpdateCleaningStatusWhen, AutomaticHousekeepingUpdatesClient, AutomaticHousekeepingUpdateSettingsListItem, CleaningPluginGridData, CleaningPluginsConfigurationData, DeleteCleaningPluginCommand, GetHotelCleaningPluginsQuery, GetHotelsQuery, GetListOfAutomaticHousekeepingUpdateSettingsQuery, HotelClient, HotelGridData, HotelGroupGridData, ProcessResponse, ProductListItem, UpdatePluginOrderCommand, UpdatePluginOrderItem } from '../core/autogenerated-clients/api-client';
import { LoadingService } from '../core/services/loading.service';

@Component({
  selector: 'app-auto-housekeeping-update-settings',
  templateUrl: './auto-housekeeping-update-settings.component.html',
  styleUrls: ['./auto-housekeeping-update-settings.component.scss']
})
export class AutoHousekeepingUpdateSettingsComponent implements OnInit {
  hotelSelectionForm: FormGroup;
  autoUpdatesFormArray: FormArray;

  hotels$: BehaviorSubject<HotelGridData[]> = new BehaviorSubject<HotelGridData[]>([]);
  selectedHotelId$: BehaviorSubject<string> = new BehaviorSubject<string>(null);
  numberOfAutoUpdates$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  isListOfAutoUpdatesLoaded$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  //autoUpdates$: BehaviorSubject<CleaningPluginGridData[]> = new BehaviorSubject<CleaningPluginGridData[]>([]);

  loading: LoadingService;

  constructor(
    private _toastr: ToastrService,
    private _formBuilder: FormBuilder,
    private _cookieService: CookieService,
    private _hotelClient: HotelClient,
    private _route: ActivatedRoute,
    private _autoUpdatesClient: AutomaticHousekeepingUpdatesClient
  ) {
    this.loading = new LoadingService();
  }

  ngOnInit() {
    this._setupHotelSelectionForm();
    this.isListOfAutoUpdatesLoaded$.next(false);
    this.autoUpdatesFormArray = new FormArray([]);
  }

  ngOnDestroy(): void {
  }

  onHotelGroupSelected(hotelGroup: HotelGroupGridData) {
  }

  onHotelSelected(hotel: HotelGridData) {
    this.numberOfAutoUpdates$.next(0);
    this.isListOfAutoUpdatesLoaded$.next(false);
    this.selectedHotelId$.next(hotel ? hotel.id : null);

    if (!hotel) {
      return;
    }

    this.loading.start();

    this._autoUpdatesClient.getListOfAutomaticHousekeepingUpdateSettings(new GetListOfAutomaticHousekeepingUpdateSettingsQuery({ hotelId: hotel.id })).subscribe(
      (items: AutomaticHousekeepingUpdateSettingsListItem[]) => {
        this.autoUpdatesFormArray.clear();
        for (let item of items) {
          this.autoUpdatesFormArray.push(this._createAutoUpdateFormGroup(item));
        }
        this.numberOfAutoUpdates$.next(items.length);
        this.isListOfAutoUpdatesLoaded$.next(true);
      },
      (error: Error) => {
        this._toastr.error(error.message);
      },
      () => {
        this.loading.stop();
      });
  }

  onAutoHousekeepingSettingsDetailsDeleted(formIndex: number) {
    console.log("DELLETING INDEX: ", formIndex);
    this.autoUpdatesFormArray.removeAt(formIndex);
  }

  addNewAutoUpdatesSettings() {
    this.autoUpdatesFormArray.push(this._createAutoUpdateFormGroup(new AutomaticHousekeepingUpdateSettingsListItem({
      clean: true,
      cleanNeedsInspection: true,
      dirty: true,
      doDisturb: true,
      doNotDisturb: false,
      id: null,
      inService: true,
      outOfService: false,
      inspected: true,
      occupied: true,
      updateStatusTo: AutomaticHousekeepingUpdateCleaningStatusTo.CLEAN,
      updateStatusWhen: AutomaticHousekeepingUpdateCleaningStatusWhen.EVERY_DAY,
      vacant: false,
      roomNameRegex: "",
      updateStatusAtTime: "00:00",
    })));
  }

  private _createAutoUpdateFormGroup(item: AutomaticHousekeepingUpdateSettingsListItem) {
    return this._formBuilder.group({
      id: [item.id],
      dirty: [item.dirty],
      clean: item.clean,
      cleanNeedsInspection: item.cleanNeedsInspection,
      inspected: item.inspected,
      doDisturb: item.doDisturb,
      doNotDisturb: item.doNotDisturb,
      inService: item.inService,
      outOfService: item.outOfService,
      occupied: item.occupied,
      vacant: item.vacant,
      roomNameRegex: item.roomNameRegex,
      updateStatusAtTime: item.updateStatusAtTime,
      updateStatusTo: item.updateStatusTo,
      updateStatusWhen: item.updateStatusWhen,
    });
  }

  private _setupHotelSelectionForm(): void {
    this.hotelSelectionForm = this._formBuilder.group({
      hotel: [null],
      hotelGroup: [null],
    });

    // On group change, load the hotels
    this.hotelSelectionForm.controls.hotelGroup.valueChanges.subscribe((group: HotelGroupGridData) => {
      let groupId = group.id ?? null;
      if (groupId) {
        this._cookieService.set("hotel_group_id", groupId);
      }
      else {
        this._cookieService.delete("hotel_group_id");
        this.hotels$.next([]);
      }

      if (groupId) {
        this._hotelClient.getHotels(new GetHotelsQuery({})).subscribe((hotels: HotelGridData[]) => {
          this.hotelSelectionForm.controls.hotel.setValue(null);
          this.hotels$.next(hotels);
        });
      }
    });
  }
}
