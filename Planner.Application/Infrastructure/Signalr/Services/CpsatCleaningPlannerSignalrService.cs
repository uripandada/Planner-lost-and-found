using Microsoft.AspNetCore.SignalR;
using Planner.Application.Infrastructure.Signalr.ClientDefinitions;
using Planner.Application.Infrastructure.Signalr.Hubs;
using Planner.Application.Infrastructure.Signalr.Messages;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Planner.Application.Infrastructure.Signalr.Services
{
	public class CpsatCleaningPlannerSignalrService
	{
		private readonly IHubContext<CpsatCleaningPlannerHub, ICpsatCleaningPlannerClientMethods> _cpsatCleaningPlannerHub;

		public CpsatCleaningPlannerSignalrService(IHubContext<CpsatCleaningPlannerHub, ICpsatCleaningPlannerClientMethods> cpsatCleaningPlannerHub)
		{
			this._cpsatCleaningPlannerHub = cpsatCleaningPlannerHub;
		}

		public async Task CpsatPlanningProgressChanged(Guid? userId, Guid? hotelGroupId, CpsatCleaningCalculator.CleaningPlannerCPSAT.ProgressMessage data)
		{
			var message = new RealTimeCpsatCleaningPlanningProgressChangedMessage
			{
				CleaningPlanId = data.CleaningPlanId,
				DateTimeString = data.DateTimeString,
				Message = data.Message,
				StatusKey = data.StatusKey,
			};

			await this._cpsatCleaningPlannerHub
				.Clients
				.Group(userId?.ToString() ?? hotelGroupId?.ToString() ?? Guid.Empty.ToString())
				.ReceiveCpsatCleaningPlanningProgressChanged(message);
		}

		public async Task CpsatPlanningFinished(Guid? userId, Guid? hotelGroupId, CleaningPlans.Commands.GenerateCpsatCleaningPlan.CpsatAutogeneratedPlan plan)
		{
			var message = new RealTimeCpsatCleaningPlanningFinishedMessage
			{
				Plan = plan
			};

			await this._cpsatCleaningPlannerHub
				.Clients
				.Group(userId?.ToString() ?? hotelGroupId?.ToString() ?? Guid.Empty.ToString())
				.ReceiveCpsatCleaningPlanningFinished(message);
		}
	}
}
