using MediatR;
using Microsoft.EntityFrameworkCore;
using Planner.Application.Interfaces;
using Planner.Common.Data;
using Planner.Common.Extensions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Planner.Application.Admin.HotelGroup.Queries.GetPageOfHotelGroupHotelRooms
{
	public class HotelGroupHotelRoomsData
	{
		public Guid Id { get; set; }

		/// <summary>
		/// Room's external ID.
		/// External id is a PMSRoomName from the RC Reservation
		/// </summary>
		public string ExternalId { get; set; }
		public string Name { get; set; }

		/// <summary>
		/// Room type. Basic room types are HOTEL, HOSTEL, APPARTMENT. All room types are described in the RoomTypeEnum.
		/// </summary>
		public string TypeKey { get; set; }
		public string TypeName { get; set; }

		/// <summary>
		/// All rooms have a specific editable order. Order is used in the cleaning plans to optimize the path.
		/// </summary>
		public int OrdinalNumber { get; set; }

		/// <summary>
		/// Name of the floor section. Large floors are divided into sections and subsections.
		/// </summary>
		public string FloorSectionName { get; set; }

		/// <summary>
		/// Name of the floor subsection. Large floors are divided into sections and subsections.
		/// </summary>
		public string FloorSubSectionName { get; set; }

		public Guid? AreaId { get; set; }
		public string AreaName { get; set; }

		public Guid? BuildingId { get; set; }
		public string BuildingName { get; set; }

		public Guid? FloorId { get; set; }
		public string FloorName { get; set; }

		/// <summary>
		/// Room category ID. Categories are user defined.
		/// </summary>
		public Guid? CategoryId { get; set; }
		/// <summary>
		/// Room category. Categories are user defined.
		/// </summary>
		public string CategoryName { get; set; }

		/// <summary>
		/// Some rooms are autogenerated on the reservation synchronization. This flag indicates if the autogeneration process was the creator.
		/// </summary>
		public bool? IsAutogeneratedFromReservationSync { get; set; }

		public bool IsAssignedToBuildingAndFloor { get; set; }

		public bool IsOccupied { get; set; }
		public bool IsClean { get; set; }
		public bool IsOutOfOrder { get; set; }
		public bool IsDoNotDisturb { get; set; }
	}

	public class GetPageOfHotelGroupHotelRoomsQuery : GetPageRequest, IRequest<PageOf<HotelGroupHotelRoomsData>>
	{
		public string Keywords { get; set; }
		public string SortKey { get; set; }
		public string ActiveStatusKey { get; set; }
		public string HotelId { get; set; }
	}

	public class GetPageOfHotelGroupHotelRoomsQueryHandler : IRequestHandler<GetPageOfHotelGroupHotelRoomsQuery, PageOf<HotelGroupHotelRoomsData>>, IAmAdminApplicationHandler
	{
		private IDatabaseContext _databaseContext;

		public GetPageOfHotelGroupHotelRoomsQueryHandler(IDatabaseContext databaseContext)
		{
			this._databaseContext = databaseContext;
		}

		public async Task<PageOf<HotelGroupHotelRoomsData>> Handle(GetPageOfHotelGroupHotelRoomsQuery request, CancellationToken cancellationToken)
		{
			var query = this._databaseContext.Rooms
				.AsQueryable();

			if (request.Keywords.IsNotNull())
			{
				var keywordsValue = request.Keywords.ToLower();
				query = query.Where(room => room.Name.ToLower().Contains(keywordsValue));
			}

			if (request.HotelId.IsNotNull())
			{
				query = query.Where(room => room.HotelId == request.HotelId);
			}

			if (request.ActiveStatusKey.IsNotNull())
			{
				if (request.ActiveStatusKey == "ACTIVE")
				{
					// TODO: IMPLEMENT ROOM.IS_ACTIVE FLAG!
				}
				else if (request.ActiveStatusKey == "INACTIVE")
				{
					// TODO: IMPLEMENT ROOM.IS_ACTIVE FLAG!
				}
			}

			var count = 0;
			if (request.Skip > 0 || request.Take > 0)
			{
				count = await query.CountAsync();
			}

			if (request.SortKey.IsNotNull())
			{
				switch (request.SortKey)
				{
					case "NAME_DESC":
						query = query.OrderByDescending(room => room.Name);
						break;
					default:
					case "NAME_ASC":
						query = query.OrderBy(room => room.Name);
						break;
				}
			}

			if (request.Skip > 0)
			{
				query = query.Skip(request.Skip);
			}

			if (request.Take > 0)
			{
				query = query.Take(request.Take);
			}

			var rooms = await query.Select(r => new HotelGroupHotelRoomsData
			{
				Id = r.Id,
				Name = r.Name,
				AreaId = r.AreaId,
				AreaName = r.Area.Name,
				BuildingId = r.BuildingId,
				BuildingName = r.Building.Name,
				CategoryId = r.CategoryId,
				CategoryName = r.Category.Name,
				ExternalId = r.ExternalId,
				FloorId = r.FloorId,
				FloorName = r.Floor.Name,
				FloorSectionName = r.FloorSectionName,
				FloorSubSectionName = r.FloorSubSectionName,
				IsAssignedToBuildingAndFloor = r.FloorId != null && r.BuildingId != null,
				IsAutogeneratedFromReservationSync = r.IsAutogeneratedFromReservationSync,
				IsClean = r.IsClean,
				IsDoNotDisturb = r.IsDoNotDisturb,
				IsOccupied = r.IsOccupied,
				IsOutOfOrder = r.IsOutOfOrder,
				OrdinalNumber = r.OrdinalNumber,
				TypeKey = r.TypeKey,
				TypeName = r.TypeKey
			}).ToArrayAsync();

			if (request.Skip == 0 && request.Take == 0)
			{
				count = rooms.Length;
			}

			return new PageOf<HotelGroupHotelRoomsData>
			{
				TotalNumberOfItems = count,
				Items = rooms
			};
		}
	}
}
