using MediatR;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using Planner.Application.Interfaces;
using Planner.Application.ServicesJobs;
using Planner.Common.Data;
using Planner.Common.Enums;
using Planner.Common.Extensions;
using Planner.RccSynchronization;
using Planner.RccSynchronization.Contracts;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Planner.Application.Reservations.Commands.SynchronizeReservations
{
	public class SynchronizeReservationsResult
	{
		public IEnumerable<ReservationsSynchronizationResult> HotelReservations { get; set; }
	}

	public class ReservationData
	{
		public string Id { get; set; }
		public string RoomName { get; set; }
		public bool RoomIsClean { get; internal set; }
		public bool RoomIsDoNotDisturb { get; internal set; }
		public bool RoomIsOccupied { get; internal set; }
		public bool RoomIsOutOfOrder { get; internal set; }
		public string PMSRoomName { get; set; }
		public string GuestName { get; set; }
		public DateTime? CheckIn { get; set; }
		public DateTime? ActualCheckIn { get; set; }
		public DateTime? CheckOut { get; set; }
		public DateTime? ActualCheckOut { get; set; }
		public string RccReservationStatusKey { get; set; }
		public int NumberOfAdults { get; set; }
		public int NumberOfChildren { get; set; }
		public int NumberOfInfants { get; set; }
		public string PmsNote { get; set; }
		public string Vip { get; set; }
		public string Group { get; set; }
		public IEnumerable<ReservationOtherPropertyData> OtherProperties { get; set; }
		public string HotelId { get; set; }
		public bool IsActive { get; set; }
		public bool IsSynchronizedFromRcc { get; set; }
		public DateTime? LastTimeModifiedBySynchronization { get; set; }
		public DateTime? SynchronizedAt { get; set; }
	}

	public class ReservationRoomData
	{
		public Guid Id { get; set; }

		/// <summary>
		/// Room's external ID.
		/// External id is a PMSRoomName from the RC Reservation
		/// </summary>
		public string ExternalId { get; set; }
		public string Name { get; set; }
	}

	public class ReservationBedData
	{

		public Guid Id { get; set; }

		/// <summary>
		/// Bed's external ID.
		/// External id is a PMSRoomBedName from the RC Reservation
		/// </summary>
		public string ExternalId { get; set; }
		public string Name { get; set; }

		public Guid RoomId { get; set; }
		public string RoomName { get; set; }
	}

	public class SyncProductData
	{
		public string Id { get; set; }
		public string Name { get; set; }
	}

	public class ReservationOtherPropertyData
	{
		public string Key { get; set; }
		public string Value { get; set; }
	}
	public class ReservationsSynchronizationResult
	{
		public string HotelId { get; set; }
		public string HotelName { get; set; }

		public IEnumerable<ReservationData> NewReservations { get; set; }
		public IEnumerable<ReservationData> UpdatedReservations { get; set; }
		public IEnumerable<ReservationData> DeactivatedReservations { get; set; }


		public IEnumerable<ReservationRoomData> AutogeneratedRooms { get; set; }
		public IEnumerable<ReservationBedData> AutogeneratedBeds { get; set; }

		public IEnumerable<ReservationRoomData> RoomsWithNewExternalId { get; set; }
		public IEnumerable<ReservationBedData> BedsWithNewExternalId { get; set; }

		public IEnumerable<SyncProductData> NewProducts { get; set; }


	}

	public class SynchronizeReservationsCommand : IRequest<ProcessResponse<SynchronizeReservationsResult>>
	{

	}
	
	public class SynchronizeReservationsCommandHandler : IRequestHandler<SynchronizeReservationsCommand, ProcessResponse<SynchronizeReservationsResult>>, IAmWebApplicationHandler, IAmServiceJobsApplicationHandler
	{
		private readonly IDatabaseContext _databaseContext;
		private readonly IReservationsSynchronizer _reservationsSynchronizer;

		public SynchronizeReservationsCommandHandler(IDatabaseContext databaseContext, IReservationsSynchronizer reservationsSynchronizer)
		{
			this._databaseContext = databaseContext;
			this._reservationsSynchronizer = reservationsSynchronizer;
		}

		public async Task<ProcessResponse<SynchronizeReservationsResult>> Handle(SynchronizeReservationsCommand request, CancellationToken cancellationToken)
		{
			var hotels = await this._databaseContext.Hotels.Select(h => new { h.Id, h.Name }).ToListAsync();
			var allHotelReservations = new List<ReservationsSynchronizationResult>();
			foreach(var hotel in hotels)
			{
				var hotelReservations = await this._reservationsSynchronizer.Synchronize(hotel.Id, hotel.Name, cancellationToken);

				allHotelReservations.Add(hotelReservations);
			}

			return new ProcessResponse<SynchronizeReservationsResult>
			{
				Data = new SynchronizeReservationsResult
				{
					HotelReservations = allHotelReservations
				},
				HasError = false,
				IsSuccess = true,
				Message = "Reservations synchronized"
			};
		}
	}
}
