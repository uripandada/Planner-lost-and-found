using MediatR;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using Planner.Application.Interfaces;
using Planner.Common.Data;
using Planner.Common.Extensions;
using Planner.Domain.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Planner.Application.RoomManagement.Commands.InsertRoom
{
	public class InsertRoomResponse
	{
		public Guid Id { get; set; }
		public int OrdinalNumber { get; set; }
	}

	public class SaveRoomBed
	{
		public Guid? Id	{ get; set; }
		public string Name { get; set; }
	}

	public class InsertRoomCommand : IRequest<ProcessResponse<InsertRoomResponse>>
	{
		public Guid BuildingId { get; set; }
		public Guid FloorId { get; set; }
		public string Name { get; set; }
		public string TypeKey { get; set; } // Hotel room, Hostel room, appartment
		public string HotelId { get; set; }

		public string FloorSectionName { get; set; }
		public string FloorSubSectionName { get; set; }
		public Guid CategoryId { get; set; }

		public IEnumerable<SaveRoomBed> Beds { get; set; }
	}
	public class InsertRoomCommandHandler : IRequestHandler<InsertRoomCommand, ProcessResponse<InsertRoomResponse>>, IAmWebApplicationHandler
	{
		private readonly IDatabaseContext _databaseContext;
		private readonly Guid _userId;

		public InsertRoomCommandHandler(IDatabaseContext databaseContext, IHttpContextAccessor contextAccessor)
		{
			this._databaseContext = databaseContext;
			this._userId = contextAccessor.UserId();
		}

		public async Task<ProcessResponse<InsertRoomResponse>> Handle(InsertRoomCommand request, CancellationToken cancellationToken)
		{
			var nameValue = request.Name.Trim().ToLower();
			var existingRoom = await this._databaseContext.Rooms.FirstOrDefaultAsync(r => (r.Name.ToLower() == nameValue || r.ExternalId.ToLower() == nameValue) && r.HotelId == request.HotelId);
			if(existingRoom != null)
			{
				return new ProcessResponse<InsertRoomResponse>
				{
					Data = null,
					HasError = true,
					IsSuccess = false,
					Message = $"The room name {request.Name} is already taken, choose a different one."
				};
			}

			var building = await this._databaseContext.Buildings.FindAsync(request.BuildingId);
			var ordinalNumber = (await this._databaseContext.Rooms.Where(r => r.FloorId == request.FloorId).MaxAsync(r => (int?)r.OrdinalNumber)) ?? 0;
			var room = new Room
			{
				Id = Guid.NewGuid(),
				CreatedAt = DateTime.UtcNow,
				CreatedById = this._userId,
				HotelId = request.HotelId,
				ModifiedAt = DateTime.UtcNow,
				ModifiedById = this._userId,
				Name = request.Name,
				BuildingId = request.BuildingId,
				AreaId = building.AreaId,
				ExternalId = request.Name,
				FloorId = request.FloorId,
				OrdinalNumber = ordinalNumber + 1,
				TypeKey = request.TypeKey,
				CategoryId = request.CategoryId,
				FloorSectionName = request.FloorSectionName,
				FloorSubSectionName = request.FloorSubSectionName,
				IsDoNotDisturb = false,
				IsOutOfOrder = false,
				IsOccupied = false,
				IsInspected = false,
				IsClean = false,
				IsCleaningInProgress = false,
				IsGuestCurrentlyIn = false,
				IsOutOfService = false,
				IsAutogeneratedFromReservationSync = false,
				RccHousekeepingStatus = Common.Enums.RccHousekeepingStatusCode.HC,
				RccRoomStatus = Common.Enums.RccRoomStatusCode.VAC,
			};

			var roomBeds = new RoomBed[0];
			if(room.TypeKey == Common.Enums.RoomTypeEnum.HOSTEL.ToString())
			{
				if(request.Beds != null && request.Beds.Any())
				{
					roomBeds = request.Beds.Select(b => new RoomBed
					{
						Id = Guid.NewGuid(),
						ExternalId = null,
						IsAutogeneratedFromReservationSync = false,
						Name = b.Name,
						RoomId = room.Id,
						IsClean = false,
						IsOutOfOrder = false,
						IsOccupied = false,
						IsDoNotDisturb = false,
						IsCleaningInProgress = false,
						IsOutOfService = false,
						IsGuestCurrentlyIn = false,
						IsInspected = false,
						RccHousekeepingStatus = Common.Enums.RccHousekeepingStatusCode.HC,
						RccRoomStatus = Common.Enums.RccRoomStatusCode.VAC,
					}).ToArray();
				}
			}

			var response = new InsertRoomResponse
			{
				Id = room.Id,
				OrdinalNumber = room.OrdinalNumber
			};

			await this._databaseContext.Rooms.AddAsync(room);
			if (roomBeds.Any())
			{
				await this._databaseContext.RoomBeds.AddRangeAsync(roomBeds);
			}
			await this._databaseContext.SaveChangesAsync(cancellationToken);

			return new ProcessResponse<InsertRoomResponse>
			{
				Data = response,
				HasError = false,
				IsSuccess = true,
				Message = "Room inserted."
			};
		}
	}
}
