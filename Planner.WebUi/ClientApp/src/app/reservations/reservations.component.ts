import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { GetPageOfReservationsQuery, HotelItemData, PageOfOfReservationGridData, ProcessResponseOfSynchronizeReservationsResult, ReservationClient, ReservationGridData, SynchronizeReservationsCommand, SynchronizeReservationsResult } from '../core/autogenerated-clients/api-client';
import { HotelService } from '../core/services/hotel.service';
import { LoadingService } from '../core/services/loading.service';

@Component({
  selector: 'app-reservations',
  templateUrl: './reservations.component.html',
  styleUrls: ['./reservations.component.scss']
})
export class ReservationsComponent implements OnInit {
  sorts = [
    { key: 'GUEST_NAME_ASC', value: 'Guest A to Z' },
    { key: 'GUEST_NAME_DESC', value: 'Guest Z to A' },
    { key: 'CREATED_AT_DESC', value: 'Newest first' },
    { key: 'CREATED_AT_ASC', value: 'Oldest first' },
    { key: 'RESERVATION_ID_ASC', value: 'Reservation A to Z' },
    { key: 'RESERVATION_ID_ASC', value: 'Reservation Z to A' },
  ];
  
  showLoadMore$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  loadedNumberOfReservations$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  totalNumberOfReservations$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  reservations$: BehaviorSubject<Array<ReservationGridData>> = new BehaviorSubject<Array<ReservationGridData>>([]);

  showSynchronizationResultsPopup$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  isSynchronizing$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  synchronizationResult$: BehaviorSubject<SynchronizeReservationsResult> = new BehaviorSubject<SynchronizeReservationsResult>(new SynchronizeReservationsResult({ hotelReservations: [] }));

  filterForm: FormGroup;
  hotels: Array<HotelItemData>;

  constructor(
    public loading: LoadingService,
    private _formBuilder: FormBuilder,
    private _reservationClient: ReservationClient,
    private _hotelService: HotelService,
    private _toastr: ToastrService) {
  }

  ngOnInit(): void {
    this.loading.reset();

    this.hotels = [
      new HotelItemData({
        id: "ANY",
        name: "Any hotel"
      }),
      ...this._hotelService.getHotels()
    ];

    this.filterForm = this._formBuilder.group({
      sortKey: ['CREATED_AT_DESC'],
      keywords: [''],
      hotelId: ["ANY"],
    });

    this.filterForm.valueChanges.pipe(
      debounceTime(300)
    ).subscribe(
      (formValues: any) => { this._loadReservations(0); },
      (error: Error) => { },
      () => { }
    );

    this._loadReservations(0);
  }

  loadMoreReservations() {
    this._loadReservations(this.loadedNumberOfReservations$.value);
  }

  synchronizeReservations() {
    this.loading.start();
    this.isSynchronizing$.next(true);
    this.showSynchronizationResultsPopup$.next(true);

    this._reservationClient.synchronizeReservationsFromRcc(new SynchronizeReservationsCommand({})).subscribe(
      (response: ProcessResponseOfSynchronizeReservationsResult) => {
        if (response.hasError) {
          this._toastr.error(response.message);
          this.showSynchronizationResultsPopup$.next(false);
          return;
        }

        this._toastr.success(response.message);
        this.synchronizationResult$.next(response.data);
        this._loadReservations(0);
      },
      (error: Error) => {
        this.showSynchronizationResultsPopup$.next(false);
        this._toastr.error(error.message);
      },
      () => {
        this.isSynchronizing$.next(false);
        this.loading.stop();
      }
    );
  }

  hideSynchronizationResultPopup() {
    this.showSynchronizationResultsPopup$.next(false);

  }

  private _loadReservations(skip: number) {
    this.loading.start();

    let formValues = this.filterForm.getRawValue();

    let query: GetPageOfReservationsQuery = new GetPageOfReservationsQuery({
      skip: skip,
      take: 20,
      keywords: formValues.keywords,
      sortKey: formValues.sortKey,
      hotelId: formValues.hotelId && formValues.hotelId != "ANY" ? formValues.hotelId : null
    });

    this._reservationClient.getPageOfReservations(query).subscribe(
      (response: PageOfOfReservationGridData) => {
        if (skip === 0) {
          this.reservations$.next(response.items);
        }
        else {
          this.reservations$.next([...this.reservations$.value, ...response.items]);
        }
        this.totalNumberOfReservations$.next(response.totalNumberOfItems);
        this.loadedNumberOfReservations$.next(this.reservations$.value.length);
        this.showLoadMore$.next(this.loadedNumberOfReservations$.value < this.totalNumberOfReservations$.value);
      },
      (error: Error) => {
        this._toastr.error(error.message);
      },
      () => {
        this.loading.stop();
      },
    );
  }
}
