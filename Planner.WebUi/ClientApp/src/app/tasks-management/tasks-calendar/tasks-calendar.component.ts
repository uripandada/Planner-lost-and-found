import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject, Observable } from 'rxjs';
import { map, startWith } from 'rxjs/operators';
import { BalancedTaskOptions, SaveMonthlyRecurringTaskItemOptions, SaveWeeklyRecurringTaskItemOptions, CancelTasksByConfigurationCommand, DailyRecurringTaskOptions, EnumData, EventTaskOptions, ExtendedTaskActionData, GetTaskConfigurationCancelPreviewQuery, GetTaskConfigurationSavePreviewQuery, InsertTaskConfigurationCommand, MonthlyRecurringTaskItemOptions, MonthlyRecurringTaskOptions, ProcessResponse, ProcessResponseOfInsertTaskConfigurationResult, ProcessResponseOfUpdateTaskConfigurationResult, SaveBalancedTaskOptions, SaveDailyRecurringTaskOptions, SaveEventTaskOptions, SaveMonthlyRecurringTaskOptions, SaveSingleTaskOptions, SaveSpecificTimesRecurringTaskOptions, SaveTaskFileData, SaveTaskWhatData, SaveWeeklyRecurringTaskOptions, SingleTaskOptions, SpecificTimesRecurringTaskOptions, TaskActionData, TaskConfigurationCancelPreview, TaskConfigurationDetailsData, TaskConfigurationSavePreview, TaskFileData, TasksManagementClient, TaskWhatData, TaskWhereData, TaskWhoData, UpdateTaskConfigurationCommand, WeeklyRecurringTaskItemOptions, WeeklyRecurringTaskOptions, RecurringEveryTaskOptions, SaveRecurringEveryTaskOptions, TaskGridItem, GetPageOfTasksForGridQuery, PageOfOfTaskGridItem, TasksCalendar, GetCalendarTasksQuery } from '../../core/autogenerated-clients/api-client';
import { LoadingService } from '../../core/services/loading.service';
import { FileDetails, FilesChangedData } from '../../shared/components/file-upload/file-upload.component';
import { DateHelper } from '../../shared/helpers/date.helper';
import moment, { Moment } from 'moment';
import { MomentDateHelper } from '../../shared/helpers/moment-date.helper';
import { AutocompleteSingleSelectRequiredValidator, SingleSelectWhereRequiredValidator } from '../../core/validators/autocomplete-single-select-required.validator';
import { CustomDateAdapter } from 'src/app/core/custom-date-adapter';
import { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';
import { MAT_MOMENT_DATE_ADAPTER_OPTIONS } from '@angular/material-moment-adapter';
export const MY_FORMATS = {
  parse: {
    dateInput: 'LL',
  },
  display: {
    dateInput: 'dddd[,] Do MMM YYYY',
    monthYearLabel: 'MMM YYYY',
    dateA11yLabel: 'LL',
    monthYearA11yLabel: 'MMMM YYYY',
  },
};
@Component({
  selector: 'app-tasks-calendar',
  templateUrl: './tasks-calendar.component.html',
  providers: [
    { provide: DateAdapter, useClass: CustomDateAdapter, deps: [MAT_DATE_LOCALE] },
    { provide: MAT_DATE_FORMATS, useValue: MY_FORMATS },
    /*{ provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS },*/
    { provide: MAT_MOMENT_DATE_ADAPTER_OPTIONS, useValue: { useUtc: true } },
  ],
})
export class TasksCalendarComponent implements OnInit {
  @Input() selectedTaskId: string = null;
  @Input() onlyMyTasks: boolean = false;
  @Input() userGroupId: string = null;
  @Input() userSubGroupId: string = null;

  @Output() taskSelected: EventEmitter<string> = new EventEmitter<string>();

  calendar$: BehaviorSubject<TasksCalendar> = new BehaviorSubject<TasksCalendar>(null);
  isCalendarLoaded$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);

  private _currentMonth: number;
  private _currentYear: number;

  constructor(private _formBuilder: FormBuilder, private _toastr: ToastrService, private _taskManagementClient: TasksManagementClient, private loading: LoadingService) {
  }

  ngOnInit(): void {
    let now = moment(new Date());
    this._currentMonth = now.month() + 1;
    this._currentYear = now.year();
    this.loadCalendar(now);
  }

  nextMonth() {
    console.log("BEFORE - Month: " + this._currentMonth + ", Year: " + this._currentYear);
    let nextMonth = this._currentMonth + 1;
    let nextYear = this._currentYear;

    if (nextMonth > 12) {
      nextMonth = nextMonth - 12;
      nextYear++;
    }

    this._currentMonth = nextMonth;
    this._currentYear = nextYear;
    console.log("AFTER - Month: " + this._currentMonth + ", Year: " + this._currentYear + ", Date: " + new Date(this._currentYear, this._currentMonth - 1, 1));

    let date = moment(new Date(this._currentYear, this._currentMonth - 1, 1));
    this.loadCalendar(date);
  }

  previousMonth() {
    console.log("BEFORE - Month: " + this._currentMonth + ", Year: " + this._currentYear);
    let nextMonth = this._currentMonth - 1;
    let nextYear = this._currentYear;

    if (nextMonth < 1) {
      nextMonth = nextMonth + 12;
      nextYear--;
    }

    this._currentMonth = nextMonth;
    this._currentYear = nextYear;
    console.log("AFTER - Month: " + this._currentMonth + ", Year: " + this._currentYear + ", Date: " + new Date(this._currentYear, this._currentMonth - 1, 1));

    let date = moment(new Date(this._currentYear, this._currentMonth - 1, 1));
    this.loadCalendar(date);
  }

  private loadCalendar(date: Moment) {
    this.loading.start();
    let numberOfMonths: number = 1;
   
    let monthFrom = date.month() + 1;
    let yearFrom = date.year();

    let monthTo = monthFrom + numberOfMonths - 1;
    let yearTo = yearFrom;

    if (monthTo > 12) {
      yearTo++;
      monthTo -= 12;
    }

    let query: GetCalendarTasksQuery = new GetCalendarTasksQuery({
      currentDate: moment(),
      monthFrom: monthFrom,
      yearFrom: yearFrom,
      monthTo: monthTo,
      yearTo: yearTo,
      onlyMyTasks: this.onlyMyTasks,
      userGroupId: this.userGroupId,
      userSubGroupId: this.userSubGroupId,
    });

    this._taskManagementClient.getCalendarTasks(query).subscribe(
      (response: TasksCalendar) => {
        this.calendar$.next(response);
        this.isCalendarLoaded$.next(true);
      },
      (error: Error) => { this._toastr.error(error.message); this.loading.stop(); },
      () => { this.loading.stop(); }
    );
  }

  public selectTask(taskId: string) {
    this.taskSelected.next(taskId);
  }

}
