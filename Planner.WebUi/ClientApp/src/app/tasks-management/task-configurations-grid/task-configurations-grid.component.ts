import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';
import { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject, Observable, Subscription } from 'rxjs';
import { map, startWith } from 'rxjs/operators';
import { TaskConfigurationGridItem, BalancedTaskOptions, SaveMonthlyRecurringTaskItemOptions, SaveWeeklyRecurringTaskItemOptions, CancelTasksByConfigurationCommand, DailyRecurringTaskOptions, EnumData, EventTaskOptions, ExtendedTaskActionData, GetTaskConfigurationCancelPreviewQuery, GetTaskConfigurationSavePreviewQuery, InsertTaskConfigurationCommand, MonthlyRecurringTaskItemOptions, MonthlyRecurringTaskOptions, ProcessResponse, ProcessResponseOfInsertTaskConfigurationResult, ProcessResponseOfUpdateTaskConfigurationResult, SaveBalancedTaskOptions, SaveDailyRecurringTaskOptions, SaveEventTaskOptions, SaveMonthlyRecurringTaskOptions, SaveSingleTaskOptions, SaveSpecificTimesRecurringTaskOptions, SaveTaskFileData, SaveTaskWhatData, SaveWeeklyRecurringTaskOptions, SingleTaskOptions, SpecificTimesRecurringTaskOptions, TaskActionData, TaskConfigurationCancelPreview, TaskConfigurationDetailsData, TaskConfigurationSavePreview, TaskFileData, TasksManagementClient, TaskWhatData, TaskWhereData, TaskWhoData, UpdateTaskConfigurationCommand, WeeklyRecurringTaskItemOptions, WeeklyRecurringTaskOptions, RecurringEveryTaskOptions, SaveRecurringEveryTaskOptions, GetPageOfTaskConfigurationsForGridQuery, PageOfOfTaskConfigurationGridItem } from '../../core/autogenerated-clients/api-client';
import { LoadingService } from '../../core/services/loading.service';
import { FileDetails, FilesChangedData } from '../../shared/components/file-upload/file-upload.component';
import { DateHelper } from '../../shared/helpers/date.helper';
import moment, { Moment } from 'moment';
import { MomentDateHelper } from '../../shared/helpers/moment-date.helper';
import { AutocompleteSingleSelectRequiredValidator, SingleSelectWhereRequiredValidator } from '../../core/validators/autocomplete-single-select-required.validator';
import { TasksRefreshService } from '../tasks-refresh.service';
import { TaskSelectedEventArgs } from '../task-configurations-grid-item/task-selected-event-args';

@Component({
  selector: 'app-task-configurations-grid',
  templateUrl: './task-configurations-grid.component.html'
})
export class TaskConfigurationsGridComponent implements OnInit, OnDestroy {

  @Input() selectedTaskConfigurationId: string = null;
  @Input() selectedTaskId: string = null;
  @Input() userGroupId: string = null;
  @Input() userSubGroupId: string = null;

  @Input() allWheres: TaskWhereData[];
  @Input() allActions: TaskActionData[];
  @Input() allWhos: TaskWhoData[];

  @Output() taskSelected: EventEmitter<TaskSelectedEventArgs> = new EventEmitter<TaskSelectedEventArgs>();

  taskConfigurations$: BehaviorSubject<TaskConfigurationGridItem[]> = new BehaviorSubject<TaskConfigurationGridItem[]>([]);
  totalNumber$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  loadedNumber$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  showLoadMore$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);

  filterForm: FormGroup;

  filteredTaskActions$: Observable<TaskActionData[]>;

  private _refreshSubscription: Subscription;

  constructor(private _formBuilder: FormBuilder, private _toastr: ToastrService, private _taskManagementClient: TasksManagementClient, private loading: LoadingService, private _refreshTasksGridsService: TasksRefreshService) {
  }

  ngOnInit(): void {
    this.filterForm = this._formBuilder.group({
      action: [""],
      wheres: [[]],
      whos: [[]],
    });

    this.filterForm.controls.action.valueChanges.subscribe(() => {
      this._filterTasks(0, 20);
    });
    this.filterForm.controls.wheres.valueChanges.subscribe(() => {
      this._filterTasks(0, 20);
    });
    this.filterForm.controls.whos.valueChanges.subscribe(() => {
      this._filterTasks(0, 20);
    });

    this.filteredTaskActions$ = this.filterForm.controls.action.valueChanges
      .pipe(
        startWith(''),
        map(value => {
          if (typeof (value) === "string") {
            return this._filterTaskActions(value);
          }
          else {
            this._selectTaskAction(value);
            return this.allActions;
          }
        })
      );

    this._refreshSubscription = this._refreshTasksGridsService.refreshGrids$.subscribe(() => {
      this._filterTasks(0, 20);
    });
  }

  ngOnDestroy() {
    if (this._refreshSubscription) {
      this._refreshSubscription.unsubscribe();
      this._refreshSubscription = null;
    }
  }

  private _selectTaskAction(action: TaskActionData): void {
  }

  onTaskSelected(args: TaskSelectedEventArgs) {
    this.taskSelected.next(args);
  }

  loadMore(): void {
    this._filterTasks(this.loadedNumber$.value, 20);
  }

  displayTaskAction(action: TaskActionData): string {
    if (action) {
      return action.actionName + " " + action.assetName;
    }

    return '';
  }


  private _filterTaskActions(value: string): TaskActionData[] {
    let valueParam: string = value.toLowerCase();
    return this.allActions.filter(a => a.actionName.toLowerCase().indexOf(valueParam) > -1 || a.assetName.toLowerCase().indexOf(valueParam) > -1);
  }

  private _filterTasks(skip: number, take: number) {
    this.loading.start();

    let filterFormValues = this.filterForm.getRawValue();

    //let fromDateString: string = MomentDateHelper.getIsoDate(filterFormValues.fromDate);
    //let toDateString: string = MomentDateHelper.getIsoDate(filterFormValues.toDate);

    let query: GetPageOfTaskConfigurationsForGridQuery = new GetPageOfTaskConfigurationsForGridQuery({
      skip: skip,
      take: take,
      sortKey: "CREATED_AT_DESC",
      assetId: null,
      actionName: null,
      wheres: filterFormValues.wheres,
      whos: filterFormValues.whos,
      assetGroupId: null,
      userGroupId: this.userGroupId,
      userSubGroupId: this.userSubGroupId,
    });

    if (typeof filterFormValues.action === "object") {
      query.assetId = filterFormValues.action.assetId;
      query.actionName = filterFormValues.action.actionName;
      query.assetGroupId = filterFormValues.action.assetGroupId;
    }

    this._taskManagementClient.getPageOfTaskConfigurationsForGrid(query).subscribe(
      (response: PageOfOfTaskConfigurationGridItem) => {
        if (skip === 0) {
          this.taskConfigurations$.next(response.items);
        }
        else {
          this.taskConfigurations$.next([...this.taskConfigurations$.value, ...response.items]);
        }
        this.totalNumber$.next(response.totalNumberOfItems);
        this.loadedNumber$.next(this.taskConfigurations$.value.length);
        this.showLoadMore$.next(this.loadedNumber$.value < this.totalNumber$.value);
      },
      (error: Error) => { this._toastr.error(error.message); this.loading.stop(); },
      () => { this.loading.stop(); }
    );
  }
}
