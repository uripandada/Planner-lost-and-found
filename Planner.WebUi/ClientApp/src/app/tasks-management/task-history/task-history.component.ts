import { Component, Input, OnDestroy, OnInit } from '@angular/core';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject, Subscription } from 'rxjs';
import { GetTaskHistoryQuery, PageOfOfTaskHistoryItemViewModel, TaskHistoryItemViewModel, TasksManagementClient } from '../../core/autogenerated-clients/api-client';
import { LoadingService } from '../../core/services/loading.service';

@Component({
  selector: 'app-task-history',
  templateUrl: './task-history.component.html',
  styleUrls: ['./task-history.component.scss']
})
export class TaskHistoryComponent implements OnInit, OnDestroy {
  @Input() taskId: string;

  totalNumberOfHistoryItems$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  historyItems$: BehaviorSubject<TaskHistoryItemViewModel[]> = new BehaviorSubject<TaskHistoryItemViewModel[]>([]);
  isLoadingHistory$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);


  private _getTaskHistorySubscription: Subscription;

  constructor(private _tasksManagementClient: TasksManagementClient, public loading: LoadingService, private _toastr: ToastrService) {
  }

  ngOnInit(): void {
    this.isLoadingHistory$.next(true);

    let query: GetTaskHistoryQuery = new GetTaskHistoryQuery({ taskId: this.taskId }); 

    this._getTaskHistorySubscription = this._tasksManagementClient
      .getTaskHistory(query)
      .subscribe(
        (response: PageOfOfTaskHistoryItemViewModel) => {
          this.totalNumberOfHistoryItems$.next(response.totalNumberOfItems);
          this.historyItems$.next(response.items);
        },
        (error: Error) => {
          this._toastr.error(error.message);
        },
        () => {
          this.loading.stop();
          this.isLoadingHistory$.next(false);
        }
      );
  }

  ngOnDestroy(): void {
    this._getTaskHistorySubscription.unsubscribe();
  }
}
