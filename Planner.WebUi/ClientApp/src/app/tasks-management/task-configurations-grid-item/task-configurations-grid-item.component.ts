import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject, Subscription } from 'rxjs';
import { GetPageOfTasksForGridQuery, PageOfOfTaskGridItem, TaskConfigurationGridItem, TaskGridItem, TasksManagementClient } from '../../core/autogenerated-clients/api-client';
import { LoadingService } from '../../core/services/loading.service';
import { TasksRefreshService } from '../tasks-refresh.service';
import { TaskSelectedEventArgs } from './task-selected-event-args';

@Component({
  selector: 'app-task-configurations-grid-item',
  templateUrl: './task-configurations-grid-item.component.html'
})
export class TaskConfigurationsGridItemComponent implements OnInit, OnDestroy {

  @Input() selectedTaskConfigurationId: string = null;
  @Input() selectedTaskId: string = null;
  @Input() config: TaskConfigurationGridItem;

  @Output() taskSelected: EventEmitter<TaskSelectedEventArgs> = new EventEmitter<TaskSelectedEventArgs>();

  showListOfTasks$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  tasks$: BehaviorSubject<TaskGridItem[]> = new BehaviorSubject<TaskGridItem[]>([]);
  totalNumber$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  loadedNumber$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  showLoadMore$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);

  filterForm: FormGroup;

  private _taskStatusChangedSubscription: Subscription;

  constructor(private _formBuilder: FormBuilder, private _toastr: ToastrService, private _taskManagementClient: TasksManagementClient, private loading: LoadingService, private _refreshTasksGridsService: TasksRefreshService) {
  }

  ngOnInit(): void {
    if (!!this.selectedTaskConfigurationId && this.config.id === this.selectedTaskConfigurationId) {
      this.showListOfTasks$.next(true);
      this.showTasks(0, 20);
    }

    this._taskStatusChangedSubscription = this._refreshTasksGridsService.taskStatus$.subscribe((args: { taskId: string, taskConfigurationId: string, statusKey: string }) => {
      this._updateTaskStatus(args);
    });
  }

  ngOnDestroy() {
    if (this._taskStatusChangedSubscription) {
      this._taskStatusChangedSubscription.unsubscribe();
      this._taskStatusChangedSubscription = null;
    }
  }

  public toggleShowTasks() {
    if (!this.showListOfTasks$.value) {
      this.totalNumber$.next(0);
      this.loadedNumber$.next(0);
      this.showLoadMore$.next(false);
      this.showTasks(0, 20);
    }
    else {
      this.showListOfTasks$.next(false);
    }
  }

  public loadMore() {
    this.showTasks(this.loadedNumber$.value, 20);
  }

  private _updateTaskStatus(args: { taskId: string, taskConfigurationId: string, statusKey: string }) {
    if (!args.taskId || !args.taskConfigurationId) {
      return;
    }

    let tasks = [...this.tasks$.value];

    let found: boolean = false;
    for (let t of tasks) {
      if (t.id === args.taskId && t.taskConfigurationId === args.taskConfigurationId) {
        t.statusKey = args.statusKey;
        t.statusDescription = args.statusKey;
        found = true;
        break;
      }
    }

    if (found) {
      this.tasks$.next(tasks);
    }
  }

  private showTasks(skip: number, take: number) {
    this.loading.start();

    let query: GetPageOfTasksForGridQuery = new GetPageOfTasksForGridQuery({
      skip: skip,
      take: take,
      sortKey: "CREATED_AT_DESC",
      taskConfigurationId: this.config.id,
      onlyMyTasks: false,
      userGroupId: null,
      userSubGroupId: null,
      loadOnlyCurrentTasks: false,
      loadMissedUnfinishedTasks: false,
      currentDateString: null,
    });

    this._taskManagementClient.getPageOfTasksForGrid(query).subscribe(
      (response: PageOfOfTaskGridItem) => {
        this.showListOfTasks$.next(true);
        if (skip === 0) {
          this.tasks$.next(response.items);
        }
        else {
          this.tasks$.next([...this.tasks$.value, ...response.items]);
        }
        this.totalNumber$.next(response.totalNumberOfItems);
        this.loadedNumber$.next(this.tasks$.value.length);
        this.showLoadMore$.next(this.loadedNumber$.value < this.totalNumber$.value);
      },
      (error: Error) => { this._toastr.error(error.message); this.loading.stop(); },
      () => { this.loading.stop(); }
    );
  }

  public selectTask(taskId: string) {
    this.taskSelected.next({ taskId: taskId, taskConfigurationId: this.config.id });
  }
}
