import { Component, Input, OnDestroy, OnInit } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { BehaviorSubject, Subscription } from 'rxjs';
import { EnumData } from '../../core/autogenerated-clients/api-client';

@Component({
  selector: 'app-task-balanced',
  templateUrl: './task-balanced.component.html',
  styleUrls: ['./task-balanced.component.scss']
})
export class TaskBalancedComponent implements OnInit, OnDestroy {
  @Input() taskBalancedForm: FormGroup;
  //@Input() allEventTaskTypes: Array<EnumData>;
  //@Input() allEventTaskModifierTypes: Array<EnumData>;

  //modifierTypeName$: BehaviorSubject<string> = new BehaviorSubject<string>("");
  //typeName$: BehaviorSubject<string> = new BehaviorSubject<string>("");

  //private _modifierTypeKeySubscription: Subscription;
  //private _typeKeySubscription: Subscription;

  constructor() {
  }

  ngOnInit(): void {
    //this._modifierTypeKeySubscription = this.taskEventForm.controls.modifierTypeKey.valueChanges.subscribe((modifierTypeKey: string) => {
    //  this._setModifierTypeName(modifierTypeKey);
    //});
    //this._typeKeySubscription = this.taskEventForm.controls.typeKey.valueChanges.subscribe((typeKey: string) => {
    //  this._setTypeName(typeKey);
    //});

    //this._setModifierTypeName(this.taskEventForm.controls.modifierTypeKey.value);
    //this._setTypeName(this.taskEventForm.controls.typeKey.value);
  }

  //private _setModifierTypeName(modifierTypeKey: string) {
  //  let modifierType = this.allEventTaskModifierTypes.find(t => t.key === modifierTypeKey);
  //  if (modifierType) {
  //    this.modifierTypeName$.next(modifierType.name);
  //  }
  //}
  //private _setTypeName(typeKey: string) {
  //  let eventType = this.allEventTaskTypes.find(t => t.key === typeKey);
  //  if (eventType) {
  //    this.typeName$.next(eventType.name);
  //  }
  //}

  ngOnDestroy(): void {
    //if (this._modifierTypeKeySubscription)
    //  this._modifierTypeKeySubscription.unsubscribe();

    //if (this._typeKeySubscription)
    //  this._typeKeySubscription.unsubscribe();
  }
}
