import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { Subscription } from 'rxjs';
import { ProcessResponse, ProcessResponseOfGuid, ReassignTaskCommand, TaskDetailsData, TasksManagementClient, TaskWhereData, TaskWhoData, UpdateTaskCommand, UpdateTaskConfigurationCommand } from '../../core/autogenerated-clients/api-client';
import { LoadingService } from '../../core/services/loading.service';
import { DateHelper } from '../../shared/helpers/date.helper';
import { MomentDateHelper } from '../../shared/helpers/moment-date.helper';
import moment, { Moment } from 'moment';

@Component({
  selector: 'app-task-edit-form',
  templateUrl: './task-edit-form.component.html',
  styleUrls: ['./task-edit-form.component.scss']
})
export class TaskEditFormComponent implements OnInit, OnDestroy {
  @Input() taskDetails: TaskDetailsData;
  @Input() whos: Array<TaskWhoData>;

  //@Output() updated: EventEmitter<TaskDetailsData> = new EventEmitter<TaskDetailsData>();
  @Output() updated: EventEmitter<string> = new EventEmitter<string>();
  @Output() cancelled: EventEmitter<boolean> = new EventEmitter<boolean>();

  taskEditForm: FormGroup;

  private _updateTaskSubscription: Subscription;

  constructor(private _formBuilder: FormBuilder, private _toastr: ToastrService, public loading: LoadingService, private _tasksManagementClient: TasksManagementClient) {
  }
  
  ngOnInit(): void {
    this.taskEditForm = this._formBuilder.group({
      userId: [this.taskDetails.userId ? this.taskDetails.userId : "00000000-0000-0000-0000-000000000000", Validators.required],
      date: [this.taskDetails.startsAt, Validators.required],
      time: [DateHelper.getMomentTime(this.taskDetails.startsAt)],
    });
  }
  ngOnDestroy(): void {
    if (this._updateTaskSubscription) {
      this._updateTaskSubscription.unsubscribe();
    }
  }


  confirm(): void {
    if (!this.taskEditForm.valid) {
      this.taskEditForm.markAllAsTouched();
      this.taskEditForm.markAsDirty({ onlySelf: false });
      this._toastr.error("Fix errors before you can continue");
      return;
    }

    this.loading.start();

    let isForPlannedAttendant = this.taskEditForm.controls.userId.value === "00000000-0000-0000-0000-000000000000";
    let userId = isForPlannedAttendant ? null : this.taskEditForm.controls.userId.value;

    let request: ReassignTaskCommand = new ReassignTaskCommand({
      taskId: this.taskDetails.id,
      startsAtString: MomentDateHelper.getIsoDateTimeWithTime(this.taskEditForm.controls.date.value, this.taskEditForm.controls.time.value),
      userId: userId,
      isForPlannedAttendant: isForPlannedAttendant
    });
    this._updateTaskSubscription = this._tasksManagementClient.reassignTask(request).subscribe(
      (response: ProcessResponseOfGuid) => {
        if (response.hasError) {
          this._toastr.error(response.message);
          return;
        }

        this._toastr.success(response.message);
        //let user = this.whos.find(w => w.referenceId === request.userId);
        this.updated.next(response.data);
      },
      (error: Error) => { this._toastr.error(error.message); },
      () => { this.loading.stop(); }
    );
  }

  //confirm(): void {
  //  if (!this.taskEditForm.valid) {
  //    this.taskEditForm.markAllAsTouched();
  //    this.taskEditForm.markAsDirty({ onlySelf: false });
  //    this._toastr.error("Fix errors before you can continue");
  //    return;
  //  }

  //  this.loading.start();

  //  let request: UpdateTaskCommand = new UpdateTaskCommand({
  //    id: this.taskDetails.id,
  //    startsAtString: MomentDateHelper.getIsoDateTimeWithTime(this.taskEditForm.controls.date.value, this.taskEditForm.controls.time.value),
  //    userId: this.taskEditForm.controls.userId.value
  //  });
  //  this._updateTaskSubscription = this._tasksManagementClient.updateTask(request).subscribe(
  //    (response: ProcessResponse) => {
  //      if (response.hasError) {
  //        this._toastr.error(response.message);
  //        return;
  //      }

  //      this._toastr.success(response.message);
  //      let user = this.whos.find(w => w.referenceId === request.userId);
  //      this.updated.next(new TaskDetailsData({ ...this.taskDetails, userId: request.userId, startsAt: moment(request.startsAtString), isManuallyModified: true, userFullName: user.referenceName, userUsername: "" }));
  //    },
  //    (error: Error) => { this._toastr.error(error.message); },
  //    () => { this.loading.stop(); }
  //  );
  //}

  cancel(): void {
    this.cancelled.next(true);
  }

  public displayWho(userId: string): string {
    if (!userId) {
      return "";
    }

    let option = (<any>this).options.find(o => o.value === userId);
    return option ? option.viewValue : "";

    //let user = this.whos.find(w => w.referenceId === userId);

    //return user ? user.referenceName : "";
  }

}
