import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { FormBuilder, FormControl, FormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject, Observable } from 'rxjs';
import { map, startWith } from 'rxjs/operators';
import { AssetManagementClient, SystemDefinedAssetAction } from '../../core/autogenerated-clients/api-client';
import { LoadingService } from '../../core/services/loading.service';

@Component({
  selector: 'app-asset-action-item',
  templateUrl: './asset-action-item.component.html',
  styleUrls: ['./asset-action-item.component.scss']
})
export class AssetActionItemComponent implements OnInit {

  @Input() actionItemFormGroup: FormGroup;
  @Input() actionItemIndex: number;
  @Input() users: Array<{ id: string, name: string, description: string }>;
  @Input() userGroups: Array<{ id: string, name: string, description: string }>;
  @Input() userSubGroups: Array<{ id: string, name: string, description: string }>;
  @Input() systemDefinedActions: SystemDefinedAssetAction[] = [];

  @Output() removed: EventEmitter<number> = new EventEmitter<number>();

  filteredUsers$: Observable<{ id: string, name: string, description: string }[]>;
  filteredSystemDefinedActions$: Observable<SystemDefinedAssetAction[]>;

  isSystemDefined$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);

  actionFormControl: FormControl;

  private _skipInitialFormUpdate: boolean = true;

  constructor(private _assetManagementClient: AssetManagementClient, private _router: Router, private _formBuilder: FormBuilder, private _route: ActivatedRoute, private _toastr: ToastrService, public loading: LoadingService) { }

  ngOnInit(): void {
    this.actionFormControl = new FormControl(this.actionItemFormGroup.controls.name.value);

    this.isSystemDefined$.next(this.actionItemFormGroup.controls.isSystemDefined.value);

    this.filteredSystemDefinedActions$ = this.actionFormControl.valueChanges
      .pipe(
        startWith(''),
        map(value => {
          if (typeof (value) === "string") {
            this._selectUserDefinedAction(value);
            let valueParameter = value.toLowerCase();
            return this.systemDefinedActions.filter(a => a.name.toLowerCase().indexOf(valueParameter) >= 0);
          }
          else {
            this._selectSystemDefinedAction(value);
            return [...this.systemDefinedActions];
          }
        })
    );

    this.filteredUsers$ = this.actionItemFormGroup.controls.defaultAssignedToUser.valueChanges
      .pipe(
        startWith(''),
        map(value => {
          if (typeof (value) === "string") {
            return this._filterUsers(value);
          }
          else {
            this._selectUser(value);
            return [...this.users, ...this.userGroups, ...this.userSubGroups];
          }
        })
    );

  }

  private _selectUserDefinedAction(actionName: string) {
    if (this._skipInitialFormUpdate) {
      this._skipInitialFormUpdate = false;
      return;
    }

    this.isSystemDefined$.next(false);
    this.actionItemFormGroup.controls.isSystemDefined.setValue(false);
    this.actionItemFormGroup.controls.systemActionTypeKey.setValue('NONE'); 
    this.actionItemFormGroup.controls.name.setValue(actionName); 
    this.actionItemFormGroup.controls.systemDefinedActionIdentifierKey.setValue('NONE'); 
  }

  private _selectSystemDefinedAction(action: SystemDefinedAssetAction) {
    if (this._skipInitialFormUpdate) {
      this._skipInitialFormUpdate = false;
      return;
    }

    this.isSystemDefined$.next(true);
    this.actionItemFormGroup.controls.isSystemDefined.setValue(true);
    this.actionItemFormGroup.controls.systemActionTypeKey.setValue(action.typeKey); 
    this.actionItemFormGroup.controls.name.setValue(action.name); 
    this.actionItemFormGroup.controls.systemDefinedActionIdentifierKey.setValue(action.key); 
  }

  remove() {
    this.removed.next(this.actionItemIndex);
  }

  public displayAction(action: any): string {
    if (!action) {
      return '';
    }

    if (typeof (action) === "string") {
      return action;
    }

    return action.name;
  }

  public displayUserName(user: { id: string, name: string, description: string }): string {
    if (user) {
      return user.name;
    }

    return '';
  }

  private _selectUser(user: { id: string, name: string, description: string }): void {

  }

  private _filterUsers(value: string): { id: string, name: string, description: string }[] {
    let valueParam: string = value.toLowerCase();
    return [
      ...this.users.filter(a => a.name.toLowerCase().indexOf(valueParam) > -1),
      ...this.userGroups.filter(a => a.name.toLowerCase().indexOf(valueParam) > -1),
      ...this.userSubGroups.filter(a => a.name.toLowerCase().indexOf(valueParam) > -1),
    ];
  }

}
