import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';
import { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
import { MatTabChangeEvent } from '@angular/material/tabs';
import { ActivatedRoute, Router } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject, Observable } from 'rxjs';
import { AssetActionData, AssetData, AssetDetailsData, AssetDetailsFileData, AssetDetailsGroupData, AssetDetailsSubGroupData, AssetManagementClient, AssetRoomAssignmentsViewModel, FullGroupHierarchyData, GetAssetGroupActionsQuery, GetFullUserGroupsHierarchyQuery, InsertAssetResponse, ISystemDefinedAssetAction, SystemDefinedAssetAction, TagItemData, UserManagementClient } from '../../core/autogenerated-clients/api-client';
import { HotelService } from '../../core/services/hotel.service';
import { LoadingService } from '../../core/services/loading.service';
import { TagItem } from '../../shared/components/tags-multiselect/tags-multiselect.component';
import { Location } from '@angular/common';

export class ModelItemData {
  assetId: string;
  isModel: boolean;
  name: string;
  imageUrl: string;
}

export class RoomAssignmentsTabData {
  assetId: string;
  models: Array<any>;
  roomAssignments: AssetRoomAssignmentsViewModel;
}
export class ActionTabData {
  actions: Array<AssetActionData>;
}

@Component({
  selector: 'app-asset-details',
  templateUrl: './asset-details.component.html',
  styleUrls: ['./asset-details.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class AssetDetailsComponent implements OnInit {

  public assetDetails: AssetDetailsData = null;

  public assetGroupForm: FormGroup = null;
  public assetsFormArray: FormArray = null;
  public selectedTabIndexControl = new FormControl(0);

  //public isEditMode$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);
  public isCreateNew$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);

  public assetActionsFormArray: FormArray = null;
  public assetRoomAssignmentsFilterForm: FormGroup = null;

  tags: Array<TagItem> = [];
  users: Array<{ id: string, name: string, description: string }> = [];
  userGroups: Array<{ id: string, name: string, description: string }> = [];
  userSubGroups: Array<{ id: string, name: string, description: string }> = [];
  systemDefinedActions: Array<SystemDefinedAssetAction> = [];

  public isLoadingTabData$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  public showRoomAssignments$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);
  public roomAssignmentsTabData$: BehaviorSubject<RoomAssignmentsTabData> = new BehaviorSubject<RoomAssignmentsTabData>(null);
  public actionTabData$: BehaviorSubject<ActionTabData> = new BehaviorSubject<ActionTabData>(null);
  //public selectedAssetModel$: BehaviorSubject<AssetModelData> = new BehaviorSubject<AssetModelData>(new AssetModelData({ id: '-1', availableQuantity: 0, name: "N/A", roomAssignments: [] }));
  //public assetModels$: BehaviorSubject<AssetModelData[]> = new BehaviorSubject<AssetModelData[]>([]);
  public usesModels$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  public assetRoomAssignments$: BehaviorSubject<AssetRoomAssignmentsViewModel> = new BehaviorSubject<AssetRoomAssignmentsViewModel>(null);
  public areAssetRoomAssignmentsLoaded$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);

  //public rooms: Array<AssetRoomData>;
  //public filteredRooms$: Observable<AssetRoomData>;

  constructor(
    private _assetManagementClient: AssetManagementClient,
    private _userManagementClient: UserManagementClient,
    private _router: Router,
    private _formBuilder: FormBuilder,
    private _route: ActivatedRoute,
    private _toastr: ToastrService,
    private _location: Location,
    public loading: LoadingService,
    private _hotelService: HotelService) { }

  ngOnInit(): void {
    this.isCreateNew$.next(this._route.snapshot.data.isCreateNew);
    if (this.isCreateNew$.value) {
      this.assetDetails = new AssetDetailsData({
        assetGroup: new AssetDetailsGroupData({
          id: null,
          name: null,
          typeKey: "SIMPLE",
          parentAssetGroupId: null,
          subGroups: [],
          assets: [new AssetData({
            id: null,
            isBulk: false,
            name: null,
            serialNumber: null,
            tags: [],
            imageFileData: null,
            qrCodeFileData: null
          })],
        })
      });
    }
    else {
      this.assetDetails = new AssetDetailsData(this._route.snapshot.data.assetDetails);
    }

    this.tags = this._route.snapshot.data.tags.map((t: TagItemData) => <TagItem>{ key: t.key, value: t.value });
    this.systemDefinedActions = this._route.snapshot.data.systemDefinedActions.map((a: ISystemDefinedAssetAction) => new SystemDefinedAssetAction(a));

    this.assetGroupForm = this._formBuilder.group({
      id: [{ value: this.assetDetails.assetGroup.id, disabled: true }],
      parentAssetGroupId: [{ value: this.assetDetails.assetGroup.parentAssetGroupId, disabled: true }],
      name: [this.assetDetails.assetGroup.name],
      typeKey: [this.assetDetails.assetGroup.typeKey],
    });

    this.assetGroupForm.controls.typeKey.valueChanges.subscribe((typeKey: string) => {
      if (this.selectedTabIndexControl.value === 0) {
        this.selectedTabIndexControl.setValue(-1);
      }

      setTimeout(() => {
        this.selectedTabIndexControl.setValue(0);
      });
    });

    this.selectedTabIndexControl.valueChanges.subscribe((index: number) => {
      this.tabChanged(index);
    });

    this.assetsFormArray = this._formBuilder.array(this.assetDetails.assetGroup.assets.map(a => this._createAssetFormGroup(a)));

    this.assetRoomAssignmentsFilterForm = this._formBuilder.group({
      keywords: ['']
    });

    this._userManagementClient.getFullUserGroupsHierarchy(new GetFullUserGroupsHierarchyQuery({ keywords: null, activeStatusKey: "ACTIVE", showEmptyGroupsAndSubGroups: false, sortKey: "NAME_ASC" })).subscribe((response: FullGroupHierarchyData) => {
      let users = [];
      let groups = [];
      let subGroups = [];

      for (let group of response.groups) {
        groups.push({ id: group.id, name: group.name, description: 'Group' });

        for (let subGroup of group.subGroups) {
          subGroups.push({ id: subGroup.id, name: subGroup.name, description: 'Sub group | ' + group.name });

          for (let user of subGroup.users) {
            users.push({ id: user.id, name: user.firstName + ' ' + user.lastName, description: 'User | ' + group.name + ' | ' + subGroup.name });
          }
        }
      }

      this.users = users;
      this.userGroups = groups;
      this.userSubGroups = subGroups;
    });
  }

  private _createSubGroupFormGroup(subGroup: AssetDetailsSubGroupData): FormGroup {
    return this._formBuilder.group({
      subGroupForm: this._formBuilder.group({
        id: [{ value: subGroup.id, disabled: true }],
        name: [subGroup.name, Validators.required],
      }),
      assetsFormArray: this._formBuilder.array(subGroup.assets.map(a => this._createAssetFormGroup(a)))
    });
  }

  private _createAssetFormGroup(asset: AssetData): FormGroup {
    let primaryImageFormGroup: FormGroup = this._createAssetFileFormGroup(asset.imageFileData);
    primaryImageFormGroup.controls.isPrimaryImage.setValue(true);
    primaryImageFormGroup.controls.isQrCodeImage.setValue(false);

    let qrCodeImageFormGroup: FormGroup = this._createAssetFileFormGroup(asset.qrCodeFileData);
    qrCodeImageFormGroup.controls.isPrimaryImage.setValue(false);
    qrCodeImageFormGroup.controls.isQrCodeImage.setValue(true);

    return this._formBuilder.group({
      id: [{ value: asset.id, disabled: true }],
      name: [asset.name, Validators.required],
      serialNumber: [asset.serialNumber],
      isBulk: [asset.isBulk],
      tags: this._formBuilder.array(asset.tags.map(t => this._formBuilder.group({ key: [t.key], value: [t.value] }))),
      primaryImageFormGroup: primaryImageFormGroup,
      qrCodeImageFormGroup: qrCodeImageFormGroup,
    });
  }

  private _createAssetFileFormGroup(fileData: AssetDetailsFileData): FormGroup {
    let file = fileData ? fileData : new AssetDetailsFileData({
      id: null,
      isImage: false,
      isPrimaryImage: false,
      isQrCodeImage: false,
      extension: null,
      name: null,
      url: null
    });

    return this._formBuilder.group({
      id: [{ value: file.id, disabled: true }],
      name: [file.name],
      extension: [file.extension],
      isImage: [file.isImage],
      isPrimaryImage: [file.isPrimaryImage],
      isQrCodeImage: [file.isQrCodeImage],
      url: [file.url],
    });
  }

  //private _createRoomAssignmentsFormArray(): FormArray {
  //  return this._formBuilder.array(this.rooms.map(r => this._formBuilder.group({
  //    id: [r.id, Validators.required],
  //    name: [r.name, Validators.required],
  //    isSelected: [false, Validators.required]
  //  })));
  //}

  public edit() {
  }

  public delete() {

  }

  onSimpleAssetInserted(insertResponse: InsertAssetResponse) {
    this._location.go('/assets-management/asset/' + insertResponse.assetGroupId + '/' + insertResponse.assetId);
    this.isCreateNew$.next(false);

    this.assetDetails.assetGroup.id = insertResponse.assetGroupId;
  }

  onAssetGroupInserted(assetGroup: AssetDetailsGroupData) {
    this._location.go('/assets-management/asset/' + assetGroup.id);
    this.isCreateNew$.next(false);

    this.assetDetails.assetGroup.id = assetGroup.id;
  }
  onGroupedAssetInserted(eventData) {

  }

  onSimpleAssetCancelled() {
    if (this.isCreateNew$.value) {
      this._router.navigate(['/assets-management']);
    }
  }
  onAssetGroupCancelled() {
    if (this.isCreateNew$.value) {
      this._router.navigate(['/assets-management']);
    }
  }
  onGroupedAssetCancelled(assetId: string, assetFormIndex: number) {
    // if the asset exists just don't do anything
    if (assetId) {
      return;
    }

    this.assetsFormArray.removeAt(assetFormIndex);
  }

  addNewAsset() {
    this.assetsFormArray.insert(0, this._createAssetFormGroup(new AssetData({
      id: null,
      isBulk: true,
      imageFileData: null,
      name: null,
      qrCodeFileData: null,
      serialNumber: null,
      tags: [],
    })));
  }

  public saveAssetDetails() {
    //if (!this.assetGroupForm.valid || !this.assetsFormArray.valid) {
    //  this._toastr.error("Can't save asset while there are form errors.");
    //  this.assetGroupForm.markAllAsTouched();
    //  this.assetGroupForm.markAsDirty({ onlySelf: false });
    //  this.assetsFormArray.markAllAsTouched();
    //  this.assetsFormArray.markAsDirty({ onlySelf: false });
    //  return;
    //}

    //this.loading.start();

    //let assetFormValue = this.assetDetailsForm.value;
    //let updateAssetRequest: UpdateAssetCommand = new UpdateAssetCommand({
    //  id: this.assetDetails.id,
    //  //isAvailableToHousekeeping: assetFormValue.isAvailableToHousekeeping,
    //  //isAvailableToMaintenance: assetFormValue.isAvailableToMaintenance,
    //  name: assetFormValue.name,
    //  tags: assetFormValue.tags.map(t => new UpdateAssetTagData(t)),
    //  files: this.selectedFiles.map(f => new UpdateAssetFileData({
    //    fileName: f.fileName,
    //    id: f.isNewlyUploaded || f.isStillUploading ? null : f.id
    //  })),
    //  availableQuantity: +assetFormValue.availableQuantity,
    //  usesModels: assetFormValue.usesModels,
    //  models: assetFormValue.models.map(m => new UpdateAssetModelData({
    //    id: m.id,
    //    files: [],
    //    availableQuantity: +m.availableQuantity,
    //    //isAvailableToHousekeeping: m.isAvailableToHousekeeping,
    //    //isAvailableToMaintenance: m.isAvailableToMaintenance,
    //    name: m.name,
    //  }))
    //});

    //this._assetManagementClient.updateAsset(updateAssetRequest).subscribe(
    //  (response: ProcessResponse) => {
    //    if (response.hasError) {
    //      this._toastr.error(response.message);
    //    }

    //    this._toastr.success(response.message);
    //  },
    //  (error: Error) => {
    //    this._toastr.error("Unable to save asset. " + error.message);
    //  },
    //  () => {
    //    this.loading.stop();
    //  });
  }

  //public addTag(tag: TagItem) {

  //  var tagFormArrayValue = this.assetDetailsForm.controls.tags.value;
  //  var existingTagFormArrayItem = tagFormArrayValue.find(a => a.key === tag.key);
  //  if (!existingTagFormArrayItem) {
  //    (this.assetDetailsForm.controls.tags as FormArray).push(this._formBuilder.group({
  //      key: tag.key,
  //      value: tag.value
  //    }));
  //  }

  //  var existingTag = this.tags.find(t => t.key === tag.key);
  //  if (!existingTag) {

  //    this.tags.push(tag);
  //  }
  //}

  //public removeTag(tagIndex: number) {
  //  (this.assetDetailsForm.controls.tags as FormArray).removeAt(tagIndex);
  //}

  //public uploadedFilesChanged(fileChanges: Array<FilesChangedData>) {
  //  this.selectedFiles = fileChanges;
  //}

  public cancelAssetDetails() {
    //this.assetDetailsForm.controls.name.setValue(this.assetDetails.name);
  }

  public tabChanged(tabIndex: number) {
    //let tabIndex = eventData.index;

    if (this.assetGroupForm.controls.typeKey.value === "SIMPLE") {
      tabIndex += 1;
    }

    switch (tabIndex) {
      case 0:
        // ASSETS TAB
        break;
      case 1:
        // AVAILABILITY TAB
        //this._loadModelTabData();
        break;
      case 2:
        // ACTION
        this._loadActionTabData();
        break;
      case 3:
        // PLAN
        break;
      case 4:
        // CONTRACT
        break;
      case 5:
        // DASHBOARD
        break;
    }
  }

  public saveRoomAssignments(data) {
    //this.loading.start();
    //let usesModels: boolean = this.assetModelsForm.controls.usesModels.value;
    //if (usesModels) {
    //  let request = new UpdateAssetModelRoomAssignmentsCommand({
    //    assetId: this.assetDetails.id,
    //    assetModelId: this.selectedAssetModel$.value.id,
    //    roomAssignments: this.roomAssignmentsFormArray.value.filter(ra => ra.isSelected).map(ra => new RoomAssetModelAssignmentData({ roomId: ra.id, quantity: 1 }))
    //  });
    //  this._assetManagementClient.updateAssetModelRoomAssignments(request).subscribe(
    //    (response: ProcessResponse) => {
    //      if (response.hasError) {
    //        this._toastr.error(response.message);
    //        return;
    //      }

    //      this.modelTabData$.value.models.find(m => m.id === request.assetModelId).roomAssignments = request.roomAssignments;
    //      this._toastr.success(response.message);
    //    },
    //    (error: Error) => { this._toastr.error(error.message); },
    //    () => { this.loading.stop(); });
    //}
    //else {
    //  let request = new UpdateAssetRoomAssignmentsCommand({
    //    assetId: this.assetDetails.id,
    //    roomAssignments: this.roomAssignmentsFormArray.value.filter(ra => ra.isSelected).map(ra => new RoomAssetModelAssignmentData({ roomId: ra.id, quantity: 1 }))
    //  });
    //  this._assetManagementClient.updateAssetRoomAssignments(request).subscribe(
    //    (response: ProcessResponse) => {
    //      if (response.hasError) {
    //        this._toastr.error(response.message);
    //        return;
    //      }

    //      this.modelTabData$.value.roomAssignments = request.roomAssignments;
    //      this._toastr.success(response.message);
    //    },
    //    (error: Error) => { this._toastr.error(error.message); },
    //    () => { this.loading.stop(); });
    //}
  }

  //public cancelEditModel(modelIndex: number) {
  //  var modelFormGroup: FormGroup = this.models.at(modelIndex) as FormGroup;
  //  if (modelFormGroup.controls.id.value) {

  //  }
  //  else {
  //    this.models.removeAt(modelIndex);
  //  }
  //}

  //private _loadModelTabData() {
  //  this.isLoadingTabData$.next(true);
  //  this.loading.start();

  //  //let usesModels: boolean = this.assetDetailsForm.controls.usesModels.value;
  //  //this.usesModels$.next(usesModels);

  //  //if (usesModels) {
  //  //  let models = this.models.getRawValue().map(m => new AssetModelData({
  //  //    availableQuantity: m.availableQuantity,
  //  //    id: m.id,
  //  //    name: m.name,
  //  //    roomAssignments: []
  //  //  }));

  //  //  this.assetModels$.next(models);
  //  //  //this.selectedAssetModel$.next(models[0]);
  //  //}
  //  //else {
  //  //  this.assetModels$.next([]);
  //  //  //this.selectedAssetModel$.next(new AssetModelData({
  //  //  //  availableQuantity: 0,
  //  //  //  id: null,
  //  //  //  name: null,
  //  //  //  roomAssignments: []
  //  //  //}));
  //  //}

  //  this.isLoadingTabData$.next(false);
    
  //  //let assetId: string = this.assetDetails.id;
  //  //let assetModelId: string = this.selectedAssetModel$.value.id;
    
  //  //let query: GetAssetRoomAssignmentsQuery = new GetAssetRoomAssignmentsQuery({
  //  //  assetId: assetId,
  //  //  assetModelId: assetModelId,
  //  //  hotelId: this._hotelService.getSelectedHotelId(),
  //  //  keywords: this.assetRoomAssignmentsFilterForm.controls.keywords.value
  //  //});

  //  //this._assetManagementClient.getAssetRoomAssignments(query).subscribe(
  //  //  (response: AssetRoomAssignmentsViewModel) => {
  //  //    this.assetRoomAssignments$.next(response);
  //  //    this.areAssetRoomAssignmentsLoaded$.next(true);
  //  //  },
  //  //  (error: Error) => { this._toastr.error(error.message); },
  //  //  () => { this.loading.stop(); }
  //  //);
  //}

  private _setRoomAssignments() {
    //if (this.assetModelsForm.controls.usesModels.value) {
    //  if (this.selectedAssetModel$.value) {
    //    for (let roomAssignmentAbstractControl of this.roomAssignmentsFormArray.controls) {
    //      let roomId: string = (roomAssignmentAbstractControl as FormGroup).controls.id.value;
    //      this._setRoomAssignedValue(roomAssignmentAbstractControl as FormGroup, this.selectedAssetModel$.value.roomAssignments.find(ra => ra.roomId === roomId) !== undefined);
    //    }
    //  }
    //  else {
    //    for (let roomAssignmentAbstractControl of this.roomAssignmentsFormArray.controls) {
    //      this._setRoomAssignedValue(roomAssignmentAbstractControl as FormGroup, false);
    //    }
    //  }
    //}
    //else {
    //  for (let roomAssignmentAbstractControl of this.roomAssignmentsFormArray.controls) {
    //    let roomId: string = (roomAssignmentAbstractControl as FormGroup).controls.id.value;
    //    this._setRoomAssignedValue(roomAssignmentAbstractControl as FormGroup, this.modelTabData$.value.roomAssignments.find(ra => ra.roomId === roomId) !== undefined);
    //  }
    //}
  }

  private _setRoomAssignedValue(roomAssignmentForm: FormGroup, isSelected: boolean): void {
    roomAssignmentForm.controls.isSelected.setValue(isSelected);
  }

  private _setShowRoomAssignments() {
    //this.showRoomAssignments$.next(this.assetModelsForm.controls.usesModels.value ? this.selectedAssetModel$.value !== null && this.selectedAssetModel$.value.id !== null && this.selectedAssetModel$.value.id !== "-1" : true)
  }

  private _loadActionTabData() {

    this.isLoadingTabData$.next(true);
    
    let request: GetAssetGroupActionsQuery = new GetAssetGroupActionsQuery({
      assetGroupId: this.assetDetails.assetGroup.id,
    });

    this._assetManagementClient.getAssetGroupActions(request).subscribe(
      (response: AssetActionData[]) => {
        this.actionTabData$.next({
          actions: response
        });

        this.assetActionsFormArray = this._createAssetActionsFormArray();
        this.isLoadingTabData$.next(false);
      },
      (error: Error) => {
        this._toastr.error(error.message);
        this.isLoadingTabData$.next(false);
      },
      () => {
        this.isLoadingTabData$.next(false);
      }
    );
  }

  public addNewAssetModel() {
    //this.models.push(this._createAssetModelForm(new AssetDetailsModelData({
    //  id: null,
    //  quantity: 1,
    //  name: null,
    //  //isAvailableToHousekeeping: true,
    //  //isAvailableToMaintenance: true
    //})));
  }

  public insertAssetModel(modelIndex: number) {
    //this.loading.start();

    //let modelFormValues: any = (this.models.at(modelIndex) as FormGroup).getRawValue();
    //let request: InsertAssetModelCommand = new InsertAssetModelCommand({
    //  assetId: this.assetDetails.id,
    //  availableQuantity: +modelFormValues.availableQuantity,
    //  name: modelFormValues.name,
    //});

    //this._assetManagementClient.insertAssetModel(request).subscribe((response: ProcessResponseOfGuid) => {
    //  if (response.hasError) {
    //    this._toastr.error(response.message);
    //    return;
    //  }

    //  (this.models.at(modelIndex) as FormGroup).controls.id.setValue(response.data);
    //  this.assetModelsForm.controls.usesModels.setValue(true);
    //  this._toastr.success(response.message);
    //},
    //  (error: Error) => { this._toastr.error(error.message); },
    //  () => { this.isLoadingTabData$.next(false); });
  }

  public updateAssetModel(modelIndex: number) {
    //this.loading.start();

    //let modelFormValues: any = (this.models.at(modelIndex) as FormGroup).getRawValue();
    //let request: UpdateAssetModelCommand = new UpdateAssetModelCommand({
    //  assetId: this.assetDetails.id,
    //  availableQuantity: +modelFormValues.availableQuantity,
    //  name: modelFormValues.name,
    //  id: modelFormValues.id,
    //});
    //this._assetManagementClient.updateAssetModel(request).subscribe((response: ProcessResponse) => {
    //  if (response.hasError) {
    //    this._toastr.error(response.message);
    //    return;
    //  }

    //  this.assetModelsForm.controls.usesModels.setValue(true);
    //  this._toastr.success(response.message);
    //},
    //  (error: Error) => { this._toastr.error(error.message); },
    //() => { this.isLoadingTabData$.next(false); });
  }

  public selectAssetModel(modelIndex: number) {
    //let modelFormValues = (this.models.at(modelIndex) as FormGroup).getRawValue();

    //this.selectedAssetModel$.next(new AssetModelData({
    //  id: modelFormValues.id,
    //  availableQuantity: modelFormValues.availableQuantity,
    //  name: modelFormValues.name,
    //  roomAssignments: [] // this.modelTabData$.value.models.find(m => m.id === modelFormValues.id).roomAssignments
    //}));
    //this._setRoomAssignments();
    //this._setShowRoomAssignments();
  }

  public assetActionSaved(assetAction: AssetActionData) {
  }


  selectAssetGroupActions() {
   
  }

  addNewAssetActionItem() {
    let newAction: AssetActionData = new AssetActionData({
      assetGroupId: this.assetDetails.assetGroup.id,
      id: null,
      credits: 0,
      price: 0,
      defaultAssignedToUserId: null,
      defaultAssignedToUserGroupId: null,
      defaultAssignedToUserSubGroupId: null,
      name: null,
      priorityKey: "NORMAL",
      quickOrTimedKey: "TIMED",
      isSystemDefined: false,
      systemActionTypeKey: "NONE",
      systemDefinedActionIdentifierKey: "NONE",
    });

    this.assetActionsFormArray.push(this._createAssetActionFormGroup(newAction));

    //let assetId: string = this.assetDetails.id; //this.selectedModelListItemId$.value;
    //let model: AssetDetailsModelData = this.assetDetails.models.find(m => m.id === assetId);
    //let isModel = model !== undefined;

    //this.assetActionsFormArray.push(this._formBuilder.group({
    //  id: null,
    //  assetId: this.assetDetails.id,
    //  assetModelId: isModel ? assetId : null,
    //  isBlocking: [false, Validators.required],
    //  isHighPriority: [false, Validators.required],
    //  name: ["", Validators.required],
    //  quickOrTimedKey: ["TIMED", Validators.required],
    //  priorityKey: ["NORMAL", Validators.required],
    //  isMandatory: [false, Validators.required],
    //  defaultAssignedToUser: [null],
    //  credits: [0],
    //  price: [0]
    //}));
  }

  updateActions(actions: Array<AssetActionData>) {
    this.actionTabData$.next({
      actions: actions
    });

    this.assetActionsFormArray = this._createAssetActionsFormArray();
  }

  //private _createAssetModelForm(): FormGroup {
  //  return this._formBuilder.group({
  //    id: null,
  //    name:  ['', Validators.required],
  //    availableQuantity: [1, Validators.required]
  //  });
  //}

  //private _createAssetModelsFormArray(): FormArray {
  //  if (!this.assetDetails.models || this.assetDetails.models.length === 0) {
  //    return new FormArray([]);
  //  }

  //  return this._formBuilder.array(this.assetDetails.models.map(model => {
  //    var modelForm: FormGroup = this._createAssetModelForm();
  //    modelForm.controls.id.setValue(model.id);
  //    modelForm.controls.name.setValue(model.name);
  //    modelForm.controls.availableQuantity.setValue(model.quantity);

  //    return modelForm;
  //  }));
  //}

  //private _createAssetModelsFormArray(models: AssetDetailsModelData[]): FormArray {
  //  return new FormArray(models.map(m => this._createAssetModelForm(m)));
  //}

  //private _createAssetModelForm(model: AssetDetailsModelData): FormGroup {
  //  return this._formBuilder.group({
  //    id: [model.id],
  //    name: [model.name, Validators.required],
  //    //isAvailableToMaintenance: [model.isAvailableToMaintenance, [Validators.required]],
  //    //isAvailableToHousekeeping: [model.isAvailableToHousekeeping, [Validators.required]],
  //    availableQuantity: [model.quantity],
  //  });
  //}

  private _createAssetActionsFormArray() {
    return this._formBuilder.array(this.actionTabData$.value.actions.map(a => {
      return this._createAssetActionFormGroup(a);
      //let referenceId = null;
      //let assignedReference = null;

      //if (a.defaultAssignedToUserId) {
      //  referenceId = a.defaultAssignedToUserId;
      //  assignedReference = this.users.find(u => u.id === a.defaultAssignedToUserId);
      //}
      //else if (a.defaultAssignedToUserGroupId) {
      //  referenceId = a.defaultAssignedToUserGroupId;
      //  assignedReference = this.userGroups.find(u => u.id === a.defaultAssignedToUserGroupId);
      //}
      //else if (a.defaultAssignedToUserSubGroupId) {
      //  referenceId = a.defaultAssignedToUserSubGroupId;
      //  assignedReference = this.userSubGroups.find(u => u.id === a.defaultAssignedToUserSubGroupId);
      //}

      //return this._formBuilder.group({
      //  id: a.id,
      //  assetGroupId: a.assetGroupId,
      //  name: [a.name, Validators.required],
      //  quickOrTimedKey: [a.quickOrTimedKey, Validators.required],
      //  priorityKey: [a.priorityKey, Validators.required],
      //  defaultAssignedToUser: [assignedReference],
      //  credits: [a.credits],
      //  price: [a.price]
      //});
    }));
  }

  private _createAssetActionFormGroup(a: AssetActionData): FormGroup {
    let referenceId = null;
    let assignedReference = null;

    if (a.defaultAssignedToUserId) {
      referenceId = a.defaultAssignedToUserId;
      assignedReference = this.users.find(u => u.id === a.defaultAssignedToUserId);
    }
    else if (a.defaultAssignedToUserGroupId) {
      referenceId = a.defaultAssignedToUserGroupId;
      assignedReference = this.userGroups.find(u => u.id === a.defaultAssignedToUserGroupId);
    }
    else if (a.defaultAssignedToUserSubGroupId) {
      referenceId = a.defaultAssignedToUserSubGroupId;
      assignedReference = this.userSubGroups.find(u => u.id === a.defaultAssignedToUserSubGroupId);
    }

    return this._formBuilder.group({
      id: a.id,
      assetGroupId: a.assetGroupId,
      name: [a.name, Validators.required],
      quickOrTimedKey: [a.quickOrTimedKey, Validators.required],
      priorityKey: [a.priorityKey, Validators.required],
      defaultAssignedToUser: [assignedReference],
      credits: [a.credits],
      price: [a.price],
      isSystemDefined: [a.isSystemDefined],
      systemActionTypeKey: [a.systemActionTypeKey],
      systemDefinedActionIdentifierKey: [a.systemDefinedActionIdentifierKey],
    });
  }
}
