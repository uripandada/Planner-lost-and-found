import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';
import { FormArray, FormBuilder, FormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject } from 'rxjs';
import { AssetActionData, AssetManagementClient, ProcessResponseOfAssetActionDataOf, SystemDefinedAssetAction, UpdateAssetGroupActionItem, UpdateAssetGroupActionsCommand, UserListItemData } from '../../core/autogenerated-clients/api-client';
import { LoadingService } from '../../core/services/loading.service';
import { ModelItemData } from '../asset-details/asset-details.component';

@Component({
  selector: 'app-asset-action',
  templateUrl: './asset-action.component.html',
  styleUrls: ['./asset-action.component.scss']
})
export class AssetActionComponent implements OnInit, OnChanges {

  /*@Input() models: ModelItemData[];*/
/*@Input() selectedModelId: string;*/
  @Input() assetGroupId: string;
  @Input() assetActionsFormArray: FormArray;
  @Input() users: Array<{ id: string, name: string, description: string }>;
  @Input() userGroups: Array<{ id: string, name: string, description: string }>;
  @Input() userSubGroups: Array<{ id: string, name: string, description: string }>;
  @Input() systemDefinedActions: SystemDefinedAssetAction[] = [];

  @Output() saved: EventEmitter<AssetActionData> = new EventEmitter<AssetActionData>();
  @Output() modelSelected: EventEmitter<ModelItemData> = new EventEmitter<ModelItemData>();
  @Output() newAssetActionItemAdded: EventEmitter<boolean> = new EventEmitter<boolean>();
  @Output() actionsUpdatedSuccess: EventEmitter<AssetActionData[]> = new EventEmitter<AssetActionData[]>();

  assetActionForm: FormGroup;

  constructor(private _assetManagementClient: AssetManagementClient, private _router: Router, private _formBuilder: FormBuilder, private _route: ActivatedRoute, private _toastr: ToastrService, public loading: LoadingService) { }

  ngOnInit(): void {
  }

  ngOnChanges(changes: SimpleChanges): void {
  }

  public select(model: ModelItemData) {
  }

  public addActionItem() {
    this.newAssetActionItemAdded.next(true);
  }

  public removeActionItem(actionItemIndex: number) {
    this.assetActionsFormArray.removeAt(actionItemIndex);
  }

  public saveActionItems() {

    if (!this.assetActionsFormArray.valid) {
      this.assetActionsFormArray.markAllAsTouched();
      this.assetActionsFormArray.markAsDirty({ onlySelf: false });
      this._toastr.error("You have to fix form errors before you can continue.");
      return;
    }

    let assetActions: Array<any> = this.assetActionsFormArray.getRawValue();

    this.loading.start();


    let request: UpdateAssetGroupActionsCommand = new UpdateAssetGroupActionsCommand({
      assetGroupId: assetActions[0].assetGroupId,
      actions: assetActions.map(aa => {
        let referenceId: string = (typeof aa.defaultAssignedToUser === "object" && aa.defaultAssignedToUser) ? aa.defaultAssignedToUser.id : null;

        let userId: string = null;
        let userGroupId: string = null;
        let userSubGroupId: string = null;

        if (referenceId) {
          if (this.users.find(u => u.id === referenceId)) {
            userId = referenceId;
          }
          else if (this.userGroups.find(ug => ug.id === referenceId)) {
            userGroupId = referenceId;
          }
          else if (this.userSubGroups.find(usg => usg.id === referenceId)) {
            userSubGroupId = referenceId;
          }
        }

        return new UpdateAssetGroupActionItem({
          id: aa.id,
          name: aa.name,
          defaultAssignedToUserId: userId,
          defaultAssignedToUserGroupId: userGroupId,
          defaultAssignedToUserSubGroupId: userSubGroupId,
          credits: aa.credits ? +aa.credits : 0,
          isSystemDefined: aa.isSystemDefined,
          price: aa.price ? +aa.price : 0,
          priorityKey: aa.priorityKey,
          quickOrTimedKey: aa.quickOrTimedKey,
          systemActionTypeKey: aa.systemActionTypeKey,
          systemDefinedActionIdentifierKey: aa.systemDefinedActionIdentifierKey,
        });
      })
    });

    this._assetManagementClient.updateAssetGroupActions(request).subscribe(
      (response: ProcessResponseOfAssetActionDataOf) => {
        if (response.hasError) {
          this._toastr.error(response.message);
          return;
        }

        // update the form array with new action item ID-s
        this._toastr.success(response.message);
        this.actionsUpdatedSuccess.next(response.data);
      },
      (error: Error) => { this._toastr.error(error.message); },
      () => { this.loading.stop(); }
    );
  }
}
