import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject } from 'rxjs';
import { AssetDetailsGroupData, AssetManagementClient, InsertAssetGroupCommand, InsertWarehouseCommand, ProcessResponse, ProcessResponseOfGuid, UpdateAssetGroupCommand, UpdateWarehouseCommand, WarehouseData, WarehouseDetailsData, WarehouseManagementClient } from '../../core/autogenerated-clients/api-client';
import { HotelService } from '../../core/services/hotel.service';
import { LoadingService } from '../../core/services/loading.service';

@Component({
  selector: 'app-asset-group',
  templateUrl: './asset-group.component.html',
})
export class AssetGroupComponent implements OnInit {

  //@Input() assetGroup: AssetDetailsGroupData;
  @Input() assetGroupForm: FormGroup;

  @Output() deleted: EventEmitter<string> = new EventEmitter<string>();
  @Output() inserted: EventEmitter<AssetDetailsGroupData> = new EventEmitter<AssetDetailsGroupData>();
  @Output() updated: EventEmitter<AssetDetailsGroupData> = new EventEmitter<AssetDetailsGroupData>();
  @Output() cancelled: EventEmitter<boolean> = new EventEmitter<boolean>();

  isSaving$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  isCreateNew$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);
  isInEditMode$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);

  loading: LoadingService;

  constructor(
    private _formBuilder: FormBuilder,
    private _toastr: ToastrService,
    private _hotelService: HotelService,
    private _assetsClient: AssetManagementClient) {
    this.loading = new LoadingService();
  }

  ngOnInit(): void {
    this.isCreateNew$.next(!this.assetGroupForm.controls.id.value || this.assetGroupForm.controls.id.value === "00000000-0000-0000-0000-000000000000");
    this.isInEditMode$.next(this.isCreateNew$.value);

  }

  cancel() {
    if (!this.isCreateNew$.value) {
      this.isInEditMode$.next(false);
    }
    this.cancelled.next(true);
  }

  save() {
    if (!this.assetGroupForm.valid) {
      this._toastr.error("You have to fix form errors before you can continue.");
      this.assetGroupForm.markAllAsTouched();
      this.assetGroupForm.markAsDirty({ onlySelf: false });
      return;
    }

    this.isSaving$.next(true);
    this.loading.start();

    let formValues = this.assetGroupForm.getRawValue();
    if (this.isCreateNew$.value) {

      let insertRequest: InsertAssetGroupCommand = new InsertAssetGroupCommand({
        name: formValues.name,
        parentAssetGroupId: formValues.parentAssetGroupId,
        typeKey: formValues.typeKey
      });

      this._assetsClient.insertAssetGroup(insertRequest).subscribe(
        (response: ProcessResponseOfGuid) => {
          if (response.hasError) {
            this._toastr.error(response.message);
          }
          else {
            let assetGroup: AssetDetailsGroupData = new AssetDetailsGroupData({
              id: response.data,
              name: insertRequest.name,
              assets: [],
              parentAssetGroupId: insertRequest.parentAssetGroupId,
              subGroups: [],
              typeKey: insertRequest.typeKey
            });

            this.assetGroupForm.controls.id.setValue(response.data);
            this.inserted.next(assetGroup);
            this.isCreateNew$.next(false);
            this.isInEditMode$.next(false);
            this._toastr.success(response.message);

          }
          this.isSaving$.next(false);
          this.loading.stop();
        },
        (error: Error) => {
          this._toastr.error(error.message);
          this.isSaving$.next(false);
          this.loading.stop();
        },
        () => {
          this.loading.stop();
          this.isSaving$.next(false);
        }
      );
    }
    else {

      let parentAssetGroupId = formValues.parentAssetGroupId;
      let updateRequest: UpdateAssetGroupCommand = new UpdateAssetGroupCommand({
        id: formValues.id,
        name: formValues.name,
        typeKey: formValues.typeKey,
      });

      this._assetsClient.updateAssetGroup(updateRequest).subscribe(
        (response: ProcessResponse) => {
          if (response.hasError) {
            this._toastr.error(response.message);
            this.loading.stop();
          }
          else {
            let assetGroup: AssetDetailsGroupData = new AssetDetailsGroupData({
              id: updateRequest.id,
              name: updateRequest.name,
              assets: [],
              parentAssetGroupId: parentAssetGroupId,
              subGroups: [],
              typeKey: updateRequest.typeKey,
            });

            this.updated.next(assetGroup);
            //this.assetGroup = assetGroup;
            this.isCreateNew$.next(false);
            this.isInEditMode$.next(false);
            this._toastr.success(response.message);
          }
          this.isSaving$.next(false);
          this.loading.stop();
        },
        (error: Error) => {
          this._toastr.error(error.message);
          this.isSaving$.next(false);
          this.loading.stop();
        },
        () => {
          this.loading.stop();
          this.isSaving$.next(false);
        }
      );
    }
  }

  switchToEditMode() {
    this.isInEditMode$.next(true);
  }

  //private _createAssetGroupForm() {
  //  this.assetGroupForm = this._formBuilder.group({
  //    name: [this.assetGroup.name, Validators.required],
  //    typeKey: [this.assetGroup.typeKey, Validators.required],
  //  });
  //}
}
