import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { AssetData, AssetDetailsGroupData, AssetGridItemData, AssetManagementClient, GetPageOfAssetsQuery, InsertAssetGroupCommand, InsertWarehouseCommand, PageOfOfAssetGridItemData, ProcessResponse, ProcessResponseOfGuid, UpdateAssetGroupCommand, UpdateWarehouseCommand, WarehouseData, WarehouseDetailsData, WarehouseManagementClient } from '../../core/autogenerated-clients/api-client';
import { HotelService } from '../../core/services/hotel.service';
import { LoadingService } from '../../core/services/loading.service';

@Component({
  selector: 'app-asset-select-list',
  templateUrl: './asset-select-list.component.html',
})
export class AssetSelectListComponent implements OnInit {

  @Input() assetGroupId: string = null;
  @Output() selected: EventEmitter<AssetGridItemData> = new EventEmitter<AssetGridItemData>();

  private readonly _EMPTY_ITEM: AssetGridItemData = new AssetGridItemData({
    hasImage: false,
    id: null,
    isBulk: true,
    assetGroupId: null,
    assetGroupName: null,
    assetSubGroupId: null,
    assetSubGroupName: null,
    fileName: null,
    imageUrl: null,
    name: null,
    serialNumber: null,
    tags: [],
    availableQuantity: 0,
    inUseQuantity: 0,
    reservedQuantity: 0,
    totalQuantity: 0,
  });

  selectedAsset$: BehaviorSubject<AssetGridItemData> = new BehaviorSubject<AssetGridItemData>(this._EMPTY_ITEM); 
  assets$: BehaviorSubject<AssetGridItemData[]> = new BehaviorSubject<AssetGridItemData[]>([]);
  filteredAssets$: BehaviorSubject<AssetGridItemData[]> = new BehaviorSubject<AssetGridItemData[]>([]);
  totalNumberOfAssets$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  numberOfLoadedAssets$: BehaviorSubject<number> = new BehaviorSubject<number>(0);

  loading: LoadingService;

  filterForm: FormGroup;
  noImageBackgroundUrl: string = "assets/images/no_image_400x400.jpg";

  sorts: { key: string, value: string }[] = [
    { key: "NAME_ASC", value: "From A to Z"},
    { key: "NAME_DESC", value: "From Z to A"},
  ];

  constructor(
    private _formBuilder: FormBuilder,
    private _toastr: ToastrService,
    private _hotelService: HotelService,
    private _assetsClient: AssetManagementClient) {
    this.loading = new LoadingService();
  }

  ngOnInit(): void {
    this.filterForm = this._formBuilder.group({
      sortKey: ["NAME_ASC"],
      keywords: [""],
    })

    this.filterForm.valueChanges
      .pipe(
        debounceTime(250)
      )
      .subscribe(values => {
        var assets = [...this.assets$.value];

        if (values.sortKey === "NAME_ASC") {
          assets = assets.sort((a: AssetGridItemData, b: AssetGridItemData) => {
            return (a.name > b.name ? 1 : -1);
          });
        }
        else if (values.sortKey === "NAME_DESC") {
          assets = assets.sort((a: AssetGridItemData, b: AssetGridItemData) => {
            return (a.name > b.name ? -1 : 1);
          });
        }

        if (values.keywords) {
          assets = assets.filter((a: AssetGridItemData) => a.name.toLowerCase().indexOf(values.keywords.toLowerCase()) >= 0);
        }

        this.filteredAssets$.next(assets);
      });

    this._loadAllAssets();
  }

  private _loadAllAssets() {
    this.loading.start();
    let query: GetPageOfAssetsQuery = new GetPageOfAssetsQuery({
      skip: 0,
      take: 0,
      keywords: this.filterForm.controls.keywords.value,
      sortKey: this.filterForm.controls.sortKey.value,
      assetGroupId: this.assetGroupId,
    });
    this._assetsClient.getPageOfAssets(query).subscribe((response: PageOfOfAssetGridItemData) => {
      let assets = response.items.sort((a: AssetGridItemData, b: AssetGridItemData) => {
        return (a.name > b.name ? 1 : -1);
      });

      this.assets$.next(assets);
      this.filteredAssets$.next(assets);
      this.numberOfLoadedAssets$.next(assets.length);
      this.totalNumberOfAssets$.next(response.totalNumberOfItems);
      this.loading.stop();
    });
  }

  selectAsset(asset: AssetGridItemData) {
    if (asset) {
      this.selectedAsset$.next(asset);
    }
    else {
      this.selectedAsset$.next(this._EMPTY_ITEM);
    }
    this.selected.next(asset);
  }
}
