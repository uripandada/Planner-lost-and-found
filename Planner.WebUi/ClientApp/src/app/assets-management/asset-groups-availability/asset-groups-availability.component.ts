import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { AssetAvailability, AssetAvailabilityItem, AssetData, AssetDetailsGroupData, AssetGridItemData, AssetGroupAvailability, AssetManagementClient, DispatchAssetFromWarehouseCommand, GetAssetAvailabilityAndUsageQuery, GetListOfWarehousesQuery, GetPageOfAssetsQuery, InsertAssetGroupCommand, InsertWarehouseCommand, PageOfOfAssetGridItemData, ProcessResponse, ProcessResponseOfGuid, ReceiveAssetToWarehouseCommand, UpdateAssetGroupCommand, UpdateWarehouseCommand, WarehouseData, WarehouseDetailsData, WarehouseManagementClient } from '../../core/autogenerated-clients/api-client';
import { HotelService } from '../../core/services/hotel.service';
import { LoadingService } from '../../core/services/loading.service';

@Component({
  selector: 'app-asset-groups-availability',
  templateUrl: './asset-groups-availability.component.html',
})
export class AssetGroupsAvailabilityComponent implements OnInit {

  @Input() assetGroupId: string = null;
  @Input() assetId: string = null;

  assetGroups$: BehaviorSubject<AssetGroupAvailability[]> = new BehaviorSubject<AssetGroupAvailability[]>([]); 
  filteredAssetGroups$: BehaviorSubject<AssetGroupAvailability[]> = new BehaviorSubject<AssetGroupAvailability[]>([]); 
  areAssetGroupsLoaded$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  totalNumberOfAssets$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  numberOfFilteredAssets$: BehaviorSubject<number> = new BehaviorSubject<number>(0);

  assetList$: BehaviorSubject<{
    id: string,
    name: string,
    imageUrl: string,
    isBulk: boolean,
    canBeReceived: boolean, // only for non bulk assets - if the total quantity sum in the system is 0
    canBeDispatched: boolean, // only for non bulk assets - if the total quantity sum in the system is 1
  }[]> = new BehaviorSubject<{ id: string, name: string, imageUrl: string, isBulk: boolean, canBeReceived: boolean, canBeDispatched: boolean }[]>([]);
  warehouseList$: BehaviorSubject<{ id: string, name: string }[]> = new BehaviorSubject<{ id: string, name: string }[]>([]);
  filteredWarehouseList$: BehaviorSubject<{ id: string, name: string }[]> = new BehaviorSubject<{ id: string, name: string }[]>([]);
  

  isReceiveAssetPopupShown$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  isDispatchAssetPopupShown$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  isFilterShown$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  isReceiveButtonShown$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  isSaving$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  
  loading: LoadingService;

  filterForm: FormGroup;
  receiveAssetForm: FormGroup;
  dispatchAssetForm: FormGroup;
  noImageBackgroundUrl: string = "assets/images/no_image_400x400.jpg";

  sorts: { key: string, value: string }[] = [
    { key: "NAME_ASC", value: "From A to Z"},
    { key: "NAME_DESC", value: "From Z to A"},
  ];

  constructor(
    private _formBuilder: FormBuilder,
    private _toastr: ToastrService,
    private _hotelService: HotelService,
    private _warehouseClient: WarehouseManagementClient,
    private _assetsClient: AssetManagementClient) {
    this.loading = new LoadingService();
  }

  ngOnInit(): void {
    this.filterForm = this._formBuilder.group({
      sortKey: ["NAME_ASC"],
      keywords: [""],
    });
    this.receiveAssetForm = this._formBuilder.group({
      assetId: [null, [Validators.required]],
      warehouseId: [null, [Validators.required]],
      quantity: [0, [Validators.required]],
      note: [null],
    });
    this.dispatchAssetForm = this._formBuilder.group({
      assetId: [null, [Validators.required]],
      warehouseId: [null, [Validators.required]],
      quantity: [0, [Validators.required]],
      note: [null],
    });

    this.filterForm.valueChanges
      .pipe(
        debounceTime(250)
      )
      .subscribe(values => {
        //var assets = [...this.assets$.value];

        //if (values.sortKey === "NAME_ASC") {
        //  assets = assets.sort((a: AssetGridItemData, b: AssetGridItemData) => {
        //    return (a.name > b.name ? 1 : -1);
        //  });
        //}
        //else if (values.sortKey === "NAME_DESC") {
        //  assets = assets.sort((a: AssetGridItemData, b: AssetGridItemData) => {
        //    return (a.name > b.name ? -1 : 1);
        //  });
        //}

        //if (values.keywords) {
        //  assets = assets.filter((a: AssetGridItemData) => a.name.toLowerCase().indexOf(values.keywords.toLowerCase()) >= 0);
        //}

        //this.filteredAssets$.next(assets);
      });

    let getWarehousesRequest: GetListOfWarehousesQuery = new GetListOfWarehousesQuery({
      hotelId: null
    });
    this._warehouseClient.getListOfWarehouses(getWarehousesRequest).subscribe((response: WarehouseData[]) => {
      this.warehouseList$.next(response.map(w => { return { id: w.id, name: w.name }; }));
      this._loadAllAssetGroupAvailabilities();
    });
  }

  showReceiveAnyAssetToWarehousePopup() {
    if (this.assetList$.value.length === 1) {
      let asset = this.assetList$.value[0];

      this.receiveAssetForm.controls.assetId.setValue(asset.id);
      this.receiveAssetForm.controls.assetId.disable();

      if (!asset.isBulk) {
        this.receiveAssetForm.controls.quantity.setValue(1);
        this.receiveAssetForm.controls.quantity.disable();
      }
      else {
        this.receiveAssetForm.controls.quantity.setValue(0);
        this.receiveAssetForm.controls.quantity.enable();
      }
    }
    else {
      this.receiveAssetForm.controls.assetId.setValue(null);
      this.receiveAssetForm.controls.assetId.enable();
      this.receiveAssetForm.controls.quantity.setValue(0);
      this.receiveAssetForm.controls.quantity.enable();
    }

    if (this.warehouseList$.value.length === 1) {
      let warehouse = this.warehouseList$.value[0];
      this.receiveAssetForm.controls.warehouseId.setValue(warehouse.id);
      this.receiveAssetForm.controls.warehouseId.disable();
    }
    else {
      this.receiveAssetForm.controls.warehouseId.setValue(null);
      this.receiveAssetForm.controls.warehouseId.enable();
    }

    this.receiveAssetForm.controls.note.setValue(null);

    this.receiveAssetForm.markAsUntouched({ onlySelf: false });
    this.receiveAssetForm.markAsPristine({ onlySelf: false });

    this.isReceiveAssetPopupShown$.next(true);
  }

  assignToRooms() {

  }

  showMoveAssetToAnotherWarehousePopup(asset: AssetAvailability, availability: AssetAvailabilityItem) {

  }

  showDispatchAssetFromWarehousePopup(asset: AssetAvailability, availability: AssetAvailabilityItem) {
    this.dispatchAssetForm.controls.assetId.setValue(asset.id);
    this.dispatchAssetForm.controls.assetId.disable();

    if (asset.isBulk) {
      this.dispatchAssetForm.controls.quantity.setValue(0);
      this.dispatchAssetForm.controls.quantity.enable();
    }
    else {
      this.dispatchAssetForm.controls.quantity.setValue(1);
      this.dispatchAssetForm.controls.quantity.disable();
    }

    if (availability.typeKey == "WAREHOUSE") {
      this.dispatchAssetForm.controls.warehouseId.setValue(availability.id);
      this.dispatchAssetForm.controls.warehouseId.disable();
    }
    else {
      this.dispatchAssetForm.controls.warehouseId.setValue(null);
      this.dispatchAssetForm.controls.warehouseId.enable();
    }

    this.dispatchAssetForm.markAsUntouched({ onlySelf: false });
    this.dispatchAssetForm.markAsPristine({ onlySelf: false });

    this.isDispatchAssetPopupShown$.next(true);
  }

  showReceiveAssetToWarehousePopup(asset: AssetAvailability, availability: AssetAvailabilityItem) {
    this.receiveAssetForm.controls.assetId.setValue(asset.id);
    this.receiveAssetForm.controls.assetId.disable();

    if (asset.isBulk) {
      this.receiveAssetForm.controls.quantity.setValue(0);
      this.receiveAssetForm.controls.quantity.enable();
    }
    else {
      this.receiveAssetForm.controls.quantity.setValue(1);
      this.receiveAssetForm.controls.quantity.disable();
    }

    if (availability.typeKey == "WAREHOUSE") {
      this.receiveAssetForm.controls.warehouseId.setValue(availability.id);
      this.receiveAssetForm.controls.warehouseId.disable();
    }
    else {
      this.receiveAssetForm.controls.warehouseId.setValue(null);
      this.receiveAssetForm.controls.warehouseId.enable();
    }

    this.receiveAssetForm.markAsUntouched({ onlySelf: false });
    this.receiveAssetForm.markAsPristine({ onlySelf: false });

    this.isReceiveAssetPopupShown$.next(true);
  }

  hideReceiveAssetPopup() {
    this.isReceiveAssetPopupShown$.next(false);
  }

  hideDispatchAssetPopup() {
    this.isDispatchAssetPopupShown$.next(false);
  }

  confirmReceiveAssetToWarehouse() {
    if (!this.receiveAssetForm.valid) {
      this.receiveAssetForm.markAllAsTouched();
      this.receiveAssetForm.markAsDirty({ onlySelf: false });
      this._toastr.error("Fix form errors before submitting.");
      return;
    }

    this.isSaving$.next(true);
    this.loading.start();

    let formValues = this.receiveAssetForm.getRawValue();
    let request: ReceiveAssetToWarehouseCommand = new ReceiveAssetToWarehouseCommand({
      assetId: formValues.assetId,
      quantity: formValues.quantity,
      warehouseId: formValues.warehouseId,
      note: formValues.note,
    });

    this._warehouseClient.receiveAssetToWarehouse(request).subscribe((response: ProcessResponse) => {
      if (response.hasError) {
        this._toastr.error(response.message);
        this.isSaving$.next(false);
        this.loading.stop();
        return;
      }


      this._toastr.success(response.message);
      this.isSaving$.next(false);
      this.loading.stop();
      this.isReceiveAssetPopupShown$.next(false);
      this._loadAllAssetGroupAvailabilities();
    },
      (error: Error) => {
        this._toastr.error(error.message);
        this.isSaving$.next(false);
        this.loading.stop();
      });
  }

  confirmDispatchAssetFromWarehouse() {
    if (!this.dispatchAssetForm.valid) {
      this.dispatchAssetForm.markAllAsTouched();
      this.dispatchAssetForm.markAsDirty({ onlySelf: false });
      this._toastr.error("Fix form errors before submitting.");
      return;
    }

    this.isSaving$.next(true);
    this.loading.start();

    let formValues = this.dispatchAssetForm.getRawValue();
    let request: DispatchAssetFromWarehouseCommand = new DispatchAssetFromWarehouseCommand({
      assetId: formValues.assetId,
      quantity: formValues.quantity,
      warehouseId: formValues.warehouseId,
      note: formValues.note,
    });

    this._warehouseClient.dispatchAssetFromWarehouse(request).subscribe((response: ProcessResponse) => {
      if (response.hasError) {
        this._toastr.error(response.message);
        this.isSaving$.next(false);
        this.loading.stop();
        return;
      }


      this._toastr.success(response.message);
      this.isSaving$.next(false);
      this.loading.stop();
      this.isDispatchAssetPopupShown$.next(false);
      this._loadAllAssetGroupAvailabilities();
    },
      (error: Error) => {
        this._toastr.error(error.message);
        this.isSaving$.next(false);
        this.loading.stop();
      });
  }

  private _loadAllAssetGroupAvailabilities() {
    this.loading.start();
    let query: GetAssetAvailabilityAndUsageQuery = new GetAssetAvailabilityAndUsageQuery({
      assetGroupId: this.assetGroupId,
      assetId: this.assetId,
    });
    this._assetsClient.getAssetAvailabilityAndUsage(query).subscribe((response: AssetGroupAvailability[]) => {
      this.assetGroups$.next(response);
      this.filteredAssetGroups$.next(response);
      this.numberOfFilteredAssets$.next(response.length);
      this.totalNumberOfAssets$.next(response.length);

      let assets: { id: string, name: string, imageUrl: string, isBulk: boolean, canBeReceived: boolean, canBeDispatched: boolean }[] = [];
      for (let group of response) {
        for (let asset of group.assets) {
          assets.push({
            id: asset.id,
            imageUrl: asset.imageUrl,
            name: asset.name,
            canBeDispatched: false,
            canBeReceived: false,
            isBulk: asset.isBulk,
          });
        }
      }

      this.assetList$.next(assets);
      this.areAssetGroupsLoaded$.next(true);

      // There are two isSimple flags:
      // assetGroup.isSimple == true -> the asset group is just a dummy and not in use.
      // assetGroup.isSimple == false -> the explicit asset group exists and is in use.
      // assetGroup.assets[x].isBulk == true ->
      // assetGroup.assets[x].isBulk == false ->
      if (response.length === 0) {
        this.isFilterShown$.next(false);
        this.isReceiveButtonShown$.next(true);
      }
      else if (response.length === 1) {
        let assetGroup = response[0];
        let isSimpleAssetGroup = assetGroup.isSimple;

        this.isFilterShown$.next(!isSimpleAssetGroup);
        if (isSimpleAssetGroup) {
          if (!assetGroup.assets || assetGroup.assets.length === 0) {
            this.isReceiveButtonShown$.next(true);
          }
          else {
            let asset = assetGroup.assets[0];

            if (asset.isBulk) {
              this.isReceiveButtonShown$.next(true);
            }
            else {
              this.isReceiveButtonShown$.next(asset.availableQuantity + asset.reservedQuantity + asset.inUseQuantity === 0);
            }
          }
        }
        else {
          this.isReceiveButtonShown$.next(true);
        }
      }
      else {
        this.isFilterShown$.next(true);
        this.isReceiveButtonShown$.next(true);
      }

      this.loading.stop();
    });

  }

  //selectAsset(asset: AssetGridItemData) {
  //  if (asset) {
  //    this.selectedAsset$.next(asset);
  //  }
  //  else {
  //    this.selectedAsset$.next(this._EMPTY_ITEM);
  //  }
  //  this.selected.next(asset);
  //}
}
