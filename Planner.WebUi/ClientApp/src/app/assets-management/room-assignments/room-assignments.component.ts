import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';
import { FormArray, FormGroup, FormBuilder } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject } from 'rxjs';
import { AssetManagementClient, AssetRoomAssignmentsViewModel, GetAssetRoomAssignmentsQuery, HotelItemData } from '../../core/autogenerated-clients/api-client';
import { HotelService } from '../../core/services/hotel.service';
import { LoadingService } from '../../core/services/loading.service';

@Component({
  selector: 'app-room-assignments',
  templateUrl: './room-assignments.component.html',
  styleUrls: ['./room-assignments.component.scss']
})
export class RoomAssignmentsComponent implements OnInit, OnChanges {

  @Input() assetId: string;
  @Input() usesModels: boolean = false;
  @Input() models = [];

  public hotels: Array<HotelItemData>;

  public assetRoomAssignments$: BehaviorSubject<AssetRoomAssignmentsViewModel> = new BehaviorSubject<AssetRoomAssignmentsViewModel>(null);
  public areAssetRoomAssignmentsLoaded$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  public selectedAssetModel$: BehaviorSubject<any> = new BehaviorSubject<any>({ availableQuantity: 0, id: null, name: null, roomAssignments: [] });
  //public filteredFormGroups$: BehaviorSubject<Array<FormGroup>> = new BehaviorSubject<Array<FormGroup>>([]);

  sorts: Array<{ key: string, value: string }> = [
    { key: 'NAME_ASC', value: 'Name A to Z' },
    { key: 'NAME_DESC', value: 'Name Z to A' },
    { key: 'IS_SELECTED_ASC', value: 'Selected first' },
    { key: 'IS_SELECTED_DESC', value: 'Selected last' },
  ];

  filterForm: FormGroup;

  constructor(private _assetManagementClient: AssetManagementClient, private _formBuilder: FormBuilder,
    private _toastr: ToastrService, public loading: LoadingService, private _hotelService: HotelService) {
  }
  ngOnInit(): void {
    this.hotels = this._hotelService.getHotels();

    this.filterForm = this._formBuilder.group({
      keywords: [],
      sortKey: ['NAME_ASC'],
      hotelId: [this._hotelService.getSelectedHotelId()]
    });

    this.filterForm.controls.hotelId.valueChanges.subscribe((hotelId: string) => {
      this.loading.start();
      this._hotelService.selectHotelId(hotelId);
      this._loadAssetRoomAssignments();
    });

    this.filterForm.valueChanges.subscribe(() => {
      this.filter();
    });

    this.filter();

    this._loadAssetRoomAssignments();
  }

  ngOnChanges(changes: SimpleChanges): void {
  }


  public toggleRoomAssignment(roomId: string) {
  }

  public filter() {
  }

  public save() {
  }

  public cancel() {
  }
  selectAssetModel(model) {
    this.selectedAssetModel$.next(model);
    this._loadAssetRoomAssignments();
  }
  private _loadAssetRoomAssignments() {
    this.loading.start();

    if (!this.selectedAssetModel$.value || !this.selectedAssetModel$.value.id) {
      if (this.usesModels && this.models.length > 0) {
        this.selectedAssetModel$.next(this.models[0]);
      }
      else {
        this.selectedAssetModel$.next({ availableQuantity: 0, id: null, name: null, roomAssignments: [] });
      }
    }

    let assetModelId: string = this.selectedAssetModel$.value ? this.selectedAssetModel$.value.id : null;

    let query: GetAssetRoomAssignmentsQuery = new GetAssetRoomAssignmentsQuery({
      assetId: this.assetId,
      assetModelId: assetModelId,
      hotelId: this._hotelService.getSelectedHotelId(),
      keywords: this.filterForm.controls.keywords.value,
    });

    this._assetManagementClient.getAssetRoomAssignments(query).subscribe(
      (response: AssetRoomAssignmentsViewModel) => {
        if (!this.selectedAssetModel$.value || !this.selectedAssetModel$.value.id) {
          if (this.usesModels && this.models.length > 0) {
            this.selectedAssetModel$.next(this.models[0]);
          }
        }

        this.assetRoomAssignments$.next(response);
        this.areAssetRoomAssignmentsLoaded$.next(true);
      },
      (error: Error) => { this._toastr.error(error.message); },
      () => { this.loading.stop(); }
    );
  }
}
