import { Component, OnInit } from '@angular/core';
import { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject } from 'rxjs';
import { AssetGridItemData, AssetManagementClient, ExportAssetsClient, FileResponse, GetPageOfAssetsQuery, InsertAssetCommand, InsertAssetFileData, InsertAssetTagData, PageOfOfAssetGridItemData, ProcessResponseOfGuid, TagItemData } from '../core/autogenerated-clients/api-client';
import { LoadingService } from '../core/services/loading.service';
import { FileDetails, FilesChangedData } from '../shared/components/file-upload/file-upload.component';
import { TagItem } from '../shared/components/tags-multiselect/tags-multiselect.component';
import { HttpClient } from '@angular/common/http';
import { FileSaverService } from 'ngx-filesaver';

@Component({
  selector: 'app-assets-management',
  templateUrl: './assets-management.component.html',
  styleUrls: ['./assets-management.component.scss']
})
export class AssetsManagementComponent implements OnInit {
  sorts = [
    { key: 'NAME_ASC', value: 'Name A to Z' },
    { key: 'NAME_DESC', value: 'Name Z to A' },
    { key: 'CREATED_AT_ASC', value: 'Oldest first' },
    { key: 'CREATED_AT_DESC', value: 'Newest first' },
  ];
  tags: Array<TagItem> = [];

  filterForm: FormGroup;
  assetForm: FormGroup;

  selectedFiles: Array<FilesChangedData>;

  currentlyUploadingFiles$: BehaviorSubject<Array<FileDetails>> = new BehaviorSubject<Array<FileDetails>>([]);
  temporaryUploadedFiles$: BehaviorSubject<Array<FileDetails>> = new BehaviorSubject<Array<FileDetails>>([]);
  uploadedFiles$: BehaviorSubject<Array<FileDetails>> = new BehaviorSubject<Array<FileDetails>>([]);

  showCreateNewAssetPopup$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);

  assets$: BehaviorSubject<Array<AssetGridItemData>> = new BehaviorSubject<Array<AssetGridItemData>>([]);
  loadedNumberOfAssets$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  totalNumberOfAssets$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  showLoadMore$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);

  private _pageSize: number = 50;

  constructor(
    private _route: ActivatedRoute,
    private _router: Router,
    private _formBuilder: FormBuilder,
    public loading: LoadingService,
    private _toastr: ToastrService,
    private _assetManagementClient: AssetManagementClient,
    private _exportAssetsClient: ExportAssetsClient,
    private _fileSaver: FileSaverService,
    private httpClient: HttpClient) { }

  ngOnInit(): void {
    this.tags = this._route.snapshot.data.tags.map((t: TagItemData) => <TagItem>{ key: t.key, value: t.value });

    this.assetForm = this._formBuilder.group({
      name: ['', Validators.required],
      tags: this._formBuilder.array([]),
      //isAvailableToMaintenance: [false],
      //isAvailableToHousekeeping: [false],
      availableQuantity: [0],
      usesModels: [false],
      //models: this._createAssetModelsFormArray([])
    });

    this.filterForm = this._formBuilder.group({
      sortKey: ['NAME_ASC'],
      keywords: ['']
    });

    this.filterForm.valueChanges.subscribe(formValue => {
      this._filter(0);
    });

    this._filter(0);
  }

  onNewAssetModelAdded(): void {
    //(this.assetForm.controls.models as FormArray).push(this._createAssetModelForm(new AssetModelData({
    //  availableQuantity: 1,
    //  id: null,
    //  name: null,
    //  roomAssignments: []
    //})));
  }

  loadMore() {
    this._filter(this.assets$.value.length);
  }

  showCreateNewAssignmentPopup() {
    this.showCreateNewAssetPopup$.next(true);
  }

  hideCreateNewAssignmentPopup() {
    this.showCreateNewAssetPopup$.next(false);
  }

  addTag(tag: TagItem) {

    var tagFormArrayValue = this.assetForm.controls.tags.value;
    var existingTagFormArrayItem = tagFormArrayValue.find(a => a.key === tag.key);
    if (!existingTagFormArrayItem) {
      (this.assetForm.controls.tags as FormArray).push(this._formBuilder.group({
        key: tag.key,
        value: tag.value
      }));
    }

    var existingTag = this.tags.find(t => t.key === tag.key);
    if (!existingTag) {

      this.tags.push(tag);
    }
  }

  removeTag(tagIndex: number) {
    (this.assetForm.controls.tags as FormArray).removeAt(tagIndex);
  }

  save() {
    //if (this.assetForm.invalid) {
    //  this._toastr.error("You have to fix form errors before you can continue.");
    //  return;
    //}

    //this.loading.start();

    //var assetFormValue = this.assetForm.getRawValue();

    //this.selectedFiles;

    //let insertCommand: InsertAssetCommand = new InsertAssetCommand({
    //  //isAvailableToHousekeeping: assetFormValue.isAvailableToHousekeeping,
    //  //isAvailableToMaintenance: assetFormValue.isAvailableToMaintenance,
    //  name: assetFormValue.name,
    //  tags: assetFormValue.tags.map(t => new InsertAssetTagData(t)),
    //  files: this.selectedFiles.map(f => new InsertAssetFileData({
    //    fileName: f.fileName
    //  })),
    //  availableQuantity: +assetFormValue.availableQuantity,
    //  usesModels: assetFormValue.usesModels,
    //  models: assetFormValue.models.map(m => new InsertAssetModelData({
    //    files: [],
    //    availableQuantity: +m.availableQuantity,
    //    //isAvailableToHousekeeping: m.isAvailableToHousekeeping,
    //    //isAvailableToMaintenance: m.isAvailableToMaintenance,
    //    name: m.name,
    //  }))
    //});

    //this._assetManagementClient.insertAsset(insertCommand).subscribe(
    //  (response: ProcessResponseOfGuid) => {
    //    if (response.hasError) {
    //      this._toastr.error(response.message);
    //    }

    //    this._toastr.success(response.message);
    //    this.hideCreateNewAssignmentPopup();
    //    this._filter(0);

    //    this.assetForm.controls.name.setValue('');
    //    (this.assetForm.controls.tags as FormArray).clear();
    //    //this.assetForm.controls.isAvailableToMaintenance.setValue(false);
    //    //this.assetForm.controls.isAvailableToHousekeeping.setValue(false);
    //    this.assetForm.controls.availableQuantity.setValue(0);
    //    this.currentlyUploadingFiles$.next([]);
    //    this.temporaryUploadedFiles$.next([]);
    //    this.uploadedFiles$.next([]);
    //  },
    //  (error: Error) => {
    //    this._toastr.error("Unable to save asset. " + error.message);
    //  },
    //  () => {
    //    this.loading.stop();
    //  });
  }

  uploadedFilesChanged(fileChanges: Array<FilesChangedData>) {
    this.selectedFiles = fileChanges;
  }

  createNew() {
    this._router.navigate(['/assets-management', 'asset']);
  }

  navigateToAssetDetails(asset: AssetGridItemData) {
    this._router.navigate(['/assets-management', 'asset', asset.assetGroupId ?? "00000000-0000-0000-0000-000000000000", asset.id ?? "00000000-0000-0000-0000-000000000000"]);
  }

  //private _createAssetModelsFormArray(models): FormArray {
  //  //return new FormArray(models.map(m => this._createAssetModelForm(m)));
  //}

  //private _createAssetModelForm(model): FormGroup {
  //  return this._formBuilder.group({
  //    name: [model.name, Validators.required],
  //    availableQuantity: [model.availableQuantity],
  //  });
  //}

  private _filter(skip: number) {
    let query: GetPageOfAssetsQuery = new GetPageOfAssetsQuery({
      skip: skip,
      take: this._pageSize,
      keywords: this.filterForm.controls.keywords.value,
      sortKey: this.filterForm.controls.sortKey.value,
      assetGroupId: null
    });
    this._assetManagementClient.getPageOfAssets(query).subscribe((response: PageOfOfAssetGridItemData) => {
      if (skip === 0) {
        this.assets$.next(response.items);
      }
      else {
        this.assets$.next([...this.assets$.value, ...response.items]);
      }
      this.loadedNumberOfAssets$.next(this.assets$.value.length);
      this.totalNumberOfAssets$.next(response.totalNumberOfItems);

      this.showLoadMore$.next(this.loadedNumberOfAssets$.value < this.totalNumberOfAssets$.value);
    });
  }

  openAssetImportPreview() {
    this._router.navigate(['assets-management', 'asset-import-preview']);
  }

  initiateAssetExport() {
    this._exportAssetsClient.exportAssetsFromDatabase().subscribe((response: FileResponse) => {
      this._fileSaver.save(response.data, response.fileName);
    });
  }

  openAssetActionsImportPreview() {
    this._router.navigate(['assets-management', 'asset-actions-import-preview']);
  }

  initiateAssetActionsExport() {
    this._exportAssetsClient.exportAssetActionsFromDatabase().subscribe((response: FileResponse) => {
      this._fileSaver.save(response.data, response.fileName);
    });
  }
}
