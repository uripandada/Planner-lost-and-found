import { HttpClient, HttpEvent } from '@angular/common/http';
import { Component, ElementRef, Inject, OnInit, Optional, ViewChild } from '@angular/core';
import { Router } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject } from 'rxjs';
import { API_BASE_URL, ImportPreviewAssetClient, ImportAssetsPreview, SaveImportPreviewAssetsCommand, ImportAssetPreview, ProcessResponseOfIEnumerableOfSaveAssetImportResult } from '../../core/autogenerated-clients/api-client';

@Component({
  selector: 'app-asset-import-preview',
  templateUrl: './asset-import-preview.component.html',
  styleUrls: ['./asset-import-preview.component.scss']
})
export class AssetImportPreviewComponent implements OnInit {
  @ViewChild('fileUpload') fileUpload: ElementRef;

  private _httpClient: HttpClient;

  fileName$: BehaviorSubject<string> = new BehaviorSubject<string>('');
  assetImportPreview$: BehaviorSubject<ImportAssetsPreview> = new BehaviorSubject<ImportAssetsPreview>(new ImportAssetsPreview({ hasError: false, fileName: '', message: '', assets: [], }));

  isDataPreviewGenerated$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  isDataPreviewErrorFree$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);
  isLoading$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);

  constructor(
    private _importAssetsClient: ImportPreviewAssetClient,
    private _router: Router,
    private _toastr: ToastrService,
    @Inject(HttpClient) httpClient: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this._httpClient = httpClient;
  }

  ngOnInit(): void {
  }

  cancelImport() {
    this._router.navigate(['assets-management']);
  }

  onFileSelected(event) {
    if (event.target.files.length > 0) {
      this.isLoading$.next(true);

      const file: File = event.target.files[0];
      this.fileName$.next(file.name);

      if (file.type !== "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" && file.type !== "application/vnd.ms-excel") {
        this._toastr.warning("Only CSV file types are supported for import.");
        return;
      }

      const formData: FormData = new FormData();
      formData.append(`file`, file);

      this._httpClient.post<any>(`/api/importpreviewasset/uploadassetsfromfile`, formData).subscribe(
        (response: ImportAssetsPreview) => {
          if (file !== null) {
            this.isDataPreviewGenerated$.next(true);
          }

          this.assetImportPreview$.next(response);

          if (response.hasError) {
            this._toastr.error(response.message);
            this.isDataPreviewErrorFree$.next(false);
          }
          else {

            let isDataPreviewErrorFree = true;
            for (let u of response.assets) {
              if (u.hasError) {
                isDataPreviewErrorFree = false;
                break;
              }
            }

            if (isDataPreviewErrorFree) {
              this.isDataPreviewErrorFree$.next(true);
              this._toastr.success(response.message);
            }
            else {
              this.isDataPreviewErrorFree$.next(false);
              this._toastr.info(response.message);
              this._toastr.warning("Problems detected with some assets. Please fix them and re-import the file.");
            }
          }

          this.fileUpload.nativeElement.value = "";
          this.isLoading$.next(false);
        }
      );
    }
  }

  saveAssets() {
    if (this.isDataPreviewGenerated$.value && this.isDataPreviewErrorFree$.value) {
      this.isLoading$.next(true);

      let command = new SaveImportPreviewAssetsCommand({
        assets: this.assetImportPreview$.value.assets.map(u => new ImportAssetPreview({
          alreadyExists: u.alreadyExists,
          hasError: u.hasError,
          isBulk: u.isBulk,
          assetGroupName: u.assetGroupName,
          assetImageName: u.assetImageName,
          assetName: u.assetName,
          assetQrCodeImageName: u.assetQrCodeImageName,
          assetTags: u.assetTags,
          message: u.message,
          serialNumber: u.serialNumber,
        })),
      });

      this._importAssetsClient.saveAssets(command).subscribe(
        (response: ProcessResponseOfIEnumerableOfSaveAssetImportResult) => {
          if (response.hasError) {
            this._toastr.error(response.message);

            let importAssetsPreview = new ImportAssetsPreview(this.assetImportPreview$.value);
            let assets = [...importAssetsPreview.assets];
            for (let ui of response.data) {
              if (ui.hasErrors) {
                let importUserPreview = assets.find(u =>
                  u.assetName === ui.assetName
                  &&
                  ((!u.assetGroupName && !ui.assetGroupName) || (u.assetGroupName && ui.assetGroupName && u.assetGroupName === ui.assetGroupName))
                );
                importUserPreview.hasError = true;
                importUserPreview.message = ui.message;
              }
            }

            importAssetsPreview.assets = assets;
            this.assetImportPreview$.next(importAssetsPreview);
            this.isDataPreviewErrorFree$.next(false);
          }
          else {
            this._router.navigate(['assets-management']).then(() => {
              this._toastr.success(response.message);
            });
          }
        },
        (error: Error) => { this._toastr.error(error.message); },
        () => { this.isLoading$.next(false); }
      );
    }
  }
}
