import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';
import { FormArray, FormGroup } from '@angular/forms';
import { TagItem } from '../../shared/components/tags-multiselect/tags-multiselect.component';
import { FilesChangedData, FileDetails } from '../../shared/components/file-upload/file-upload.component';
import { BehaviorSubject } from 'rxjs';
import { AssetData, AssetManagementClient, InsertAssetCommand, InsertAssetFileData, InsertAssetResponse, InsertAssetTagData, UpdateAssetCommand, UpdateAssetResponse } from '../../core/autogenerated-clients/api-client';
import { ToastrService } from 'ngx-toastr';
import { LoadingService } from '../../core/services/loading.service';
import { Message } from '@angular/compiler/src/i18n/i18n_ast';

@Component({
  selector: 'app-asset-edit-form',
  templateUrl: './asset-edit-form.component.html',
  styleUrls: ['./asset-edit-form.component.scss']
})
export class AssetEditFormComponent implements OnInit {
  @Input() assetForm: FormGroup;
  @Input() allTags: Array<TagItem> = [];
  @Input() assetGroupId: string = null;

  @Input() isInitiallyInEditMode: boolean = false;

  @Output() cancelled: EventEmitter<boolean> = new EventEmitter<boolean>();
  @Output() saved: EventEmitter<boolean> = new EventEmitter<boolean>();
  @Output() inserted: EventEmitter<InsertAssetResponse> = new EventEmitter<InsertAssetResponse>();
  @Output() updated: EventEmitter<UpdateAssetResponse> = new EventEmitter<UpdateAssetResponse>();
  @Output() filesChanged: EventEmitter<Array<FilesChangedData>> = new EventEmitter<Array<FilesChangedData>>();

  isSaving$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  isCreateNew$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);
  isInEditMode$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);

  showAssetTypeRadioButtons: boolean = false;

  mainImageFileDetails$: BehaviorSubject<FileDetails> = new BehaviorSubject<FileDetails>(null);
  qrCodeFileDetails$: BehaviorSubject<FileDetails> = new BehaviorSubject<FileDetails>(null);

  noImageBackgroundUrl: string = "assets/images/no_image_400x400.jpg";

  get primaryImageFormGroup(): FormGroup {
    return this.assetForm.get('primaryImageFormGroup') as FormGroup;
  }
  get qrCodeImageFormGroup(): FormGroup {
    return this.assetForm.get('qrCodeImageFormGroup') as FormGroup;
  }
  get tagsFormArray(): FormArray {
    return this.assetForm.get('tags') as FormArray;
  }

  loading: LoadingService;

  constructor(private _toastr: ToastrService, private _assetsClient: AssetManagementClient) {
    this.loading = new LoadingService();
  }

  ngOnInit(): void {
    this.isCreateNew$.next(!this.assetForm.controls.id.value || this.assetForm.controls.id.value === "00000000-0000-0000-0000-000000000000");
    this.isInEditMode$.next(this.isCreateNew$.value || this.isInitiallyInEditMode);

    this.showAssetTypeRadioButtons = this.isCreateNew$.value && this.isInEditMode$.value;

    let assetFormValues = this.assetForm.getRawValue();

    let mainImage = assetFormValues.primaryImageFormGroup;
    if (mainImage && mainImage.id) {
      this.mainImageFileDetails$.next({
        id: mainImage.id,
        isImage: mainImage.isImage,
        imageUrl: mainImage.url,
        displayText: mainImage.extension,
        fileName: mainImage.name,
      });
    }

    let qrCode = assetFormValues.qrCodeImageFormGroup;
    if (qrCode && qrCode.id) {
      this.qrCodeFileDetails$.next({
        id: qrCode.id,
        isImage: qrCode.isImage,
        imageUrl: qrCode.url,
        displayText: qrCode.extension,
        fileName: qrCode.name,
      });
    }
  }

  save() {
    if (!this.assetForm.valid) {
      this._toastr.error("Can't save asset while there are form errors.");
      this.assetForm.markAllAsTouched();
      this.assetForm.markAsDirty({ onlySelf: false });
      return;
    }

    this.isSaving$.next(true);
    this.loading.start();

    let assetFormValues = this.assetForm.getRawValue();

    if (this.isCreateNew$.value) {
      let primaryImageFile: InsertAssetFileData = null;
      let qrCodeFile: InsertAssetFileData = null;

      if (assetFormValues.primaryImageFormGroup && assetFormValues.primaryImageFormGroup.name) {
        primaryImageFile = new InsertAssetFileData({
          fileName: assetFormValues.primaryImageFormGroup.name,
        });
      }
      if (assetFormValues.qrCodeImageFormGroup && assetFormValues.qrCodeImageFormGroup.name) {
        qrCodeFile = new InsertAssetFileData({
          fileName: assetFormValues.qrCodeImageFormGroup.name,
        });
      }

      var insertRequest: InsertAssetCommand = new InsertAssetCommand({
        isSimpleAsset: this.assetGroupId === null,
        isBulk: assetFormValues.isBulk,
        assetGroupId: this.assetGroupId,
        assetSubGroupId: null,
        name: assetFormValues.name,
        primaryImageFile: primaryImageFile,
        qrCodeFile: qrCodeFile,
        serialNumber: assetFormValues.serialNumber,
        tags: assetFormValues.tags.map(t => new InsertAssetTagData({ key: t.key, value: t.value })),
      });

      this._assetsClient.insertAsset(insertRequest).subscribe((response: InsertAssetResponse) => {
        if (response.hasError) {
          this._toastr.error(response.message);
          this.loading.stop();
          this.isSaving$.next(false);
          return;
        }

        this.assetForm.controls.id.setValue(response.assetId);
        if (response.primaryImageFileId) {
          this.primaryImageFormGroup.controls.id.setValue(response.primaryImageFileId);
        }
        if (response.qrCodeFileId) {
          this.qrCodeImageFormGroup.controls.id.setValue(response.qrCodeFileId);
        }

        this.loading.stop();
        this._toastr.success(response.message);
        this.isCreateNew$.next(false);
        this.isInEditMode$.next(false);
        this.isSaving$.next(false);
        this.inserted.next(response);
        this.assetGroupId = response.assetGroupId;
      },
        (error: Error) => {
          this.loading.stop();
          this.isSaving$.next(false);
        },
        () => {
          this.isSaving$.next(false);
          this.loading.stop();
        }
      );
    }
    else {
      let primaryImageFile: InsertAssetFileData = null;
      let qrCodeFile: InsertAssetFileData = null;

      if (assetFormValues.primaryImageFormGroup && assetFormValues.primaryImageFormGroup.name) {
        primaryImageFile = new InsertAssetFileData({
          fileName: assetFormValues.primaryImageFormGroup.name,
        });
      }
      if (assetFormValues.qrCodeImageFormGroup && assetFormValues.qrCodeImageFormGroup.name) {
        qrCodeFile = new InsertAssetFileData({
          fileName: assetFormValues.qrCodeImageFormGroup.name,
        });
      }

      var updateRequest: UpdateAssetCommand = new UpdateAssetCommand({
        id: assetFormValues.id,
        isBulk: assetFormValues.isBulk,
        assetGroupId: this.assetGroupId,
        assetSubGroupId: null,
        name: assetFormValues.name,
        primaryImageFile: primaryImageFile,
        qrCodeFile: qrCodeFile,
        serialNumber: assetFormValues.serialNumber,
        tags: assetFormValues.tags.map(t => new InsertAssetTagData({ key: t.key, value: t.value })),
      });


      this._assetsClient.updateAsset(updateRequest).subscribe((response: UpdateAssetResponse) => {
        if (response.hasError) {
          this._toastr.error(response.message);
          this.loading.stop();
          this.isSaving$.next(false);
          return;
        }

        if (response.primaryImageFileId) {
          this.primaryImageFormGroup.controls.id.setValue(response.primaryImageFileId);
        }
        if (response.qrCodeFileId) {
          this.qrCodeImageFormGroup.controls.id.setValue(response.qrCodeFileId);
        }

        this.updated.next(response);
        this.loading.stop();
        this._toastr.success(response.message);
        this.isCreateNew$.next(false);
        this.isInEditMode$.next(false);
        this.isSaving$.next(false);
      },
        (error: Error) => {
          this.loading.stop();
          this.isSaving$.next(false);
        },
        () => {
          this.isSaving$.next(false);
          this.loading.stop();
        }
      );
    }

    this.saved.next(true);
  }

  cancel() {
    if (!this.isCreateNew$.value) {
      this.isInEditMode$.next(false);
    }
    this.cancelled.next(true);
  }

  uploadedFilesChanged(filesChanges: Array<FilesChangedData>) {
    this.filesChanged.next(filesChanges);
  }

  onMainImageUploaded(file: FileDetails) {
    let imageForm: FormGroup = this.assetForm.controls.primaryImageFormGroup as FormGroup;
    imageForm.controls.id.setValue(file.id);
    imageForm.controls.isImage.setValue(file.isImage);
    imageForm.controls.url.setValue(file.imageUrl);
    imageForm.controls.extension.setValue(file.displayText);
    imageForm.controls.name.setValue(file.fileName);

    this.mainImageFileDetails$.next(file);
  }

  onMainImageRemoved(file: FileDetails) {
    let imageForm: FormGroup = this.assetForm.controls.primaryImageFormGroup as FormGroup;
    imageForm.controls.id.setValue(null);
    imageForm.controls.isImage.setValue(false);
    imageForm.controls.url.setValue(null);
    imageForm.controls.extension.setValue(null);
    imageForm.controls.name.setValue(null);

    this.mainImageFileDetails$.next(null);
  }

  onQrCodeImageUploaded(file: FileDetails) {
    let imageForm: FormGroup = this.assetForm.controls.qrCodeImageFormGroup as FormGroup;
    imageForm.controls.id.setValue(file.id);
    imageForm.controls.isImage.setValue(file.isImage);
    imageForm.controls.url.setValue(file.imageUrl);
    imageForm.controls.extension.setValue(file.displayText);
    imageForm.controls.name.setValue(file.fileName);

    this.qrCodeFileDetails$.next(file);
  }

  onQrCodeImageRemoved(file: FileDetails) {
    let imageForm: FormGroup = this.assetForm.controls.qrCodeImageFormGroup as FormGroup;
    imageForm.controls.id.setValue(null);
    imageForm.controls.isImage.setValue(false);
    imageForm.controls.url.setValue(null);
    imageForm.controls.extension.setValue(null);
    imageForm.controls.name.setValue(null);

    this.qrCodeFileDetails$.next(null);
  }

  switchToEditMode() {
    this.isInEditMode$.next(true);
  }

  //deleteAssetModel(modelIndex) {
  //  this.models.removeAt(modelIndex);
  //}

  //public addNewAssetModel() {
  //  //(this.assetModelsForm.controls.models as FormArray).push(this._createAssetModelForm());
  //  //this.selectedAssetModel$.next(new AssetModelData({ id: '-1', availableQuantity: 0, name: "N/A", roomAssignments: [] }));
  //  //this._setShowRoomAssignments();
  //  this.newAssetModelAdded.next(true);
  //}


}







//assetFormGroup
//    id: [{ value: asset.id, disabled: true }],
//    name: [asset.name, Validators.required],
//    serialNumber: [asset.serialNumber],
//    isBulk: [asset.isBulk],
//    tags: this._formBuilder.array(asset.tags.map(t => this._formBuilder.group({ key: [t.key], value: [t.value] }))),
//    primaryImageFormGroup: this._createAssetFileFormGroup(asset.imageFileData),
//    qrCodeImageFormGroup: this._createAssetFileFormGroup(asset.qrCodeFileData),

//assetFileFormGroup
//    id: [{ value: file.id, disabled: true }],
//    name: [file.name, Validators.required],
//    extension: [file.extension, Validators.required],
//    isImage: [file.isImage, Validators.required],
//    isPrimaryImage: [file.isPrimaryImage, Validators.required],
//    isQrCodeImage: [file.isQrCodeImage, Validators.required],
//    url: [file.url, Validators.required],
