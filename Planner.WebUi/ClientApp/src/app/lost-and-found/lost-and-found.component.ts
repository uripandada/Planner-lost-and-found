import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { BehaviorSubject } from 'rxjs';
import { GetLostAndFoundListQuery, LostAndFoundClient, LostAndFoundListItem, LostAndFoundModel, LostAndFoundStatus, TypeOfLoss } from '../core/autogenerated-clients/api-client';
import * as moment from 'moment';
import { LoadingService } from '../core/services/loading.service';
import { ToastrService } from 'ngx-toastr';

@Component({
  selector: 'app-lost-and-found',
  templateUrl: './lost-and-found.component.html',
  styleUrls: ['./lost-and-found.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush
})

export class LostAndFoundComponent implements OnInit {

  filterForm: FormGroup;
  itemsList: BehaviorSubject<LostAndFoundListItem[]> = new BehaviorSubject<LostAndFoundListItem[]>(null);
  selectedItem: BehaviorSubject<LostAndFoundModel> = new BehaviorSubject<LostAndFoundModel>(null);
  areDetailsDisplayed$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);

  loadedNumber$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  totalNumber$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  showLoadMore$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);


  public statuses: any;
  statusMappings: { [index: number]: string } = {};

  constructor(
    private formBuilder: FormBuilder,
    public loading: LoadingService,
    private lostAndFoundClient: LostAndFoundClient,
    private toastr: ToastrService
  ) { }

  ngOnInit(): void {
    this.filterForm = this.formBuilder.group({
      keywords: [''],
      dateFrom: [''],
      dateTo: ['']
    });

    this.filterForm.valueChanges.subscribe(
      value => {
        this.reloadList(true);
      }
    );

    this.reloadList(true);

    this.statusMappings = {};
    this.statusMappings[LostAndFoundStatus.WaitingRoomMaid] = "Waiting Room Maid";
    this.statusMappings[LostAndFoundStatus.Unclaimed] = "Unclaimed";
    this.statusMappings[LostAndFoundStatus.ClientContacted] = "Client Contacted";
    this.statusMappings[LostAndFoundStatus.ClientUndecided] = "Client Undecided";
    this.statusMappings[LostAndFoundStatus.WaitingForClientReturn] = "Waiting For Client Return";
    this.statusMappings[LostAndFoundStatus.WaitingForShipment] = "Waiting For Shipment";
    this.statusMappings[LostAndFoundStatus.OTShipped] = "OT Shipped";
    this.statusMappings[LostAndFoundStatus.WaitingForHandDelivered] = "Waiting For Hand Delivered";
    this.statusMappings[LostAndFoundStatus.HandDelivered] = "Hand Delivered";
    this.statusMappings[LostAndFoundStatus.Expired] = "Expired";
    this.statusMappings[LostAndFoundStatus.RefusedByTheClient] = "Refused By The Client";
    this.statusMappings[LostAndFoundStatus.BadReferencing] = "Bad Referencing";
    this.statuses = LostAndFoundStatus;

  }

  createNewLost() {
    const item = new LostAndFoundModel({
      id: null,
      lostOn: moment(),
      status: LostAndFoundStatus.WaitingRoomMaid,
      typeOfLoss: TypeOfLoss.Employee,
      address: '',
      firstName: '',
      lastName: '',
      phoneNumber: '',
      referenceNumber: '',
      description: ''
    });
    this.selectedItem.next(item);
    this.areDetailsDisplayed$.next(false);
    this.areDetailsDisplayed$.next(true);
  }

  // createNewFound() {
  //   const item = new LostAndFoundModel({
  //     id: null,
  //     lostOn: null,
  //     status: LostAndFoundStatus.WaitingRoomMaid,
  //     typeOfLoss: TypeOfLoss.Customer,
  //     address: '',
  //     firstName: '',
  //     lastName: '',
  //     phoneNumber: '',
  //     referenceNumber: '',
  //     description: '',
  //     roomId: null,
  //     reservationId: null
  //   });
  //   this.selectedItem.next(item);
  //   this.areDetailsDisplayed$.next(false);
  //   this.areDetailsDisplayed$.next(true);
  // }


  reloadList(reload: boolean) {
    if (reload) {
      this.loadedNumber$.next(0);
    }

    this.areDetailsDisplayed$.next(false);

    this.loading.start();
    this.lostAndFoundClient.getList(new GetLostAndFoundListQuery({
      skip: this.loadedNumber$.value,
      take: 20,
      dateFrom: this.filterForm.controls.dateFrom.value,
      dateTo: this.filterForm.controls.dateTo.value,
      keyword: this.filterForm.controls.keywords.value,
      loadFoundItems: false,
      loadLostItems: true,
    })).subscribe((response) => {
      if (response.isSuccess) {

        this.itemsList.next(response.data.items);
        this.totalNumber$.next(response.data.totalNumberOfItems);
        this.loadedNumber$.next(this.loadedNumber$.value + 20);
        this.showLoadMore$.next(this.loadedNumber$.value < this.totalNumber$.value);
      } else {
        this.toastr.error(response.message);
      }
      this.loading.stop();
    },
      (error) => {
        this.toastr.error(error);
        this.loading.stop();
      });
  }

  selectItem(item: LostAndFoundListItem) {
    this.lostAndFoundClient.getById(item.id).subscribe(
      (response) => {
        if (response.isSuccess) {
          this.selectedItem.next(response.data);
          this.areDetailsDisplayed$.next(true);
        } else {
          this.toastr.error('Error loading item.');
        }
      },
      (error) => {
        this.toastr.error(error);
      }
    );
  }

  onItemEditCancelled() {
    this.areDetailsDisplayed$.next(false);
    this.selectedItem.next(null);
  }

}
