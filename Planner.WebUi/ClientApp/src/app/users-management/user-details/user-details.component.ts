import { Component, EventEmitter, OnInit, Output } from '@angular/core';
import { FormBuilder, FormGroup, ValidationErrors, Validators } from '@angular/forms';
import { MatSelectChange } from '@angular/material/select';
import { ActivatedRoute, Router } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject } from 'rxjs';
import {
  GroupHierarchyData,
  HotelItemData,
  InsertUserCommand,
  ProcessResponse,
  ProcessResponseOfUserHierarchyData,
  RoleListModel,
  SaveAvatarData,
  SubGroupHierarchyData,
  UpdateUserCommand,
  UserManagementClient,
  UserModel
} from 'src/app/core/autogenerated-clients/api-client';
import { HotelService } from 'src/app/core/services/hotel.service';
import { LoadingService } from 'src/app/core/services/loading.service';
import { languages } from 'src/app/shared/constants/languages';
import { MustMatch } from 'src/app/shared/helpers/must-match-validator';
import { ColorService } from '../../core/services/color.service';
import { AvatarUploadData } from '../../shared/components/avatar-upload/avatar-upload-data';

@Component({
  selector: 'app-user-details',
  templateUrl: './user-details.component.html',
  styleUrls: ['./user-details.component.scss']
})
export class UserDetailsComponent implements OnInit {

  languages = languages

  constructor(
    private router: Router,
    private route: ActivatedRoute,
    private formBuilder: FormBuilder,
    private toastr: ToastrService,
    public loading: LoadingService,
    private userManagementClient: UserManagementClient,
    private hotelService: HotelService,
    private _colorService: ColorService,
  ) {
    this.hotels = this.hotelService.getHotels();
  }

  public isCreateNewUser = true;

  private groupId: string;
  private subGroupId: string;

  public userDetails: UserModel;
  public userForm: FormGroup;

  public groups: GroupHierarchyData[];
  public subGroups: BehaviorSubject<SubGroupHierarchyData[]> = new BehaviorSubject<SubGroupHierarchyData[]>(null);

  public hotels: HotelItemData[];
  public roles: RoleListModel[];

  public isSaving$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  public isEditMode$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);
  public hasAccessToAllHotels$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  public isHotelMultipleMode$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);
  public selectedHotels$: BehaviorSubject<HotelItemData[]> = new BehaviorSubject<HotelItemData[]>([]);

  isAvatarSet$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  hasAvatarChanged$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  avatar$: BehaviorSubject<AvatarUploadData> = new BehaviorSubject<AvatarUploadData>(null);

  @Output() userDeleted: EventEmitter<number> = new EventEmitter<number>();

  ngOnInit() {
    this.isCreateNewUser = this.route.snapshot.data.isCreateNewUser;

    this.groups = this.route.snapshot.data.groups.data.groups;
    this.groupId = this.route.snapshot.queryParams['groupId'];
    this.roles = this.route.snapshot.data.roles.data;

    if (this.isCreateNewUser) {
      this.subGroupId = this.route.snapshot.queryParams['subGroupId'];
      this.userDetails = this._generateNewUserModel(this.groupId, this.subGroupId);
      this.isEditMode$.next(true);
    } else {
      this.userDetails = this.route.snapshot.data.userDetails.data;
      this.subGroupId = this.userDetails.userSubGroupId;
    }

    if (this.groupId === '00000000-0000-0000-0000-000000000000' || this.groupId === null || this.groupId === undefined) {
      this.subGroups.next([]);
    } else {
      this.subGroups.next(this.groups.find(x => x.id === this.groupId).subGroups);
    }

    let role = this.roles.find(x => x.id === this.userDetails.roleId);
    let hotelIds: string[] = [];
    let hotelId: string = null;

    this._setHotelSelectionMode(role);

    if (role && role.hotelAccessTypeKey === "ALL") {
      hotelIds = this.userDetails.hotelIds ? this.userDetails.hotelIds : this.hotels.map(x => x.id);
      hotelId = null;
    }
    else if (role && role.hotelAccessTypeKey === "MULTIPLE") {
      hotelIds = this.userDetails.hotelIds ? this.userDetails.hotelIds : [];
      hotelId = this.userDetails.hotelIds && this.userDetails.hotelIds.length > 0 ? this.userDetails.hotelIds[0] : (this.hotels.length > 0 ? this.hotels[0].id : null);
    }
    else {
      hotelIds = [];
      hotelId = this.userDetails.hotelIds && this.userDetails.hotelIds.length > 0 ? this.userDetails.hotelIds[0] : (this.hotels.length > 0 ? this.hotels[0].id : null);
    }

    this.userForm = this.formBuilder.group({
      connectionName: [this.userDetails.connectionName],
      email: [this.userDetails.email],
      firstName: [this.userDetails.firstName, Validators.required],
      language: [!!this.userDetails.language ? this.userDetails.language : this.languages[0].key],
      lastName: [this.userDetails.lastName, Validators.required],
      password: [''],
      passwordConfirmation: [''],
      originalHotel: [this.userDetails.originalHotel],
      registrationNumber: [this.userDetails.registrationNumber],
      userName: [this.userDetails.userName, Validators.required],
      groupId: [this.groupId],
      subGroupId: [this.subGroupId],
      roleId: [this.userDetails.roleId, Validators.required],
      phoneNumber: [this.userDetails.phoneNumber],
      hotelIds: [hotelIds],
      hotelId: [hotelId],
      isSubGroupLeader: [this.userDetails.isSubGroupLeader],
      isActive: [this.userDetails.isActive],
      defaultAvatarColorHex: [this.userDetails.defaultAvatarColorHex && this.userDetails.defaultAvatarColorHex !== "#EEEEEE" ? this.userDetails.defaultAvatarColorHex : this._colorService.GenerateRandomPastelColorHex()],
    }, {
      validator: MustMatch('password', 'passwordConfirmation')
    });

    if (role && role.hotelAccessTypeKey === "ALL") {
      this.userForm.controls.hotelIds.disable();
    }

    if (hotelIds && hotelIds.length > 0) {
      this.selectedHotels$.next(this.hotels.filter(h => hotelIds.indexOf(h.id) >= 0));
    }

    this.userForm.controls.groupId.valueChanges.subscribe((selectedValue) => {
      if (selectedValue === null) {
        this.subGroups.next([]);
        this.userForm.controls.subGroupId.setValue(null);
      } else {
        let allSubGroups = this.groups.find(x => x.id === selectedValue).subGroups
        this.subGroups.next(allSubGroups);
        this.userForm.controls.subGroupId.setValue(null);
      }
    });

    this._setInitialAvatarData(this.userDetails.avatarImageUrl);

    this.userForm.controls.roleId.valueChanges.subscribe((selectedValue) => {
      this._changeRole(selectedValue);
    });

  }

  private _setHotelSelectionMode(role: RoleListModel) {
    if (role) {
      this.isHotelMultipleMode$.next(role.hotelAccessTypeKey === "MULTIPLE");
      this.hasAccessToAllHotels$.next(role.hotelAccessTypeKey === "ALL");
    }
    else {
      this.isHotelMultipleMode$.next(true);
      this.hasAccessToAllHotels$.next(false);
    }
  }

  private _changeRole(roleId: string) {
    if (!roleId) {
      return;
    }

    let role = this.roles.find(x => x.id === roleId);

    this._setHotelSelectionMode(role);

    if (role.hotelAccessTypeKey === "ALL") {
      this.userForm.controls.hotelIds.setValue(this.hotels.map(h => h.id));
      this.userForm.controls.hotelIds.disable();

      this.userForm.controls.hotelId.setValue(null);
      this.userForm.controls.hotelId.disable();
    }
    else if (role.hotelAccessTypeKey === "MULTIPLE") {
      this.userForm.controls.hotelIds.setValue([]);
      this.userForm.controls.hotelIds.enable();

      this.userForm.controls.hotelId.setValue(null);
      this.userForm.controls.hotelId.disable();
    }
    else {
      this.userForm.controls.hotelIds.setValue([]);
      this.userForm.controls.hotelIds.disable();

      this.userForm.controls.hotelId.setValue(this.hotels.length > 0 ? this.hotels[0].id : null);
      this.userForm.controls.hotelId.enable();
    }
  }

  removeSelectedHotel(hotelIndex) {
    let selectedHotels: HotelItemData[] = [...this.selectedHotels$.value];
    selectedHotels.splice(hotelIndex, 1)[0];

    this.userForm.controls.hotelIds.setValue(selectedHotels.map(h => h.id));
    this.selectedHotels$.next(selectedHotels);
  }

  save() {
    if (!this.userForm.valid) {
      this.toastr.error('Can\'t save user while there are form errors.');
      this.userForm.markAllAsTouched();
      this.userForm.markAsDirty({ onlySelf: false });
      return;
    }

    this.isSaving$.next(true);

    if (this.isCreateNewUser) {
      this.loading.start();

      const userFormValues = this.userForm.getRawValue();
      let role = this.roles.find(x => x.id === userFormValues.roleId);
      let hotelIds: string[] = [];

      if (role) {
        if (role.hotelAccessTypeKey === "SINGLE") {
          hotelIds = [userFormValues.hotelId];
        }
        else if (role.hotelAccessTypeKey === "ALL") {
          hotelIds = this.hotels.map(x => x.id);
        }
        else if (role.hotelAccessTypeKey === "MULTIPLE") {
          hotelIds = userFormValues.hotelIds;
        }
      }

      const insertUserRequest: InsertUserCommand = new InsertUserCommand({
        email: userFormValues.email,
        userName: userFormValues.userName,
        password: userFormValues.password,
        passwordConfirmation: userFormValues.passwordConfirmation,
        phoneNumber: userFormValues.phoneNumber,
        firstName: userFormValues.firstName,
        lastName: userFormValues.lastName,
        connectionName: userFormValues.connectionName,
        registrationNumber: userFormValues.registrationNumber,
        language: userFormValues.language,
        originalHotel: userFormValues.originalHotel,
        userSubGroupId: userFormValues.subGroupId,
        userGroupId: userFormValues.groupId,
        hotelIds: hotelIds,
        roleId: userFormValues.roleId,
        isSubGroupLeader: userFormValues.isSubGroupLeader,
        isActive: userFormValues.isActive,
        defaultAvatarColorHex: userFormValues.defaultAvatarColorHex,
      });

      if (this.isAvatarSet$.value) {
        insertUserRequest.avatarData = new SaveAvatarData({
          file: this.avatar$.value.file,
          fileName: this.avatar$.value.fileName,
          hasChanged: this.hasAvatarChanged$.value
        });
      }

      this.userManagementClient.insertUser(insertUserRequest).subscribe((response: ProcessResponseOfUserHierarchyData) => {
        if (response.hasError) {
          this.toastr.error(response.message);
          this._setFormValidationErrors(response, this.userForm);
          this.isSaving$.next(false);
          return;
        }

        this.isCreateNewUser = false;
        //this.userDetails = response.data;
        // this.isEditMode$.next(false);
        this.toastr.success(response.message);
        this.router.navigate(['users-management']);
        this.isSaving$.next(false);
      },
        (error) => {
          this.toastr.error(error);
          this.isSaving$.next(false);
          return;
        },
        () => {
          this.loading.stop();
          this.isSaving$.next(false);
        });
    } else {
      this.loading.start();

      const userFormValues = this.userForm.getRawValue();
      let role = this.roles.find(x => x.id === userFormValues.roleId);
      let hotelIds: string[] = [];

      if (role) {
        if (role.hotelAccessTypeKey === "SINGLE") {
          hotelIds = [userFormValues.hotelId];
        }
        else if (role.hotelAccessTypeKey === "ALL") {
          hotelIds = this.hotels.map(x => x.id);
        }
        else if (role.hotelAccessTypeKey === "MULTIPLE") {
          hotelIds = userFormValues.hotelIds;
        }
      }

      const updateUserRequest: UpdateUserCommand = new UpdateUserCommand({
        id: this.userDetails.id,
        email: userFormValues.email,
        userName: userFormValues.userName,
        password: userFormValues.password,
        passwordConfirmation: userFormValues.passwordConfirmation,
        phoneNumber: userFormValues.phoneNumber,
        firstName: userFormValues.firstName,
        lastName: userFormValues.lastName,
        connectionName: userFormValues.connectionName,
        registrationNumber: userFormValues.registrationNumber,
        language: userFormValues.language,
        originalHotel: userFormValues.originalHotel,
        userSubGroupId: userFormValues.subGroupId,
        hotelIds: hotelIds,
        roleId: userFormValues.roleId,
        userGroupId: userFormValues.groupId,
        isSubGroupLeader: userFormValues.isSubGroupLeader,
        isActive: userFormValues.isActive,
        defaultAvatarColorHex: userFormValues.defaultAvatarColorHex,
      });

      if (this.isAvatarSet$.value) {
        updateUserRequest.avatarData = new SaveAvatarData({
          file: this.avatar$.value.file,
          fileName: this.avatar$.value.fileName,
          hasChanged: this.hasAvatarChanged$.value
        });
      }

      this.userManagementClient.updateUser(updateUserRequest).subscribe((response: ProcessResponseOfUserHierarchyData) => {
        if (response.hasError) {
          this.toastr.error(response.message);
          this._setFormValidationErrors(response, this.userForm);
          this.isSaving$.next(false);
          return;
        }

        //this.userDetails = response.data;
        // this.isEditMode$.next(false);
        this.toastr.success(response.message);
        this.router.navigate(['users-management']);
          this.isSaving$.next(false);
      },
        (error) => {
          this.toastr.error(error);
          this.isSaving$.next(false);
          return;
        },
        () => {
          this.loading.stop();
          this.isSaving$.next(false);
        });
    }
  }

  edit() {
    this.isEditMode$.next(true);
  }

  cancel() {
    // if (this.isCreateNewUser) {
    this.router.navigate(['users-management']);
    // } else {
    //   this.userForm.controls.id.setValue(this.userDetails.id);
    //   this.userForm.controls.firstName.setValue(this.userDetails.firstName);
    //   this.isEditMode$.next(false);
    // }
  }
  selectionChanged(eventData: MatSelectChange) {
    this._selectHotelIds(eventData.value);
  }


  hotelMultiSelectChanged(eventData: MatSelectChange) {
    this._selectHotelIds(eventData.value);
  }

  hotelSingleSelectChanged(eventData: MatSelectChange) {
    this._selectHotelIds([eventData.value]);
  }

  onAvatarImageSelected(avatarData: AvatarUploadData) {
    this.avatar$.next(avatarData);
    this.isAvatarSet$.next(true);
    this.hasAvatarChanged$.next(true);
  }

  onAvatarImageRemoved() {
    this.isAvatarSet$.next(false);
    this.avatar$.next(null);
    this.hasAvatarChanged$.next(true);
  }

  //private _generateRandomPastelColorHex() {

  //  let h = 360 * Math.random();
  //  let s = 45 + 40 * Math.random();
  //  let l = 80 + 10 * Math.random();

  //  return this._hslToHex(h, s, l);
  //}

  //private _hslToHex(hueDegrees, saturationPercent, lightnessPercent) {
  //  let l = lightnessPercent / 100;
  //  const a = saturationPercent * Math.min(l, 1 - l) / 100;
  //  const f = n => {
  //    const k = (n + hueDegrees / 30) % 12;
  //    const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
  //    return Math.round(255 * color).toString(16).padStart(2, '0');   // convert to Hex and prefix "0" if needed
  //  };
  //  return `#${f(0)}${f(8)}${f(4)}`;
  //}

  private _setInitialAvatarData(avatarUrl: string) {
    if (avatarUrl) {
      this.isAvatarSet$.next(true);
      this.hasAvatarChanged$.next(false);
      this.avatar$.next({
        file: null,
        fileName: "not-important",
        fileUrl: avatarUrl
      });
    }
    else {
      this.isAvatarSet$.next(false);
      this.hasAvatarChanged$.next(false);
      this.avatar$.next(null);
    }
  }



  private _selectHotelIds(hotelIds: string[]) {
    this.selectedHotels$.next(this.hotels.filter(h => hotelIds.indexOf(h.id) >= 0));
  }

  private _generateNewUserModel(groupId: string, subGroupId: string): UserModel {
    return new UserModel({
      id: null,
      connectionName: null,
      email: null,
      firstName: null,
      language: null,
      lastName: null,
      originalHotel: null,
      registrationNumber: null,
      userName: null,
      userSubGroupId: subGroupId,
      userGroupId: groupId,
      isSubGroupLeader: false,
      isActive: true,
      avatarImageUrl: null,
      hotelIds: [],
      phoneNumber: null,
      roleId: null,
      defaultAvatarColorHex: this._colorService.GenerateRandomPastelColorHex(),
    });
  }
  private _setFormValidationErrors(response: ProcessResponse, form: FormGroup) {
    for (let error of response.modelErrors) {
      let control = form.get(error.key);

      if (control) {
        var errors: ValidationErrors = {};
        errors[error.validatorKey] = true;

        control.setErrors(errors)
        control.markAsDirty();
        control.markAsTouched();
      }
    }
  }
}

