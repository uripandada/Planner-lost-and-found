import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { FormArray, FormGroup } from '@angular/forms';
import { Router } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject } from 'rxjs';
import {
    DeleteProcessResponse,
  DeleteUserCommand,
  InsertSubGroupCommand,
  ProcessResponseOfSubGroupHierarchyData,
  UpdateSubGroupCommand,
  UserManagementClient
} from 'src/app/core/autogenerated-clients/api-client';
import { LoadingService } from 'src/app/core/services/loading.service';

@Component({
  selector: 'app-subgroup',
  templateUrl: './subgroup.component.html',
  styleUrls: ['./subgroup.component.scss']
})
export class SubgroupComponent implements OnInit {

  @Input() subGroupIndex: number;
  @Input() subGroupForm: FormGroup;
  @Input() groupId: string;

  @Output() unsavedSubGroupRemoved: EventEmitter<number> = new EventEmitter<number>();
  @Output() subGroupRemoved: EventEmitter<number> = new EventEmitter<number>();
  @Output() subGroupAdded: EventEmitter<boolean> = new EventEmitter<boolean>();

  isEditMode$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  numberOfUsers$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  isCollapsed$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);

  get usersFormArray(): FormArray {
    return this.subGroupForm.controls.users as FormArray;
  }

  constructor(
    private toastr: ToastrService,
    private userManagementClient: UserManagementClient,
    private loadingService: LoadingService,
    private router: Router
  ) { }

  ngOnInit() {
    this.isEditMode$.next(this.subGroupForm.controls.id.value === null);

    this.numberOfUsers$.next(this.usersFormArray ? this.usersFormArray.length : 0);
  }

  toggleCollapse() {
    this.isCollapsed$.next(!this.isCollapsed$.value);
  }

  saveSubGroup() {
    this.isEditMode$.next(false);
    this.loadingService.start();

    const isInsert: boolean = this.subGroupForm.controls.id.value === null;
    const subGroupFormValue = this.subGroupForm.getRawValue();

    if (isInsert) {
      const insertRequest: InsertSubGroupCommand = new InsertSubGroupCommand({
        name: subGroupFormValue.name,
        groupId: this.groupId
      });

      this.userManagementClient.insertSubGroup(insertRequest).subscribe(
        (response: ProcessResponseOfSubGroupHierarchyData) => {
          if (response.isSuccess) {
            this.subGroupForm.controls.id.setValue(response.data.id);
            this.toastr.success(response.message);
            this.subGroupAdded.next(true);
          } else {
            this.toastr.error(response.message);
          }

        },
        (error) => {
          this.toastr.error(error.message);
        },
        () => {
          this.loadingService.stop();
        }
      );
    } else {
      const updateRequest: UpdateSubGroupCommand = new UpdateSubGroupCommand({
        id: subGroupFormValue.id,
        name: subGroupFormValue.name,
        groupId: this.groupId
      });

      this.userManagementClient.updateSubGroup(updateRequest).subscribe(
        (response: ProcessResponseOfSubGroupHierarchyData) => {
          if (response.isSuccess) {
            this.toastr.success(response.message);
          } else {
            this.toastr.error(response.message);
          }
        },
        (error) => {
          this.toastr.error(error.message);

        },
        () => {
          this.loadingService.stop();
        }
      );
    }
  }

  editSubGroup() {
    this.isEditMode$.next(true);
  }

  cancelSaveSubGroup() {
    this.isEditMode$.next(false);

    if (!this.subGroupForm.controls.id.value) {
      this.unsavedSubGroupRemoved.next(this.subGroupIndex);
    }
  }

  deleteSubGroup() {
    this.subGroupRemoved.next(this.subGroupIndex);
  }

  addNewUser() {
    this.router.navigate(['users-management', 'new-user'],
      {
        queryParams:
        {
          groupId: this.groupId,
          subGroupId: this.subGroupForm.controls.id.value
        }
      });
  }

  editUser(userId: number, userIndex: number) {
    this.router.navigate(['users-management', 'user-details'],
      {
        queryParams:
        {
          groupId: this.groupId,
          userId: userId,
          userIndex: userIndex
        }
      });
  }


  deleteUser(userIndex: number) {
    this.loadingService.start();

    const userForm = this.usersFormArray.at(userIndex) as FormGroup;
    const userFormData = this.usersFormArray.at(userIndex).value;
    const userId = userFormData.id;

    this.userManagementClient.deleteUser(new DeleteUserCommand({
      id: userId
    })).subscribe(
      (response: DeleteProcessResponse) => {
        if (response.isSuccess) {
          this.usersFormArray.removeAt(userIndex);
          this.toastr.success(response.message);
        } else if (response.hasWarning) {
          userForm.controls.isActive.setValue(false);
          this.toastr.warning(response.message);
        } else {
          this.toastr.error(response.message);
        }
      },
      (error) => {
        this.toastr.error(error.message);
      },
      () => {
        this.loadingService.stop();
      }
    );
  }
}

