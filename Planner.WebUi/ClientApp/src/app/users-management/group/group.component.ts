import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject } from 'rxjs';
import { DeleteProcessResponse, DeleteSubGroupCommand, DeleteUserCommand, InsertGroupCommand, ProcessResponseOfGroupHierarchyData, UpdateGroupCommand, UserManagementClient } from 'src/app/core/autogenerated-clients/api-client';
import { LoadingService } from 'src/app/core/services/loading.service';

@Component({
  selector: 'app-group',
  templateUrl: './group.component.html',
  styleUrls: ['./group.component.scss']
})
export class GroupComponent implements OnInit {

  @Input() groupIndex: number;
  @Input() groupForm: FormGroup;


  @Output() unsavedGroupRemoved: EventEmitter<number> = new EventEmitter<number>();
  @Output() subGroupRemoved: EventEmitter<number> = new EventEmitter<number>();
  @Output() subGroupAdded: EventEmitter<boolean> = new EventEmitter<boolean>();
  @Output() groupAdded: EventEmitter<boolean> = new EventEmitter<boolean>();
  @Output() groupRemoved: EventEmitter<number> = new EventEmitter<number>();

  isEditMode$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  numberOfUserSubGroups$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  numberOfUsers$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  isCollapsed$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);

  get subGroupFormArray(): FormArray {
    return this.groupForm.controls.subGroups as FormArray;
  }

  get usersFormArray(): FormArray {
    return this.groupForm.controls.users as FormArray;
  }

  constructor(
    private toastr: ToastrService,
    private userManagementClient: UserManagementClient,
    private formBuilder: FormBuilder,
    public loading: LoadingService,
    private router: Router
  ) { }

  ngOnInit() {
    this.isEditMode$.next(this.groupForm.controls.id.value === null);
    this.subGroupFormArray.valueChanges.subscribe(() => {
      this._setTotalNumbers();
    });
    this._setTotalNumbers();

  }
  toggleCollapse() {
    this.isCollapsed$.next(!this.isCollapsed$.value);
  }

  private _setTotalNumbers() {
    if (!this.subGroupFormArray) {
      return;
    }

    this.numberOfUserSubGroups$.next(this.subGroupFormArray.length);

    let numberOfUsers: number = 0;
    for (let subGroupFormGroupControl of this.subGroupFormArray.controls) {
      let fg: FormGroup = subGroupFormGroupControl as FormGroup;
      let usersFa: FormArray = fg.controls.users ? fg.controls.users as FormArray : new FormArray([]);
      numberOfUsers += usersFa.length;
    }

    this.numberOfUsers$.next(numberOfUsers);
  }
  editGroup() {
    this.isEditMode$.next(true);
  }
  onSubGroupAdded() {
    this.subGroupAdded.next(true);
  }
  onSubGroupRemoved(groupIndex: number) {
    this.deleteSubGroup(groupIndex);
  }
  saveGroup() {
    this.isEditMode$.next(false);
    const isInsert: boolean = this.groupForm.controls.id.value === null;
    const groupFormValue = this.groupForm.value;

    if (isInsert) {

      const insertRequest: InsertGroupCommand = new InsertGroupCommand({
        name: groupFormValue.name
      });

      this.userManagementClient.insertGroup(insertRequest).subscribe(
        (response: ProcessResponseOfGroupHierarchyData) => {
          if (response.isSuccess) {
            this.groupForm.controls.id.setValue(response.data.id);
            this.toastr.success(response.message);
          } else {
            this.toastr.error(response.message);
            return;
          }
          this.groupAdded.next(true);
        },
        (error) => {
          this.toastr.error(error.message);
        }
      );
    } else {
      const updateRequest: UpdateGroupCommand = new UpdateGroupCommand({
        id: groupFormValue.id,
        name: groupFormValue.name
        });

        this.userManagementClient.updateGroup(updateRequest).subscribe(
          (response) => {
            if (response.isSuccess) {
              this.toastr.success(response.message);
            } else {
              this.toastr.error(response.message);
            }
          },
          (error) => {
            this.toastr.error(error.message);
          }
        );
    }
  }

  removeGroup() {
    this.groupRemoved.next(this.groupIndex);
  }

  cancelSaveGroup() {
    this.isEditMode$.next(false);

    if (!this.groupForm.controls.id.value) {
      this.unsavedGroupRemoved.next(this.groupIndex);
    }
  }

  addNewSubGroup() {
    const subGroupFormArray = this.subGroupFormArray.value;
    const maxNumber: number = this.subGroupFormArray.length;

    this.subGroupFormArray.push(this.formBuilder.group({
      id : null,
      name: ['Subgroup ' + maxNumber, Validators.required],
      users: new FormArray([])
    }));
  }

  removeSubGroup(formIndex: number) {
    this.subGroupFormArray.removeAt(formIndex);
  }

  deleteSubGroup(formIndex: number) {
    this.loading.start();

    const subGroupFormData = this.subGroupFormArray.at(formIndex).value;
    const subGroupId = subGroupFormData.id;

    this.userManagementClient.deleteSubGroup(new DeleteSubGroupCommand({ id: subGroupId})).subscribe(
      (response) => {
        if (response.isSuccess) {
          this.subGroupFormArray.removeAt(formIndex);
          this.toastr.success(response.message);
          this.subGroupRemoved.next(formIndex);
        } else {
          this.toastr.error(response.message);
        }
      },
      (error) => {
        this.toastr.error(error.message);
      },
      () => {
        this.loading.stop();
      }
    );
  }


  addNewUser() {
    this.router.navigate(['users-management', 'new-user'],
      {
        queryParams:
        {
          groupId: this.groupForm.controls.id.value,
          subGroupId: null
        }
      });
  }

  editUser(userId: number, userIndex: number) {
    this.router.navigate(['users-management', 'user-details'],
      {
        queryParams:
        {
          groupId: this.groupForm.controls.id.value,
          userId: userId,
          userIndex: userIndex
        }
      });
  }


  deleteUser(userIndex: number) {
    this.loading.start();

    const userForm = this.usersFormArray.at(userIndex) as FormGroup;
    const userFormData = this.usersFormArray.at(userIndex).value;
    const userId = userFormData.id;

    this.userManagementClient.deleteUser(new DeleteUserCommand({
      id: userId
    })).subscribe(
      (response: DeleteProcessResponse) => {
        if (response.isSuccess) {
          this.usersFormArray.removeAt(userIndex);
          this.toastr.success(response.message);
        } else if (response.hasWarning) {
          userForm.controls.isActive.setValue(false);
          this.toastr.warning(response.message);
        } else {
          this.toastr.error(response.message);
        }
      },
      (error) => {
        this.toastr.error(error.message);
      },
      () => {
        this.loading.stop();
      }
    );
  }

}
