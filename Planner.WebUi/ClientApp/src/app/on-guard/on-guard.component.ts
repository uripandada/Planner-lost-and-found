import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { GetOnGuardListQuery, OnGuardClient, OnGuardListItem, OnGuardModel, OnGuardStatus } from '../core/autogenerated-clients/api-client';
import { LoadingService } from '../core/services/loading.service';
import * as moment from 'moment';

@Component({
  selector: 'app-on-guard',
  templateUrl: './on-guard.component.html',
  styleUrls: ['./on-guard.component.scss']
})
export class OnGuardComponent implements OnInit {

  areDetailsDisplayed$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);

  filterForm: FormGroup;

  itemsList: BehaviorSubject<OnGuardListItem[]> = new BehaviorSubject<OnGuardListItem[]>([]);
  selectedItem: BehaviorSubject<OnGuardListItem> = new BehaviorSubject<OnGuardListItem>(null);

  loadedNumber$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  totalNumber$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  showLoadMore$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);

  statuses: any;

  constructor(
    private formBuilder: FormBuilder,
    public loading: LoadingService,
    private onGuardClient: OnGuardClient,
    private toastr: ToastrService
  ) {
    this.statuses = OnGuardStatus;
   }


  ngOnInit(): void {

    this.filterForm = this.formBuilder.group({
      keywords: [''],
      dateFrom: [''],
      dateTo: ['']
    });

    this.filterForm.valueChanges.subscribe(
      value => {
        this.reloadList(true);
      }
    );

    this.reloadList(true);
  }

  createNew() {
    this.selectedItem.next(new OnGuardModel({
      id: null,
      createdAt: moment(),
      address: '',
      firstName: '',
      lastName: '',
      identification: '',
      referenceNumber:'',
      phoneNumber: '',
      status: OnGuardStatus.OnGuard
    }));
    this.areDetailsDisplayed$.next(true);
  }


  reloadList(reload: boolean) {
    if (reload) {
      this.loadedNumber$.next(0);
    }

    this.areDetailsDisplayed$.next(false);

    this.loading.start();
    this.onGuardClient.getList(new GetOnGuardListQuery({
      skip: this.loadedNumber$.value,
      take: 20,
      dateFrom: this.filterForm.controls.dateFrom.value,
      dateTo: this.filterForm.controls.dateTo.value,
      keyword: this.filterForm.controls.keywords.value
    })).subscribe((response) => {
      if (response.isSuccess) {
        this.itemsList.next(response.data.items);
        this.totalNumber$.next(response.data.totalNumberOfItems);
        this.loadedNumber$.next(this.loadedNumber$.value + 20);
        this.showLoadMore$.next(this.loadedNumber$.value < this.totalNumber$.value);
      } else {
        this.toastr.error(response.message);
      }
      this.loading.stop();
    },
      (error) => {
        this.toastr.error(error);
        this.loading.stop();
      });
  }


  selectItem(item: OnGuardListItem) {
    this.onGuardClient.getById(item.id).subscribe(
      (response) => {
        if (response.isSuccess) {
          this.selectedItem.next(response.data);
          this.areDetailsDisplayed$.next(true);
        } else {
          this.toastr.error('Error loading item.');
        }
      },
      (error) => {
        this.toastr.error(error);
      }
    );
  }

  onItemEditCancelled() {
    this.areDetailsDisplayed$.next(false);
    this.selectedItem.next(null);
  }

}
