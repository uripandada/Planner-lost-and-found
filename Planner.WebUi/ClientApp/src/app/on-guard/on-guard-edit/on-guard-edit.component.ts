import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject } from 'rxjs';
import { InsertOnGuardCommand, OnGuardClient, OnGuardFilesUploadedData, OnGuardModel, OnGuardStatus, UpdateOnGuardCommand } from 'src/app/core/autogenerated-clients/api-client';
import { FileDetails, FilesChangedData } from 'src/app/shared/components/file-upload/file-upload.component';

@Component({
  selector: 'app-on-guard-edit',
  templateUrl: './on-guard-edit.component.html',
  styleUrls: ['./on-guard-edit.component.scss']
})
export class OnGuardEditComponent implements OnInit, OnChanges {

  @Input() item: OnGuardModel;
  @Output() reloadList: EventEmitter<boolean> = new EventEmitter<boolean>();
  @Output() cancelled: EventEmitter<boolean> = new EventEmitter<boolean>();

  selectedFiles: Array<FilesChangedData>;
  currentlyUploadingFiles$: BehaviorSubject<Array<FileDetails>> = new BehaviorSubject<Array<FileDetails>>([]);
  temporaryUploadedFiles$: BehaviorSubject<Array<FileDetails>> = new BehaviorSubject<Array<FileDetails>>([]);
  uploadedFiles$: BehaviorSubject<Array<FileDetails>> = new BehaviorSubject<Array<FileDetails>>([]);

  itemForm: FormGroup;

  statuses: any;
  public isCreateNew = true;

  constructor(
    private formBuilder: FormBuilder,
    private toastr: ToastrService,
    private onGuardClient: OnGuardClient
  ) {
    this.statuses = OnGuardStatus;
  }

  ngOnInit(): void {
    this.initForm();

  }

  ngOnChanges(changes: SimpleChanges): void {
    if (this.item.id) {
      this.isCreateNew = false;

    } else {
      this.isCreateNew = true;
    }
    this.initForm();
  }


  initForm() {
    this.itemForm = this.formBuilder.group({
      firstName: [this.item.firstName, Validators.required],
      lastName: [this.item.lastName, Validators.required],
      address: [this.item.address, Validators.required],
      phoneNumber: [this.item.phoneNumber, Validators.required],
      referenceNumber: [this.item.referenceNumber, Validators.required],
      identification: [this.item.identification, Validators.required],
      description: [this.item.description],
      status: [this.item.status, Validators.required]
    });

    if (this.item.files) {
      const files = this.item.files.map(x => ({
        id: x.id,
        isImage: x.isImage,
        imageUrl: x.url,
        fileName: x.name,
        displayText: ''
      }) as FileDetails);
      this.uploadedFiles$.next(files);
    } else {
      this.uploadedFiles$.next([]);
    }
  }

  save() {
    if (this?.itemForm.invalid) {
      this.toastr.error('There are errors on the form');
      return;
    }

    if (this.item.id === null) {
      let insertRequest = null;

      insertRequest = new InsertOnGuardCommand({
        status: this.itemForm.controls.status.value,
        address: this.itemForm.controls.address.value,
        description: this.itemForm.controls.description.value,
        firstName: this.itemForm.controls.firstName.value,
        lastName: this.itemForm.controls.lastName.value,
        phoneNumber: this.itemForm.controls.phoneNumber.value,
        identification: this.itemForm.controls.identification.value,
        referenceNumber: this.itemForm.controls.referenceNumber.value,
        files: this.selectedFiles.map(x => new OnGuardFilesUploadedData({
          fileName: x.fileName,
          id: x.id
        }))
      });

      this.onGuardClient.insert(insertRequest).subscribe(
        response => {
          if (response.isSuccess) {
            this.toastr.success(response.message);
            this.reloadList.next(true);
          } else {
            this.toastr.error(response.message);
          }
        },
        error => {
          this.toastr.error(error);
        }
      );
    } else {

      let updateRequest = null;
      updateRequest = new UpdateOnGuardCommand({
        id: this.item.id,
        status: this.itemForm.controls.status.value,
        address: this.itemForm.controls.address.value,
        description: this.itemForm.controls.description.value,
        firstName: this.itemForm.controls.firstName.value,
        lastName: this.itemForm.controls.lastName.value,
        phoneNumber: this.itemForm.controls.phoneNumber.value,
        identification: this.itemForm.controls.identification.value,
        referenceNumber: this.itemForm.controls.referenceNumber.value,
        files: this.selectedFiles.map(x => new OnGuardFilesUploadedData({
          fileName: x.fileName,
          id: x.id
        }))
      });

      this.onGuardClient.update(updateRequest).subscribe(
        response => {
          if (response.isSuccess) {
            this.toastr.success(response.message);
            this.reloadList.next(true);
          } else {
            this.toastr.error(response.message);
          }
        },
        error => {
          this.toastr.error(error);
        }
      );
    }
  }


  public uploadedFilesChanged(fileChanges: Array<FilesChangedData>) {
    this.selectedFiles = fileChanges;
  }

  cancel() {
    this.cancelled.next(true);
  }

}
