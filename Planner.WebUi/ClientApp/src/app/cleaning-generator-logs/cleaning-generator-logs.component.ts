import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { CleaningGeneratorLogItem, CleaningPlanClient, GetCleaningGeneratorLogsQuery, GetPageOfReservationsQuery, HotelItemData, PageOfOfReservationGridData, ProcessResponseOfSynchronizeReservationsResult, ReservationClient, ReservationGridData, SynchronizeReservationsCommand, SynchronizeReservationsResult } from '../core/autogenerated-clients/api-client';
import { HotelService } from '../core/services/hotel.service';
import { LoadingService } from '../core/services/loading.service';

@Component({
  selector: 'app-cleaning-generator-logs',
  templateUrl: './cleaning-generator-logs.component.html'
})
export class CleaningGeneratorLogsComponent implements OnInit {
  logs$: BehaviorSubject<CleaningGeneratorLogItem[]> = new BehaviorSubject<CleaningGeneratorLogItem[]>([]);
  filterForm: FormGroup;
  hotels: Array<HotelItemData>;

  constructor(
    public loading: LoadingService,
    private _formBuilder: FormBuilder,
    private _cleaningPlanClient: CleaningPlanClient,
    private _hotelService: HotelService,
    private _toastr: ToastrService) {
  }

  ngOnInit(): void {
    this.loading.reset();

    this.hotels = [
      ...this._hotelService.getHotels()
    ];

    this.filterForm = this._formBuilder.group({
      cleaningDate: [new Date()],
      hotelId: [this.hotels[0].id],
      generationId: [null]
    });

    this.filterForm.valueChanges.pipe(
      debounceTime(300)
    ).subscribe(
      (formValues: any) => { this._loadData(); },
      (error: Error) => { },
      () => { }
    );

    this._loadData();
  }

  private _loadData() {
    this.loading.start();

    let formValues = this.filterForm.getRawValue();

    let query: GetCleaningGeneratorLogsQuery = new GetCleaningGeneratorLogsQuery({
      cleaningDate: formValues.cleaningDate,
      generationId: formValues.generationId,
      hotelId: formValues.hotelId,
    });

    this._cleaningPlanClient.getCleaningGeneratorLogs(query).subscribe(
      (items: CleaningGeneratorLogItem[]) => {
        this.logs$.next(items.map(i => {
          i.roomDescription = JSON.parse(i.roomDescription);
          i.cleaningEventsDescription = JSON.parse(i.cleaningEventsDescription);
          i.cleaningsDescription = JSON.parse(i.cleaningsDescription);
          i.orderedPluginsDescription = JSON.parse(i.orderedPluginsDescription);
          i.pluginEventsDescription = JSON.parse(i.pluginEventsDescription);
          i.reservationsDescription = JSON.parse(i.reservationsDescription);
          i.reservationsEventsDescription = JSON.parse(i.reservationsEventsDescription);
          return i;
        }));
      },
      (error: Error) => {
        this._toastr.error(error.message);
      },
      () => {
        this.loading.stop();
      },
    );
  }
}
