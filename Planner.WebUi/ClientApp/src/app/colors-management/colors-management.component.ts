import { Component, OnInit } from '@angular/core';
import { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
import { ColorsManagementClient, ProcessResponse, RccHousekeepingStatusColorDetails, SaveRccHousekeepingStatusColor, UpdateRccHouskeepingColorsCommand } from '../core/autogenerated-clients/api-client';
import { LoadingService } from '../core/services/loading.service';

@Component({
  selector: 'app-colors-management',
  templateUrl: './colors-management.component.html',
  styleUrls: ['./colors-management.component.scss']
})
export class ColorsManagementComponent implements OnInit {

  colors: Array<RccHousekeepingStatusColorDetails>;
  //colorsFormArray: FormArray;

  constructor(
    public loading: LoadingService,
    private _formBuilder: FormBuilder,
    private _colorsManagementClient: ColorsManagementClient,
    private _route: ActivatedRoute,
    private _toastr: ToastrService) {
  }

  ngOnInit(): void {
    this.loading.start();

    this.colors = this._route.snapshot.data.colors.map(c => new RccHousekeepingStatusColorDetails({ rccCode: c.rccCode, colorHex: "#"+c.colorHex, description: c.description }));

    //this.colorsFormArray = this._formBuilder.array(this.colors.map(c => this._createColorFormGroup(c)));
  }

  save(): void {
    this.loading.start();
    //let colorsFormValues = this.colorsFormArray.getRawValue();

    let updateRequest: UpdateRccHouskeepingColorsCommand = new UpdateRccHouskeepingColorsCommand({
      colors: this.colors.map(c => new SaveRccHousekeepingStatusColor({ rccCode: c.rccCode, colorHex: c.colorHex.replace("#", "") })),
    });

    this._colorsManagementClient.updateRccHousekeepingStatusColors(updateRequest).subscribe(
      (response: ProcessResponse) => {
        if (response.isSuccess) {
          this._toastr.success(response.message);
        }
        else {
          this._toastr.error(response.message);
        }
      },
      (error: Error) => {
        this._toastr.error(error.message);
      },
      () => {
        this.loading.stop();
      },
    );
  }

  private _createColorFormGroup(color: RccHousekeepingStatusColorDetails): FormGroup {
    return this._formBuilder.group({
      rccCode: [{ value: color.rccCode, disabled: true }],
      description: [{ value: color.description, disabled: true }],
      colorHex: ["#" + color.colorHex, [Validators.required]],
    });
  }
}
