import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { InsertRoomCommand, RoomCategoryGridItemViewModel, RoomDetailsData, SaveRoomBed, UpdateRoomCommand } from '../../core/autogenerated-clients/api-client';
import { HotelService } from '../../core/services/hotel.service';
import { LoadingService } from '../../core/services/loading.service';
import { RoomTypeService } from '../../core/services/room-type.service';

@Component({
  selector: 'app-room-edit-form',
  templateUrl: './room-edit-form.component.html',
  styleUrls: ['./room-edit-form.component.scss']
})
export class RoomEditFormComponent implements OnInit {

  @Input() room: RoomDetailsData;
  @Input() roomCategories: Array<RoomCategoryGridItemViewModel>;

  @Output() deleted: EventEmitter<string> = new EventEmitter<string>();
  @Output() inserted: EventEmitter<InsertRoomCommand> = new EventEmitter<InsertRoomCommand>();
  @Output() insertedWithContinue: EventEmitter<InsertRoomCommand> = new EventEmitter<InsertRoomCommand>();
  @Output() updated: EventEmitter<UpdateRoomCommand> = new EventEmitter<UpdateRoomCommand>();
  @Output() cancelled: EventEmitter<boolean> = new EventEmitter<boolean>();

  public roomTypes: Array<{ key: string, value: string, group: string }> = [];
  public isCreateNewRoom: boolean = true;
  public isAppartment: boolean = false;
  public roomForm: FormGroup;

  get roomBedsFormArray(): FormArray {
    return this.roomForm.controls.roomBedsFormArray as FormArray;
  }

  constructor(
    private _formBuilder: FormBuilder,
    private _toastr: ToastrService,
    public loading: LoadingService,
    private _hotelService: HotelService,
    private _roomTypeService: RoomTypeService) { }

  ngOnInit(): void {
    this.isCreateNewRoom = this.room.id === null;

    this.isAppartment = this.room.typeKey === "APPARTMENT";

    let roomTypes = this._roomTypeService.getRoomTypes();
    if (this.isAppartment) {
      this.roomTypes = roomTypes.filter(rt => rt.group === "APPARTMENT");
    }
    else {
      this.roomTypes = roomTypes.filter(rt => rt.group === "HOTEL_HOSTEL");
    }

    this._createRoomForm();
  }
  cancel() {
    this.cancelled.next(true);
  }

  save(doContinue: boolean) {
    if (!this.roomForm.valid) {
      this._toastr.error("You have to fix form errors before you can continue.");
      return;
    }

    if (this.isCreateNewRoom) {

      let roomFormValues = this.roomForm.getRawValue();
      let isHostelRoom: boolean = roomFormValues.typeKey === "HOSTEL";

      let insertRoomRequest: InsertRoomCommand = new InsertRoomCommand({
        buildingId: this.room.buildingId,
        floorId: this.room.floorId,
        name: roomFormValues.name,
        typeKey: roomFormValues.typeKey,
        hotelId: this._hotelService.getSelectedHotelId(),
        categoryId: roomFormValues.categoryId,
        floorSectionName: roomFormValues.floorSectionName,
        floorSubSectionName: roomFormValues.floorSubSectionName,
        beds: isHostelRoom ? roomFormValues.roomBedsFormArray.map(rb => new SaveRoomBed({ id: rb.id, name: rb.name })) : [],
      }); 

      if (doContinue) {
        this.insertedWithContinue.next(insertRoomRequest);
      }
      else {
        this.inserted.next(insertRoomRequest);
      }
    }
    else {

      let roomFormValues = this.roomForm.value;
      let isHostelRoom: boolean = roomFormValues.typeKey === "HOSTEL";

      let updateRoomRequest: UpdateRoomCommand = new UpdateRoomCommand({
        id: this.room.id,
        buildingId: this.room.buildingId,
        floorId: this.room.floorId,
        name: roomFormValues.name,
        typeKey: roomFormValues.typeKey,
        hotelId: this._hotelService.getSelectedHotelId(),
        categoryId: roomFormValues.categoryId,
        floorSectionName: roomFormValues.floorSectionName,
        floorSubSectionName: roomFormValues.floorSubSectionName,
        beds: isHostelRoom ? roomFormValues.roomBedsFormArray.map(rb => new SaveRoomBed({ id: rb.id, name: rb.name })) : [],
      }); 

      this.updated.next(updateRoomRequest);
    }
  }

  private _createRoomForm() {

    let roomBedFormGroups = [];
    if (this.room.typeKey === "HOSTEL")
    {
      if (!this.room.beds || this.room.beds.length === 0) {
        roomBedFormGroups.push(this._createRoomBedFormGroup(null, null));
      }
      else {
        roomBedFormGroups = this.room.beds.map(b => this._createRoomBedFormGroup(b.id, b.name));
      }
    }

    this.roomForm = this._formBuilder.group({
      name: [this.room.name, Validators.required],
      typeKey: [this.room.typeKey, Validators.required],
      categoryId: [this.room.categoryId, Validators.required],
      floorSectionName: [this.room.floorSectionName],
      floorSubSectionName: [this.room.floorSubSectionName],
      roomBedsFormArray: this._formBuilder.array(roomBedFormGroups)
    });

    this.roomForm.controls.typeKey.valueChanges.subscribe((key: string) => {
      if (key === "HOSTEL") {
        this.roomForm.controls.roomBedsFormArray = this._formBuilder.array([this._createRoomBedFormGroup(null, null)]);
      }
      else {
        (this.roomForm.controls.roomBedsFormArray as FormArray).clear();
      }
    });
  }

  private _createRoomBedFormGroup(id: string, name: string) {
    return this._formBuilder.group({
      id: [id],
      name: [name, [Validators.required]],
    });
  }
}
