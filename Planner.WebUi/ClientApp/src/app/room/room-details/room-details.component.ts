import { Component, OnInit, Input } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { BuildingSimpleData, RoomDetailsData, RoomManagementClient, InsertRoomCommand, ProcessResponseOfInsertRoomResponse, UpdateRoomCommand, ProcessResponseOfUpdateRoomResponse, RoomCategoryGridItemViewModel, RoomDetailsBed } from '../../core/autogenerated-clients/api-client';
import { ToastrService } from 'ngx-toastr';
import { LoadingService } from '../../core/services/loading.service';
import { BehaviorSubject } from 'rxjs';
import { HotelService } from '../../core/services/hotel.service';
import { MatTabChangeEvent } from '@angular/material/tabs';
import { RoomTypeService } from '../../core/services/room-type.service';

@Component({
  selector: 'app-room-details',
  templateUrl: './room-details.component.html',
  styleUrls: ['./room-details.component.scss']
})
export class RoomDetailsComponent implements OnInit {

  public roomTypes: Array<{ key: string, value: string, group: string }> = [];
  public roomCategories: Array<RoomCategoryGridItemViewModel> = [];

  public isAppartment: boolean = false;
  public roomDetails: RoomDetailsData;
  public roomForm: FormGroup;

  public isEditMode$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);

  constructor(
    private _roomManagementClient: RoomManagementClient,
    private _router: Router,
    private _formBuilder: FormBuilder,
    private _route: ActivatedRoute,
    private _toastr: ToastrService,
    public loading: LoadingService,
    private _hotelService: HotelService,
    private _roomTypeService: RoomTypeService) {
  }

  ngOnInit(): void {
    this.roomCategories = this._route.snapshot.data.roomCategories;

    this.isAppartment = this._route.snapshot.data.roomDetails.typeKey === "APPARTMENT";

    let roomTypes = this._roomTypeService.getRoomTypes();
    if (this.isAppartment) {
      this.roomTypes = roomTypes.filter(rt => rt.group === "APPARTMENT");
    }
    else {
      this.roomTypes = roomTypes.filter(rt => rt.group === "HOTEL_HOSTEL");
    }

    this.roomDetails = new RoomDetailsData(this._route.snapshot.data.roomDetails);
    this.isEditMode$.next(false);

    this.roomForm = this._formBuilder.group({
      name: [this.roomDetails.name, Validators.required],
      typeKey: [this.roomTypes[0].key, Validators.required]
    });
  }

  onRoomInserted(command: InsertRoomCommand) {
    this.loading.start();

    this._roomManagementClient.insertRoom(command).subscribe(
      (response: ProcessResponseOfInsertRoomResponse) => {
        if (response.hasError) {
          this._toastr.error(response.message);
          return;
        }

        let category = this.roomCategories.find(c => c.id === command.categoryId);
        this.roomDetails = new RoomDetailsData({
          id: response.data.id,
          ordinalNumber: response.data.ordinalNumber,
          buildingId: command.buildingId,
          categoryId: command.categoryId,
          categoryName: category ? category.name : "",
          externalId: this.roomDetails.externalId,
          floorId: command.floorId,
          floorSectionName: command.floorSectionName,
          floorSubSectionName: command.floorSubSectionName,
          name: command.name,
          typeKey: command.typeKey,
          beds: command.beds.map(b => new RoomDetailsBed({ id: b.id, name: b.name }))
        });

        this._toastr.success(response.message);
        this.isEditMode$.next(false);
      },
      (error: Error) => {
        this._toastr.error(error.message);
      },
      () => {
        this.loading.stop();
      },
    );
  }

  onRoomUpdated(command: UpdateRoomCommand) {
    this.loading.start();

    this._roomManagementClient.updateRoom(command).subscribe(
      (response: ProcessResponseOfInsertRoomResponse) => {
        if (response.hasError) {
          this._toastr.error(response.message);
          return;
        }

        let category = this.roomCategories.find(c => c.id === command.categoryId);
        this.roomDetails = new RoomDetailsData({
          id: response.data.id,
          ordinalNumber: response.data.ordinalNumber,
          buildingId: command.buildingId,
          categoryId: command.categoryId,
          categoryName: category ? category.name : "",
          externalId: this.roomDetails.externalId,
          floorId: command.floorId,
          floorSectionName: command.floorSectionName,
          floorSubSectionName: command.floorSubSectionName,
          name: command.name,
          typeKey: command.typeKey,
          beds: command.beds.map(b => new RoomDetailsBed({ id: b.id, name: b.name })) // WARNING: b.id is null at this point! For now it doesn't matter.
        });

        this._toastr.success(response.message);
        this.isEditMode$.next(false);
      },
      (error: Error) => {
        this._toastr.error(error.message);
      },
      () => {
        this.loading.stop();
      },
    );
  }

  onRoomCancelled() {
    this.isEditMode$.next(false);
  }

  public tabChanged(eventData: MatTabChangeEvent) {
    switch (eventData.index) {
      case 0:
        // INFO TAB
        break;
      case 1:
        // MODEL TAB
        break;
      case 2:
        // ACTION
        break;
      case 3:
        // PLAN
        break;
      case 4:
        // CONTRACT
        break;
      case 5:
        // DASHBOARD
        break;
    }
  }

  public edit() {
    this.isEditMode$.next(true);
  }

  public delete() {

  }

  public save() {
  }

  public cancel() {
    this.roomForm.controls.name.setValue(this.roomDetails.name);
    this.roomForm.controls.typeKey.setValue(this.roomDetails.typeKey);
    this.isEditMode$.next(false);
  }
}
