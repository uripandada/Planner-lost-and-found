import { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject } from 'rxjs';
import { GetComplexRoomMessageDetailsQuery, GetPageOfRoomMessagesQuery, PageOfOfRoomMessageListItem, ProcessResponse, RoomManagementClient, RoomMessageClient, RoomMessageDateType, RoomMessageDetails, RoomMessageFilterValues, RoomMessageForType, RoomMessageListItem, RoomMessageType, RoomViewDashboardBedItem, RoomViewDashboardRoomItem, UpdateIsCleaningPriorityCommand, UpdateIsGuestCurrentlyInCommand } from 'src/app/core/autogenerated-clients/api-client';
import moment from 'moment';
import { HotelService } from '../../core/services/hotel.service';

@Component({
  selector: 'app-room-message-list',
  templateUrl: './room-message-list.component.html',
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class RoomMessageListComponent implements OnInit, OnChanges {

  @Input() room: RoomViewDashboardRoomItem | RoomViewDashboardBedItem;
  @Input() filterValues: RoomMessageFilterValues;

  isLoading$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  messages$: BehaviorSubject<Array<RoomMessageListItem>> = new BehaviorSubject<Array<RoomMessageListItem>>([]);
  totalNumberOfMessages$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  loadedNumberOfMessages$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  showLoadMoreMessages$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);

  showComplexMessageMode$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);

  selectedRoomMessage: RoomMessageListItem = null;
  isEditMessageMode$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  selectedRoomMessageDetails$: BehaviorSubject<RoomMessageDetails> = new BehaviorSubject<RoomMessageDetails>(new RoomMessageDetails({
    dateType: RoomMessageDateType.SPECIFIC_DATES,
    forType: RoomMessageForType.TODAY,
    id: null,
    isDeleted: false,
    type: RoomMessageType.SIMPLE,
    dates: [moment(new Date())],
    intervalEndDate: moment(new Date()),
    intervalStartDate: moment(new Date()),
    intervalNumberOfDays: 1,
    message: null,
    reservationOnArrivalDate: true,
    reservationOnDepartureDate: true,
    reservationOnStayDates: true,
    roomMessageFilters: []
  }));

  constructor(
    private _roomMessageClient: RoomMessageClient,
    private _toastr: ToastrService,
    private _hotelService: HotelService
  ) {
  }

  ngOnInit() {
    this._loadMore(0, 10);
  }
  ngOnChanges(changes: SimpleChanges): void {
    if ((changes.room && !changes.room.firstChange) || (changes.filterValues && !changes.filterValues.firstChange)) {
      this._loadMore(0, 10);
    }
  }

  onMessageEdit(message: RoomMessageListItem) {
    this.isLoading$.next(true);

    this._roomMessageClient.getComplexRoomMessageDetails(new GetComplexRoomMessageDetailsQuery({ hotelId: this._hotelService.getSelectedHotelId(), id: message.id })).subscribe(
      (messageDetails: RoomMessageDetails) => {
        this.isEditMessageMode$.next(true);
        this.selectedRoomMessageDetails$.next(messageDetails);
        this.showComplexMessageMode$.next(messageDetails.type === RoomMessageType.COMPLEX);
      },
      (error: Error) => { this._toastr.error(error.message); },
      () => { this.isLoading$.next(false); }
    )
  }

  onMessageSaveCancelled() {
    this.isEditMessageMode$.next(false);
    this.selectedRoomMessageDetails$.next(new RoomMessageDetails({
      dateType: RoomMessageDateType.SPECIFIC_DATES,
      forType: RoomMessageForType.TODAY,
      id: null,
      isDeleted: false,
      type: RoomMessageType.SIMPLE,
      dates: [moment(new Date())],
      intervalEndDate: moment(new Date()),
      intervalStartDate: moment(new Date()),
      intervalNumberOfDays: 1,
      message: null,
      reservationOnArrivalDate: true,
      reservationOnDepartureDate: true,
      reservationOnStayDates: true,
      roomMessageFilters: []
    }));
  }

  onMessageSaved() {
    this.onMessageSaveCancelled();
    this._loadMore(0, 10);
  }

  showComplexMessageForm() {
    this.showComplexMessageMode$.next(true);
    this.onMessageSaveCancelled();
  }

  showSimpleMessageForm() {
    this.showComplexMessageMode$.next(false);
    this.onMessageSaveCancelled();
  }

  private _loadMore(skip: number, take: number) {
    this.isLoading$.next(true);
    let query: GetPageOfRoomMessagesQuery = new GetPageOfRoomMessagesQuery({
      isToday: true,
      roomId: this.room.id,
      skip: skip,
      take: take,
      hotelId: this._hotelService.getSelectedHotelId(),
      roomBedId: null,
      dateString: null
    });
    this._roomMessageClient.getPageOfRoomMessages(query).subscribe(
      (response: PageOfOfRoomMessageListItem) => {
        if (skip === 0) {
          this.messages$.next([...response.items]);
        }
        else {
          this.messages$.next([...this.messages$.value, ...response.items]);
        }

        this.totalNumberOfMessages$.next(response.totalNumberOfItems);
        this.loadedNumberOfMessages$.next(this.messages$.value.length);
        this.showLoadMoreMessages$.next(this.loadedNumberOfMessages$.value < this.totalNumberOfMessages$.value);
      },
      (error: Error) => { this._toastr.error(error.message); },
      () => { this.isLoading$.next(false); }
    );

  }
}
