import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';
import { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject } from 'rxjs';
import { InsertSimpleMessageCommand, ProcessResponse, ProcessResponseOfGuid, RoomManagementClient, RoomMessageClient, RoomMessageDetails, RoomMessageFilterReferenceType, RoomMessageForType, RoomViewDashboardBedItem, RoomViewDashboardRoomItem, SaveSimpleRoomMessage, UpdateIsCleaningPriorityCommand, UpdateIsGuestCurrentlyInCommand, UpdateSimpleMessageCommand } from 'src/app/core/autogenerated-clients/api-client';
import { HotelService } from '../../core/services/hotel.service';
import { atLeastOneSelected } from '../../shared/helpers/at-least-one-selected-form-array-validator';

@Component({
  selector: 'app-room-message-send-simple-form',
  templateUrl: './room-message-send-simple-form.component.html',
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class RoomMessageSendSimpleFormComponent implements OnInit, OnChanges {

  @Input() room: RoomViewDashboardRoomItem | RoomViewDashboardBedItem;
  @Input() messageDetails: RoomMessageDetails;

  @Output() advancedModeSet: EventEmitter<boolean> = new EventEmitter<boolean>();
  @Output() saved: EventEmitter<boolean> = new EventEmitter<boolean>();
  @Output() cancelled: EventEmitter<boolean> = new EventEmitter<boolean>();

  isLoading$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);

  isEditMode$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);

  messageForm: FormGroup;

  constructor(
    private _roomMessageClient: RoomMessageClient,
    private _formBuilder: FormBuilder,
    private _toastr: ToastrService,
    private _hotelService: HotelService,
  ) {
  }

  get reservationsFormArray() {
    return this.messageForm.controls.reservations as FormArray;
  }

  ngOnInit() {
    this.isEditMode$.next(!!this.messageDetails.id);
    let selectedReservationsControls: FormControl[] = this._getSelectedReservationFlags(this.messageDetails, this.room).map(isSelectedFlag => new FormControl(isSelectedFlag));

    this.messageForm = this._formBuilder.group({
      mainTypeKey: [this.messageDetails.forType === RoomMessageForType.RESERVATIONS ? "RESERVATIONS" : "ROOM"],
      reservations: new FormArray(selectedReservationsControls),
      message: [this.messageDetails.message, [Validators.required]],
    });

    this.messageForm.controls.mainTypeKey.valueChanges.subscribe(mainTypeKey => {
      if (mainTypeKey === "ROOM") {
        this.messageForm.controls.reservations.setValidators([]);
        this.messageForm.controls.reservations.updateValueAndValidity();
      }
      else {
        this.messageForm.controls.reservations.setValidators([Validators.required, Validators.minLength(1), atLeastOneSelected()]);
        this.messageForm.controls.reservations.updateValueAndValidity();
      }
    });
  }

  ngOnChanges(changes: SimpleChanges): void {
    let d: RoomMessageDetails = this.messageDetails;
    let r: RoomViewDashboardRoomItem | RoomViewDashboardBedItem = this.room;

    let changed: boolean = false;

    if (changes.messageDetails && !changes.messageDetails.firstChange) {

      d = changes.messageDetails.currentValue;
      changed = true;
    }

    if (changes.room && !changes.room.firstChange) {
      r = changes.room.currentValue;
      changed = true;
    }
    if (changed) {
      this.isEditMode$.next(!!d.id);

      this.messageForm.controls.message.setValue(d.message);

      let reservationFlags: Array<boolean> = this._getSelectedReservationFlags(d, r);
      (this.messageForm.controls.reservations as FormArray).clear();
      for (let f of reservationFlags) {
        (this.messageForm.controls.reservations as FormArray).push(this._formBuilder.control(f));
      }

      this.messageForm.controls.mainTypeKey.setValue(d.forType === RoomMessageForType.RESERVATIONS ? "RESERVATIONS" : "ROOM");

      this.messageForm.updateValueAndValidity({ onlySelf: false });
      this.messageForm.markAsUntouched({ onlySelf: false });
      this.messageForm.markAsPristine({ onlySelf: false });
    }
  }

  private _getSelectedReservationFlags(d: RoomMessageDetails, room: RoomViewDashboardRoomItem | RoomViewDashboardBedItem): boolean[] {
    let reservationFlags: Array<boolean> = [];
    for (let r of room.reservations) {
      if (this.isEditMode$.value && d.roomMessageFilters.filter(f => f.referenceType === RoomMessageFilterReferenceType.RESERVATIONS && f.referenceId === r.id).length === 0) {
        reservationFlags.push(false);
      }
      else {
        reservationFlags.push(true);
      }
    }
    return reservationFlags;
  }

  setAdvancedMode() {
    this.advancedModeSet.next(true);
  }

  save() {
    if (this.messageForm.invalid) {
      this._toastr.error('Some of the message fields are invalid.');
      this.messageForm.markAllAsTouched();
      this.messageForm.markAsDirty({ onlySelf: false });
      return;
    }

    this.isLoading$.next(true);

    let fv = this.messageForm.getRawValue();
    let reservationIds: Array<string> = [];
    for (let reservationIndex = 0; reservationIndex < fv.reservations.length; reservationIndex++) {
      if (fv.reservations[reservationIndex] === true) {
        reservationIds.push(this.room.reservations[reservationIndex].id);
      }
    }

    let baseRequest: SaveSimpleRoomMessage = new SaveSimpleRoomMessage({
      forType: fv.mainTypeKey === "ROOM" ? RoomMessageForType.TODAY : RoomMessageForType.RESERVATIONS,
      hotelId: this._hotelService.getSelectedHotelId(),
      message: fv.message,
      reservationIds: reservationIds,
      roomId: this.room.id,
    });

    if (this.isEditMode$.value) {
      let request: UpdateSimpleMessageCommand = new UpdateSimpleMessageCommand({ ...baseRequest, id: this.messageDetails.id });
      this._roomMessageClient.updateSimpleMessage(request).subscribe(
        (response: ProcessResponse) => {
          if (response.hasError) {
            this._toastr.error(response.message);
          }
          else {
            this._toastr.success(response.message);
            this.saved.next(true);
          }
        },
        (error: Error) => { this._toastr.error(error.message); },
        () => { this.isLoading$.next(false); });
    }
    else {
      let request: InsertSimpleMessageCommand = new InsertSimpleMessageCommand(baseRequest);
      this._roomMessageClient.insertSimpleMessage(request).subscribe(
        (response: ProcessResponseOfGuid) => {
          if (response.hasError) {
            this._toastr.error(response.message);
          }
          else {
            this._toastr.success(response.message);
            this.saved.next(true);
          }
        },
        (error: Error) => { this._toastr.error(error.message); },
        () => { this.isLoading$.next(false); });
    }
  }

  cancel() {
    this.cancelled.next(true);
  }
}
