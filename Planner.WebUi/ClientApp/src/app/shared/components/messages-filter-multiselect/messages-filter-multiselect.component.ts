import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';
import { FormArray, FormBuilder, FormControl, FormGroup } from '@angular/forms';
import { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject, Observable } from 'rxjs';
import { map, startWith } from 'rxjs/operators';
import { DashboardClient, GetRoomViewDashboardFilterValuesQuery, RoomMessageFilterGroup, RoomMessageFilterGroupItem, MasterFilterType, RoomMessageFilterReferenceType, GetRoomMessagesFilterValuesQuery, RoomMessageClient, RoomMessageFilterValues, SaveRoomMessageFilter } from '../../../core/autogenerated-clients/api-client';

export class MessagesFilterValue {
  type: RoomMessageFilterReferenceType;
  id: string;
  name: string;
  description: string;
}

@Component({
  selector: 'app-messages-filter-multiselect',
  templateUrl: './messages-filter-multiselect.component.html',
  styleUrls: ['./messages-filter-multiselect.component.scss']
})
export class MessagesFilterMultiselectComponent implements OnInit, OnChanges {

  @Input() elementId: string = "messages-fmultiselect-id";
  @Input() filterGroups: Array<RoomMessageFilterGroup> = [];
  @Input() filterValuesFormArray: FormArray;

  @Output() changed: EventEmitter<SaveRoomMessageFilter[]> = new EventEmitter<SaveRoomMessageFilter[]>();

  //filterForm: FormGroup;
  keywordsControl: FormControl;

  isLoadingFilterValues$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  //filteredFilterGroups$: Observable<Array<RoomMessageFilterGroup>>;
  filteredFilterGroups$: BehaviorSubject<Array<RoomMessageFilterGroup>> = new BehaviorSubject<Array<RoomMessageFilterGroup>>([]);
  //selectedFilterValues$: BehaviorSubject<Array<SaveRoomMessageFilter>> = new BehaviorSubject<Array<SaveRoomMessageFilter>>([]);



  constructor(private _formBuilder: FormBuilder, private _toastr: ToastrService, private _dashboardClient: DashboardClient, private _roomMessageClient : RoomMessageClient) {
  }

  ngOnInit(): void {
    this.keywordsControl = new FormControl({ value: '', disabled: false });

    this.keywordsControl.valueChanges
      .pipe(
        startWith(''),
        map(value => this._filter(value))
      )
      .subscribe(items => this.filteredFilterGroups$.next(items));
  }

  ngOnChanges(changes: SimpleChanges): void {
    if (changes.filterGroups && !changes.filterGroups.firstChange) {
      this.filteredFilterGroups$.next(changes.filterGroups.currentValue);
    }
  }

  select(eventData: MatAutocompleteSelectedEvent) {
    let itemId = eventData.option.value;
    let groupName = eventData.option.group.label;
    let group = this.filterGroups.find(g => g.name === groupName);

    if (!this._isItemAlreadyAdded(itemId, group.referenceType)) {
      let item = group.items.find(a => a.id === itemId);
      this.filterValuesFormArray.push(this._formBuilder.group({
        referenceId: item.id,
        referenceDescription: item.description,
        referenceName: item.name,
        referenceType: group.referenceType
      }));
      //let fvs = [...this.selectedFilterValues$.value, new SaveRoomMessageFilter({ referenceId: item.id, referenceName: item.name, referenceDescription: item.description, referenceType: group.referenceType })];
      //this.selectedFilterValues$.next(fvs);

      //this.changed.next(this.selectedFilterValues$.value);
    }

    this.keywordsControl.setValue('');
    (<any>document.getElementById(this.elementId)).blur();
  }

  remove(index: number) {
    this.filterValuesFormArray.removeAt(index);
    //var selectedFilterValues = [...this.selectedFilterValues$.value];
    //selectedFilterValues.splice(index, 1);
    //this.selectedFilterValues$.next(selectedFilterValues);

    //this.changed.next(this.selectedFilterValues$.value);
  }

  private _filter(value: any): RoomMessageFilterGroup[] {
    if (!value) {
      return this.filterGroups;
    }

    if (typeof value === "string") {
      let valueParameter = value.toLowerCase();

      let groups: RoomMessageFilterGroup[] = [];
      for (let group of this.filterGroups) {
        let grItems = group.items.filter(a => a.name.toLowerCase().indexOf(valueParameter) >= 0);
        if (grItems.length > 0) {
          groups.push(new RoomMessageFilterGroup({
            referenceType: group.referenceType,
            name: group.name,
            items: grItems,
          }));
        }
      }

      return groups;
    }

    return this.filterGroups;
  }

  private _isItemAlreadyAdded(itemId: string, type: RoomMessageFilterReferenceType): boolean {
    return !!this.filterValuesFormArray.getRawValue().find(a => a.referenceId === itemId && a.referenceType === type);
  }
}
