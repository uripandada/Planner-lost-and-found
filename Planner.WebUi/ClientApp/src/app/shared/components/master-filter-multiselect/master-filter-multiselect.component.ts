import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormBuilder, FormControl, FormGroup } from '@angular/forms';
import { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject, Observable } from 'rxjs';
import { map, startWith } from 'rxjs/operators';
import { DashboardClient, GetRoomViewDashboardFilterValuesQuery, MasterFilterGroup, MasterFilterGroupType, MasterFilterType } from '../../../core/autogenerated-clients/api-client';

export class MasterFilterValue {
  type: MasterFilterGroupType;
  id: string;
  name: string;
  description: string;
}

@Component({
  selector: 'app-master-filter-multiselect',
  templateUrl: './master-filter-multiselect.component.html',
  styleUrls: ['./master-filter-multiselect.component.scss']
})
export class MasterFilterMultiselectComponent {

  @Input() elementId: string = "default-affinities-input-1";
  @Input() hotelId: string = null;

  @Output() changed: EventEmitter<MasterFilterValue[]> = new EventEmitter<MasterFilterValue[]>();

  //filterForm: FormGroup;
  keywordsControl: FormControl;
  filterGroups: Array<MasterFilterGroup> = [];

  isLoadingFilterValues$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  filteredFilterGroups$: Observable<Array<MasterFilterGroup>>;
  selectedFilterValues$: BehaviorSubject<Array<MasterFilterValue>> = new BehaviorSubject<Array<MasterFilterValue>>([]);

  constructor(private _formBuilder: FormBuilder, private _toastr: ToastrService, private _dashboardClient: DashboardClient) {
  }

  ngOnInit(): void {
    this.isLoadingFilterValues$.next(true);

    this.keywordsControl = new FormControl({ value: '', disabled: true });

    this.filteredFilterGroups$ = this.keywordsControl.valueChanges
      .pipe(
        startWith(''),
        map(value => this._filter(value))
    );

    this._dashboardClient.getRoomViewDashboardFilterValues(new GetRoomViewDashboardFilterValuesQuery({ type: MasterFilterType.ROOMS_OVERVIEW_DASHBOARD, hotelId: this.hotelId }))
      .subscribe(
        (groups: MasterFilterGroup[]) => {
          this.filterGroups = groups;
        },
        (error: Error) => {

        },
        () => {
          this.isLoadingFilterValues$.next(false);
          this.keywordsControl.enable();
        }
      );
  }

  select(eventData: MatAutocompleteSelectedEvent) {
    let itemId = eventData.option.value;
    let groupName = eventData.option.group.label;
    let group = this.filterGroups.find(g => g.name === groupName);

    if (!this._isItemAlreadyAdded(itemId, group.type)) {
      let item = group.items.find(a => a.id === itemId);
      var selectedFilterValues = [...this.selectedFilterValues$.value, <MasterFilterValue>{ id: item.id, name: item.name, description: item.description, type: group.type }];
      this.selectedFilterValues$.next(selectedFilterValues);

      this.changed.next(this.selectedFilterValues$.value);
    }

    this.keywordsControl.setValue('');
    (<any>document.getElementById(this.elementId)).blur();
  }

  remove(index: number) {
    var selectedFilterValues = [...this.selectedFilterValues$.value];
    selectedFilterValues.splice(index, 1);
    this.selectedFilterValues$.next(selectedFilterValues);

    this.changed.next(this.selectedFilterValues$.value);
  }

  private _filter(value: any): MasterFilterGroup[] {
    if (!value) {
      return this.filterGroups;
    }

    if (typeof value === "string") {
      let valueParameter = value.toLowerCase();

      let groups: MasterFilterGroup[] = [];
      for (let group of this.filterGroups) {
        let grItems = group.items.filter(a => a.name.toLowerCase().indexOf(valueParameter) >= 0);
        if (grItems.length > 0) {
          groups.push(new MasterFilterGroup({
            type: group.type,
            name: group.name,
            items: grItems,
          }));
        }
      }

      return groups;
    }

    return this.filterGroups;
  }

  private _isItemAlreadyAdded(itemId: string, type: MasterFilterGroupType): boolean {
    return !!this.selectedFilterValues$.value.find(a => a.id === itemId && a.type === type);
  }
}
