import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject } from 'rxjs';
import { InsertRoleCommand, ProcessResponseOfGuid, RoleClient, RoleListModel, RoleModel, UpdateRoleCommand } from 'src/app/core/autogenerated-clients/api-client';
import { LoadingService } from 'src/app/core/services/loading.service';

@Component({
  selector: 'app-role-edit',
  templateUrl: './role-edit.component.html',
  styleUrls: ['./role-edit.component.scss']
})
export class RoleEditComponent implements OnInit, OnChanges {

  hotelAccessTypes: Array<{ key: string, value: string }> = [
    { key: "ALL", value: "User can access all hotels" },
    { key: "MULTIPLE", value: "User can access specified hotels" },
    { key: "SINGLE", value: "User can access a single hotel" },
  ];

  @Input() role: RoleModel;
  @Output() reloadList: EventEmitter<boolean> = new EventEmitter<boolean>();
  @Output() cancelled: EventEmitter<boolean> = new EventEmitter<boolean>();
  @Output() inserted: EventEmitter<RoleModel> = new EventEmitter<RoleModel>();
  @Output() updated: EventEmitter<RoleModel> = new EventEmitter<RoleModel>();
  @Output() deleted: EventEmitter<RoleModel> = new EventEmitter<RoleModel>();

  roleForm: FormGroup;
  isCreateNew: boolean;

  constructor(
    private formBuilder: FormBuilder,
    private roleClient: RoleClient,
    private toastr: ToastrService,
    private loading: LoadingService
  ) {

  }

  ngOnChanges(changes: SimpleChanges): void {
    this.initForm();
  }

  ngOnInit() {
    this.initForm();
  }

  initForm() {
    this.roleForm = this.formBuilder.group({
      id: [this.role.id],
      name: [this.role.name],
      hotelAccessTypeKey: [this.role.hotelAccessTypeKey],

      assetsClaim: [this.role.assetsClaim],
      roomsClaim: [this.role.roomsClaim],
      usersClaim: [this.role.usersClaim],
      roleManagementClaim: [this.role.roleManagementClaim],
      roomCategoriesClaim: [this.role.roomCategoriesClaim],
      hotelSettingClaim: [this.role.hotelSettingClaim],

      roomInsightsClaim: [this.role.roomInsightsClaim],
      userInsightsClaim: [this.role.userInsightsClaim],
      tasksClaim: [this.role.tasksClaim],
      reservationClaim: [this.role.reservationClaim],
      cleaningPlannerClaim: [this.role.cleaningPlannerClaim],
      cleaningCalendarClaim: [this.role.cleaningCalendarClaim],
      reservationCalendarClaim: [this.role.reservationCalendarClaim],
      lostAndFoundClaim: [this.role.lostAndFoundClaim],
      onGuardClaim: [this.role.onGuardClaim],
    });

    if (this.role.isSystemRole) {
      this.roleForm.controls.name.disable();
    }

    if (this.role.id) {
      this.isCreateNew = false;
    }
    else {
      this.isCreateNew = true;
    }
  }

  save() {
    this.loading.start();

    if (this.roleForm.controls.id.value === '') {
      let insertRequest: InsertRoleCommand = new InsertRoleCommand(
        {
          name: this.roleForm.controls.name.value,
          hotelAccessTypeKey: this.roleForm.controls.hotelAccessTypeKey.value,

          roomsClaim: this.roleForm.controls.roomsClaim.value,
          assetsClaim: this.roleForm.controls.assetsClaim.value,
          usersClaim: this.roleForm.controls.usersClaim.value,
          roleManagementClaim: this.roleForm.controls.roleManagementClaim.value,
          roomCategoriesClaim: this.roleForm.controls.roomCategoriesClaim.value,
          hotelSettingClaim: this.roleForm.controls.hotelSettingClaim.value,

          roomInsightsClaim: this.roleForm.controls.tasksClaim.value,
          userInsightsClaim: this.roleForm.controls.tasksClaim.value,
          tasksClaim: this.roleForm.controls.tasksClaim.value,
          reservationClaim: this.roleForm.controls.reservationClaim.value,
          cleaningPlannerClaim: this.roleForm.controls.cleaningPlannerClaim.value,
          cleaningCalendarClaim: this.roleForm.controls.cleaningCalendarClaim.value,
          reservationCalendarClaim: this.roleForm.controls.reservationCalendarClaim.value,
          lostAndFoundClaim: this.roleForm.controls.lostAndFoundClaim.value,
          onGuardClaim: this.roleForm.controls.onGuardClaim.value,
        });
      this.roleClient.insert(insertRequest).subscribe((response: ProcessResponseOfGuid) => {
        if (response.isSuccess) {
          this.toastr.success(response.message);

          this.inserted.next(new RoleModel({
            id: response.data,
            isSystemRole: this.role.isSystemRole,
            name: this.roleForm.controls.name.value,
            hotelAccessTypeKey: this.roleForm.controls.hotelAccessTypeKey.value,

            roomsClaim: this.roleForm.controls.roomsClaim.value,
            assetsClaim: this.roleForm.controls.assetsClaim.value,
            usersClaim: this.roleForm.controls.usersClaim.value,
            roleManagementClaim: this.roleForm.controls.roleManagementClaim.value,
            roomCategoriesClaim: this.roleForm.controls.roomCategoriesClaim.value,
            hotelSettingClaim: this.roleForm.controls.hotelSettingClaim.value,

            roomInsightsClaim: this.roleForm.controls.tasksClaim.value,
            userInsightsClaim: this.roleForm.controls.tasksClaim.value,
            tasksClaim: this.roleForm.controls.tasksClaim.value,
            reservationClaim: this.roleForm.controls.reservationClaim.value,
            cleaningPlannerClaim: this.roleForm.controls.cleaningPlannerClaim.value,
            cleaningCalendarClaim: this.roleForm.controls.cleaningCalendarClaim.value,
            reservationCalendarClaim: this.roleForm.controls.reservationCalendarClaim.value,
            lostAndFoundClaim: this.roleForm.controls.lostAndFoundClaim.value,
            onGuardClaim: this.roleForm.controls.onGuardClaim.value,
          }));

          this.role.id = response.data;
          this.isCreateNew = false;
        } else {
          this.toastr.error(response.message);
        }
        this.loading.stop();
      },
        (error) => {
          this.toastr.error(error);
          this.loading.stop();
        }
      );
    } else {
      let updateRequest: UpdateRoleCommand = new UpdateRoleCommand(
        {
          id: this.role.id,
          name: this.roleForm.controls.name.value,
          hotelAccessTypeKey: this.roleForm.controls.hotelAccessTypeKey.value,

          roomsClaim: this.roleForm.controls.roomsClaim.value,
          assetsClaim: this.roleForm.controls.assetsClaim.value,
          usersClaim: this.roleForm.controls.usersClaim.value,
          roleManagementClaim: this.roleForm.controls.roleManagementClaim.value,
          roomCategoriesClaim: this.roleForm.controls.roomCategoriesClaim.value,
          hotelSettingClaim: this.roleForm.controls.hotelSettingClaim.value,

          roomInsightsClaim: this.roleForm.controls.tasksClaim.value,
          userInsightsClaim: this.roleForm.controls.tasksClaim.value,
          tasksClaim: this.roleForm.controls.tasksClaim.value,
          reservationClaim: this.roleForm.controls.reservationClaim.value,
          cleaningPlannerClaim: this.roleForm.controls.cleaningPlannerClaim.value,
          cleaningCalendarClaim: this.roleForm.controls.cleaningCalendarClaim.value,
          reservationCalendarClaim: this.roleForm.controls.reservationCalendarClaim.value,
          lostAndFoundClaim: this.roleForm.controls.lostAndFoundClaim.value,
          onGuardClaim: this.roleForm.controls.onGuardClaim.value,
        });
      this.roleClient.update(updateRequest).subscribe((respone) => {
        if (respone.isSuccess) {
          this.toastr.success(respone.message);

          this.updated.next(new RoleModel({
            id: this.role.id,
            isSystemRole: this.role.isSystemRole,
            name: this.roleForm.controls.name.value,
            hotelAccessTypeKey: this.roleForm.controls.hotelAccessTypeKey.value,

            roomsClaim: this.roleForm.controls.roomsClaim.value,
            assetsClaim: this.roleForm.controls.assetsClaim.value,
            usersClaim: this.roleForm.controls.usersClaim.value,
            roleManagementClaim: this.roleForm.controls.roleManagementClaim.value,
            roomCategoriesClaim: this.roleForm.controls.roomCategoriesClaim.value,
            hotelSettingClaim: this.roleForm.controls.hotelSettingClaim.value,

            roomInsightsClaim: this.roleForm.controls.tasksClaim.value,
            userInsightsClaim: this.roleForm.controls.tasksClaim.value,
            tasksClaim: this.roleForm.controls.tasksClaim.value,
            reservationClaim: this.roleForm.controls.reservationClaim.value,
            cleaningPlannerClaim: this.roleForm.controls.cleaningPlannerClaim.value,
            cleaningCalendarClaim: this.roleForm.controls.cleaningCalendarClaim.value,
            reservationCalendarClaim: this.roleForm.controls.reservationCalendarClaim.value,
            lostAndFoundClaim: this.roleForm.controls.lostAndFoundClaim.value,
            onGuardClaim: this.roleForm.controls.onGuardClaim.value,
          }));
        } else {
          this.toastr.error(respone.message);
        }
        this.loading.stop();
      },
        (error) => {
          this.toastr.error(error);
          this.loading.stop();
        }
      );
    }
  }

  delete() {
    if (!this.role.isSystemRole) {
      this.loading.start();

      this.roleClient.delete(this.role.id).subscribe((respone) => {
        if (respone.isSuccess) {
          this.toastr.success(respone.message);
          this.deleted.next(this.role);
        } else {
          this.toastr.error(respone.message);
        }
        this.loading.stop();
      },
        (error) => {
          this.toastr.error(error);
          this.loading.stop();
        });
    }
  }


  checkEditable() {
    // if (this.role.isSystemRole) {
    //   this.roleForm.disable();
    // } else {
    //   this.roleForm.enable();
    // }
  }

  cancel() {
    this.cancelled.next(true);
  }

  private _setCreateNewStatus() {
    if (this.role.id) {
      this.isCreateNew = false;
    }
    else {
      this.isCreateNew = true;
    }
  }

}
