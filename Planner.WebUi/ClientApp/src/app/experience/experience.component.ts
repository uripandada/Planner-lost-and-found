import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { BehaviorSubject } from 'rxjs';
import { ExperienceDetailsViewModel, ExperienceGridItemViewModel, ExperienceManagementClient, GetExperienceDetailsQuery, GetExperienceListQuery, PageOfOfExperienceGridItemViewModel } from '../core/autogenerated-clients/api-client';
import * as moment from 'moment';
import { LoadingService } from '../core/services/loading.service';
import { ToastrService } from 'ngx-toastr';
import { HotelItemData, } from 'src/app/core/autogenerated-clients/api-client';
import { HotelService } from '../core/services/hotel.service';
import { data } from 'jquery';

@Component({
  selector: 'app-experience',
  templateUrl: './experience.component.html',
  styleUrls: ['./experience.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class ExperienceComponent implements OnInit {

  filterForm: FormGroup;
  itemsList: BehaviorSubject<ExperienceGridItemViewModel[]> = new BehaviorSubject<ExperienceGridItemViewModel[]>(null);
  selectedItem: BehaviorSubject<ExperienceGridItemViewModel> = new BehaviorSubject<ExperienceGridItemViewModel>(null);
  areDetailsDisplayed$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);

  loadedNumber$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  totalNumber$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  showLoadMore$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  hotels: HotelItemData[] = [];
  pendingNum: number;
  unclaimedNum: number;
  guestNum: number;
  gueNum: number;
  returnedNum: number;
  canceledNum: number;

  public foundStatuses: any;
  public guestStatuses: any;
  public deliveryStatuses: any;
  public otherStatuses: any;

  foundStatusMappings: { [index: number]: string } = {};
  guestStatusMappings: { [index: number]: string } = {};
  deliveryStatusMappings: { [index: number]: string } = {};
  otherStatusMappings: { [index: number]: string } = {};

  constructor(
    private formBuilder: FormBuilder,
    public loading: LoadingService,
    private ExperienceManagementClient: ExperienceManagementClient,
    private toastr: ToastrService,
    public hotelService: HotelService,
  ) {
    this.hotels = hotelService.getHotels();
  }

  ngOnInit(): void {

    this.filterForm = this.formBuilder.group({
      keywords: [''],
      dateFrom: [''],
      dateTo: [''],
      hotelId: [],
    });

    this.filterForm.controls.hotelId.setValue(this.hotels[0].id);

    this.filterForm.valueChanges.subscribe(
      value => {
        this.reloadList(true);
      }
    );

    this.reloadList(true);
  }

  createNewFound() {
    const item = new ExperienceDetailsViewModel({
      id: null,
      roomName: '',
      guestName: '',
      checkIn: null,
      checkOut: null,
      reservationId: '',
      vip: null,
      email: null,
      phoneNumber: null,
      type!: 0,
      description: null,
      actions: null,
      internalFollowUp: null,
      experienceCategoryId!: '',
      experienceCompensationId!: ''
    });
    this.selectedItem.next(item);
    this.areDetailsDisplayed$.next(false);
    this.areDetailsDisplayed$.next(true);
  }

  // columnFilter(val: any){
  //   console.log(val);
  //   this.loading.start();
  // }


  reloadList(reload: boolean) {
    if (reload) {
      this.loadedNumber$.next(0);
    }

    this.areDetailsDisplayed$.next(false);

    this.loading.start();
    this.ExperienceManagementClient.getList(new GetExperienceListQuery({
      skip: this.loadedNumber$.value,
      take: 20,
      dateFrom: this.filterForm.controls.dateFrom.value,
      dateTo: this.filterForm.controls.dateTo.value,
      keywords: this.filterForm.controls.keywords.value,
    })).subscribe((response) => {
      console.log(response.items);
      this.itemsList.next(response.items);
      this.totalNumber$.next(response.totalNumberOfItems);
      this.loadedNumber$.next(this.loadedNumber$.value + 20);
      this.showLoadMore$.next(this.loadedNumber$.value < this.totalNumber$.value);
      this.loading.stop();
    },
      (error) => {
        this.toastr.error(error);
        this.loading.stop();
      });
  }

  selectItem(item: ExperienceDetailsViewModel) {
    this.ExperienceManagementClient.getById(new GetExperienceDetailsQuery({ id: item.id })).subscribe(response => {
      console.log(response)
    })
  }

  onItemEditCancelled() {
    this.areDetailsDisplayed$.next(false);
    this.selectedItem.next(null);
  }

}
