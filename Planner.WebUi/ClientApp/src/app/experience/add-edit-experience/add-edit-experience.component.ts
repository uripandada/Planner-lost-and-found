import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output, SimpleChanges } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject, Subscription } from 'rxjs';
import {
  ExperienceCategoryGridItemViewModel,
  ExtendedWhereData,
  HotelItemData,
  // InsertExperienceCommand,
  // ExperienceClient,
  // ExperienceModel,
  // SolveStatus,
  // ClientStatus,
  // SolveStatus1,
  TaskWhereData,
  // ExperienceWhereData,
  // UpdateExperienceCommand
} from 'src/app/core/autogenerated-clients/api-client';
import moment from 'moment';
import { HotelService } from '../../core/services/hotel.service';
import {Observable} from 'rxjs';
import {map, startWith} from 'rxjs/operators';
import { Select2OptionData } from 'ng-select2';
import { ArrayDataSource } from '@angular/cdk/collections';
import { ArrayType } from '@angular/compiler';
import { THIS_EXPR } from '@angular/compiler/src/output/output_ast';


@Component({
  selector: 'app-add-edit-experience',
  templateUrl: './add-edit-experience.component.html',
  styleUrls: ['./add-edit-experience.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class AddEditExperienceComponent implements OnInit {

  // @Input() item: ExperienceModel;
  // @Input() allWheres: Array<ExperienceWhereData> = [];
  @Input() allWheres: Array<TaskWhereData> = [];
  @Input() allCategories: Array<ExperienceCategoryGridItemViewModel> = [];

  @Output() reloadList: EventEmitter<boolean> = new EventEmitter<boolean>();
  @Output() cancelled: EventEmitter<boolean> = new EventEmitter<boolean>();

  // add experience search field start

  myControl = new FormControl();
  options: string[] = ['NAME1', 'NAME2', 'NAME3', 'NAME4', 'NAME5'];
  filteredOptions: Observable<string[]>;

  public experienceCategory: Array<Select2OptionData>;
  public compensation: Array<Select2OptionData>;

  item: any = [];

  foundForm: FormGroup;

  // solveStatuses: Array<{ key: SolveStatus, value: string }> = [];
  // clientStatuses: Array<{ key: ClientStatus, value: string }> = [];
  // solveStatuses1: Array<{ key: SolveStatus1, value: string }> = [];

  solveStatuses: Array<{ key: number, value: string }> = [];
  clientStatuses: Array<{ key: number, value: string }> = [];
  solveStatuses1: Array<{ key: number, value: string }> = [];

  solveStatusMappings: { [index: number]: string } = {};
  clientStatusMappings: { [index: number]: string } = {};
  solveStatusMappings1: { [index: number]: string } = {};

  statusChange$: Subscription;
  statusFlag: number;

  selectedSolveStatus: string;
  selectedClientStatus: string;

  isSolveStatus: boolean;
  isClientStatus: boolean;
  isSolveStatus1: boolean;

  hotels: HotelItemData[] = [];

  public isCreateNew = true;
  constructor(
    private formBuilder: FormBuilder,
    private toastr: ToastrService,
    private _route: ActivatedRoute,
    // private experienceClient: ExperienceClient,
    public hotelService: HotelService,
  ) {

    this.solveStatuses.push({ key: 1, value: "Pending" });

    this.clientStatuses.push({ key: 1, value: "No client action" });
    this.clientStatuses.push({ key: 2, value: "Meet with client" });
    this.clientStatuses.push({ key: 3, value: "Meet with Client at C/O(avecArchiveiuto)" });

    this.solveStatuses1.push({ key: 1, value: "Resolved" });
    this.solveStatuses1.push({ key: 2, value: "Closed" });

    this.hotels = hotelService.getHotels();

  }


  ngOnInit(): void {

    this.compensation = [
      {
        id: 'compensation1',
        text: 'Compensation 1'
      },
      {
        id: 'compensation2',
        text: 'Compensation 2'
      },
      {
        id: 'compensation3',
        text: 'Compensation 3'
      },
      {
        id: 'compensation4',
        text: 'Compensation 4'
      }
    ];

    this.experienceCategory = [
      {
        id: '0',
        text: 'Happyness',
        children: [
          {
            id: 'cleanroom',
            text: 'Happyness - Clean Room'
          },
          {
            id: 'niceteam',
            text: 'Happyness - Nice Team'
          },
          {
            id: 'niceview',
            text: 'Happyness - Nice View'
          }
        ]
      },
      {
        id: '0',
        text: 'Housekeeping',
        children: [
          {
            id: 'roomnotclean',
            text: 'Housekeeping - Room not clean'
          }
        ]
      }
    ]

    this.filteredOptions = this.myControl.valueChanges.pipe(
      startWith(''),
      map(value => this._filter(value)),
    );

    this.allWheres = this._route.snapshot.data.allWheres;
    this.allCategories = this._route.snapshot.data.allCategories;
    this.initForm();

  }

  private _filter(value: string): string[] {
    const filterValue = value.toLowerCase();

    return this.options.filter(option => option.toLowerCase().includes(filterValue));
  }

  ngOnChanges(changes: SimpleChanges): void {
    if (this.item.id) {
      this.isCreateNew = false;

    } else {
      this.isCreateNew = true;
    }

    if (!changes.item.firstChange) {
      this.setFormData();
    }
  }

  solveStatusSelectChanged() {
    this.isSolveStatus = true;
    this.isClientStatus = false;
    this.isSolveStatus1 = false;
  }

  clientStatusSelectChanged() {
    this.isSolveStatus = true;
    this.isClientStatus = true;
    this.isSolveStatus1 = false;
  }

  solveStatusSelectChanged1(value:any) {
    if ( value == this.solveStatuses1[0].key) {
      this.isSolveStatus = true;
      this.isClientStatus = true;
      this.isSolveStatus1 = false;
    }else {
      this.isSolveStatus = true;
      this.isClientStatus = true;
      this.isSolveStatus1 = true;
    }
  }

  initForm() {
    let where: TaskWhereData;
    // let where: ExperienceWhereData;
    if (this.item.reservationId) {
      where = this.allWheres.find(x => x.referenceId == this.item.reservationId);
    }
    else if (this.item.roomId) {
      where = this.allWheres.find(x => x.referenceId == this.item.roomId);
    }
    
    this.isSolveStatus = true;
    this.isClientStatus = true;

    this.foundForm = this.formBuilder.group({
      hotelId: [this.item.id],
      guest_name: [this.item.guest_name],
      room_name: [this.item.room_name],
      check_in: [this.item.check_in],
      check_out: [this.item.check_out],
      reservation_id: [this.item.reservation_id],
      vip: [this.item.vip],
      group: [this.item.group],
      experience_email: [this.item.experience_email],
      experience_phonenumber: [this.item.experience_phonenumber],
      experience_type: [this.item.experience_type],
      experience_category: [this.item.experience_category],
      actions: [this.item.actions],
      internal_follow_up: [this.item.internal_follow_up],
      compensation_name: [this.item.compensation_name],
      description: [this.item.description],
      solveStatus: [1],
      clientStatus: [1],
      solveStatus1: [1],
    });

  }

  setFormData() {
    let where: TaskWhereData;
    // let where: ExperienceWhereData;
    if (this.item.reservationId) {
      where = this.allWheres.find(x => x.referenceId == this.item.reservationId);
    }
    else if (this.item.roomId) {
      where = this.allWheres.find(x => x.referenceId == this.item.roomId);
    }

    this.isSolveStatus = true;
    this.isClientStatus = true;

    if (this.item.isSolveStatus1 != 1) {
      this.isSolveStatus1 = true;
    } else {
      this.isSolveStatus1 = false;
    }

    this.foundForm.controls.hotelId.setValue(this.item.hotelId);
    this.foundForm.controls.solveStatus.setValue(this.item.solveStatus);
    this.foundForm.controls.clientStatus.setValue(this.item.clientStatus);
    this.foundForm.controls.solveStatus1.setValue(this.item.solveStatus1);
    this.foundForm.controls.guest_name.setValue(this.item.guest_name);
    this.foundForm.controls.room_name.setValue(this.item.room_name);
    this.foundForm.controls.check_in.setValue(this.item.check_in);
    this.foundForm.controls.check_out.setValue(this.item.check_out);
    this.foundForm.controls.reservation_id.setValue(this.item.reservation_id);
    this.foundForm.controls.vip.setValue(this.item.vip);
    this.foundForm.controls.group.setValue(this.item.group);
    this.foundForm.controls.experience_email.setValue(this.item.experience_email);
    this.foundForm.controls.experience_phonenumber.setValue(this.item.experience_phonenumber);
    this.foundForm.controls.description.setValue(this.item.description);
    this.foundForm.controls.actions.setValue(this.item.actions);
    this.foundForm.controls.internal_follow_up.setValue(this.item.internal_follow_up);
    this.foundForm.controls.compensation_name.setValue(this.item.compensation_name);
    this.foundForm.controls.experience_category.setValue(this.item.experience_category);
    this.foundForm.controls.experience_type.setValue(this.item.experience_type);
  }

  get f() {
    return this.foundForm.controls;
  }

  save() {
    this.foundForm.markAsTouched({ onlySelf: false });
    if (this.foundForm?.invalid) {
      this.toastr.error("You have to fix invalid form fields before you can continue.");
      return;
    }

    let formValues = this.foundForm.getRawValue();

    let insertRequest = [
      {
        hotelId: formValues.hotelId,
        guest_name: formValues.guest_name,
        room_name: formValues.room_name,
        check_in: formValues.check_in,
        check_out: formValues.check_out,
        reservation_id: formValues.reservation_id,
        vip: formValues.vip,
        group: formValues.group,
        experience_email: formValues.experience_email,
        experience_phonenumber: formValues.experience_phonenumber,
        experience_type: formValues.experience_type,
        experience_category: formValues.experience_category,
        actions: formValues.actions,
        internal_follow_up: formValues.internal_follow_up,
        compensation_name: formValues.compensation_name,
        description: formValues.description,
        solveStatus: formValues.solveStatus,
        clientStatus: formValues.clientStatus,
        solveStatus1: formValues.solveStatus1,
      }
    ]

    console.log(insertRequest);

    this.item.push(insertRequest);

    // let insertRequest = new InsertExperienceCommand({
    //   hotelId: formValues.hotelId,
    //   guest_name: formValues.guest_name,
    //   room_name: formValues.room_name,
    //   check_in: formValues.check_in,
    //   check_out: formValues.check_out,
    //   reservation_id: formValues.reservation_id,
    //   vip: formValues.vip,
    //   group: formValues.group,
    //   experience_email: formValues.experience_email,
    //   experience_phonenumber: formValues.experience_phonenumber,
    //   experience_type: formValues.experience_type,
    //   experience_category: formValues.experience_category,
    //   actions: formValues.actions,
    //   internal_follow_up: formValues.internal_follow_up,
    //   compensation_name: formValues.compensation_name,
    //   description: formValues.description,
    //   solveStatus: formValues.solveStatus,
    //   clientStatus: formValues.clientStatus,
    //   solveStatus1: formValues.solveStatus1,
    // });

    if (this.item.id === null) {

      // this.experienceClient.insert(insertRequest).subscribe(
      //   response => {
      //     if (response.isSuccess) {
      //       this.toastr.success(response.message);
      //       this.reloadList.next(true);
      //     } else {
      //       this.toastr.error(response.message);
      //     }
      //   },
      //   error => {
      //     this.toastr.error(error);
      //   }
      // );
    } else {
      // let updateRequest = null;
      // updateRequest = new UpdateExperienceCommand({
      //   id: this.item.id,
      //   ...insertRequest
      // });
      // this.experienceClient.update(updateRequest).subscribe(
      //   response => {
      //     if (response.isSuccess) {
      //       this.toastr.success(response.message);
      //       this.reloadList.next(true);
      //     } else {
      //       this.toastr.error(response.message);
      //     }
      //   },
      //   error => {
      //     this.toastr.error(error);
      //   }
      // );
    }

  }


  cancel() {
    this.cancelled.next(true);
  }

  public canShowErrorMessage(control: string,): boolean {
    const foundForm = this.foundForm as FormGroup;
    if (foundForm.controls[control]) {
      return !!(
        (foundForm.controls[control].touched || foundForm.touched) &&
        foundForm.controls[control].errors
      );
    } else {
      return false;
    }
  }

  getSelection(data: ExtendedWhereData) {
    this.foundForm.controls.whereFrom.setValue(data);
    // this.foundForm.controls.clientName.setValue(data.guestName);
  }

  ngOnDestroy(): void {
    if (this.statusChange$) this.statusChange$.unsubscribe();
  }

}
