import { EventEmitter, Injectable } from '@angular/core';
import * as signalR from '@microsoft/signalr';
import { AutoGeneratedPlan, RealTimeRefreshRoomsOverviewDashboardMessage, RealTimeUserOnDutyChangedMessage, RealTimeCleaningPlannerCleaningChangedMessage, RealTimeTasksChangedMessage, RealTimeCpsatCleaningPlanningFinishedMessage, RealTimeCpsatCleaningPlanningProgressChangedMessage, RealTimeMessagesChangedMessage } from '../autogenerated-clients/api-client';

export class RealTimeRoomsOverviewService {
  refreshRoomsOverviewDashboard: EventEmitter<RealTimeRefreshRoomsOverviewDashboardMessage> = new EventEmitter<RealTimeRefreshRoomsOverviewDashboardMessage>();
  roomMessagesChanged: EventEmitter<RealTimeMessagesChangedMessage> = new EventEmitter<RealTimeMessagesChangedMessage>();

  private _hubUrl: string = "/hubs/rooms-overview";
  private _connection: signalR.HubConnection;

  private _refreshDashboardEventName: string = "RefreshRoomsOverviewDashboard";
  private _messagesChangedEventName: string = "MessagesChanged";

  constructor() { }

  public connect(): Promise<void> {
    return new Promise((resolve, reject) => {
      this._connection = new signalR.HubConnectionBuilder()
        .withUrl(window.location.origin + this._hubUrl)
        .build();

      this._connection
        .start()
        .then(() => {
          this._registerEvents();
          resolve();
        })
        .catch((error) => {
          reject();
        });
    });
  }


  public disconnect() {
    this._connection.off(this._refreshDashboardEventName);
    this._connection.off(this._messagesChangedEventName);
    this._connection.stop();
  }

  private _registerEvents() {
    this._connection.on(this._refreshDashboardEventName, (message: RealTimeRefreshRoomsOverviewDashboardMessage) => {
      this.refreshRoomsOverviewDashboard.next(message);
    });
    this._connection.on(this._messagesChangedEventName, (message: RealTimeMessagesChangedMessage) => {
      this.roomMessagesChanged.next(message);
    });
  }
}


export class RealTimeUsersService {
  usersOnDutyStatusChanged: EventEmitter<Array<RealTimeUserOnDutyChangedMessage>> = new EventEmitter<Array<RealTimeUserOnDutyChangedMessage>>();

  private _hubUrl: string = "/hubs/users";
  private _connection: signalR.HubConnection;

  private _usersOnDutyStatusChangedEventName: string = "ReceiveUserOnDutyChanged";

  constructor() { }

  public connect(): Promise<void> {
    return new Promise((resolve, reject) => {
      this._connection = new signalR.HubConnectionBuilder()
        .withUrl(window.location.origin + this._hubUrl)
        .build();

      this._connection
        .start()
        .then(() => {
          this._registerEvents();
          resolve();
        })
        .catch((error) => {
          reject();
        });
    });
  }


  public disconnect() {
    this._connection.off(this._usersOnDutyStatusChangedEventName);
    this._connection.stop();
  }

  private _registerEvents() {
    this._connection.on(this._usersOnDutyStatusChangedEventName, (messages: Array<RealTimeUserOnDutyChangedMessage>) => {
      this.usersOnDutyStatusChanged.next(messages);
    });
  }
}

export class RealTimeCleaningsService {
  cleaningsChanged: EventEmitter<Array<RealTimeCleaningPlannerCleaningChangedMessage>> = new EventEmitter<Array<RealTimeCleaningPlannerCleaningChangedMessage>>();

  private _hubUrl: string = "/hubs/cleanings";
  private _connection: signalR.HubConnection;

  private _receiveCleaningsChangedEventName: string = "ReceiveCleaningsChanged";

  constructor() { }

  public connect(): Promise<void> {
    return new Promise((resolve, reject) => {
      this._connection = new signalR.HubConnectionBuilder()
        .withUrl(window.location.origin + this._hubUrl)
        .build();

      this._connection
        .start()
        .then(() => {
          this._registerEvents();
          resolve();
        })
        .catch((error) => {
          reject();
        });
    });
  }


  public disconnect() {
    this._connection.off(this._receiveCleaningsChangedEventName);
    this._connection.stop();
  }

  private _registerEvents() {
    this._connection.on(this._receiveCleaningsChangedEventName, (messages: Array<RealTimeCleaningPlannerCleaningChangedMessage>) => {
      this.cleaningsChanged.next(messages);
    });
  }
}


export class RealTimeTasksService {
  cleaningsChanged: EventEmitter<RealTimeTasksChangedMessage> = new EventEmitter<RealTimeTasksChangedMessage>();

  private _hubUrl: string = "/hubs/tasks";
  private _connection: signalR.HubConnection;

  private _receiveTasksChangedEventName: string = "ReceiveTasksChanged";

  constructor() { }

  public connect(): Promise<void> {
    return new Promise((resolve, reject) => {
      this._connection = new signalR.HubConnectionBuilder()
        .withUrl(window.location.origin + this._hubUrl)
        .build();

      this._connection
        .start()
        .then(() => {
          this._registerEvents();
          resolve();
        })
        .catch((error) => {
          reject();
        });
    });
  }


  public disconnect() {
    this._connection.off(this._receiveTasksChangedEventName);
    this._connection.stop();
  }

  private _registerEvents() {
    this._connection.on(this._receiveTasksChangedEventName, (messages: RealTimeTasksChangedMessage) => {
      this.cleaningsChanged.next(messages);
    });
  }
}

export class RealTimeCpsatCleaningPlannerService {
  progressChanged: EventEmitter<RealTimeCpsatCleaningPlanningProgressChangedMessage> = new EventEmitter<RealTimeCpsatCleaningPlanningProgressChangedMessage>();
  finished: EventEmitter<RealTimeCpsatCleaningPlanningFinishedMessage> = new EventEmitter<RealTimeCpsatCleaningPlanningFinishedMessage>();

  private _hubUrl: string = "/hubs/cpsat-cleaning-planner";
  private _connection: signalR.HubConnection;

  private _progressChangedEventName: string = "ReceiveCpsatCleaningPlanningProgressChanged";
  private _finishedEventName: string = "ReceiveCpsatCleaningPlanningFinished";

  constructor() { }

  public connect(): Promise<void> {
    return new Promise((resolve, reject) => {
      this._connection = new signalR.HubConnectionBuilder()
        .withUrl(window.location.origin + this._hubUrl)
        .build();

      this._connection
        .start()
        .then(() => {
          this._registerEvents();
          resolve();
        })
        .catch((error) => {
          reject();
        });
    });
  }


  public disconnect() {
    this._connection.off(this._progressChangedEventName);
    this._connection.off(this._finishedEventName);
    this._connection.stop();
  }

  private _registerEvents() {
    this._connection.on(this._progressChangedEventName, (messages: RealTimeCpsatCleaningPlanningProgressChangedMessage) => {
      this.progressChanged.next(messages);
    });
    this._connection.on(this._finishedEventName, (messages: RealTimeCpsatCleaningPlanningFinishedMessage) => {
      this.finished.next(messages);
    });
  }
}
