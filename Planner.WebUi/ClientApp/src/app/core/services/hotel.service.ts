import { BehaviorSubject, Observable } from "rxjs";
import { Injectable } from "@angular/core";
import { HotelItemData } from "../autogenerated-clients/api-client";

@Injectable({ providedIn: 'root' })
export class HotelService {
  private _localStorageHotelIdKey: string = "__RCPHID";
  private _hotels: Array<HotelItemData>;

  public hotelId$: Observable<string>;
  private _hotelId$: BehaviorSubject<string>;

  get hotels(): Array<HotelItemData> {
    return [...this._hotels];
  }

  constructor() {
    this._hotels = [];

    this._hotelId$ = new BehaviorSubject<string>(null);
    this.hotelId$ = this._hotelId$.asObservable();
  }

  public getSelectedHotelId(): string {
    return this._hotelId$.value;
  }

  public getSelectedHotel(): HotelItemData {
    return this.getHotel(this._hotelId$.value);
  }

  public selectHotelId(hotelId: string) {
    let hotel = hotelId ? this._hotels.find(h => h.id === hotelId) : null;
    if (hotel === null) {
      if (this._hotels.length > 0) {
        this._hotelId$.next(this._hotels[0].id);
        this._setHotelIdToLocalStorage(this._hotels[0].id);
      }
      else {
        this._hotelId$.next(null);
        this._setHotelIdToLocalStorage(null);
      }
    }
    else {
      this._hotelId$.next(hotelId);
      this._setHotelIdToLocalStorage(hotelId);
    }
  }

  public setHotels(hotels: Array<HotelItemData>) {
    this._hotels = hotels.sort((hotel1: HotelItemData, hotel2: HotelItemData) => { return hotel1.name > hotel2.name ? 1 : -1; });
    this.resetSelectedHotelId();
    //let hotelId = this._getHotelIdFromLocalStorage();
    //if (hotelId === null && this._hotels && this._hotels.length > 0) {
    //  hotelId = this._hotels[0].id;
    //  this._setHotelIdToLocalStorage(hotelId);
    //}

    //this._hotelId$.next(hotelId);
  }

  public getHotels(): Array<HotelItemData> {
    return [...this._hotels];
  }

  public getHotel(hotelId: string): HotelItemData {
    return this._hotels.find(h => h.id === hotelId);
  }

  public getDefaultHotel(): HotelItemData {
    return this._hotels[0];
  }

  private _getHotelIdFromLocalStorage(): string {
    return localStorage.getItem(this._localStorageHotelIdKey);
  }

  private _setHotelIdToLocalStorage(hotelId: string): void {
    localStorage.setItem(this._localStorageHotelIdKey, hotelId);
  }

  public resetSelectedHotelId() {
    let hotelId = this.getSelectedHotelId();
    if (this._hotels.find(h => h.id === hotelId)) {
      return;
    }

    this.selectHotelId(null);
  }
}
