/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';
import 'moment-duration-format';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class AccountClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    login(request: LoginQuery): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/Account/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class AssetManagementClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getAssetDetails(request: GetAssetDetailsQuery): Observable<AssetDetailsData> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetAssetDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAssetDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAssetDetails(<any>response_);
                } catch (e) {
                    return <Observable<AssetDetailsData>><any>_observableThrow(e);
                }
            } else
                return <Observable<AssetDetailsData>><any>_observableThrow(response_);
        }));
    }

    protected processGetAssetDetails(response: HttpResponseBase): Observable<AssetDetailsData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AssetDetailsData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AssetDetailsData>(<any>null);
    }

    getAssetAvailabilityAndUsage(request: GetAssetAvailabilityAndUsageQuery): Observable<AssetGroupAvailability[]> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetAssetAvailabilityAndUsage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAssetAvailabilityAndUsage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAssetAvailabilityAndUsage(<any>response_);
                } catch (e) {
                    return <Observable<AssetGroupAvailability[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<AssetGroupAvailability[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAssetAvailabilityAndUsage(response: HttpResponseBase): Observable<AssetGroupAvailability[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AssetGroupAvailability.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AssetGroupAvailability[]>(<any>null);
    }

    getAssetTags(request: GetAssetTagsQuery): Observable<TagItemData[]> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetAssetTags";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAssetTags(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAssetTags(<any>response_);
                } catch (e) {
                    return <Observable<TagItemData[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<TagItemData[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAssetTags(response: HttpResponseBase): Observable<TagItemData[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TagItemData.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TagItemData[]>(<any>null);
    }

    getPageOfAssets(request: GetPageOfAssetsQuery): Observable<PageOfOfAssetGridItemData> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetPageOfAssets";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPageOfAssets(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPageOfAssets(<any>response_);
                } catch (e) {
                    return <Observable<PageOfOfAssetGridItemData>><any>_observableThrow(e);
                }
            } else
                return <Observable<PageOfOfAssetGridItemData>><any>_observableThrow(response_);
        }));
    }

    protected processGetPageOfAssets(response: HttpResponseBase): Observable<PageOfOfAssetGridItemData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PageOfOfAssetGridItemData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PageOfOfAssetGridItemData>(<any>null);
    }

    insertAsset(request: InsertAssetCommand): Observable<InsertAssetResponse> {
        let url_ = this.baseUrl + "/api/AssetManagement/InsertAsset";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertAsset(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertAsset(<any>response_);
                } catch (e) {
                    return <Observable<InsertAssetResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<InsertAssetResponse>><any>_observableThrow(response_);
        }));
    }

    protected processInsertAsset(response: HttpResponseBase): Observable<InsertAssetResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InsertAssetResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<InsertAssetResponse>(<any>null);
    }

    insertAssetGroup(request: InsertAssetGroupCommand): Observable<ProcessResponseOfGuid> {
        let url_ = this.baseUrl + "/api/AssetManagement/InsertAssetGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertAssetGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertAssetGroup(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfGuid>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfGuid>><any>_observableThrow(response_);
        }));
    }

    protected processInsertAssetGroup(response: HttpResponseBase): Observable<ProcessResponseOfGuid> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfGuid.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfGuid>(<any>null);
    }

    updateAsset(request: UpdateAssetCommand): Observable<UpdateAssetResponse> {
        let url_ = this.baseUrl + "/api/AssetManagement/UpdateAsset";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateAsset(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateAsset(<any>response_);
                } catch (e) {
                    return <Observable<UpdateAssetResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<UpdateAssetResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateAsset(response: HttpResponseBase): Observable<UpdateAssetResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UpdateAssetResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UpdateAssetResponse>(<any>null);
    }

    updateAssetGroup(request: UpdateAssetGroupCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/AssetManagement/UpdateAssetGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateAssetGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateAssetGroup(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateAssetGroup(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    deleteAsset(request: DeleteAssetCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/AssetManagement/DeleteAsset";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteAsset(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteAsset(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteAsset(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    getAssetGroupActions(request: GetAssetGroupActionsQuery): Observable<AssetActionData[]> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetAssetGroupActions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAssetGroupActions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAssetGroupActions(<any>response_);
                } catch (e) {
                    return <Observable<AssetActionData[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<AssetActionData[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAssetGroupActions(response: HttpResponseBase): Observable<AssetActionData[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AssetActionData.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AssetActionData[]>(<any>null);
    }

    insertAssetGroupActions(request: InsertAssetGroupActionsCommand): Observable<ProcessResponseOfAssetActionDataOf> {
        let url_ = this.baseUrl + "/api/AssetManagement/InsertAssetGroupActions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertAssetGroupActions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertAssetGroupActions(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfAssetActionDataOf>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfAssetActionDataOf>><any>_observableThrow(response_);
        }));
    }

    protected processInsertAssetGroupActions(response: HttpResponseBase): Observable<ProcessResponseOfAssetActionDataOf> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfAssetActionDataOf.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfAssetActionDataOf>(<any>null);
    }

    updateAssetGroupActions(request: UpdateAssetGroupActionsCommand): Observable<ProcessResponseOfAssetActionDataOf> {
        let url_ = this.baseUrl + "/api/AssetManagement/UpdateAssetGroupActions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateAssetGroupActions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateAssetGroupActions(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfAssetActionDataOf>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfAssetActionDataOf>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateAssetGroupActions(response: HttpResponseBase): Observable<ProcessResponseOfAssetActionDataOf> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfAssetActionDataOf.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfAssetActionDataOf>(<any>null);
    }

    getAssetRoomAssignments(request: GetAssetRoomAssignmentsQuery): Observable<AssetRoomAssignmentsViewModel> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetAssetRoomAssignments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAssetRoomAssignments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAssetRoomAssignments(<any>response_);
                } catch (e) {
                    return <Observable<AssetRoomAssignmentsViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<AssetRoomAssignmentsViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetAssetRoomAssignments(response: HttpResponseBase): Observable<AssetRoomAssignmentsViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AssetRoomAssignmentsViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AssetRoomAssignmentsViewModel>(<any>null);
    }

    getSystemDefinedAssetActions(request: GetSystemDefinedAssetActionsQuery): Observable<SystemDefinedAssetAction[]> {
        let url_ = this.baseUrl + "/api/AssetManagement/GetSystemDefinedAssetActions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSystemDefinedAssetActions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSystemDefinedAssetActions(<any>response_);
                } catch (e) {
                    return <Observable<SystemDefinedAssetAction[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SystemDefinedAssetAction[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetSystemDefinedAssetActions(response: HttpResponseBase): Observable<SystemDefinedAssetAction[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SystemDefinedAssetAction.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SystemDefinedAssetAction[]>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class AuthorizationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    exchange(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/connect/token";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExchange(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExchange(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processExchange(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    authorize(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/connect/authorize";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuthorize(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuthorize(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processAuthorize(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    authorize2(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/connect/authorize";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuthorize2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuthorize2(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processAuthorize2(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    userinfo(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/connect/userinfo";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUserinfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUserinfo(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processUserinfo(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    logout(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/connect/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogout(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogout(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processLogout(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    logout2(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/connect/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogout2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogout2(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processLogout2(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class AutomationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    changeNightlyRoomStatuses(request: SetRoomsStatusCommand): Observable<boolean> {
        let url_ = this.baseUrl + "/api/Automation/ChangeNightlyRoomStatuses";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangeNightlyRoomStatuses(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangeNightlyRoomStatuses(<any>response_);
                } catch (e) {
                    return <Observable<boolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<boolean>><any>_observableThrow(response_);
        }));
    }

    protected processChangeNightlyRoomStatuses(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class CleaningCalendarClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getWeeklyCleaningCalendar(request: GetWeeklyCleaningCalendarQuery): Observable<CleaningCalendarIntervalResult> {
        let url_ = this.baseUrl + "/api/CleaningCalendar/GetWeeklyCleaningCalendar";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWeeklyCleaningCalendar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWeeklyCleaningCalendar(<any>response_);
                } catch (e) {
                    return <Observable<CleaningCalendarIntervalResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<CleaningCalendarIntervalResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetWeeklyCleaningCalendar(response: HttpResponseBase): Observable<CleaningCalendarIntervalResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CleaningCalendarIntervalResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CleaningCalendarIntervalResult>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class CleaningPlanClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getDetails(request: GetCleaningPlanDetailsQuery): Observable<CleaningPlanData> {
        let url_ = this.baseUrl + "/api/CleaningPlan/GetDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetails(<any>response_);
                } catch (e) {
                    return <Observable<CleaningPlanData>><any>_observableThrow(e);
                }
            } else
                return <Observable<CleaningPlanData>><any>_observableThrow(response_);
        }));
    }

    protected processGetDetails(response: HttpResponseBase): Observable<CleaningPlanData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CleaningPlanData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CleaningPlanData>(<any>null);
    }

    addRemoveCleaningPlanGroups(request: AddRemoveCleaningPlanGroupsCommand): Observable<ProcessResponseOfAddRemoveCleaningPlanGroupsResult> {
        let url_ = this.baseUrl + "/api/CleaningPlan/AddRemoveCleaningPlanGroups";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddRemoveCleaningPlanGroups(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddRemoveCleaningPlanGroups(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfAddRemoveCleaningPlanGroupsResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfAddRemoveCleaningPlanGroupsResult>><any>_observableThrow(response_);
        }));
    }

    protected processAddRemoveCleaningPlanGroups(response: HttpResponseBase): Observable<ProcessResponseOfAddRemoveCleaningPlanGroupsResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfAddRemoveCleaningPlanGroupsResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfAddRemoveCleaningPlanGroupsResult>(<any>null);
    }

    updateCleaningPlanGroup(request: UpdateCleaningPlanGroupCommand): Observable<ProcessResponseOfUpdateCleaningPlanGroupResult> {
        let url_ = this.baseUrl + "/api/CleaningPlan/UpdateCleaningPlanGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateCleaningPlanGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateCleaningPlanGroup(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfUpdateCleaningPlanGroupResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfUpdateCleaningPlanGroupResult>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateCleaningPlanGroup(response: HttpResponseBase): Observable<ProcessResponseOfUpdateCleaningPlanGroupResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfUpdateCleaningPlanGroupResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfUpdateCleaningPlanGroupResult>(<any>null);
    }

    addCleaningPlanItems(request: AddCleaningPlanItemsCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/CleaningPlan/AddCleaningPlanItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddCleaningPlanItems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddCleaningPlanItems(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processAddCleaningPlanItems(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    updateCleaningPlanItems(request: UpdateCleaningPlanItemsCommand): Observable<ProcessResponseOfUpdateCleaningPlanItemsResult> {
        let url_ = this.baseUrl + "/api/CleaningPlan/UpdateCleaningPlanItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateCleaningPlanItems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateCleaningPlanItems(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfUpdateCleaningPlanItemsResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfUpdateCleaningPlanItemsResult>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateCleaningPlanItems(response: HttpResponseBase): Observable<ProcessResponseOfUpdateCleaningPlanItemsResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfUpdateCleaningPlanItemsResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfUpdateCleaningPlanItemsResult>(<any>null);
    }

    removeCleaningPlanItems(request: RemoveCleaningPlanItemsCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/CleaningPlan/RemoveCleaningPlanItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveCleaningPlanItems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveCleaningPlanItems(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processRemoveCleaningPlanItems(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    activatePlannableCleanings(request: ActivatePlannableCleaningsCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/CleaningPlan/ActivatePlannableCleanings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processActivatePlannableCleanings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processActivatePlannableCleanings(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processActivatePlannableCleanings(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    cancelPlannableCleanings(request: CancelPlannableCleaningsCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/CleaningPlan/CancelPlannableCleanings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCancelPlannableCleanings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCancelPlannableCleanings(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processCancelPlannableCleanings(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    createCustomPlannableCleanings(request: CreateCustomPlannableCleaningsCommand): Observable<ProcessResponseOfIEnumerableOfCleaningTimelineItemData> {
        let url_ = this.baseUrl + "/api/CleaningPlan/CreateCustomPlannableCleanings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateCustomPlannableCleanings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateCustomPlannableCleanings(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfIEnumerableOfCleaningTimelineItemData>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfIEnumerableOfCleaningTimelineItemData>><any>_observableThrow(response_);
        }));
    }

    protected processCreateCustomPlannableCleanings(response: HttpResponseBase): Observable<ProcessResponseOfIEnumerableOfCleaningTimelineItemData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfIEnumerableOfCleaningTimelineItemData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfIEnumerableOfCleaningTimelineItemData>(<any>null);
    }

    deleteCustomPlannableCleanings(request: DeleteCustomPlannableCleaningsCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/CleaningPlan/DeleteCustomPlannableCleanings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteCustomPlannableCleanings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteCustomPlannableCleanings(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteCustomPlannableCleanings(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    postponePlannableCleanings(request: PostponePlannableCleaningsCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/CleaningPlan/PostponePlannableCleanings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPostponePlannableCleanings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostponePlannableCleanings(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processPostponePlannableCleanings(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    undoPostponePlannableCleanings(request: UndoPostponePlannableCleaningsCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/CleaningPlan/UndoPostponePlannableCleanings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUndoPostponePlannableCleanings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUndoPostponePlannableCleanings(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUndoPostponePlannableCleanings(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    generateCpsatCleaningPlan(request: GenerateCpsatCleaningPlanCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/CleaningPlan/GenerateCpsatCleaningPlan";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGenerateCpsatCleaningPlan(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGenerateCpsatCleaningPlan(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGenerateCpsatCleaningPlan(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    resetCleaningPlan(request: ResetCleaningPlanCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/CleaningPlan/ResetCleaningPlan";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processResetCleaningPlan(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResetCleaningPlan(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processResetCleaningPlan(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    deleteAndReloadCleaningPlan(request: DeleteAndReloadCleaningPlanCommand): Observable<ProcessResponseOfDeleteAndReloadCleaningPlanResult> {
        let url_ = this.baseUrl + "/api/CleaningPlan/DeleteAndReloadCleaningPlan";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteAndReloadCleaningPlan(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteAndReloadCleaningPlan(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfDeleteAndReloadCleaningPlanResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfDeleteAndReloadCleaningPlanResult>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteAndReloadCleaningPlan(response: HttpResponseBase): Observable<ProcessResponseOfDeleteAndReloadCleaningPlanResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfDeleteAndReloadCleaningPlanResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfDeleteAndReloadCleaningPlanResult>(<any>null);
    }

    changePlannableCleaningsCredits(request: ChangePlannableCleaningsCreditsCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/CleaningPlan/ChangePlannableCleaningsCredits";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangePlannableCleaningsCredits(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangePlannableCleaningsCredits(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processChangePlannableCleaningsCredits(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    sendCleaningPlan(request: SendCleaningPlanCommand): Observable<ProcessResponseOfSendCleaningPlanResponse> {
        let url_ = this.baseUrl + "/api/CleaningPlan/SendCleaningPlan";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendCleaningPlan(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendCleaningPlan(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfSendCleaningPlanResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfSendCleaningPlanResponse>><any>_observableThrow(response_);
        }));
    }

    protected processSendCleaningPlan(response: HttpResponseBase): Observable<ProcessResponseOfSendCleaningPlanResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfSendCleaningPlanResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfSendCleaningPlanResponse>(<any>null);
    }

    saveCpsatConfiguration(request: SaveCpsatConfigurationCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/CleaningPlan/SaveCpsatConfiguration";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveCpsatConfiguration(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveCpsatConfiguration(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processSaveCpsatConfiguration(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    getListOfAffinityGroups(request: GetListOfAffinityGroupsQuery): Observable<AffinityGroup[]> {
        let url_ = this.baseUrl + "/api/CleaningPlan/GetListOfAffinityGroups";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListOfAffinityGroups(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListOfAffinityGroups(<any>response_);
                } catch (e) {
                    return <Observable<AffinityGroup[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<AffinityGroup[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListOfAffinityGroups(response: HttpResponseBase): Observable<AffinityGroup[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AffinityGroup.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AffinityGroup[]>(<any>null);
    }

    getCleaningGeneratorLogs(request: GetCleaningGeneratorLogsQuery): Observable<CleaningGeneratorLogItem[]> {
        let url_ = this.baseUrl + "/api/CleaningPlan/GetCleaningGeneratorLogs";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCleaningGeneratorLogs(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCleaningGeneratorLogs(<any>response_);
                } catch (e) {
                    return <Observable<CleaningGeneratorLogItem[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<CleaningGeneratorLogItem[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetCleaningGeneratorLogs(response: HttpResponseBase): Observable<CleaningGeneratorLogItem[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CleaningGeneratorLogItem.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CleaningGeneratorLogItem[]>(<any>null);
    }

    getCleaningPlanProgressMessageSchema(): Observable<TempCleaningPlanResult> {
        let url_ = this.baseUrl + "/api/CleaningPlan/GetCleaningPlanProgressMessageSchema";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCleaningPlanProgressMessageSchema(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCleaningPlanProgressMessageSchema(<any>response_);
                } catch (e) {
                    return <Observable<TempCleaningPlanResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<TempCleaningPlanResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetCleaningPlanProgressMessageSchema(response: HttpResponseBase): Observable<TempCleaningPlanResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TempCleaningPlanResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TempCleaningPlanResult>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class ColorsManagementClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getListOfRccHousekeepingStatusColors(query: GetRccHousekeepingColorsQuery): Observable<RccHousekeepingStatusColorDetails[]> {
        let url_ = this.baseUrl + "/api/ColorsManagement/GetListOfRccHousekeepingStatusColors";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListOfRccHousekeepingStatusColors(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListOfRccHousekeepingStatusColors(<any>response_);
                } catch (e) {
                    return <Observable<RccHousekeepingStatusColorDetails[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<RccHousekeepingStatusColorDetails[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListOfRccHousekeepingStatusColors(response: HttpResponseBase): Observable<RccHousekeepingStatusColorDetails[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RccHousekeepingStatusColorDetails.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RccHousekeepingStatusColorDetails[]>(<any>null);
    }

    updateRccHousekeepingStatusColors(query: UpdateRccHouskeepingColorsCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/ColorsManagement/UpdateRccHousekeepingStatusColors";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateRccHousekeepingStatusColors(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateRccHousekeepingStatusColors(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateRccHousekeepingStatusColors(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class DashboardClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getRoomViewDashboard(request: GetRoomViewDashboardQuery): Observable<RoomViewDashboard> {
        let url_ = this.baseUrl + "/api/Dashboard/GetRoomViewDashboard";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoomViewDashboard(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoomViewDashboard(<any>response_);
                } catch (e) {
                    return <Observable<RoomViewDashboard>><any>_observableThrow(e);
                }
            } else
                return <Observable<RoomViewDashboard>><any>_observableThrow(response_);
        }));
    }

    protected processGetRoomViewDashboard(response: HttpResponseBase): Observable<RoomViewDashboard> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoomViewDashboard.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RoomViewDashboard>(<any>null);
    }

    getRoomViewDashboardFilterValues(request: GetRoomViewDashboardFilterValuesQuery): Observable<MasterFilterGroup[]> {
        let url_ = this.baseUrl + "/api/Dashboard/GetRoomViewDashboardFilterValues";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoomViewDashboardFilterValues(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoomViewDashboardFilterValues(<any>response_);
                } catch (e) {
                    return <Observable<MasterFilterGroup[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<MasterFilterGroup[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetRoomViewDashboardFilterValues(response: HttpResponseBase): Observable<MasterFilterGroup[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MasterFilterGroup.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MasterFilterGroup[]>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class ExportAssetsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    exportAssetsFromDatabase(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/ExportAssets/ExportAssetsFromDatabase";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportAssetsFromDatabase(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportAssetsFromDatabase(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processExportAssetsFromDatabase(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    exportAssetActionsFromDatabase(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/ExportAssets/ExportAssetActionsFromDatabase";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportAssetActionsFromDatabase(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportAssetActionsFromDatabase(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processExportAssetActionsFromDatabase(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class ExportRoomsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    exportRoomsFromDatabase(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/ExportRooms/ExportRoomsFromDatabase";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportRoomsFromDatabase(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportRoomsFromDatabase(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processExportRoomsFromDatabase(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class ExportUsersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    exportUsersFromDatabase(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/ExportUsers/ExportUsersFromDatabase";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportUsersFromDatabase(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportUsersFromDatabase(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processExportUsersFromDatabase(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class FileClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    uploadFiles(files: FileParameter[] | null | undefined, filesData: UploadFilesDataRequest[] | null | undefined): Observable<TemporaryUploadedFileDetails[]> {
        let url_ = this.baseUrl + "/api/File/UploadFiles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (files !== null && files !== undefined)
            files.forEach(item_ => content_.append("files", item_.data, item_.fileName ? item_.fileName : "files") );
        if (filesData !== null && filesData !== undefined)
            filesData.forEach(item_ => content_.append("filesData", item_.toString()));

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadFiles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadFiles(<any>response_);
                } catch (e) {
                    return <Observable<TemporaryUploadedFileDetails[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<TemporaryUploadedFileDetails[]>><any>_observableThrow(response_);
        }));
    }

    protected processUploadFiles(response: HttpResponseBase): Observable<TemporaryUploadedFileDetails[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TemporaryUploadedFileDetails.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TemporaryUploadedFileDetails[]>(<any>null);
    }

    uploadFile(file: FileParameter | null | undefined, sanitizedFileName: string | null | undefined): Observable<TemporaryUploadedFileDetails> {
        let url_ = this.baseUrl + "/api/File/UploadFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");
        if (sanitizedFileName !== null && sanitizedFileName !== undefined)
            content_.append("SanitizedFileName", sanitizedFileName.toString());

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadFile(<any>response_);
                } catch (e) {
                    return <Observable<TemporaryUploadedFileDetails>><any>_observableThrow(e);
                }
            } else
                return <Observable<TemporaryUploadedFileDetails>><any>_observableThrow(response_);
        }));
    }

    protected processUploadFile(response: HttpResponseBase): Observable<TemporaryUploadedFileDetails> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TemporaryUploadedFileDetails.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TemporaryUploadedFileDetails>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class HotelClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getList(query: GetListOfHotelsQuery): Observable<HotelItemData[]> {
        let url_ = this.baseUrl + "/api/Hotel/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(<any>response_);
                } catch (e) {
                    return <Observable<HotelItemData[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<HotelItemData[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<HotelItemData[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(HotelItemData.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HotelItemData[]>(<any>null);
    }

    getHotelSettings(hotelId: string | null | undefined): Observable<ProcessResponseOfHotelSettingsData> {
        let url_ = this.baseUrl + "/api/Hotel/GetHotelSettings?";
        if (hotelId !== undefined && hotelId !== null)
            url_ += "hotelId=" + encodeURIComponent("" + hotelId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetHotelSettings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetHotelSettings(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfHotelSettingsData>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfHotelSettingsData>><any>_observableThrow(response_);
        }));
    }

    protected processGetHotelSettings(response: HttpResponseBase): Observable<ProcessResponseOfHotelSettingsData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfHotelSettingsData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfHotelSettingsData>(<any>null);
    }

    saveHotelSettings(request: SaveHotelSettingsCommand): Observable<ProcessResponseOfString> {
        let url_ = this.baseUrl + "/api/Hotel/SaveHotelSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveHotelSettings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveHotelSettings(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfString>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfString>><any>_observableThrow(response_);
        }));
    }

    protected processSaveHotelSettings(response: HttpResponseBase): Observable<ProcessResponseOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfString.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfString>(<any>null);
    }

    uploadDistanceMatrix(file: FileParameter | null | undefined, hotelId: string | null | undefined, type: DistanceMatrixType | undefined): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/Hotel/UploadDistanceMatrix?";
        if (hotelId !== undefined && hotelId !== null)
            url_ += "hotelId=" + encodeURIComponent("" + hotelId) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadDistanceMatrix(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadDistanceMatrix(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUploadDistanceMatrix(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    getListOfHotelGroupHotels(request: GetListOfHotelGroupHotelsQuery): Observable<RccHotel[]> {
        let url_ = this.baseUrl + "/rcc-api/Hotel/GetListOfHotelGroupHotels";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListOfHotelGroupHotels(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListOfHotelGroupHotels(<any>response_);
                } catch (e) {
                    return <Observable<RccHotel[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<RccHotel[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListOfHotelGroupHotels(response: HttpResponseBase): Observable<RccHotel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RccHotel.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RccHotel[]>(<any>null);
    }

    getHotelDetails(request: GetHotelDetailsForMobileQuery): Observable<MobileHotelDetails> {
        let url_ = this.baseUrl + "/mobile-api/Hotel/GetHotelDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetHotelDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetHotelDetails(<any>response_);
                } catch (e) {
                    return <Observable<MobileHotelDetails>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileHotelDetails>><any>_observableThrow(response_);
        }));
    }

    protected processGetHotelDetails(response: HttpResponseBase): Observable<MobileHotelDetails> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MobileHotelDetails.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileHotelDetails>(<any>null);
    }

    getListOfHotels(request: GetListOfHotelsForMobileQuery): Observable<MobileHotel[]> {
        let url_ = this.baseUrl + "/mobile-api/Hotel/GetListOfHotels";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListOfHotels(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListOfHotels(<any>response_);
                } catch (e) {
                    return <Observable<MobileHotel[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileHotel[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListOfHotels(response: HttpResponseBase): Observable<MobileHotel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MobileHotel.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileHotel[]>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class ImportPreviewAssetClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    uploadAssetsFromFile(file: FileParameter | null | undefined): Observable<ImportAssetsPreview> {
        let url_ = this.baseUrl + "/api/ImportPreviewAsset/UploadAssetsFromFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadAssetsFromFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadAssetsFromFile(<any>response_);
                } catch (e) {
                    return <Observable<ImportAssetsPreview>><any>_observableThrow(e);
                }
            } else
                return <Observable<ImportAssetsPreview>><any>_observableThrow(response_);
        }));
    }

    protected processUploadAssetsFromFile(response: HttpResponseBase): Observable<ImportAssetsPreview> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ImportAssetsPreview.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ImportAssetsPreview>(<any>null);
    }

    saveAssets(command: SaveImportPreviewAssetsCommand): Observable<ProcessResponseOfIEnumerableOfSaveAssetImportResult> {
        let url_ = this.baseUrl + "/api/ImportPreviewAsset/SaveAssets";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveAssets(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveAssets(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfIEnumerableOfSaveAssetImportResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfIEnumerableOfSaveAssetImportResult>><any>_observableThrow(response_);
        }));
    }

    protected processSaveAssets(response: HttpResponseBase): Observable<ProcessResponseOfIEnumerableOfSaveAssetImportResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfIEnumerableOfSaveAssetImportResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfIEnumerableOfSaveAssetImportResult>(<any>null);
    }

    uploadAssetActionsFromFile(file: FileParameter | null | undefined): Observable<ImportAssetActionsPreview> {
        let url_ = this.baseUrl + "/api/ImportPreviewAsset/UploadAssetActionsFromFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadAssetActionsFromFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadAssetActionsFromFile(<any>response_);
                } catch (e) {
                    return <Observable<ImportAssetActionsPreview>><any>_observableThrow(e);
                }
            } else
                return <Observable<ImportAssetActionsPreview>><any>_observableThrow(response_);
        }));
    }

    protected processUploadAssetActionsFromFile(response: HttpResponseBase): Observable<ImportAssetActionsPreview> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ImportAssetActionsPreview.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ImportAssetActionsPreview>(<any>null);
    }

    saveAssetActions(command: SaveImportPreviewAssetActionsCommand): Observable<ProcessResponseOfIEnumerableOfSaveAssetActionImportResult> {
        let url_ = this.baseUrl + "/api/ImportPreviewAsset/SaveAssetActions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveAssetActions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveAssetActions(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfIEnumerableOfSaveAssetActionImportResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfIEnumerableOfSaveAssetActionImportResult>><any>_observableThrow(response_);
        }));
    }

    protected processSaveAssetActions(response: HttpResponseBase): Observable<ProcessResponseOfIEnumerableOfSaveAssetActionImportResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfIEnumerableOfSaveAssetActionImportResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfIEnumerableOfSaveAssetActionImportResult>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class ImportPreviewRoomClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    uploadRoomsFromFile(file: FileParameter | null | undefined): Observable<ImportRoomsPreview> {
        let url_ = this.baseUrl + "/api/ImportPreviewRoom/UploadRoomsFromFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadRoomsFromFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadRoomsFromFile(<any>response_);
                } catch (e) {
                    return <Observable<ImportRoomsPreview>><any>_observableThrow(e);
                }
            } else
                return <Observable<ImportRoomsPreview>><any>_observableThrow(response_);
        }));
    }

    protected processUploadRoomsFromFile(response: HttpResponseBase): Observable<ImportRoomsPreview> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ImportRoomsPreview.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ImportRoomsPreview>(<any>null);
    }

    saveRooms(command: SaveImportPreviewRoomsCommand): Observable<ProcessResponseOfIEnumerableOfSaveRoomImportResult> {
        let url_ = this.baseUrl + "/api/ImportPreviewRoom/SaveRooms";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveRooms(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveRooms(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfIEnumerableOfSaveRoomImportResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfIEnumerableOfSaveRoomImportResult>><any>_observableThrow(response_);
        }));
    }

    protected processSaveRooms(response: HttpResponseBase): Observable<ProcessResponseOfIEnumerableOfSaveRoomImportResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfIEnumerableOfSaveRoomImportResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfIEnumerableOfSaveRoomImportResult>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class ImportPreviewUserClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    uploadUsersFromFile(file: FileParameter | null | undefined): Observable<ImportUsersPreview> {
        let url_ = this.baseUrl + "/api/ImportPreviewUser/UploadUsersFromFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadUsersFromFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadUsersFromFile(<any>response_);
                } catch (e) {
                    return <Observable<ImportUsersPreview>><any>_observableThrow(e);
                }
            } else
                return <Observable<ImportUsersPreview>><any>_observableThrow(response_);
        }));
    }

    protected processUploadUsersFromFile(response: HttpResponseBase): Observable<ImportUsersPreview> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ImportUsersPreview.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ImportUsersPreview>(<any>null);
    }

    saveUsers(importPreviewUserResults: SaveImportPreviewUsersCommand): Observable<ProcessResponseOfIEnumerableOfSaveUserImportResult> {
        let url_ = this.baseUrl + "/api/ImportPreviewUser/SaveUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(importPreviewUserResults);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSaveUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSaveUsers(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfIEnumerableOfSaveUserImportResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfIEnumerableOfSaveUserImportResult>><any>_observableThrow(response_);
        }));
    }

    protected processSaveUsers(response: HttpResponseBase): Observable<ProcessResponseOfIEnumerableOfSaveUserImportResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfIEnumerableOfSaveUserImportResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfIEnumerableOfSaveUserImportResult>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class LostAndFoundClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getList(query: GetLostAndFoundListQuery): Observable<ProcessResponseOfPageOfOfLostAndFoundListItem> {
        let url_ = this.baseUrl + "/api/LostAndFound/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfPageOfOfLostAndFoundListItem>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfPageOfOfLostAndFoundListItem>><any>_observableThrow(response_);
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<ProcessResponseOfPageOfOfLostAndFoundListItem> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfPageOfOfLostAndFoundListItem.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfPageOfOfLostAndFoundListItem>(<any>null);
    }

    getById(lostAndFoundId: string | null | undefined): Observable<ProcessResponseOfLostAndFoundModel> {
        let url_ = this.baseUrl + "/api/LostAndFound/GetById?";
        if (lostAndFoundId !== undefined && lostAndFoundId !== null)
            url_ += "lostAndFoundId=" + encodeURIComponent("" + lostAndFoundId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfLostAndFoundModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfLostAndFoundModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<ProcessResponseOfLostAndFoundModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfLostAndFoundModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfLostAndFoundModel>(<any>null);
    }

    insert(request: InsertLostAndFoundCommand): Observable<ProcessResponseOfString> {
        let url_ = this.baseUrl + "/api/LostAndFound/Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsert(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfString>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfString>><any>_observableThrow(response_);
        }));
    }

    protected processInsert(response: HttpResponseBase): Observable<ProcessResponseOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfString.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfString>(<any>null);
    }

    update(request: UpdateLostAndFoundCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/LostAndFound/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class OidcConfigurationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getClientRequestParameters(clientId: string | null): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/_configuration/{clientId}";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetClientRequestParameters(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetClientRequestParameters(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetClientRequestParameters(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class OnGuardClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getList(query: GetOnGuardListQuery): Observable<ProcessResponseOfPageOfOfOnGuardListItem> {
        let url_ = this.baseUrl + "/api/OnGuard/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfPageOfOfOnGuardListItem>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfPageOfOfOnGuardListItem>><any>_observableThrow(response_);
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<ProcessResponseOfPageOfOfOnGuardListItem> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfPageOfOfOnGuardListItem.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfPageOfOfOnGuardListItem>(<any>null);
    }

    getById(onGuardId: string | null | undefined): Observable<ProcessResponseOfOnGuardModel> {
        let url_ = this.baseUrl + "/api/OnGuard/GetById?";
        if (onGuardId !== undefined && onGuardId !== null)
            url_ += "onGuardId=" + encodeURIComponent("" + onGuardId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfOnGuardModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfOnGuardModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<ProcessResponseOfOnGuardModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfOnGuardModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfOnGuardModel>(<any>null);
    }

    insert(request: InsertOnGuardCommand): Observable<ProcessResponseOfString> {
        let url_ = this.baseUrl + "/api/OnGuard/Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsert(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfString>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfString>><any>_observableThrow(response_);
        }));
    }

    protected processInsert(response: HttpResponseBase): Observable<ProcessResponseOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfString.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfString>(<any>null);
    }

    update(request: UpdateOnGuardCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/OnGuard/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class ReservationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    synchronizeReservationsFromRcc(query: SynchronizeReservationsCommand): Observable<ProcessResponseOfSynchronizeReservationsResult> {
        let url_ = this.baseUrl + "/api/Reservation/SynchronizeReservationsFromRcc";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSynchronizeReservationsFromRcc(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSynchronizeReservationsFromRcc(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfSynchronizeReservationsResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfSynchronizeReservationsResult>><any>_observableThrow(response_);
        }));
    }

    protected processSynchronizeReservationsFromRcc(response: HttpResponseBase): Observable<ProcessResponseOfSynchronizeReservationsResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfSynchronizeReservationsResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfSynchronizeReservationsResult>(<any>null);
    }

    getPageOfReservations(query: GetPageOfReservationsQuery): Observable<PageOfOfReservationGridData> {
        let url_ = this.baseUrl + "/api/Reservation/GetPageOfReservations";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPageOfReservations(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPageOfReservations(<any>response_);
                } catch (e) {
                    return <Observable<PageOfOfReservationGridData>><any>_observableThrow(e);
                }
            } else
                return <Observable<PageOfOfReservationGridData>><any>_observableThrow(response_);
        }));
    }

    protected processGetPageOfReservations(response: HttpResponseBase): Observable<PageOfOfReservationGridData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PageOfOfReservationGridData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PageOfOfReservationGridData>(<any>null);
    }

    getListOfReservations(request: GetListOfReservationsForMobileQuery): Observable<MobileReservation[]> {
        let url_ = this.baseUrl + "/mobile-api/Reservation/GetListOfReservations";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListOfReservations(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListOfReservations(<any>response_);
                } catch (e) {
                    return <Observable<MobileReservation[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileReservation[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListOfReservations(response: HttpResponseBase): Observable<MobileReservation[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MobileReservation.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileReservation[]>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class RoleClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getRolesList(): Observable<ProcessResponseOfIEnumerableOfRoleListModel> {
        let url_ = this.baseUrl + "/api/Role/GetRolesList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRolesList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRolesList(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfIEnumerableOfRoleListModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfIEnumerableOfRoleListModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetRolesList(response: HttpResponseBase): Observable<ProcessResponseOfIEnumerableOfRoleListModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfIEnumerableOfRoleListModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfIEnumerableOfRoleListModel>(<any>null);
    }

    getRoleById(roleId: string | null | undefined): Observable<ProcessResponseOfRoleModel> {
        let url_ = this.baseUrl + "/api/Role/GetRoleById?";
        if (roleId !== undefined && roleId !== null)
            url_ += "roleId=" + encodeURIComponent("" + roleId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoleById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoleById(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfRoleModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfRoleModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetRoleById(response: HttpResponseBase): Observable<ProcessResponseOfRoleModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfRoleModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfRoleModel>(<any>null);
    }

    insert(request: InsertRoleCommand): Observable<ProcessResponseOfGuid> {
        let url_ = this.baseUrl + "/api/Role/Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsert(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfGuid>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfGuid>><any>_observableThrow(response_);
        }));
    }

    protected processInsert(response: HttpResponseBase): Observable<ProcessResponseOfGuid> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfGuid.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfGuid>(<any>null);
    }

    update(request: UpdateRoleCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/Role/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    delete(roleId: string | null | undefined): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/Role/Delete?";
        if (roleId !== undefined && roleId !== null)
            url_ += "roleId=" + encodeURIComponent("" + roleId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class RoomCategoryManagementClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getPageOfRoomCategories(request: GetPageOfRoomCategoriesQuery): Observable<PageOfOfRoomCategoryGridItemViewModel> {
        let url_ = this.baseUrl + "/api/RoomCategoryManagement/GetPageOfRoomCategories";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPageOfRoomCategories(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPageOfRoomCategories(<any>response_);
                } catch (e) {
                    return <Observable<PageOfOfRoomCategoryGridItemViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<PageOfOfRoomCategoryGridItemViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetPageOfRoomCategories(response: HttpResponseBase): Observable<PageOfOfRoomCategoryGridItemViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PageOfOfRoomCategoryGridItemViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PageOfOfRoomCategoryGridItemViewModel>(<any>null);
    }

    getRoomCategoryDetails(request: GetRoomCategoryDetailsQuery): Observable<RoomCategoryDetailsViewModel> {
        let url_ = this.baseUrl + "/api/RoomCategoryManagement/GetRoomCategoryDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoomCategoryDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoomCategoryDetails(<any>response_);
                } catch (e) {
                    return <Observable<RoomCategoryDetailsViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<RoomCategoryDetailsViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetRoomCategoryDetails(response: HttpResponseBase): Observable<RoomCategoryDetailsViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoomCategoryDetailsViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RoomCategoryDetailsViewModel>(<any>null);
    }

    insertRoomCategory(request: InsertRoomCategoryCommand): Observable<ProcessResponseOfGuid> {
        let url_ = this.baseUrl + "/api/RoomCategoryManagement/InsertRoomCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertRoomCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertRoomCategory(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfGuid>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfGuid>><any>_observableThrow(response_);
        }));
    }

    protected processInsertRoomCategory(response: HttpResponseBase): Observable<ProcessResponseOfGuid> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfGuid.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfGuid>(<any>null);
    }

    updateRoomCategory(request: UpdateRoomCategoryCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/RoomCategoryManagement/UpdateRoomCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateRoomCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateRoomCategory(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateRoomCategory(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    deleteRoomCategory(request: DeleteRoomCategoryCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/RoomCategoryManagement/DeleteRoomCategory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteRoomCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteRoomCategory(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteRoomCategory(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class RoomManagementClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getBuildingSimple(request: GetBuildingSimpleQuery): Observable<BuildingSimpleData> {
        let url_ = this.baseUrl + "/api/RoomManagement/GetBuildingSimple";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBuildingSimple(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBuildingSimple(<any>response_);
                } catch (e) {
                    return <Observable<BuildingSimpleData>><any>_observableThrow(e);
                }
            } else
                return <Observable<BuildingSimpleData>><any>_observableThrow(response_);
        }));
    }

    protected processGetBuildingSimple(response: HttpResponseBase): Observable<BuildingSimpleData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BuildingSimpleData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BuildingSimpleData>(<any>null);
    }

    getRoomDetails(request: GetRoomDetailsQuery): Observable<RoomDetailsData> {
        let url_ = this.baseUrl + "/api/RoomManagement/GetRoomDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoomDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoomDetails(<any>response_);
                } catch (e) {
                    return <Observable<RoomDetailsData>><any>_observableThrow(e);
                }
            } else
                return <Observable<RoomDetailsData>><any>_observableThrow(response_);
        }));
    }

    protected processGetRoomDetails(response: HttpResponseBase): Observable<RoomDetailsData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoomDetailsData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RoomDetailsData>(<any>null);
    }

    getRoomHistory(request: GetRoomHistoryQuery): Observable<RoomHistoryItem[]> {
        let url_ = this.baseUrl + "/api/RoomManagement/GetRoomHistory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoomHistory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoomHistory(<any>response_);
                } catch (e) {
                    return <Observable<RoomHistoryItem[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<RoomHistoryItem[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetRoomHistory(response: HttpResponseBase): Observable<RoomHistoryItem[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RoomHistoryItem.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RoomHistoryItem[]>(<any>null);
    }

    getFullRoomHierarchy(request: GetFullRoomHierarchyQuery): Observable<FullRoomHierarchyData> {
        let url_ = this.baseUrl + "/api/RoomManagement/GetFullRoomHierarchy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFullRoomHierarchy(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFullRoomHierarchy(<any>response_);
                } catch (e) {
                    return <Observable<FullRoomHierarchyData>><any>_observableThrow(e);
                }
            } else
                return <Observable<FullRoomHierarchyData>><any>_observableThrow(response_);
        }));
    }

    protected processGetFullRoomHierarchy(response: HttpResponseBase): Observable<FullRoomHierarchyData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FullRoomHierarchyData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FullRoomHierarchyData>(<any>null);
    }

    insertBuilding(request: InsertBuildingCommand): Observable<ProcessResponseOfInsertBuildingResponse> {
        let url_ = this.baseUrl + "/api/RoomManagement/InsertBuilding";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertBuilding(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertBuilding(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfInsertBuildingResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfInsertBuildingResponse>><any>_observableThrow(response_);
        }));
    }

    protected processInsertBuilding(response: HttpResponseBase): Observable<ProcessResponseOfInsertBuildingResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfInsertBuildingResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfInsertBuildingResponse>(<any>null);
    }

    updateBuilding(request: UpdateBuildingCommand): Observable<ProcessResponseOfUpdateBuildingResponse> {
        let url_ = this.baseUrl + "/api/RoomManagement/UpdateBuilding";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateBuilding(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateBuilding(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfUpdateBuildingResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfUpdateBuildingResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateBuilding(response: HttpResponseBase): Observable<ProcessResponseOfUpdateBuildingResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfUpdateBuildingResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfUpdateBuildingResponse>(<any>null);
    }

    deleteBuilding(request: DeleteBuildingCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/RoomManagement/DeleteBuilding";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteBuilding(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteBuilding(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteBuilding(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    insertFloor(request: InsertFloorCommand): Observable<ProcessResponseOfInsertFloorResponse> {
        let url_ = this.baseUrl + "/api/RoomManagement/InsertFloor";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertFloor(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertFloor(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfInsertFloorResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfInsertFloorResponse>><any>_observableThrow(response_);
        }));
    }

    protected processInsertFloor(response: HttpResponseBase): Observable<ProcessResponseOfInsertFloorResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfInsertFloorResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfInsertFloorResponse>(<any>null);
    }

    updateFloor(request: UpdateFloorCommand): Observable<ProcessResponseOfUpdateFloorResponse> {
        let url_ = this.baseUrl + "/api/RoomManagement/UpdateFloor";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateFloor(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateFloor(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfUpdateFloorResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfUpdateFloorResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateFloor(response: HttpResponseBase): Observable<ProcessResponseOfUpdateFloorResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfUpdateFloorResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfUpdateFloorResponse>(<any>null);
    }

    deleteFloor(request: DeleteFloorCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/RoomManagement/DeleteFloor";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteFloor(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteFloor(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteFloor(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    insertRoom(request: InsertRoomCommand): Observable<ProcessResponseOfInsertRoomResponse> {
        let url_ = this.baseUrl + "/api/RoomManagement/InsertRoom";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertRoom(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertRoom(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfInsertRoomResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfInsertRoomResponse>><any>_observableThrow(response_);
        }));
    }

    protected processInsertRoom(response: HttpResponseBase): Observable<ProcessResponseOfInsertRoomResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfInsertRoomResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfInsertRoomResponse>(<any>null);
    }

    updateRoom(request: UpdateRoomCommand): Observable<ProcessResponseOfUpdateRoomResponse> {
        let url_ = this.baseUrl + "/api/RoomManagement/UpdateRoom";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateRoom(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateRoom(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfUpdateRoomResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfUpdateRoomResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateRoom(response: HttpResponseBase): Observable<ProcessResponseOfUpdateRoomResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfUpdateRoomResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfUpdateRoomResponse>(<any>null);
    }

    deleteRoom(request: DeleteRoomCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/RoomManagement/DeleteRoom";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteRoom(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteRoom(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteRoom(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    getPageOfUnassignedRooms(request: GetUnassignedRoomsQuery): Observable<PageOfOfUnassignedRoomData> {
        let url_ = this.baseUrl + "/api/RoomManagement/GetPageOfUnassignedRooms";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPageOfUnassignedRooms(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPageOfUnassignedRooms(<any>response_);
                } catch (e) {
                    return <Observable<PageOfOfUnassignedRoomData>><any>_observableThrow(e);
                }
            } else
                return <Observable<PageOfOfUnassignedRoomData>><any>_observableThrow(response_);
        }));
    }

    protected processGetPageOfUnassignedRooms(response: HttpResponseBase): Observable<PageOfOfUnassignedRoomData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PageOfOfUnassignedRoomData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PageOfOfUnassignedRoomData>(<any>null);
    }

    assignRoomsToFloor(request: AssignRoomsToFloorCommand): Observable<ProcessResponseOfRoomAssignmentResultOf> {
        let url_ = this.baseUrl + "/api/RoomManagement/AssignRoomsToFloor";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAssignRoomsToFloor(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAssignRoomsToFloor(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfRoomAssignmentResultOf>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfRoomAssignmentResultOf>><any>_observableThrow(response_);
        }));
    }

    protected processAssignRoomsToFloor(response: HttpResponseBase): Observable<ProcessResponseOfRoomAssignmentResultOf> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfRoomAssignmentResultOf.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfRoomAssignmentResultOf>(<any>null);
    }

    updateIsGuestCurrentlyIn(request: UpdateIsGuestCurrentlyInCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/RoomManagement/UpdateIsGuestCurrentlyIn";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateIsGuestCurrentlyIn(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateIsGuestCurrentlyIn(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateIsGuestCurrentlyIn(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    updateIsCleaningPriority(request: UpdateIsCleaningPriorityCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/RoomManagement/UpdateIsCleaningPriority";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateIsCleaningPriority(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateIsCleaningPriority(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateIsCleaningPriority(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class RoomMessageClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getPageOfRoomMessages(request: GetPageOfRoomMessagesQuery): Observable<PageOfOfRoomMessageListItem> {
        let url_ = this.baseUrl + "/api/RoomMessage/GetPageOfRoomMessages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPageOfRoomMessages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPageOfRoomMessages(<any>response_);
                } catch (e) {
                    return <Observable<PageOfOfRoomMessageListItem>><any>_observableThrow(e);
                }
            } else
                return <Observable<PageOfOfRoomMessageListItem>><any>_observableThrow(response_);
        }));
    }

    protected processGetPageOfRoomMessages(response: HttpResponseBase): Observable<PageOfOfRoomMessageListItem> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PageOfOfRoomMessageListItem.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PageOfOfRoomMessageListItem>(<any>null);
    }

    getRoomMessagesFilterValues(request: GetRoomMessagesFilterValuesQuery): Observable<RoomMessageFilterValues> {
        let url_ = this.baseUrl + "/api/RoomMessage/GetRoomMessagesFilterValues";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoomMessagesFilterValues(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoomMessagesFilterValues(<any>response_);
                } catch (e) {
                    return <Observable<RoomMessageFilterValues>><any>_observableThrow(e);
                }
            } else
                return <Observable<RoomMessageFilterValues>><any>_observableThrow(response_);
        }));
    }

    protected processGetRoomMessagesFilterValues(response: HttpResponseBase): Observable<RoomMessageFilterValues> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoomMessageFilterValues.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RoomMessageFilterValues>(<any>null);
    }

    getComplexRoomMessageDetails(request: GetComplexRoomMessageDetailsQuery): Observable<RoomMessageDetails> {
        let url_ = this.baseUrl + "/api/RoomMessage/GetComplexRoomMessageDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetComplexRoomMessageDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetComplexRoomMessageDetails(<any>response_);
                } catch (e) {
                    return <Observable<RoomMessageDetails>><any>_observableThrow(e);
                }
            } else
                return <Observable<RoomMessageDetails>><any>_observableThrow(response_);
        }));
    }

    protected processGetComplexRoomMessageDetails(response: HttpResponseBase): Observable<RoomMessageDetails> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoomMessageDetails.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RoomMessageDetails>(<any>null);
    }

    insertSimpleMessage(request: InsertSimpleMessageCommand): Observable<ProcessResponseOfGuid> {
        let url_ = this.baseUrl + "/api/RoomMessage/InsertSimpleMessage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertSimpleMessage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertSimpleMessage(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfGuid>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfGuid>><any>_observableThrow(response_);
        }));
    }

    protected processInsertSimpleMessage(response: HttpResponseBase): Observable<ProcessResponseOfGuid> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfGuid.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfGuid>(<any>null);
    }

    insertComplexMessage(request: InsertComplexMessageCommand): Observable<ProcessResponseOfGuid> {
        let url_ = this.baseUrl + "/api/RoomMessage/InsertComplexMessage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertComplexMessage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertComplexMessage(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfGuid>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfGuid>><any>_observableThrow(response_);
        }));
    }

    protected processInsertComplexMessage(response: HttpResponseBase): Observable<ProcessResponseOfGuid> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfGuid.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfGuid>(<any>null);
    }

    updateComplexMessage(request: UpdateComplexMessageCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/RoomMessage/UpdateComplexMessage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateComplexMessage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateComplexMessage(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateComplexMessage(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    updateSimpleMessage(request: UpdateSimpleMessageCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/RoomMessage/UpdateSimpleMessage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateSimpleMessage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateSimpleMessage(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateSimpleMessage(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    deleteMessage(request: DeleteMessageCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/RoomMessage/DeleteMessage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteMessage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMessage(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteMessage(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class TasksManagementClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getTasksData(request: GetTasksDataQuery): Observable<TasksData> {
        let url_ = this.baseUrl + "/api/TasksManagement/GetTasksData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTasksData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTasksData(<any>response_);
                } catch (e) {
                    return <Observable<TasksData>><any>_observableThrow(e);
                }
            } else
                return <Observable<TasksData>><any>_observableThrow(response_);
        }));
    }

    protected processGetTasksData(response: HttpResponseBase): Observable<TasksData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TasksData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TasksData>(<any>null);
    }

    getTaskConfigurationDetails(request: GetTaskConfigurationDetailsQuery): Observable<TaskConfigurationDetailsData> {
        let url_ = this.baseUrl + "/api/TasksManagement/GetTaskConfigurationDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTaskConfigurationDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTaskConfigurationDetails(<any>response_);
                } catch (e) {
                    return <Observable<TaskConfigurationDetailsData>><any>_observableThrow(e);
                }
            } else
                return <Observable<TaskConfigurationDetailsData>><any>_observableThrow(response_);
        }));
    }

    protected processGetTaskConfigurationDetails(response: HttpResponseBase): Observable<TaskConfigurationDetailsData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TaskConfigurationDetailsData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TaskConfigurationDetailsData>(<any>null);
    }

    getTaskDetails(request: GetTaskDetailsQuery): Observable<TaskDetailsData> {
        let url_ = this.baseUrl + "/api/TasksManagement/GetTaskDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTaskDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTaskDetails(<any>response_);
                } catch (e) {
                    return <Observable<TaskDetailsData>><any>_observableThrow(e);
                }
            } else
                return <Observable<TaskDetailsData>><any>_observableThrow(response_);
        }));
    }

    protected processGetTaskDetails(response: HttpResponseBase): Observable<TaskDetailsData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TaskDetailsData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TaskDetailsData>(<any>null);
    }

    insertTaskConfiguration(request: InsertTaskConfigurationCommand): Observable<ProcessResponseOfInsertTaskConfigurationResult> {
        let url_ = this.baseUrl + "/api/TasksManagement/InsertTaskConfiguration";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertTaskConfiguration(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertTaskConfiguration(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfInsertTaskConfigurationResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfInsertTaskConfigurationResult>><any>_observableThrow(response_);
        }));
    }

    protected processInsertTaskConfiguration(response: HttpResponseBase): Observable<ProcessResponseOfInsertTaskConfigurationResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfInsertTaskConfigurationResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfInsertTaskConfigurationResult>(<any>null);
    }

    updateTaskConfiguration(request: UpdateTaskConfigurationCommand): Observable<ProcessResponseOfUpdateTaskConfigurationResult> {
        let url_ = this.baseUrl + "/api/TasksManagement/UpdateTaskConfiguration";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateTaskConfiguration(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateTaskConfiguration(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfUpdateTaskConfigurationResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfUpdateTaskConfigurationResult>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateTaskConfiguration(response: HttpResponseBase): Observable<ProcessResponseOfUpdateTaskConfigurationResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfUpdateTaskConfigurationResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfUpdateTaskConfigurationResult>(<any>null);
    }

    getPage(request: GetPageOfTasksQuery): Observable<PageOfOfTaskGridItemData> {
        let url_ = this.baseUrl + "/api/TasksManagement/GetPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPage(<any>response_);
                } catch (e) {
                    return <Observable<PageOfOfTaskGridItemData>><any>_observableThrow(e);
                }
            } else
                return <Observable<PageOfOfTaskGridItemData>><any>_observableThrow(response_);
        }));
    }

    protected processGetPage(response: HttpResponseBase): Observable<PageOfOfTaskGridItemData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PageOfOfTaskGridItemData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PageOfOfTaskGridItemData>(<any>null);
    }

    getPageOfTaskConfigurations(request: GetPageOfTaskConfigurationsQuery): Observable<PageOfOfTaskConfigurationGridItemData> {
        let url_ = this.baseUrl + "/api/TasksManagement/GetPageOfTaskConfigurations";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPageOfTaskConfigurations(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPageOfTaskConfigurations(<any>response_);
                } catch (e) {
                    return <Observable<PageOfOfTaskConfigurationGridItemData>><any>_observableThrow(e);
                }
            } else
                return <Observable<PageOfOfTaskConfigurationGridItemData>><any>_observableThrow(response_);
        }));
    }

    protected processGetPageOfTaskConfigurations(response: HttpResponseBase): Observable<PageOfOfTaskConfigurationGridItemData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PageOfOfTaskConfigurationGridItemData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PageOfOfTaskConfigurationGridItemData>(<any>null);
    }

    getWeeklyPage(request: GetPageOfWeeklyTasksQuery): Observable<WeeklyTasksViewModel> {
        let url_ = this.baseUrl + "/api/TasksManagement/GetWeeklyPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWeeklyPage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWeeklyPage(<any>response_);
                } catch (e) {
                    return <Observable<WeeklyTasksViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<WeeklyTasksViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetWeeklyPage(response: HttpResponseBase): Observable<WeeklyTasksViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WeeklyTasksViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WeeklyTasksViewModel>(<any>null);
    }

    getTaskSavePreview(request: GetTaskConfigurationSavePreviewQuery): Observable<TaskConfigurationSavePreview> {
        let url_ = this.baseUrl + "/api/TasksManagement/GetTaskSavePreview";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTaskSavePreview(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTaskSavePreview(<any>response_);
                } catch (e) {
                    return <Observable<TaskConfigurationSavePreview>><any>_observableThrow(e);
                }
            } else
                return <Observable<TaskConfigurationSavePreview>><any>_observableThrow(response_);
        }));
    }

    protected processGetTaskSavePreview(response: HttpResponseBase): Observable<TaskConfigurationSavePreview> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TaskConfigurationSavePreview.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TaskConfigurationSavePreview>(<any>null);
    }

    getTaskConfigurationCancelPreview(request: GetTaskConfigurationCancelPreviewQuery): Observable<TaskConfigurationCancelPreview> {
        let url_ = this.baseUrl + "/api/TasksManagement/GetTaskConfigurationCancelPreview";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTaskConfigurationCancelPreview(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTaskConfigurationCancelPreview(<any>response_);
                } catch (e) {
                    return <Observable<TaskConfigurationCancelPreview>><any>_observableThrow(e);
                }
            } else
                return <Observable<TaskConfigurationCancelPreview>><any>_observableThrow(response_);
        }));
    }

    protected processGetTaskConfigurationCancelPreview(response: HttpResponseBase): Observable<TaskConfigurationCancelPreview> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TaskConfigurationCancelPreview.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TaskConfigurationCancelPreview>(<any>null);
    }

    cancelTasksByConfiguration(request: CancelTasksByConfigurationCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/TasksManagement/CancelTasksByConfiguration";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCancelTasksByConfiguration(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCancelTasksByConfiguration(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processCancelTasksByConfiguration(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    getTaskHistory(request: GetTaskHistoryQuery): Observable<PageOfOfTaskHistoryItemViewModel> {
        let url_ = this.baseUrl + "/api/TasksManagement/GetTaskHistory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTaskHistory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTaskHistory(<any>response_);
                } catch (e) {
                    return <Observable<PageOfOfTaskHistoryItemViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<PageOfOfTaskHistoryItemViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetTaskHistory(response: HttpResponseBase): Observable<PageOfOfTaskHistoryItemViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PageOfOfTaskHistoryItemViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PageOfOfTaskHistoryItemViewModel>(<any>null);
    }

    getTaskMessages(request: GetTaskMessagesQuery): Observable<TaskMessagesViewModel> {
        let url_ = this.baseUrl + "/api/TasksManagement/GetTaskMessages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTaskMessages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTaskMessages(<any>response_);
                } catch (e) {
                    return <Observable<TaskMessagesViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<TaskMessagesViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetTaskMessages(response: HttpResponseBase): Observable<TaskMessagesViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TaskMessagesViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TaskMessagesViewModel>(<any>null);
    }

    changeTaskStatus(request: ChangeTaskStatusCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/TasksManagement/ChangeTaskStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangeTaskStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangeTaskStatus(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processChangeTaskStatus(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    sendTaskMessage(request: SendTaskMessageCommand): Observable<ProcessResponseOfTaskMessageViewModel> {
        let url_ = this.baseUrl + "/api/TasksManagement/SendTaskMessage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendTaskMessage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendTaskMessage(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfTaskMessageViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfTaskMessageViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processSendTaskMessage(response: HttpResponseBase): Observable<ProcessResponseOfTaskMessageViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfTaskMessageViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfTaskMessageViewModel>(<any>null);
    }

    updateTask(request: UpdateTaskCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/TasksManagement/UpdateTask";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateTask(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateTask(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateTask(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    reassignTask(request: ReassignTaskCommand): Observable<ProcessResponseOfGuid> {
        let url_ = this.baseUrl + "/api/TasksManagement/ReassignTask";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processReassignTask(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReassignTask(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfGuid>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfGuid>><any>_observableThrow(response_);
        }));
    }

    protected processReassignTask(response: HttpResponseBase): Observable<ProcessResponseOfGuid> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfGuid.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfGuid>(<any>null);
    }

    cancelTask(request: CancelTaskCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/TasksManagement/CancelTask";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCancelTask(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCancelTask(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processCancelTask(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    getMonthlyTasksGraphData(request: GetMonthlyTasksGraphsDataQuery): Observable<MonthlyTasksGraphsViewModel> {
        let url_ = this.baseUrl + "/api/TasksManagement/GetMonthlyTasksGraphData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMonthlyTasksGraphData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMonthlyTasksGraphData(<any>response_);
                } catch (e) {
                    return <Observable<MonthlyTasksGraphsViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<MonthlyTasksGraphsViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetMonthlyTasksGraphData(response: HttpResponseBase): Observable<MonthlyTasksGraphsViewModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MonthlyTasksGraphsViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MonthlyTasksGraphsViewModel>(<any>null);
    }

    getMonthlyTasks(request: GetMonthlyTasksQuery): Observable<TaskGridItemData[]> {
        let url_ = this.baseUrl + "/api/TasksManagement/GetMonthlyTasks";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMonthlyTasks(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMonthlyTasks(<any>response_);
                } catch (e) {
                    return <Observable<TaskGridItemData[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<TaskGridItemData[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetMonthlyTasks(response: HttpResponseBase): Observable<TaskGridItemData[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TaskGridItemData.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TaskGridItemData[]>(<any>null);
    }

    getAllWheres(request: GetAllWheresQuery): Observable<ExtendedWhereData[]> {
        let url_ = this.baseUrl + "/api/TasksManagement/GetAllWheres";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllWheres(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllWheres(<any>response_);
                } catch (e) {
                    return <Observable<ExtendedWhereData[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ExtendedWhereData[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllWheres(response: HttpResponseBase): Observable<ExtendedWhereData[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ExtendedWhereData.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ExtendedWhereData[]>(<any>null);
    }

    claimTask(request: ClaimTaskCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/TasksManagement/ClaimTask";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processClaimTask(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processClaimTask(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processClaimTask(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    rejectTask(request: RejectTaskCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/TasksManagement/RejectTask";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRejectTask(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRejectTask(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processRejectTask(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class UserManagementClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getFullUserGroupsHierarchy(request: GetFullUserGroupsHierarchyQuery): Observable<FullGroupHierarchyData> {
        let url_ = this.baseUrl + "/api/UserManagement/GetFullUserGroupsHierarchy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFullUserGroupsHierarchy(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFullUserGroupsHierarchy(<any>response_);
                } catch (e) {
                    return <Observable<FullGroupHierarchyData>><any>_observableThrow(e);
                }
            } else
                return <Observable<FullGroupHierarchyData>><any>_observableThrow(response_);
        }));
    }

    protected processGetFullUserGroupsHierarchy(response: HttpResponseBase): Observable<FullGroupHierarchyData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FullGroupHierarchyData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FullGroupHierarchyData>(<any>null);
    }

    getGroupsAndSubGroups(): Observable<ProcessResponseOfFullGroupHierarchyData> {
        let url_ = this.baseUrl + "/api/UserManagement/GetGroupsAndSubGroups";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetGroupsAndSubGroups(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetGroupsAndSubGroups(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfFullGroupHierarchyData>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfFullGroupHierarchyData>><any>_observableThrow(response_);
        }));
    }

    protected processGetGroupsAndSubGroups(response: HttpResponseBase): Observable<ProcessResponseOfFullGroupHierarchyData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfFullGroupHierarchyData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfFullGroupHierarchyData>(<any>null);
    }

    insertGroup(request: InsertGroupCommand): Observable<ProcessResponseOfGroupHierarchyData> {
        let url_ = this.baseUrl + "/api/UserManagement/InsertGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertGroup(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfGroupHierarchyData>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfGroupHierarchyData>><any>_observableThrow(response_);
        }));
    }

    protected processInsertGroup(response: HttpResponseBase): Observable<ProcessResponseOfGroupHierarchyData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfGroupHierarchyData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfGroupHierarchyData>(<any>null);
    }

    updateGroup(request: UpdateGroupCommand): Observable<ProcessResponseOfGroupHierarchyData> {
        let url_ = this.baseUrl + "/api/UserManagement/UpdateGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateGroup(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfGroupHierarchyData>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfGroupHierarchyData>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateGroup(response: HttpResponseBase): Observable<ProcessResponseOfGroupHierarchyData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfGroupHierarchyData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfGroupHierarchyData>(<any>null);
    }

    deleteGroup(request: DeleteGroupCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/UserManagement/DeleteGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteGroup(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteGroup(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    insertSubGroup(request: InsertSubGroupCommand): Observable<ProcessResponseOfSubGroupHierarchyData> {
        let url_ = this.baseUrl + "/api/UserManagement/InsertSubGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertSubGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertSubGroup(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfSubGroupHierarchyData>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfSubGroupHierarchyData>><any>_observableThrow(response_);
        }));
    }

    protected processInsertSubGroup(response: HttpResponseBase): Observable<ProcessResponseOfSubGroupHierarchyData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfSubGroupHierarchyData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfSubGroupHierarchyData>(<any>null);
    }

    updateSubGroup(request: UpdateSubGroupCommand): Observable<ProcessResponseOfSubGroupHierarchyData> {
        let url_ = this.baseUrl + "/api/UserManagement/UpdateSubGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateSubGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateSubGroup(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfSubGroupHierarchyData>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfSubGroupHierarchyData>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateSubGroup(response: HttpResponseBase): Observable<ProcessResponseOfSubGroupHierarchyData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfSubGroupHierarchyData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfSubGroupHierarchyData>(<any>null);
    }

    deleteSubGroup(request: DeleteSubGroupCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/UserManagement/DeleteSubGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteSubGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteSubGroup(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteSubGroup(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    getUserById(id: string | undefined): Observable<ProcessResponseOfUserModel> {
        let url_ = this.baseUrl + "/api/UserManagement/GetUserById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserById(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfUserModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfUserModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserById(response: HttpResponseBase): Observable<ProcessResponseOfUserModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfUserModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfUserModel>(<any>null);
    }

    insertUser(request: InsertUserCommand): Observable<ProcessResponseOfUserHierarchyData> {
        let url_ = this.baseUrl + "/api/UserManagement/InsertUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertUser(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfUserHierarchyData>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfUserHierarchyData>><any>_observableThrow(response_);
        }));
    }

    protected processInsertUser(response: HttpResponseBase): Observable<ProcessResponseOfUserHierarchyData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfUserHierarchyData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfUserHierarchyData>(<any>null);
    }

    updateUser(request: UpdateUserCommand): Observable<ProcessResponseOfUserHierarchyData> {
        let url_ = this.baseUrl + "/api/UserManagement/UpdateUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateUser(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfUserHierarchyData>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfUserHierarchyData>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateUser(response: HttpResponseBase): Observable<ProcessResponseOfUserHierarchyData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfUserHierarchyData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfUserHierarchyData>(<any>null);
    }

    deleteUser(request: DeleteUserCommand): Observable<DeleteProcessResponse> {
        let url_ = this.baseUrl + "/api/UserManagement/DeleteUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteUser(<any>response_);
                } catch (e) {
                    return <Observable<DeleteProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeleteProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteUser(response: HttpResponseBase): Observable<DeleteProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeleteProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DeleteProcessResponse>(<any>null);
    }

    getListOfUsers(request: GetListOfUsersQuery): Observable<UserListItemData[]> {
        let url_ = this.baseUrl + "/api/UserManagement/GetListOfUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListOfUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListOfUsers(<any>response_);
                } catch (e) {
                    return <Observable<UserListItemData[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserListItemData[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListOfUsers(response: HttpResponseBase): Observable<UserListItemData[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserListItemData.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserListItemData[]>(<any>null);
    }

    getListOfCleaners(request: GetListOfCleanersQuery): Observable<CleanerListItemData[]> {
        let url_ = this.baseUrl + "/api/UserManagement/GetListOfCleaners";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListOfCleaners(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListOfCleaners(<any>response_);
                } catch (e) {
                    return <Observable<CleanerListItemData[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<CleanerListItemData[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListOfCleaners(response: HttpResponseBase): Observable<CleanerListItemData[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CleanerListItemData.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CleanerListItemData[]>(<any>null);
    }

    changeMyOnDutyStatus(request: ChangeMyOnDutyStatusCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/UserManagement/ChangeMyOnDutyStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangeMyOnDutyStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangeMyOnDutyStatus(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processChangeMyOnDutyStatus(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class WarehouseManagementClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getListOfWarehouses(query: GetListOfWarehousesQuery): Observable<WarehouseData[]> {
        let url_ = this.baseUrl + "/api/WarehouseManagement/GetListOfWarehouses";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListOfWarehouses(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListOfWarehouses(<any>response_);
                } catch (e) {
                    return <Observable<WarehouseData[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<WarehouseData[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListOfWarehouses(response: HttpResponseBase): Observable<WarehouseData[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WarehouseData.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WarehouseData[]>(<any>null);
    }

    getWarehouseDetails(query: GetWarehouseDetailsQuery): Observable<WarehouseDetailsData> {
        let url_ = this.baseUrl + "/api/WarehouseManagement/GetWarehouseDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWarehouseDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWarehouseDetails(<any>response_);
                } catch (e) {
                    return <Observable<WarehouseDetailsData>><any>_observableThrow(e);
                }
            } else
                return <Observable<WarehouseDetailsData>><any>_observableThrow(response_);
        }));
    }

    protected processGetWarehouseDetails(response: HttpResponseBase): Observable<WarehouseDetailsData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WarehouseDetailsData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WarehouseDetailsData>(<any>null);
    }

    insertWarehouse(request: InsertWarehouseCommand): Observable<ProcessResponseOfGuid> {
        let url_ = this.baseUrl + "/api/WarehouseManagement/InsertWarehouse";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertWarehouse(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertWarehouse(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfGuid>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfGuid>><any>_observableThrow(response_);
        }));
    }

    protected processInsertWarehouse(response: HttpResponseBase): Observable<ProcessResponseOfGuid> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfGuid.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfGuid>(<any>null);
    }

    updateWarehouse(request: UpdateWarehouseCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/WarehouseManagement/UpdateWarehouse";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateWarehouse(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateWarehouse(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateWarehouse(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    deleteWarehouse(request: DeleteWarehouseCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/WarehouseManagement/DeleteWarehouse";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteWarehouse(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteWarehouse(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteWarehouse(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    receiveAssetToWarehouse(request: ReceiveAssetToWarehouseCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/WarehouseManagement/ReceiveAssetToWarehouse";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processReceiveAssetToWarehouse(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReceiveAssetToWarehouse(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processReceiveAssetToWarehouse(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    dispatchAssetFromWarehouse(request: DispatchAssetFromWarehouseCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/api/WarehouseManagement/DispatchAssetFromWarehouse";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDispatchAssetFromWarehouse(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDispatchAssetFromWarehouse(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDispatchAssetFromWarehouse(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    getWarehouseAssetGroups(request: GetWarehouseAssetGroupsQuery): Observable<WarehouseAssetGroup[]> {
        let url_ = this.baseUrl + "/api/WarehouseManagement/GetWarehouseAssetGroups";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWarehouseAssetGroups(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWarehouseAssetGroups(<any>response_);
                } catch (e) {
                    return <Observable<WarehouseAssetGroup[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<WarehouseAssetGroup[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetWarehouseAssetGroups(response: HttpResponseBase): Observable<WarehouseAssetGroup[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WarehouseAssetGroup.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WarehouseAssetGroup[]>(<any>null);
    }

    getPageOfWarehouseInventoryArchives(request: GetPageOfWarehouseInventoryArchivesQuery): Observable<PageOfOfWarehouseInventoryArchiveItem> {
        let url_ = this.baseUrl + "/api/WarehouseManagement/GetPageOfWarehouseInventoryArchives";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPageOfWarehouseInventoryArchives(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPageOfWarehouseInventoryArchives(<any>response_);
                } catch (e) {
                    return <Observable<PageOfOfWarehouseInventoryArchiveItem>><any>_observableThrow(e);
                }
            } else
                return <Observable<PageOfOfWarehouseInventoryArchiveItem>><any>_observableThrow(response_);
        }));
    }

    protected processGetPageOfWarehouseInventoryArchives(response: HttpResponseBase): Observable<PageOfOfWarehouseInventoryArchiveItem> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PageOfOfWarehouseInventoryArchiveItem.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PageOfOfWarehouseInventoryArchiveItem>(<any>null);
    }

    getPageOfWarehouseHistory(request: GetPageOfWarehouseHistoryQuery): Observable<PageOfOfWarehouseHistoryItem> {
        let url_ = this.baseUrl + "/api/WarehouseManagement/GetPageOfWarehouseHistory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPageOfWarehouseHistory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPageOfWarehouseHistory(<any>response_);
                } catch (e) {
                    return <Observable<PageOfOfWarehouseHistoryItem>><any>_observableThrow(e);
                }
            } else
                return <Observable<PageOfOfWarehouseHistoryItem>><any>_observableThrow(response_);
        }));
    }

    protected processGetPageOfWarehouseHistory(response: HttpResponseBase): Observable<PageOfOfWarehouseHistoryItem> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PageOfOfWarehouseHistoryItem.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PageOfOfWarehouseHistoryItem>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class HotelGroupClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getListOfHotelGroups(request: GetListOfHotelGroupsQuery): Observable<RccHotelGroup[]> {
        let url_ = this.baseUrl + "/rcc-api/HotelGroup/GetListOfHotelGroups";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListOfHotelGroups(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListOfHotelGroups(<any>response_);
                } catch (e) {
                    return <Observable<RccHotelGroup[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<RccHotelGroup[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListOfHotelGroups(response: HttpResponseBase): Observable<RccHotelGroup[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RccHotelGroup.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RccHotelGroup[]>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class RoomStatusClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getHotelGroupRoomStatuses(request: GetHotelGroupRoomStatusesQuery): Observable<RccHotelGroupRoomStatusChanges> {
        let url_ = this.baseUrl + "/rcc-api/RoomStatus/GetHotelGroupRoomStatuses";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetHotelGroupRoomStatuses(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetHotelGroupRoomStatuses(<any>response_);
                } catch (e) {
                    return <Observable<RccHotelGroupRoomStatusChanges>><any>_observableThrow(e);
                }
            } else
                return <Observable<RccHotelGroupRoomStatusChanges>><any>_observableThrow(response_);
        }));
    }

    protected processGetHotelGroupRoomStatuses(response: HttpResponseBase): Observable<RccHotelGroupRoomStatusChanges> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RccHotelGroupRoomStatusChanges.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RccHotelGroupRoomStatusChanges>(<any>null);
    }

    getHotelRoomStatuses(request: GetHotelRoomStatusesQuery): Observable<RccHotelRoomStatusChanges> {
        let url_ = this.baseUrl + "/rcc-api/RoomStatus/GetHotelRoomStatuses";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetHotelRoomStatuses(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetHotelRoomStatuses(<any>response_);
                } catch (e) {
                    return <Observable<RccHotelRoomStatusChanges>><any>_observableThrow(e);
                }
            } else
                return <Observable<RccHotelRoomStatusChanges>><any>_observableThrow(response_);
        }));
    }

    protected processGetHotelRoomStatuses(response: HttpResponseBase): Observable<RccHotelRoomStatusChanges> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RccHotelRoomStatusChanges.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RccHotelRoomStatusChanges>(<any>null);
    }

    sendDifferentialRoomStatusChanges(request: SendDifferentialRoomStatusChangesQuery): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/rcc-api/RoomStatus/SendDifferentialRoomStatusChanges";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendDifferentialRoomStatusChanges(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendDifferentialRoomStatusChanges(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processSendDifferentialRoomStatusChanges(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    sendFullRoomStatusChangesQuery(request: SendFullRoomStatusChangesQuery): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/rcc-api/RoomStatus/SendFullRoomStatusChangesQuery";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendFullRoomStatusChangesQuery(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendFullRoomStatusChangesQuery(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processSendFullRoomStatusChangesQuery(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class TaskClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    create(request: ExternalInsertCompactTaskCommand): Observable<ProcessResponseOfGuid> {
        let url_ = this.baseUrl + "/external-api/Task/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfGuid>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfGuid>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<ProcessResponseOfGuid> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfGuid.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfGuid>(<any>null);
    }

    insertTask(request: InsertTaskForMobileCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/mobile-api/Task/InsertTask";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertTask(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertTask(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processInsertTask(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    updateTaskStatus(request: UpdateTaskStatusForMobileCommand): Observable<SimpleProcessResponse> {
        let url_ = this.baseUrl + "/mobile-api/Task/UpdateTaskStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateTaskStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateTaskStatus(<any>response_);
                } catch (e) {
                    return <Observable<SimpleProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<SimpleProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateTaskStatus(response: HttpResponseBase): Observable<SimpleProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SimpleProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SimpleProcessResponse>(<any>null);
    }

    updateMultipleTaskStatuses(request: UpdateMultipleTaskStatusesForMobileCommand): Observable<SimpleProcessResponse> {
        let url_ = this.baseUrl + "/mobile-api/Task/UpdateMultipleTaskStatuses";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateMultipleTaskStatuses(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateMultipleTaskStatuses(<any>response_);
                } catch (e) {
                    return <Observable<SimpleProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<SimpleProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateMultipleTaskStatuses(response: HttpResponseBase): Observable<SimpleProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SimpleProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SimpleProcessResponse>(<any>null);
    }

    getListOfTasks(request: GetListOfTasksForMobileQuery): Observable<MobileTask[]> {
        let url_ = this.baseUrl + "/mobile-api/Task/GetListOfTasks";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListOfTasks(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListOfTasks(<any>response_);
                } catch (e) {
                    return <Observable<MobileTask[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileTask[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListOfTasks(response: HttpResponseBase): Observable<MobileTask[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MobileTask.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileTask[]>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class DndClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    on(request: ExternalDndOnCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/external-api/Dnd/On";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processOn(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOn(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processOn(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }

    off(request: ExternalDndOffCommand): Observable<ProcessResponse> {
        let url_ = this.baseUrl + "/external-api/Dnd/Off";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processOff(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOff(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processOff(response: HttpResponseBase): Observable<ProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponse>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class CleaningClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    requestNewCleaning(request: ExternalRequestCleaningCommand): Observable<ProcessResponseOfGuid> {
        let url_ = this.baseUrl + "/external-api/Cleaning/RequestNewCleaning";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRequestNewCleaning(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRequestNewCleaning(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfGuid>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfGuid>><any>_observableThrow(response_);
        }));
    }

    protected processRequestNewCleaning(response: HttpResponseBase): Observable<ProcessResponseOfGuid> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfGuid.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfGuid>(<any>null);
    }

    insertCleaning(request: CreateCustomCleaningForMobileCommand): Observable<ProcessResponseOfGuid> {
        let url_ = this.baseUrl + "/mobile-api/Cleaning/InsertCleaning";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertCleaning(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertCleaning(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfGuid>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfGuid>><any>_observableThrow(response_);
        }));
    }

    protected processInsertCleaning(response: HttpResponseBase): Observable<ProcessResponseOfGuid> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfGuid.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfGuid>(<any>null);
    }

    getRoomCleaning(request: GetCleaningDetailsForMobileQuery): Observable<CleaningDetailsForMobile> {
        let url_ = this.baseUrl + "/mobile-api/Cleaning/GetRoomCleaning";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoomCleaning(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoomCleaning(<any>response_);
                } catch (e) {
                    return <Observable<CleaningDetailsForMobile>><any>_observableThrow(e);
                }
            } else
                return <Observable<CleaningDetailsForMobile>><any>_observableThrow(response_);
        }));
    }

    protected processGetRoomCleaning(response: HttpResponseBase): Observable<CleaningDetailsForMobile> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CleaningDetailsForMobile.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CleaningDetailsForMobile>(<any>null);
    }

    getListOfCleanings(request: GetListOfCleaningsForMobileQuery): Observable<CleaningForMobile[]> {
        let url_ = this.baseUrl + "/mobile-api/Cleaning/GetListOfCleanings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListOfCleanings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListOfCleanings(<any>response_);
                } catch (e) {
                    return <Observable<CleaningForMobile[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<CleaningForMobile[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListOfCleanings(response: HttpResponseBase): Observable<CleaningForMobile[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CleaningForMobile.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CleaningForMobile[]>(<any>null);
    }

    getListOfCleaningsForInspection(request: GetListOfCleaningsForInspectionForMobileQuery): Observable<CleaningForMobile[]> {
        let url_ = this.baseUrl + "/mobile-api/Cleaning/GetListOfCleaningsForInspection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListOfCleaningsForInspection(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListOfCleaningsForInspection(<any>response_);
                } catch (e) {
                    return <Observable<CleaningForMobile[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<CleaningForMobile[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListOfCleaningsForInspection(response: HttpResponseBase): Observable<CleaningForMobile[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CleaningForMobile.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CleaningForMobile[]>(<any>null);
    }

    updateCleaningStatus(request: UpdateCleaningStatusCommand): Observable<ExtendedMobileRoomDetails> {
        let url_ = this.baseUrl + "/mobile-api/Cleaning/UpdateCleaningStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateCleaningStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateCleaningStatus(<any>response_);
                } catch (e) {
                    return <Observable<ExtendedMobileRoomDetails>><any>_observableThrow(e);
                }
            } else
                return <Observable<ExtendedMobileRoomDetails>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateCleaningStatus(response: HttpResponseBase): Observable<ExtendedMobileRoomDetails> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExtendedMobileRoomDetails.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ExtendedMobileRoomDetails>(<any>null);
    }

    updateInspectionStatus(request: UpdateInspectionStatusCommand): Observable<ExtendedMobileRoomDetails> {
        let url_ = this.baseUrl + "/mobile-api/Cleaning/UpdateInspectionStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateInspectionStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateInspectionStatus(<any>response_);
                } catch (e) {
                    return <Observable<ExtendedMobileRoomDetails>><any>_observableThrow(e);
                }
            } else
                return <Observable<ExtendedMobileRoomDetails>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateInspectionStatus(response: HttpResponseBase): Observable<ExtendedMobileRoomDetails> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExtendedMobileRoomDetails.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ExtendedMobileRoomDetails>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class AppConfigurationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getAttendantMobileAppConfiguration(request: GetAttendantMobileAppConfigurationQuery): Observable<AttendantMobileAppConfiguration> {
        let url_ = this.baseUrl + "/mobile-api/AppConfiguration/GetAttendantMobileAppConfiguration";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAttendantMobileAppConfiguration(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAttendantMobileAppConfiguration(<any>response_);
                } catch (e) {
                    return <Observable<AttendantMobileAppConfiguration>><any>_observableThrow(e);
                }
            } else
                return <Observable<AttendantMobileAppConfiguration>><any>_observableThrow(response_);
        }));
    }

    protected processGetAttendantMobileAppConfiguration(response: HttpResponseBase): Observable<AttendantMobileAppConfiguration> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AttendantMobileAppConfiguration.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AttendantMobileAppConfiguration>(<any>null);
    }

    getAttendantMobileAppConfigurationForHotel(request: GetAttendantMobileAppConfigurationForHotelQuery): Observable<AttendantMobileAppConfiguration> {
        let url_ = this.baseUrl + "/mobile-api/AppConfiguration/GetAttendantMobileAppConfigurationForHotel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAttendantMobileAppConfigurationForHotel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAttendantMobileAppConfigurationForHotel(<any>response_);
                } catch (e) {
                    return <Observable<AttendantMobileAppConfiguration>><any>_observableThrow(e);
                }
            } else
                return <Observable<AttendantMobileAppConfiguration>><any>_observableThrow(response_);
        }));
    }

    protected processGetAttendantMobileAppConfigurationForHotel(response: HttpResponseBase): Observable<AttendantMobileAppConfiguration> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AttendantMobileAppConfiguration.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AttendantMobileAppConfiguration>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class AssetClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getListOfAssets(request: GetListOfAssetsForMobileQuery): Observable<MobileAsset[]> {
        let url_ = this.baseUrl + "/mobile-api/Asset/GetListOfAssets";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListOfAssets(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListOfAssets(<any>response_);
                } catch (e) {
                    return <Observable<MobileAsset[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileAsset[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListOfAssets(response: HttpResponseBase): Observable<MobileAsset[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MobileAsset.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileAsset[]>(<any>null);
    }

    getListOfAssetActions(request: GetListOfAssetActionsForMobileQuery): Observable<MobileAssetAction[]> {
        let url_ = this.baseUrl + "/mobile-api/Asset/GetListOfAssetActions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListOfAssetActions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListOfAssetActions(<any>response_);
                } catch (e) {
                    return <Observable<MobileAssetAction[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileAssetAction[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListOfAssetActions(response: HttpResponseBase): Observable<MobileAssetAction[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MobileAssetAction.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileAssetAction[]>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class FloorClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getFloorDetails(request: GetFloorDetailsForMobileQuery): Observable<MobileFloorDetails> {
        let url_ = this.baseUrl + "/mobile-api/Floor/GetFloorDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFloorDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFloorDetails(<any>response_);
                } catch (e) {
                    return <Observable<MobileFloorDetails>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileFloorDetails>><any>_observableThrow(response_);
        }));
    }

    protected processGetFloorDetails(response: HttpResponseBase): Observable<MobileFloorDetails> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MobileFloorDetails.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileFloorDetails>(<any>null);
    }

    getListOfFloors(request: GetListOfFloorsForMobileQuery): Observable<MobileFloor[]> {
        let url_ = this.baseUrl + "/mobile-api/Floor/GetListOfFloors";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListOfFloors(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListOfFloors(<any>response_);
                } catch (e) {
                    return <Observable<MobileFloor[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileFloor[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListOfFloors(response: HttpResponseBase): Observable<MobileFloor[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MobileFloor.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileFloor[]>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class FoundItemClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getListOfFoundItems(request: GetListOfFoundsForMobileQuery): Observable<MobileFoundItem[]> {
        let url_ = this.baseUrl + "/mobile-api/FoundItem/GetListOfFoundItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListOfFoundItems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListOfFoundItems(<any>response_);
                } catch (e) {
                    return <Observable<MobileFoundItem[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileFoundItem[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListOfFoundItems(response: HttpResponseBase): Observable<MobileFoundItem[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MobileFoundItem.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileFoundItem[]>(<any>null);
    }

    insertFoundItem(request: InsertFoundForMobileCommand): Observable<MobileFoundItem> {
        let url_ = this.baseUrl + "/mobile-api/FoundItem/InsertFoundItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertFoundItem(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertFoundItem(<any>response_);
                } catch (e) {
                    return <Observable<MobileFoundItem>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileFoundItem>><any>_observableThrow(response_);
        }));
    }

    protected processInsertFoundItem(response: HttpResponseBase): Observable<MobileFoundItem> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MobileFoundItem.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileFoundItem>(<any>null);
    }

    updateFoundItem(request: UpdateFoundForMobileCommand): Observable<MobileFoundItem> {
        let url_ = this.baseUrl + "/mobile-api/FoundItem/UpdateFoundItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateFoundItem(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateFoundItem(<any>response_);
                } catch (e) {
                    return <Observable<MobileFoundItem>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileFoundItem>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateFoundItem(response: HttpResponseBase): Observable<MobileFoundItem> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MobileFoundItem.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileFoundItem>(<any>null);
    }

    updateFoundItemImage(request: UpdateFoundImageForMobileCommand): Observable<SimpleProcessResponse> {
        let url_ = this.baseUrl + "/mobile-api/FoundItem/UpdateFoundItemImage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateFoundItemImage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateFoundItemImage(<any>response_);
                } catch (e) {
                    return <Observable<SimpleProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<SimpleProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateFoundItemImage(response: HttpResponseBase): Observable<SimpleProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SimpleProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SimpleProcessResponse>(<any>null);
    }

    deleteFoundItem(request: DeleteFoundForMobileCommand): Observable<SimpleProcessResponse> {
        let url_ = this.baseUrl + "/mobile-api/FoundItem/DeleteFoundItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteFoundItem(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteFoundItem(<any>response_);
                } catch (e) {
                    return <Observable<SimpleProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<SimpleProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteFoundItem(response: HttpResponseBase): Observable<SimpleProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SimpleProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SimpleProcessResponse>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class RoomCategoryClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getRoomCategoryDetails(request: GetRoomCategoryDetailsForMobileQuery): Observable<MobileRoomCategoryDetails> {
        let url_ = this.baseUrl + "/mobile-api/RoomCategory/GetRoomCategoryDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoomCategoryDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoomCategoryDetails(<any>response_);
                } catch (e) {
                    return <Observable<MobileRoomCategoryDetails>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileRoomCategoryDetails>><any>_observableThrow(response_);
        }));
    }

    protected processGetRoomCategoryDetails(response: HttpResponseBase): Observable<MobileRoomCategoryDetails> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MobileRoomCategoryDetails.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileRoomCategoryDetails>(<any>null);
    }

    getListOfRoomCategories(request: GetListOfRoomCategoriesForMobileQuery): Observable<MobileRoomCategory[]> {
        let url_ = this.baseUrl + "/mobile-api/RoomCategory/GetListOfRoomCategories";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListOfRoomCategories(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListOfRoomCategories(<any>response_);
                } catch (e) {
                    return <Observable<MobileRoomCategory[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileRoomCategory[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListOfRoomCategories(response: HttpResponseBase): Observable<MobileRoomCategory[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MobileRoomCategory.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileRoomCategory[]>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class RoomClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getRoomDetails(request: GetRoomDetailsForMobileQuery): Observable<MobileRoomDetails> {
        let url_ = this.baseUrl + "/mobile-api/Room/GetRoomDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoomDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoomDetails(<any>response_);
                } catch (e) {
                    return <Observable<MobileRoomDetails>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileRoomDetails>><any>_observableThrow(response_);
        }));
    }

    protected processGetRoomDetails(response: HttpResponseBase): Observable<MobileRoomDetails> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MobileRoomDetails.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileRoomDetails>(<any>null);
    }

    getListOfRooms(request: GetListOfRoomsForMobileQuery): Observable<MobileRoom[]> {
        let url_ = this.baseUrl + "/mobile-api/Room/GetListOfRooms";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListOfRooms(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListOfRooms(<any>response_);
                } catch (e) {
                    return <Observable<MobileRoom[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileRoom[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListOfRooms(response: HttpResponseBase): Observable<MobileRoom[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MobileRoom.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileRoom[]>(<any>null);
    }

    getRoomStatusDetails(request: GetRoomStatusDetailsForMobileQuery): Observable<MobileRoomStatusDetails> {
        let url_ = this.baseUrl + "/mobile-api/Room/GetRoomStatusDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoomStatusDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoomStatusDetails(<any>response_);
                } catch (e) {
                    return <Observable<MobileRoomStatusDetails>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileRoomStatusDetails>><any>_observableThrow(response_);
        }));
    }

    protected processGetRoomStatusDetails(response: HttpResponseBase): Observable<MobileRoomStatusDetails> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MobileRoomStatusDetails.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileRoomStatusDetails>(<any>null);
    }

    getListOfRoomStatuses(request: GetListOfRoomStatusesForMobileQuery): Observable<MobileRoomStatus[]> {
        let url_ = this.baseUrl + "/mobile-api/Room/GetListOfRoomStatuses";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListOfRoomStatuses(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListOfRoomStatuses(<any>response_);
                } catch (e) {
                    return <Observable<MobileRoomStatus[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileRoomStatus[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListOfRoomStatuses(response: HttpResponseBase): Observable<MobileRoomStatus[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MobileRoomStatus.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileRoomStatus[]>(<any>null);
    }

    getRoomHousekeepingDetails(request: GetRoomHousekeepingStatusDetailsForMobileQuery): Observable<MobileRoomHousekeepingStatusDetails> {
        let url_ = this.baseUrl + "/mobile-api/Room/GetRoomHousekeepingDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoomHousekeepingDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoomHousekeepingDetails(<any>response_);
                } catch (e) {
                    return <Observable<MobileRoomHousekeepingStatusDetails>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileRoomHousekeepingStatusDetails>><any>_observableThrow(response_);
        }));
    }

    protected processGetRoomHousekeepingDetails(response: HttpResponseBase): Observable<MobileRoomHousekeepingStatusDetails> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MobileRoomHousekeepingStatusDetails.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileRoomHousekeepingStatusDetails>(<any>null);
    }

    getListOfRoomHousekeepings(request: GetListOfRoomHousekeepingStatusesForMobileQuery): Observable<MobileRoomHousekeepingStatus[]> {
        let url_ = this.baseUrl + "/mobile-api/Room/GetListOfRoomHousekeepings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListOfRoomHousekeepings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListOfRoomHousekeepings(<any>response_);
                } catch (e) {
                    return <Observable<MobileRoomHousekeepingStatus[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileRoomHousekeepingStatus[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListOfRoomHousekeepings(response: HttpResponseBase): Observable<MobileRoomHousekeepingStatus[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MobileRoomHousekeepingStatus.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileRoomHousekeepingStatus[]>(<any>null);
    }

    insertNote(request: InsertRoomNoteForMobileCommand): Observable<MobileRoomNote> {
        let url_ = this.baseUrl + "/mobile-api/Room/InsertNote";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertNote(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertNote(<any>response_);
                } catch (e) {
                    return <Observable<MobileRoomNote>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileRoomNote>><any>_observableThrow(response_);
        }));
    }

    protected processInsertNote(response: HttpResponseBase): Observable<MobileRoomNote> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MobileRoomNote.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileRoomNote>(<any>null);
    }

    updateNote(request: UpdateRoomNoteForMobileCommand): Observable<MobileRoomNote> {
        let url_ = this.baseUrl + "/mobile-api/Room/UpdateNote";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateNote(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateNote(<any>response_);
                } catch (e) {
                    return <Observable<MobileRoomNote>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileRoomNote>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateNote(response: HttpResponseBase): Observable<MobileRoomNote> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MobileRoomNote.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileRoomNote>(<any>null);
    }

    deleteNote(request: DeleteRoomNoteForMobileCommand): Observable<SimpleProcessResponse> {
        let url_ = this.baseUrl + "/mobile-api/Room/DeleteNote";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteNote(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteNote(<any>response_);
                } catch (e) {
                    return <Observable<SimpleProcessResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<SimpleProcessResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteNote(response: HttpResponseBase): Observable<SimpleProcessResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SimpleProcessResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SimpleProcessResponse>(<any>null);
    }

    getListOfNotes(request: GetListOfRoomNotesForMobileQuery): Observable<MobileRoomNote[]> {
        let url_ = this.baseUrl + "/mobile-api/Room/GetListOfNotes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListOfNotes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListOfNotes(<any>response_);
                } catch (e) {
                    return <Observable<MobileRoomNote[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileRoomNote[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListOfNotes(response: HttpResponseBase): Observable<MobileRoomNote[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MobileRoomNote.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileRoomNote[]>(<any>null);
    }

    getNoteDetails(request: GetRoomNoteDetailsForMobileQuery): Observable<MobileRoomNoteDetails> {
        let url_ = this.baseUrl + "/mobile-api/Room/GetNoteDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetNoteDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetNoteDetails(<any>response_);
                } catch (e) {
                    return <Observable<MobileRoomNoteDetails>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileRoomNoteDetails>><any>_observableThrow(response_);
        }));
    }

    protected processGetNoteDetails(response: HttpResponseBase): Observable<MobileRoomNoteDetails> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MobileRoomNoteDetails.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileRoomNoteDetails>(<any>null);
    }

    getListOfAllMessages(request: GetListOfAllRoomMessagesForMobileQuery): Observable<MobileRoomMessageDetails[]> {
        let url_ = this.baseUrl + "/mobile-api/Room/GetListOfAllMessages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListOfAllMessages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListOfAllMessages(<any>response_);
                } catch (e) {
                    return <Observable<MobileRoomMessageDetails[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileRoomMessageDetails[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListOfAllMessages(response: HttpResponseBase): Observable<MobileRoomMessageDetails[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MobileRoomMessageDetails.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileRoomMessageDetails[]>(<any>null);
    }

    getListOfRoomMessages(request: GetListOfRoomMessagesForMobileQuery): Observable<MobileRoomMessage[]> {
        let url_ = this.baseUrl + "/mobile-api/Room/GetListOfRoomMessages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListOfRoomMessages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListOfRoomMessages(<any>response_);
                } catch (e) {
                    return <Observable<MobileRoomMessage[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileRoomMessage[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListOfRoomMessages(response: HttpResponseBase): Observable<MobileRoomMessage[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MobileRoomMessage.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileRoomMessage[]>(<any>null);
    }

    sendMessage(request: SendRoomMessageForMobileCommand): Observable<ProcessResponseOfGuid> {
        let url_ = this.baseUrl + "/mobile-api/Room/SendMessage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSendMessage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSendMessage(<any>response_);
                } catch (e) {
                    return <Observable<ProcessResponseOfGuid>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProcessResponseOfGuid>><any>_observableThrow(response_);
        }));
    }

    protected processSendMessage(response: HttpResponseBase): Observable<ProcessResponseOfGuid> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProcessResponseOfGuid.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProcessResponseOfGuid>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class UserClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getAvailableUsers(request: GetListOfHotelGroupUsersForMobileQuery): Observable<MobileUsersPreview> {
        let url_ = this.baseUrl + "/mobile-api/User/GetAvailableUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAvailableUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAvailableUsers(<any>response_);
                } catch (e) {
                    return <Observable<MobileUsersPreview>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileUsersPreview>><any>_observableThrow(response_);
        }));
    }

    protected processGetAvailableUsers(response: HttpResponseBase): Observable<MobileUsersPreview> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MobileUsersPreview.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileUsersPreview>(<any>null);
    }

    getAvailableUsersForHotel(request: GetListOfHotelGroupUsersForHotelForMobileQuery): Observable<MobileUsersPreview> {
        let url_ = this.baseUrl + "/mobile-api/User/GetAvailableUsersForHotel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAvailableUsersForHotel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAvailableUsersForHotel(<any>response_);
                } catch (e) {
                    return <Observable<MobileUsersPreview>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileUsersPreview>><any>_observableThrow(response_);
        }));
    }

    protected processGetAvailableUsersForHotel(response: HttpResponseBase): Observable<MobileUsersPreview> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MobileUsersPreview.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileUsersPreview>(<any>null);
    }

    getDetails(request: GetUserDetailsForMobileQuery): Observable<UserDetailsForMobile> {
        let url_ = this.baseUrl + "/mobile-api/User/GetDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDetails(<any>response_);
                } catch (e) {
                    return <Observable<UserDetailsForMobile>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserDetailsForMobile>><any>_observableThrow(response_);
        }));
    }

    protected processGetDetails(response: HttpResponseBase): Observable<UserDetailsForMobile> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDetailsForMobile.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDetailsForMobile>(<any>null);
    }

    getMyDetails(request: GetMyUserDetailsForMobileQuery): Observable<UserDetailsForMobile> {
        let url_ = this.baseUrl + "/mobile-api/User/GetMyDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMyDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMyDetails(<any>response_);
                } catch (e) {
                    return <Observable<UserDetailsForMobile>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserDetailsForMobile>><any>_observableThrow(response_);
        }));
    }

    protected processGetMyDetails(response: HttpResponseBase): Observable<UserDetailsForMobile> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDetailsForMobile.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDetailsForMobile>(<any>null);
    }

    getListOfUsers(request: GetListOfUsersForMobileQuery): Observable<MobileUser[]> {
        let url_ = this.baseUrl + "/mobile-api/User/GetListOfUsers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListOfUsers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListOfUsers(<any>response_);
                } catch (e) {
                    return <Observable<MobileUser[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileUser[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListOfUsers(response: HttpResponseBase): Observable<MobileUser[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MobileUser.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileUser[]>(<any>null);
    }

    updateOnDutyStatus(request: UpdateOnDutyStatusForMobileCommand): Observable<MobileUser> {
        let url_ = this.baseUrl + "/mobile-api/User/UpdateOnDutyStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateOnDutyStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateOnDutyStatus(<any>response_);
                } catch (e) {
                    return <Observable<MobileUser>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileUser>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateOnDutyStatus(response: HttpResponseBase): Observable<MobileUser> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MobileUser.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileUser>(<any>null);
    }

    getListOfUserGroups(request: GetListOfUserGroupsForMobileQuery): Observable<MobileUserGroup[]> {
        let url_ = this.baseUrl + "/mobile-api/User/GetListOfUserGroups";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListOfUserGroups(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListOfUserGroups(<any>response_);
                } catch (e) {
                    return <Observable<MobileUserGroup[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileUserGroup[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetListOfUserGroups(response: HttpResponseBase): Observable<MobileUserGroup[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MobileUserGroup.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileUserGroup[]>(<any>null);
    }

    getUserGroupDetails(request: GetUserGroupDetailsForMobileQuery): Observable<MobileUserGroupDetails> {
        let url_ = this.baseUrl + "/mobile-api/User/GetUserGroupDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserGroupDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserGroupDetails(<any>response_);
                } catch (e) {
                    return <Observable<MobileUserGroupDetails>><any>_observableThrow(e);
                }
            } else
                return <Observable<MobileUserGroupDetails>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserGroupDetails(response: HttpResponseBase): Observable<MobileUserGroupDetails> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MobileUserGroupDetails.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MobileUserGroupDetails>(<any>null);
    }
}

export class ProcessResponse implements IProcessResponse {
    isSuccess!: boolean;
    hasError!: boolean;
    message?: string | null;
    modelErrors?: ErrorData[] | null;

    constructor(data?: IProcessResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"] !== undefined ? _data["isSuccess"] : <any>null;
            this.hasError = _data["hasError"] !== undefined ? _data["hasError"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            if (Array.isArray(_data["modelErrors"])) {
                this.modelErrors = [] as any;
                for (let item of _data["modelErrors"])
                    this.modelErrors!.push(ErrorData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProcessResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess !== undefined ? this.isSuccess : <any>null;
        data["hasError"] = this.hasError !== undefined ? this.hasError : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        if (Array.isArray(this.modelErrors)) {
            data["modelErrors"] = [];
            for (let item of this.modelErrors)
                data["modelErrors"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IProcessResponse {
    isSuccess: boolean;
    hasError: boolean;
    message?: string | null;
    modelErrors?: ErrorData[] | null;
}

export class ErrorData implements IErrorData {
    key?: string | null;
    validatorKey?: string | null;

    constructor(data?: IErrorData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"] !== undefined ? _data["key"] : <any>null;
            this.validatorKey = _data["validatorKey"] !== undefined ? _data["validatorKey"] : <any>null;
        }
    }

    static fromJS(data: any): ErrorData {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key !== undefined ? this.key : <any>null;
        data["validatorKey"] = this.validatorKey !== undefined ? this.validatorKey : <any>null;
        return data; 
    }
}

export interface IErrorData {
    key?: string | null;
    validatorKey?: string | null;
}

export class LoginQuery implements ILoginQuery {
    hotelGroup?: string | null;
    username?: string | null;
    password?: string | null;
    rememberMe!: boolean;

    constructor(data?: ILoginQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelGroup = _data["hotelGroup"] !== undefined ? _data["hotelGroup"] : <any>null;
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
            this.rememberMe = _data["rememberMe"] !== undefined ? _data["rememberMe"] : <any>null;
        }
    }

    static fromJS(data: any): LoginQuery {
        data = typeof data === 'object' ? data : {};
        let result = new LoginQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelGroup"] = this.hotelGroup !== undefined ? this.hotelGroup : <any>null;
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["rememberMe"] = this.rememberMe !== undefined ? this.rememberMe : <any>null;
        return data; 
    }
}

export interface ILoginQuery {
    hotelGroup?: string | null;
    username?: string | null;
    password?: string | null;
    rememberMe: boolean;
}

export class AssetDetailsData implements IAssetDetailsData {
    assetGroup?: AssetDetailsGroupData | null;

    constructor(data?: IAssetDetailsData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetGroup = _data["assetGroup"] ? AssetDetailsGroupData.fromJS(_data["assetGroup"]) : <any>null;
        }
    }

    static fromJS(data: any): AssetDetailsData {
        data = typeof data === 'object' ? data : {};
        let result = new AssetDetailsData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetGroup"] = this.assetGroup ? this.assetGroup.toJSON() : <any>null;
        return data; 
    }
}

export interface IAssetDetailsData {
    assetGroup?: AssetDetailsGroupData | null;
}

export class AssetDetailsGroupData implements IAssetDetailsGroupData {
    id!: string;
    parentAssetGroupId?: string | null;
    name?: string | null;
    typeKey?: string | null;
    subGroups?: AssetDetailsSubGroupData[] | null;
    assets?: AssetData[] | null;

    constructor(data?: IAssetDetailsGroupData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.parentAssetGroupId = _data["parentAssetGroupId"] !== undefined ? _data["parentAssetGroupId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            if (Array.isArray(_data["subGroups"])) {
                this.subGroups = [] as any;
                for (let item of _data["subGroups"])
                    this.subGroups!.push(AssetDetailsSubGroupData.fromJS(item));
            }
            if (Array.isArray(_data["assets"])) {
                this.assets = [] as any;
                for (let item of _data["assets"])
                    this.assets!.push(AssetData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AssetDetailsGroupData {
        data = typeof data === 'object' ? data : {};
        let result = new AssetDetailsGroupData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["parentAssetGroupId"] = this.parentAssetGroupId !== undefined ? this.parentAssetGroupId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        if (Array.isArray(this.subGroups)) {
            data["subGroups"] = [];
            for (let item of this.subGroups)
                data["subGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.assets)) {
            data["assets"] = [];
            for (let item of this.assets)
                data["assets"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAssetDetailsGroupData {
    id: string;
    parentAssetGroupId?: string | null;
    name?: string | null;
    typeKey?: string | null;
    subGroups?: AssetDetailsSubGroupData[] | null;
    assets?: AssetData[] | null;
}

export class AssetDetailsSubGroupData implements IAssetDetailsSubGroupData {
    id!: string;
    name?: string | null;
    assets?: AssetData[] | null;

    constructor(data?: IAssetDetailsSubGroupData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            if (Array.isArray(_data["assets"])) {
                this.assets = [] as any;
                for (let item of _data["assets"])
                    this.assets!.push(AssetData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AssetDetailsSubGroupData {
        data = typeof data === 'object' ? data : {};
        let result = new AssetDetailsSubGroupData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.assets)) {
            data["assets"] = [];
            for (let item of this.assets)
                data["assets"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAssetDetailsSubGroupData {
    id: string;
    name?: string | null;
    assets?: AssetData[] | null;
}

export class AssetData implements IAssetData {
    id!: string;
    name?: string | null;
    isBulk!: boolean;
    serialNumber?: string | null;
    tags?: AssetDetailsTagData[] | null;
    imageFileData?: AssetDetailsFileData | null;
    qrCodeFileData?: AssetDetailsFileData | null;

    constructor(data?: IAssetData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isBulk = _data["isBulk"] !== undefined ? _data["isBulk"] : <any>null;
            this.serialNumber = _data["serialNumber"] !== undefined ? _data["serialNumber"] : <any>null;
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(AssetDetailsTagData.fromJS(item));
            }
            this.imageFileData = _data["imageFileData"] ? AssetDetailsFileData.fromJS(_data["imageFileData"]) : <any>null;
            this.qrCodeFileData = _data["qrCodeFileData"] ? AssetDetailsFileData.fromJS(_data["qrCodeFileData"]) : <any>null;
        }
    }

    static fromJS(data: any): AssetData {
        data = typeof data === 'object' ? data : {};
        let result = new AssetData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isBulk"] = this.isBulk !== undefined ? this.isBulk : <any>null;
        data["serialNumber"] = this.serialNumber !== undefined ? this.serialNumber : <any>null;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        data["imageFileData"] = this.imageFileData ? this.imageFileData.toJSON() : <any>null;
        data["qrCodeFileData"] = this.qrCodeFileData ? this.qrCodeFileData.toJSON() : <any>null;
        return data; 
    }
}

export interface IAssetData {
    id: string;
    name?: string | null;
    isBulk: boolean;
    serialNumber?: string | null;
    tags?: AssetDetailsTagData[] | null;
    imageFileData?: AssetDetailsFileData | null;
    qrCodeFileData?: AssetDetailsFileData | null;
}

export class AssetDetailsTagData implements IAssetDetailsTagData {
    key?: string | null;
    value?: string | null;

    constructor(data?: IAssetDetailsTagData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"] !== undefined ? _data["key"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any): AssetDetailsTagData {
        data = typeof data === 'object' ? data : {};
        let result = new AssetDetailsTagData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key !== undefined ? this.key : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data; 
    }
}

export interface IAssetDetailsTagData {
    key?: string | null;
    value?: string | null;
}

export class AssetDetailsFileData implements IAssetDetailsFileData {
    id!: string;
    name?: string | null;
    url?: string | null;
    isImage!: boolean;
    extension?: string | null;
    isPrimaryImage!: boolean;
    isQrCodeImage!: boolean;

    constructor(data?: IAssetDetailsFileData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.url = _data["url"] !== undefined ? _data["url"] : <any>null;
            this.isImage = _data["isImage"] !== undefined ? _data["isImage"] : <any>null;
            this.extension = _data["extension"] !== undefined ? _data["extension"] : <any>null;
            this.isPrimaryImage = _data["isPrimaryImage"] !== undefined ? _data["isPrimaryImage"] : <any>null;
            this.isQrCodeImage = _data["isQrCodeImage"] !== undefined ? _data["isQrCodeImage"] : <any>null;
        }
    }

    static fromJS(data: any): AssetDetailsFileData {
        data = typeof data === 'object' ? data : {};
        let result = new AssetDetailsFileData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["url"] = this.url !== undefined ? this.url : <any>null;
        data["isImage"] = this.isImage !== undefined ? this.isImage : <any>null;
        data["extension"] = this.extension !== undefined ? this.extension : <any>null;
        data["isPrimaryImage"] = this.isPrimaryImage !== undefined ? this.isPrimaryImage : <any>null;
        data["isQrCodeImage"] = this.isQrCodeImage !== undefined ? this.isQrCodeImage : <any>null;
        return data; 
    }
}

export interface IAssetDetailsFileData {
    id: string;
    name?: string | null;
    url?: string | null;
    isImage: boolean;
    extension?: string | null;
    isPrimaryImage: boolean;
    isQrCodeImage: boolean;
}

export class GetAssetDetailsQuery implements IGetAssetDetailsQuery {
    assetId?: string | null;
    assetGroupId?: string | null;

    constructor(data?: IGetAssetDetailsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
        }
    }

    static fromJS(data: any): GetAssetDetailsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAssetDetailsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        return data; 
    }
}

export interface IGetAssetDetailsQuery {
    assetId?: string | null;
    assetGroupId?: string | null;
}

export class AssetGroupAvailability implements IAssetGroupAvailability {
    isSimple!: boolean;
    id!: string;
    name?: string | null;
    assets?: AssetAvailability[] | null;

    constructor(data?: IAssetGroupAvailability) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSimple = _data["isSimple"] !== undefined ? _data["isSimple"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            if (Array.isArray(_data["assets"])) {
                this.assets = [] as any;
                for (let item of _data["assets"])
                    this.assets!.push(AssetAvailability.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AssetGroupAvailability {
        data = typeof data === 'object' ? data : {};
        let result = new AssetGroupAvailability();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSimple"] = this.isSimple !== undefined ? this.isSimple : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.assets)) {
            data["assets"] = [];
            for (let item of this.assets)
                data["assets"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAssetGroupAvailability {
    isSimple: boolean;
    id: string;
    name?: string | null;
    assets?: AssetAvailability[] | null;
}

export class AssetAvailability implements IAssetAvailability {
    id!: string;
    name?: string | null;
    isBulk!: boolean;
    serialNumber?: string | null;
    imageUrl?: string | null;
    availabilities?: AssetAvailabilityItem[] | null;
    availableQuantity!: number;
    reservedQuantity!: number;
    inUseQuantity!: number;

    constructor(data?: IAssetAvailability) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isBulk = _data["isBulk"] !== undefined ? _data["isBulk"] : <any>null;
            this.serialNumber = _data["serialNumber"] !== undefined ? _data["serialNumber"] : <any>null;
            this.imageUrl = _data["imageUrl"] !== undefined ? _data["imageUrl"] : <any>null;
            if (Array.isArray(_data["availabilities"])) {
                this.availabilities = [] as any;
                for (let item of _data["availabilities"])
                    this.availabilities!.push(AssetAvailabilityItem.fromJS(item));
            }
            this.availableQuantity = _data["availableQuantity"] !== undefined ? _data["availableQuantity"] : <any>null;
            this.reservedQuantity = _data["reservedQuantity"] !== undefined ? _data["reservedQuantity"] : <any>null;
            this.inUseQuantity = _data["inUseQuantity"] !== undefined ? _data["inUseQuantity"] : <any>null;
        }
    }

    static fromJS(data: any): AssetAvailability {
        data = typeof data === 'object' ? data : {};
        let result = new AssetAvailability();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isBulk"] = this.isBulk !== undefined ? this.isBulk : <any>null;
        data["serialNumber"] = this.serialNumber !== undefined ? this.serialNumber : <any>null;
        data["imageUrl"] = this.imageUrl !== undefined ? this.imageUrl : <any>null;
        if (Array.isArray(this.availabilities)) {
            data["availabilities"] = [];
            for (let item of this.availabilities)
                data["availabilities"].push(item.toJSON());
        }
        data["availableQuantity"] = this.availableQuantity !== undefined ? this.availableQuantity : <any>null;
        data["reservedQuantity"] = this.reservedQuantity !== undefined ? this.reservedQuantity : <any>null;
        data["inUseQuantity"] = this.inUseQuantity !== undefined ? this.inUseQuantity : <any>null;
        return data; 
    }
}

export interface IAssetAvailability {
    id: string;
    name?: string | null;
    isBulk: boolean;
    serialNumber?: string | null;
    imageUrl?: string | null;
    availabilities?: AssetAvailabilityItem[] | null;
    availableQuantity: number;
    reservedQuantity: number;
    inUseQuantity: number;
}

export class AssetAvailabilityItem implements IAssetAvailabilityItem {
    hotelId?: string | null;
    hotelName?: string | null;
    buildingId?: string | null;
    buildingName?: string | null;
    floorId?: string | null;
    floorName?: string | null;
    id!: string;
    name?: string | null;
    typeKey?: string | null;
    isCentralWarehouse!: boolean;
    availableQuantity!: number;
    reservedQuantity!: number;
    inUseQuantity!: number;

    constructor(data?: IAssetAvailabilityItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.hotelName = _data["hotelName"] !== undefined ? _data["hotelName"] : <any>null;
            this.buildingId = _data["buildingId"] !== undefined ? _data["buildingId"] : <any>null;
            this.buildingName = _data["buildingName"] !== undefined ? _data["buildingName"] : <any>null;
            this.floorId = _data["floorId"] !== undefined ? _data["floorId"] : <any>null;
            this.floorName = _data["floorName"] !== undefined ? _data["floorName"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            this.isCentralWarehouse = _data["isCentralWarehouse"] !== undefined ? _data["isCentralWarehouse"] : <any>null;
            this.availableQuantity = _data["availableQuantity"] !== undefined ? _data["availableQuantity"] : <any>null;
            this.reservedQuantity = _data["reservedQuantity"] !== undefined ? _data["reservedQuantity"] : <any>null;
            this.inUseQuantity = _data["inUseQuantity"] !== undefined ? _data["inUseQuantity"] : <any>null;
        }
    }

    static fromJS(data: any): AssetAvailabilityItem {
        data = typeof data === 'object' ? data : {};
        let result = new AssetAvailabilityItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["hotelName"] = this.hotelName !== undefined ? this.hotelName : <any>null;
        data["buildingId"] = this.buildingId !== undefined ? this.buildingId : <any>null;
        data["buildingName"] = this.buildingName !== undefined ? this.buildingName : <any>null;
        data["floorId"] = this.floorId !== undefined ? this.floorId : <any>null;
        data["floorName"] = this.floorName !== undefined ? this.floorName : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        data["isCentralWarehouse"] = this.isCentralWarehouse !== undefined ? this.isCentralWarehouse : <any>null;
        data["availableQuantity"] = this.availableQuantity !== undefined ? this.availableQuantity : <any>null;
        data["reservedQuantity"] = this.reservedQuantity !== undefined ? this.reservedQuantity : <any>null;
        data["inUseQuantity"] = this.inUseQuantity !== undefined ? this.inUseQuantity : <any>null;
        return data; 
    }
}

export interface IAssetAvailabilityItem {
    hotelId?: string | null;
    hotelName?: string | null;
    buildingId?: string | null;
    buildingName?: string | null;
    floorId?: string | null;
    floorName?: string | null;
    id: string;
    name?: string | null;
    typeKey?: string | null;
    isCentralWarehouse: boolean;
    availableQuantity: number;
    reservedQuantity: number;
    inUseQuantity: number;
}

export class GetAssetAvailabilityAndUsageQuery implements IGetAssetAvailabilityAndUsageQuery {
    assetGroupId?: string | null;
    assetId?: string | null;

    constructor(data?: IGetAssetAvailabilityAndUsageQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
        }
    }

    static fromJS(data: any): GetAssetAvailabilityAndUsageQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAssetAvailabilityAndUsageQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        return data; 
    }
}

export interface IGetAssetAvailabilityAndUsageQuery {
    assetGroupId?: string | null;
    assetId?: string | null;
}

export class TagItemData implements ITagItemData {
    key?: string | null;
    value?: string | null;

    constructor(data?: ITagItemData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"] !== undefined ? _data["key"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any): TagItemData {
        data = typeof data === 'object' ? data : {};
        let result = new TagItemData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key !== undefined ? this.key : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data; 
    }
}

export interface ITagItemData {
    key?: string | null;
    value?: string | null;
}

export class GetAssetTagsQuery implements IGetAssetTagsQuery {

    constructor(data?: IGetAssetTagsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): GetAssetTagsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAssetTagsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IGetAssetTagsQuery {
}

export class PageOfOfAssetGridItemData implements IPageOfOfAssetGridItemData {
    items?: AssetGridItemData[] | null;
    totalNumberOfItems!: number;

    constructor(data?: IPageOfOfAssetGridItemData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(AssetGridItemData.fromJS(item));
            }
            this.totalNumberOfItems = _data["totalNumberOfItems"] !== undefined ? _data["totalNumberOfItems"] : <any>null;
        }
    }

    static fromJS(data: any): PageOfOfAssetGridItemData {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfOfAssetGridItemData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalNumberOfItems"] = this.totalNumberOfItems !== undefined ? this.totalNumberOfItems : <any>null;
        return data; 
    }
}

export interface IPageOfOfAssetGridItemData {
    items?: AssetGridItemData[] | null;
    totalNumberOfItems: number;
}

export class AssetGridItemData implements IAssetGridItemData {
    id!: string;
    name?: string | null;
    isBulk!: boolean;
    serialNumber?: string | null;
    assetGroupId?: string | null;
    assetGroupName?: string | null;
    assetSubGroupId?: string | null;
    assetSubGroupName?: string | null;
    tags?: string[] | null;
    hasImage!: boolean;
    fileName?: string | null;
    imageUrl?: string | null;
    availableQuantity!: number;
    reservedQuantity!: number;
    inUseQuantity!: number;
    totalQuantity!: number;

    constructor(data?: IAssetGridItemData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isBulk = _data["isBulk"] !== undefined ? _data["isBulk"] : <any>null;
            this.serialNumber = _data["serialNumber"] !== undefined ? _data["serialNumber"] : <any>null;
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            this.assetGroupName = _data["assetGroupName"] !== undefined ? _data["assetGroupName"] : <any>null;
            this.assetSubGroupId = _data["assetSubGroupId"] !== undefined ? _data["assetSubGroupId"] : <any>null;
            this.assetSubGroupName = _data["assetSubGroupName"] !== undefined ? _data["assetSubGroupName"] : <any>null;
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(item);
            }
            this.hasImage = _data["hasImage"] !== undefined ? _data["hasImage"] : <any>null;
            this.fileName = _data["fileName"] !== undefined ? _data["fileName"] : <any>null;
            this.imageUrl = _data["imageUrl"] !== undefined ? _data["imageUrl"] : <any>null;
            this.availableQuantity = _data["availableQuantity"] !== undefined ? _data["availableQuantity"] : <any>null;
            this.reservedQuantity = _data["reservedQuantity"] !== undefined ? _data["reservedQuantity"] : <any>null;
            this.inUseQuantity = _data["inUseQuantity"] !== undefined ? _data["inUseQuantity"] : <any>null;
            this.totalQuantity = _data["totalQuantity"] !== undefined ? _data["totalQuantity"] : <any>null;
        }
    }

    static fromJS(data: any): AssetGridItemData {
        data = typeof data === 'object' ? data : {};
        let result = new AssetGridItemData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isBulk"] = this.isBulk !== undefined ? this.isBulk : <any>null;
        data["serialNumber"] = this.serialNumber !== undefined ? this.serialNumber : <any>null;
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        data["assetGroupName"] = this.assetGroupName !== undefined ? this.assetGroupName : <any>null;
        data["assetSubGroupId"] = this.assetSubGroupId !== undefined ? this.assetSubGroupId : <any>null;
        data["assetSubGroupName"] = this.assetSubGroupName !== undefined ? this.assetSubGroupName : <any>null;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        data["hasImage"] = this.hasImage !== undefined ? this.hasImage : <any>null;
        data["fileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        data["imageUrl"] = this.imageUrl !== undefined ? this.imageUrl : <any>null;
        data["availableQuantity"] = this.availableQuantity !== undefined ? this.availableQuantity : <any>null;
        data["reservedQuantity"] = this.reservedQuantity !== undefined ? this.reservedQuantity : <any>null;
        data["inUseQuantity"] = this.inUseQuantity !== undefined ? this.inUseQuantity : <any>null;
        data["totalQuantity"] = this.totalQuantity !== undefined ? this.totalQuantity : <any>null;
        return data; 
    }
}

export interface IAssetGridItemData {
    id: string;
    name?: string | null;
    isBulk: boolean;
    serialNumber?: string | null;
    assetGroupId?: string | null;
    assetGroupName?: string | null;
    assetSubGroupId?: string | null;
    assetSubGroupName?: string | null;
    tags?: string[] | null;
    hasImage: boolean;
    fileName?: string | null;
    imageUrl?: string | null;
    availableQuantity: number;
    reservedQuantity: number;
    inUseQuantity: number;
    totalQuantity: number;
}

export class GetPageOfAssetsQuery implements IGetPageOfAssetsQuery {
    skip!: number;
    take!: number;
    sortKey?: string | null;
    keywords?: string | null;
    assetGroupId?: string | null;

    constructor(data?: IGetPageOfAssetsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.skip = _data["skip"] !== undefined ? _data["skip"] : <any>null;
            this.take = _data["take"] !== undefined ? _data["take"] : <any>null;
            this.sortKey = _data["sortKey"] !== undefined ? _data["sortKey"] : <any>null;
            this.keywords = _data["keywords"] !== undefined ? _data["keywords"] : <any>null;
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
        }
    }

    static fromJS(data: any): GetPageOfAssetsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetPageOfAssetsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["skip"] = this.skip !== undefined ? this.skip : <any>null;
        data["take"] = this.take !== undefined ? this.take : <any>null;
        data["sortKey"] = this.sortKey !== undefined ? this.sortKey : <any>null;
        data["keywords"] = this.keywords !== undefined ? this.keywords : <any>null;
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        return data; 
    }
}

export interface IGetPageOfAssetsQuery {
    skip: number;
    take: number;
    sortKey?: string | null;
    keywords?: string | null;
    assetGroupId?: string | null;
}

export class InsertAssetResponse extends ProcessResponse implements IInsertAssetResponse {
    assetId!: string;
    assetGroupId!: string;
    qrCodeFileId?: string | null;
    primaryImageFileId?: string | null;

    constructor(data?: IInsertAssetResponse) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            this.qrCodeFileId = _data["qrCodeFileId"] !== undefined ? _data["qrCodeFileId"] : <any>null;
            this.primaryImageFileId = _data["primaryImageFileId"] !== undefined ? _data["primaryImageFileId"] : <any>null;
        }
    }

    static fromJS(data: any): InsertAssetResponse {
        data = typeof data === 'object' ? data : {};
        let result = new InsertAssetResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        data["qrCodeFileId"] = this.qrCodeFileId !== undefined ? this.qrCodeFileId : <any>null;
        data["primaryImageFileId"] = this.primaryImageFileId !== undefined ? this.primaryImageFileId : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IInsertAssetResponse extends IProcessResponse {
    assetId: string;
    assetGroupId: string;
    qrCodeFileId?: string | null;
    primaryImageFileId?: string | null;
}

export class InsertAssetCommand implements IInsertAssetCommand {
    isSimpleAsset!: boolean;
    assetGroupId?: string | null;
    assetSubGroupId?: string | null;
    name?: string | null;
    isBulk!: boolean;
    serialNumber?: string | null;
    tags?: InsertAssetTagData[] | null;
    qrCodeFile?: InsertAssetFileData | null;
    primaryImageFile?: InsertAssetFileData | null;

    constructor(data?: IInsertAssetCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSimpleAsset = _data["isSimpleAsset"] !== undefined ? _data["isSimpleAsset"] : <any>null;
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            this.assetSubGroupId = _data["assetSubGroupId"] !== undefined ? _data["assetSubGroupId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isBulk = _data["isBulk"] !== undefined ? _data["isBulk"] : <any>null;
            this.serialNumber = _data["serialNumber"] !== undefined ? _data["serialNumber"] : <any>null;
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(InsertAssetTagData.fromJS(item));
            }
            this.qrCodeFile = _data["qrCodeFile"] ? InsertAssetFileData.fromJS(_data["qrCodeFile"]) : <any>null;
            this.primaryImageFile = _data["primaryImageFile"] ? InsertAssetFileData.fromJS(_data["primaryImageFile"]) : <any>null;
        }
    }

    static fromJS(data: any): InsertAssetCommand {
        data = typeof data === 'object' ? data : {};
        let result = new InsertAssetCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSimpleAsset"] = this.isSimpleAsset !== undefined ? this.isSimpleAsset : <any>null;
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        data["assetSubGroupId"] = this.assetSubGroupId !== undefined ? this.assetSubGroupId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isBulk"] = this.isBulk !== undefined ? this.isBulk : <any>null;
        data["serialNumber"] = this.serialNumber !== undefined ? this.serialNumber : <any>null;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        data["qrCodeFile"] = this.qrCodeFile ? this.qrCodeFile.toJSON() : <any>null;
        data["primaryImageFile"] = this.primaryImageFile ? this.primaryImageFile.toJSON() : <any>null;
        return data; 
    }
}

export interface IInsertAssetCommand {
    isSimpleAsset: boolean;
    assetGroupId?: string | null;
    assetSubGroupId?: string | null;
    name?: string | null;
    isBulk: boolean;
    serialNumber?: string | null;
    tags?: InsertAssetTagData[] | null;
    qrCodeFile?: InsertAssetFileData | null;
    primaryImageFile?: InsertAssetFileData | null;
}

export class InsertAssetTagData implements IInsertAssetTagData {
    key?: string | null;
    value?: string | null;

    constructor(data?: IInsertAssetTagData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"] !== undefined ? _data["key"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any): InsertAssetTagData {
        data = typeof data === 'object' ? data : {};
        let result = new InsertAssetTagData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key !== undefined ? this.key : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data; 
    }
}

export interface IInsertAssetTagData {
    key?: string | null;
    value?: string | null;
}

export class InsertAssetFileData implements IInsertAssetFileData {
    fileName?: string | null;

    constructor(data?: IInsertAssetFileData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileName = _data["fileName"] !== undefined ? _data["fileName"] : <any>null;
        }
    }

    static fromJS(data: any): InsertAssetFileData {
        data = typeof data === 'object' ? data : {};
        let result = new InsertAssetFileData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        return data; 
    }
}

export interface IInsertAssetFileData {
    fileName?: string | null;
}

export class ProcessResponseOfGuid extends ProcessResponse implements IProcessResponseOfGuid {
    data!: string;

    constructor(data?: IProcessResponseOfGuid) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] !== undefined ? _data["data"] : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfGuid {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data !== undefined ? this.data : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfGuid extends IProcessResponse {
    data: string;
}

export class InsertAssetGroupCommand implements IInsertAssetGroupCommand {
    parentAssetGroupId?: string | null;
    name?: string | null;
    typeKey?: string | null;

    constructor(data?: IInsertAssetGroupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.parentAssetGroupId = _data["parentAssetGroupId"] !== undefined ? _data["parentAssetGroupId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
        }
    }

    static fromJS(data: any): InsertAssetGroupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new InsertAssetGroupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentAssetGroupId"] = this.parentAssetGroupId !== undefined ? this.parentAssetGroupId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        return data; 
    }
}

export interface IInsertAssetGroupCommand {
    parentAssetGroupId?: string | null;
    name?: string | null;
    typeKey?: string | null;
}

export class UpdateAssetResponse extends ProcessResponse implements IUpdateAssetResponse {
    qrCodeFileId?: string | null;
    primaryImageFileId?: string | null;

    constructor(data?: IUpdateAssetResponse) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.qrCodeFileId = _data["qrCodeFileId"] !== undefined ? _data["qrCodeFileId"] : <any>null;
            this.primaryImageFileId = _data["primaryImageFileId"] !== undefined ? _data["primaryImageFileId"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateAssetResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAssetResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["qrCodeFileId"] = this.qrCodeFileId !== undefined ? this.qrCodeFileId : <any>null;
        data["primaryImageFileId"] = this.primaryImageFileId !== undefined ? this.primaryImageFileId : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IUpdateAssetResponse extends IProcessResponse {
    qrCodeFileId?: string | null;
    primaryImageFileId?: string | null;
}

export class UpdateAssetCommand implements IUpdateAssetCommand {
    id!: string;
    assetGroupId?: string | null;
    assetSubGroupId?: string | null;
    name?: string | null;
    isBulk!: boolean;
    serialNumber?: string | null;
    tags?: UpdateAssetTagData[] | null;
    qrCodeFile?: UpdateAssetFileData | null;
    primaryImageFile?: UpdateAssetFileData | null;

    constructor(data?: IUpdateAssetCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            this.assetSubGroupId = _data["assetSubGroupId"] !== undefined ? _data["assetSubGroupId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isBulk = _data["isBulk"] !== undefined ? _data["isBulk"] : <any>null;
            this.serialNumber = _data["serialNumber"] !== undefined ? _data["serialNumber"] : <any>null;
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(UpdateAssetTagData.fromJS(item));
            }
            this.qrCodeFile = _data["qrCodeFile"] ? UpdateAssetFileData.fromJS(_data["qrCodeFile"]) : <any>null;
            this.primaryImageFile = _data["primaryImageFile"] ? UpdateAssetFileData.fromJS(_data["primaryImageFile"]) : <any>null;
        }
    }

    static fromJS(data: any): UpdateAssetCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAssetCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        data["assetSubGroupId"] = this.assetSubGroupId !== undefined ? this.assetSubGroupId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isBulk"] = this.isBulk !== undefined ? this.isBulk : <any>null;
        data["serialNumber"] = this.serialNumber !== undefined ? this.serialNumber : <any>null;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        data["qrCodeFile"] = this.qrCodeFile ? this.qrCodeFile.toJSON() : <any>null;
        data["primaryImageFile"] = this.primaryImageFile ? this.primaryImageFile.toJSON() : <any>null;
        return data; 
    }
}

export interface IUpdateAssetCommand {
    id: string;
    assetGroupId?: string | null;
    assetSubGroupId?: string | null;
    name?: string | null;
    isBulk: boolean;
    serialNumber?: string | null;
    tags?: UpdateAssetTagData[] | null;
    qrCodeFile?: UpdateAssetFileData | null;
    primaryImageFile?: UpdateAssetFileData | null;
}

export class UpdateAssetTagData implements IUpdateAssetTagData {
    key?: string | null;
    value?: string | null;

    constructor(data?: IUpdateAssetTagData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"] !== undefined ? _data["key"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateAssetTagData {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAssetTagData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key !== undefined ? this.key : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data; 
    }
}

export interface IUpdateAssetTagData {
    key?: string | null;
    value?: string | null;
}

export class UpdateAssetFileData implements IUpdateAssetFileData {
    id?: string | null;
    fileName?: string | null;

    constructor(data?: IUpdateAssetFileData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.fileName = _data["fileName"] !== undefined ? _data["fileName"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateAssetFileData {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAssetFileData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["fileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        return data; 
    }
}

export interface IUpdateAssetFileData {
    id?: string | null;
    fileName?: string | null;
}

export class UpdateAssetGroupCommand implements IUpdateAssetGroupCommand {
    id!: string;
    name?: string | null;
    typeKey?: string | null;

    constructor(data?: IUpdateAssetGroupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateAssetGroupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAssetGroupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        return data; 
    }
}

export interface IUpdateAssetGroupCommand {
    id: string;
    name?: string | null;
    typeKey?: string | null;
}

export class DeleteAssetCommand implements IDeleteAssetCommand {
    id!: string;

    constructor(data?: IDeleteAssetCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteAssetCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteAssetCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IDeleteAssetCommand {
    id: string;
}

export class AssetActionData implements IAssetActionData {
    assetGroupId!: string;
    id!: string;
    name?: string | null;
    quickOrTimedKey?: string | null;
    priorityKey?: string | null;
    defaultAssignedToUserId?: string | null;
    defaultAssignedToUserGroupId?: string | null;
    defaultAssignedToUserSubGroupId?: string | null;
    credits?: number | null;
    price?: number | null;
    isSystemDefined!: boolean;
    systemActionTypeKey?: string | null;
    systemDefinedActionIdentifierKey?: string | null;

    constructor(data?: IAssetActionData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.quickOrTimedKey = _data["quickOrTimedKey"] !== undefined ? _data["quickOrTimedKey"] : <any>null;
            this.priorityKey = _data["priorityKey"] !== undefined ? _data["priorityKey"] : <any>null;
            this.defaultAssignedToUserId = _data["defaultAssignedToUserId"] !== undefined ? _data["defaultAssignedToUserId"] : <any>null;
            this.defaultAssignedToUserGroupId = _data["defaultAssignedToUserGroupId"] !== undefined ? _data["defaultAssignedToUserGroupId"] : <any>null;
            this.defaultAssignedToUserSubGroupId = _data["defaultAssignedToUserSubGroupId"] !== undefined ? _data["defaultAssignedToUserSubGroupId"] : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
            this.isSystemDefined = _data["isSystemDefined"] !== undefined ? _data["isSystemDefined"] : <any>null;
            this.systemActionTypeKey = _data["systemActionTypeKey"] !== undefined ? _data["systemActionTypeKey"] : <any>null;
            this.systemDefinedActionIdentifierKey = _data["systemDefinedActionIdentifierKey"] !== undefined ? _data["systemDefinedActionIdentifierKey"] : <any>null;
        }
    }

    static fromJS(data: any): AssetActionData {
        data = typeof data === 'object' ? data : {};
        let result = new AssetActionData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["quickOrTimedKey"] = this.quickOrTimedKey !== undefined ? this.quickOrTimedKey : <any>null;
        data["priorityKey"] = this.priorityKey !== undefined ? this.priorityKey : <any>null;
        data["defaultAssignedToUserId"] = this.defaultAssignedToUserId !== undefined ? this.defaultAssignedToUserId : <any>null;
        data["defaultAssignedToUserGroupId"] = this.defaultAssignedToUserGroupId !== undefined ? this.defaultAssignedToUserGroupId : <any>null;
        data["defaultAssignedToUserSubGroupId"] = this.defaultAssignedToUserSubGroupId !== undefined ? this.defaultAssignedToUserSubGroupId : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["isSystemDefined"] = this.isSystemDefined !== undefined ? this.isSystemDefined : <any>null;
        data["systemActionTypeKey"] = this.systemActionTypeKey !== undefined ? this.systemActionTypeKey : <any>null;
        data["systemDefinedActionIdentifierKey"] = this.systemDefinedActionIdentifierKey !== undefined ? this.systemDefinedActionIdentifierKey : <any>null;
        return data; 
    }
}

export interface IAssetActionData {
    assetGroupId: string;
    id: string;
    name?: string | null;
    quickOrTimedKey?: string | null;
    priorityKey?: string | null;
    defaultAssignedToUserId?: string | null;
    defaultAssignedToUserGroupId?: string | null;
    defaultAssignedToUserSubGroupId?: string | null;
    credits?: number | null;
    price?: number | null;
    isSystemDefined: boolean;
    systemActionTypeKey?: string | null;
    systemDefinedActionIdentifierKey?: string | null;
}

export class GetAssetGroupActionsQuery implements IGetAssetGroupActionsQuery {
    assetGroupId!: string;

    constructor(data?: IGetAssetGroupActionsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
        }
    }

    static fromJS(data: any): GetAssetGroupActionsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAssetGroupActionsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        return data; 
    }
}

export interface IGetAssetGroupActionsQuery {
    assetGroupId: string;
}

export class ProcessResponseOfAssetActionDataOf extends ProcessResponse implements IProcessResponseOfAssetActionDataOf {
    data?: AssetActionData[] | null;

    constructor(data?: IProcessResponseOfAssetActionDataOf) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(AssetActionData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProcessResponseOfAssetActionDataOf {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfAssetActionDataOf();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfAssetActionDataOf extends IProcessResponse {
    data?: AssetActionData[] | null;
}

export class InsertAssetGroupActionsCommand implements IInsertAssetGroupActionsCommand {
    assetGroupId!: string;
    actions?: InsertAssetGroupActionItem[] | null;

    constructor(data?: IInsertAssetGroupActionsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            if (Array.isArray(_data["actions"])) {
                this.actions = [] as any;
                for (let item of _data["actions"])
                    this.actions!.push(InsertAssetGroupActionItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InsertAssetGroupActionsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new InsertAssetGroupActionsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        if (Array.isArray(this.actions)) {
            data["actions"] = [];
            for (let item of this.actions)
                data["actions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IInsertAssetGroupActionsCommand {
    assetGroupId: string;
    actions?: InsertAssetGroupActionItem[] | null;
}

export class InsertAssetGroupActionItem implements IInsertAssetGroupActionItem {
    name?: string | null;
    quickOrTimedKey?: string | null;
    priorityKey?: string | null;
    defaultAssignedToUserId?: string | null;
    defaultAssignedToUserGroupId?: string | null;
    defaultAssignedToUserSubGroupId?: string | null;
    credits?: number | null;
    price?: number | null;
    isSystemDefined!: boolean;
    systemActionTypeKey?: string | null;
    systemDefinedActionIdentifierKey?: string | null;

    constructor(data?: IInsertAssetGroupActionItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.quickOrTimedKey = _data["quickOrTimedKey"] !== undefined ? _data["quickOrTimedKey"] : <any>null;
            this.priorityKey = _data["priorityKey"] !== undefined ? _data["priorityKey"] : <any>null;
            this.defaultAssignedToUserId = _data["defaultAssignedToUserId"] !== undefined ? _data["defaultAssignedToUserId"] : <any>null;
            this.defaultAssignedToUserGroupId = _data["defaultAssignedToUserGroupId"] !== undefined ? _data["defaultAssignedToUserGroupId"] : <any>null;
            this.defaultAssignedToUserSubGroupId = _data["defaultAssignedToUserSubGroupId"] !== undefined ? _data["defaultAssignedToUserSubGroupId"] : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
            this.isSystemDefined = _data["isSystemDefined"] !== undefined ? _data["isSystemDefined"] : <any>null;
            this.systemActionTypeKey = _data["systemActionTypeKey"] !== undefined ? _data["systemActionTypeKey"] : <any>null;
            this.systemDefinedActionIdentifierKey = _data["systemDefinedActionIdentifierKey"] !== undefined ? _data["systemDefinedActionIdentifierKey"] : <any>null;
        }
    }

    static fromJS(data: any): InsertAssetGroupActionItem {
        data = typeof data === 'object' ? data : {};
        let result = new InsertAssetGroupActionItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["quickOrTimedKey"] = this.quickOrTimedKey !== undefined ? this.quickOrTimedKey : <any>null;
        data["priorityKey"] = this.priorityKey !== undefined ? this.priorityKey : <any>null;
        data["defaultAssignedToUserId"] = this.defaultAssignedToUserId !== undefined ? this.defaultAssignedToUserId : <any>null;
        data["defaultAssignedToUserGroupId"] = this.defaultAssignedToUserGroupId !== undefined ? this.defaultAssignedToUserGroupId : <any>null;
        data["defaultAssignedToUserSubGroupId"] = this.defaultAssignedToUserSubGroupId !== undefined ? this.defaultAssignedToUserSubGroupId : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["isSystemDefined"] = this.isSystemDefined !== undefined ? this.isSystemDefined : <any>null;
        data["systemActionTypeKey"] = this.systemActionTypeKey !== undefined ? this.systemActionTypeKey : <any>null;
        data["systemDefinedActionIdentifierKey"] = this.systemDefinedActionIdentifierKey !== undefined ? this.systemDefinedActionIdentifierKey : <any>null;
        return data; 
    }
}

export interface IInsertAssetGroupActionItem {
    name?: string | null;
    quickOrTimedKey?: string | null;
    priorityKey?: string | null;
    defaultAssignedToUserId?: string | null;
    defaultAssignedToUserGroupId?: string | null;
    defaultAssignedToUserSubGroupId?: string | null;
    credits?: number | null;
    price?: number | null;
    isSystemDefined: boolean;
    systemActionTypeKey?: string | null;
    systemDefinedActionIdentifierKey?: string | null;
}

export class UpdateAssetGroupActionsCommand implements IUpdateAssetGroupActionsCommand {
    assetGroupId!: string;
    actions?: UpdateAssetGroupActionItem[] | null;

    constructor(data?: IUpdateAssetGroupActionsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            if (Array.isArray(_data["actions"])) {
                this.actions = [] as any;
                for (let item of _data["actions"])
                    this.actions!.push(UpdateAssetGroupActionItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateAssetGroupActionsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAssetGroupActionsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        if (Array.isArray(this.actions)) {
            data["actions"] = [];
            for (let item of this.actions)
                data["actions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUpdateAssetGroupActionsCommand {
    assetGroupId: string;
    actions?: UpdateAssetGroupActionItem[] | null;
}

export class UpdateAssetGroupActionItem implements IUpdateAssetGroupActionItem {
    id?: string | null;
    name?: string | null;
    quickOrTimedKey?: string | null;
    priorityKey?: string | null;
    defaultAssignedToUserId?: string | null;
    defaultAssignedToUserGroupId?: string | null;
    defaultAssignedToUserSubGroupId?: string | null;
    credits?: number | null;
    price?: number | null;
    isSystemDefined!: boolean;
    systemActionTypeKey?: string | null;
    systemDefinedActionIdentifierKey?: string | null;

    constructor(data?: IUpdateAssetGroupActionItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.quickOrTimedKey = _data["quickOrTimedKey"] !== undefined ? _data["quickOrTimedKey"] : <any>null;
            this.priorityKey = _data["priorityKey"] !== undefined ? _data["priorityKey"] : <any>null;
            this.defaultAssignedToUserId = _data["defaultAssignedToUserId"] !== undefined ? _data["defaultAssignedToUserId"] : <any>null;
            this.defaultAssignedToUserGroupId = _data["defaultAssignedToUserGroupId"] !== undefined ? _data["defaultAssignedToUserGroupId"] : <any>null;
            this.defaultAssignedToUserSubGroupId = _data["defaultAssignedToUserSubGroupId"] !== undefined ? _data["defaultAssignedToUserSubGroupId"] : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
            this.isSystemDefined = _data["isSystemDefined"] !== undefined ? _data["isSystemDefined"] : <any>null;
            this.systemActionTypeKey = _data["systemActionTypeKey"] !== undefined ? _data["systemActionTypeKey"] : <any>null;
            this.systemDefinedActionIdentifierKey = _data["systemDefinedActionIdentifierKey"] !== undefined ? _data["systemDefinedActionIdentifierKey"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateAssetGroupActionItem {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAssetGroupActionItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["quickOrTimedKey"] = this.quickOrTimedKey !== undefined ? this.quickOrTimedKey : <any>null;
        data["priorityKey"] = this.priorityKey !== undefined ? this.priorityKey : <any>null;
        data["defaultAssignedToUserId"] = this.defaultAssignedToUserId !== undefined ? this.defaultAssignedToUserId : <any>null;
        data["defaultAssignedToUserGroupId"] = this.defaultAssignedToUserGroupId !== undefined ? this.defaultAssignedToUserGroupId : <any>null;
        data["defaultAssignedToUserSubGroupId"] = this.defaultAssignedToUserSubGroupId !== undefined ? this.defaultAssignedToUserSubGroupId : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["isSystemDefined"] = this.isSystemDefined !== undefined ? this.isSystemDefined : <any>null;
        data["systemActionTypeKey"] = this.systemActionTypeKey !== undefined ? this.systemActionTypeKey : <any>null;
        data["systemDefinedActionIdentifierKey"] = this.systemDefinedActionIdentifierKey !== undefined ? this.systemDefinedActionIdentifierKey : <any>null;
        return data; 
    }
}

export interface IUpdateAssetGroupActionItem {
    id?: string | null;
    name?: string | null;
    quickOrTimedKey?: string | null;
    priorityKey?: string | null;
    defaultAssignedToUserId?: string | null;
    defaultAssignedToUserGroupId?: string | null;
    defaultAssignedToUserSubGroupId?: string | null;
    credits?: number | null;
    price?: number | null;
    isSystemDefined: boolean;
    systemActionTypeKey?: string | null;
    systemDefinedActionIdentifierKey?: string | null;
}

export class AssetRoomAssignmentsViewModel implements IAssetRoomAssignmentsViewModel {
    assetId!: string;
    assetModelId?: string | null;
    hotelId?: string | null;
    buildingGroups?: AssetRoomAssignmentsGroupViewModel[] | null;

    constructor(data?: IAssetRoomAssignmentsViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetModelId = _data["assetModelId"] !== undefined ? _data["assetModelId"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            if (Array.isArray(_data["buildingGroups"])) {
                this.buildingGroups = [] as any;
                for (let item of _data["buildingGroups"])
                    this.buildingGroups!.push(AssetRoomAssignmentsGroupViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AssetRoomAssignmentsViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new AssetRoomAssignmentsViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetModelId"] = this.assetModelId !== undefined ? this.assetModelId : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        if (Array.isArray(this.buildingGroups)) {
            data["buildingGroups"] = [];
            for (let item of this.buildingGroups)
                data["buildingGroups"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAssetRoomAssignmentsViewModel {
    assetId: string;
    assetModelId?: string | null;
    hotelId?: string | null;
    buildingGroups?: AssetRoomAssignmentsGroupViewModel[] | null;
}

export class AssetRoomAssignmentsGroupViewModel implements IAssetRoomAssignmentsGroupViewModel {
    buildingId?: string | null;
    buildingName?: string | null;
    roomAssignments?: AssetRoomAssignmentViewModel[] | null;

    constructor(data?: IAssetRoomAssignmentsGroupViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.buildingId = _data["buildingId"] !== undefined ? _data["buildingId"] : <any>null;
            this.buildingName = _data["buildingName"] !== undefined ? _data["buildingName"] : <any>null;
            if (Array.isArray(_data["roomAssignments"])) {
                this.roomAssignments = [] as any;
                for (let item of _data["roomAssignments"])
                    this.roomAssignments!.push(AssetRoomAssignmentViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AssetRoomAssignmentsGroupViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new AssetRoomAssignmentsGroupViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["buildingId"] = this.buildingId !== undefined ? this.buildingId : <any>null;
        data["buildingName"] = this.buildingName !== undefined ? this.buildingName : <any>null;
        if (Array.isArray(this.roomAssignments)) {
            data["roomAssignments"] = [];
            for (let item of this.roomAssignments)
                data["roomAssignments"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAssetRoomAssignmentsGroupViewModel {
    buildingId?: string | null;
    buildingName?: string | null;
    roomAssignments?: AssetRoomAssignmentViewModel[] | null;
}

export class AssetRoomAssignmentViewModel implements IAssetRoomAssignmentViewModel {
    roomId!: string;
    roomName?: string | null;
    quantity!: number;
    isAssignedTo!: boolean;

    constructor(data?: IAssetRoomAssignmentViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.roomName = _data["roomName"] !== undefined ? _data["roomName"] : <any>null;
            this.quantity = _data["quantity"] !== undefined ? _data["quantity"] : <any>null;
            this.isAssignedTo = _data["isAssignedTo"] !== undefined ? _data["isAssignedTo"] : <any>null;
        }
    }

    static fromJS(data: any): AssetRoomAssignmentViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new AssetRoomAssignmentViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["roomName"] = this.roomName !== undefined ? this.roomName : <any>null;
        data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["isAssignedTo"] = this.isAssignedTo !== undefined ? this.isAssignedTo : <any>null;
        return data; 
    }
}

export interface IAssetRoomAssignmentViewModel {
    roomId: string;
    roomName?: string | null;
    quantity: number;
    isAssignedTo: boolean;
}

export class GetAssetRoomAssignmentsQuery implements IGetAssetRoomAssignmentsQuery {
    assetId!: string;
    assetModelId?: string | null;
    hotelId?: string | null;
    keywords?: string | null;

    constructor(data?: IGetAssetRoomAssignmentsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetModelId = _data["assetModelId"] !== undefined ? _data["assetModelId"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.keywords = _data["keywords"] !== undefined ? _data["keywords"] : <any>null;
        }
    }

    static fromJS(data: any): GetAssetRoomAssignmentsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAssetRoomAssignmentsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetModelId"] = this.assetModelId !== undefined ? this.assetModelId : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["keywords"] = this.keywords !== undefined ? this.keywords : <any>null;
        return data; 
    }
}

export interface IGetAssetRoomAssignmentsQuery {
    assetId: string;
    assetModelId?: string | null;
    hotelId?: string | null;
    keywords?: string | null;
}

export class SystemDefinedAssetAction implements ISystemDefinedAssetAction {
    key?: string | null;
    typeKey?: string | null;
    name?: string | null;

    constructor(data?: ISystemDefinedAssetAction) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"] !== undefined ? _data["key"] : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): SystemDefinedAssetAction {
        data = typeof data === 'object' ? data : {};
        let result = new SystemDefinedAssetAction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key !== undefined ? this.key : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data; 
    }
}

export interface ISystemDefinedAssetAction {
    key?: string | null;
    typeKey?: string | null;
    name?: string | null;
}

export class GetSystemDefinedAssetActionsQuery implements IGetSystemDefinedAssetActionsQuery {

    constructor(data?: IGetSystemDefinedAssetActionsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): GetSystemDefinedAssetActionsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetSystemDefinedAssetActionsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IGetSystemDefinedAssetActionsQuery {
}

export class SetRoomsStatusCommand implements ISetRoomsStatusCommand {
    overrideMidnightTime?: boolean | null;

    constructor(data?: ISetRoomsStatusCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.overrideMidnightTime = _data["overrideMidnightTime"] !== undefined ? _data["overrideMidnightTime"] : <any>null;
        }
    }

    static fromJS(data: any): SetRoomsStatusCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SetRoomsStatusCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["overrideMidnightTime"] = this.overrideMidnightTime !== undefined ? this.overrideMidnightTime : <any>null;
        return data; 
    }
}

export interface ISetRoomsStatusCommand {
    overrideMidnightTime?: boolean | null;
}

export class CleaningCalendarIntervalResult implements ICleaningCalendarIntervalResult {
    days?: CalendarDay[] | null;
    rooms?: CleaningCalendarRoom[] | null;

    constructor(data?: ICleaningCalendarIntervalResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["days"])) {
                this.days = [] as any;
                for (let item of _data["days"])
                    this.days!.push(CalendarDay.fromJS(item));
            }
            if (Array.isArray(_data["rooms"])) {
                this.rooms = [] as any;
                for (let item of _data["rooms"])
                    this.rooms!.push(CleaningCalendarRoom.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CleaningCalendarIntervalResult {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningCalendarIntervalResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.days)) {
            data["days"] = [];
            for (let item of this.days)
                data["days"].push(item.toJSON());
        }
        if (Array.isArray(this.rooms)) {
            data["rooms"] = [];
            for (let item of this.rooms)
                data["rooms"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICleaningCalendarIntervalResult {
    days?: CalendarDay[] | null;
    rooms?: CleaningCalendarRoom[] | null;
}

export class CalendarDay implements ICalendarDay {
    date!: moment.Moment;
    dayName?: string | null;
    dateString?: string | null;

    constructor(data?: ICalendarDay) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? moment(_data["date"].toString()) : <any>null;
            this.dayName = _data["dayName"] !== undefined ? _data["dayName"] : <any>null;
            this.dateString = _data["dateString"] !== undefined ? _data["dateString"] : <any>null;
        }
    }

    static fromJS(data: any): CalendarDay {
        data = typeof data === 'object' ? data : {};
        let result = new CalendarDay();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>null;
        data["dayName"] = this.dayName !== undefined ? this.dayName : <any>null;
        data["dateString"] = this.dateString !== undefined ? this.dateString : <any>null;
        return data; 
    }
}

export interface ICalendarDay {
    date: moment.Moment;
    dayName?: string | null;
    dateString?: string | null;
}

export class CleaningCalendarRoom implements ICleaningCalendarRoom {
    name?: string | null;
    categoryName?: string | null;
    days?: CleaningCalendarDay[] | null;

    constructor(data?: ICleaningCalendarRoom) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.categoryName = _data["categoryName"] !== undefined ? _data["categoryName"] : <any>null;
            if (Array.isArray(_data["days"])) {
                this.days = [] as any;
                for (let item of _data["days"])
                    this.days!.push(CleaningCalendarDay.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CleaningCalendarRoom {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningCalendarRoom();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["categoryName"] = this.categoryName !== undefined ? this.categoryName : <any>null;
        if (Array.isArray(this.days)) {
            data["days"] = [];
            for (let item of this.days)
                data["days"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICleaningCalendarRoom {
    name?: string | null;
    categoryName?: string | null;
    days?: CleaningCalendarDay[] | null;
}

export class CleaningCalendarDay extends CalendarDay implements ICleaningCalendarDay {
    reservations?: CleaningCalendarReservation[] | null;
    cleanings?: CleaningCalendarCleaning[] | null;

    constructor(data?: ICleaningCalendarDay) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["reservations"])) {
                this.reservations = [] as any;
                for (let item of _data["reservations"])
                    this.reservations!.push(CleaningCalendarReservation.fromJS(item));
            }
            if (Array.isArray(_data["cleanings"])) {
                this.cleanings = [] as any;
                for (let item of _data["cleanings"])
                    this.cleanings!.push(CleaningCalendarCleaning.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CleaningCalendarDay {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningCalendarDay();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.reservations)) {
            data["reservations"] = [];
            for (let item of this.reservations)
                data["reservations"].push(item.toJSON());
        }
        if (Array.isArray(this.cleanings)) {
            data["cleanings"] = [];
            for (let item of this.cleanings)
                data["cleanings"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ICleaningCalendarDay extends ICalendarDay {
    reservations?: CleaningCalendarReservation[] | null;
    cleanings?: CleaningCalendarCleaning[] | null;
}

export class CleaningCalendarReservation implements ICleaningCalendarReservation {
    reservationId?: string | null;
    guestName?: string | null;
    isArrival!: boolean;
    isDeparture!: boolean;

    constructor(data?: ICleaningCalendarReservation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.reservationId = _data["reservationId"] !== undefined ? _data["reservationId"] : <any>null;
            this.guestName = _data["guestName"] !== undefined ? _data["guestName"] : <any>null;
            this.isArrival = _data["isArrival"] !== undefined ? _data["isArrival"] : <any>null;
            this.isDeparture = _data["isDeparture"] !== undefined ? _data["isDeparture"] : <any>null;
        }
    }

    static fromJS(data: any): CleaningCalendarReservation {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningCalendarReservation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reservationId"] = this.reservationId !== undefined ? this.reservationId : <any>null;
        data["guestName"] = this.guestName !== undefined ? this.guestName : <any>null;
        data["isArrival"] = this.isArrival !== undefined ? this.isArrival : <any>null;
        data["isDeparture"] = this.isDeparture !== undefined ? this.isDeparture : <any>null;
        return data; 
    }
}

export interface ICleaningCalendarReservation {
    reservationId?: string | null;
    guestName?: string | null;
    isArrival: boolean;
    isDeparture: boolean;
}

export class CleaningCalendarCleaning implements ICleaningCalendarCleaning {
    cleaningName?: string | null;
    hasRecommendedInterval!: boolean;
    recommendedIntervalFromTimeString?: string | null;
    recommendedIntervalToTimeString?: string | null;

    constructor(data?: ICleaningCalendarCleaning) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cleaningName = _data["cleaningName"] !== undefined ? _data["cleaningName"] : <any>null;
            this.hasRecommendedInterval = _data["hasRecommendedInterval"] !== undefined ? _data["hasRecommendedInterval"] : <any>null;
            this.recommendedIntervalFromTimeString = _data["recommendedIntervalFromTimeString"] !== undefined ? _data["recommendedIntervalFromTimeString"] : <any>null;
            this.recommendedIntervalToTimeString = _data["recommendedIntervalToTimeString"] !== undefined ? _data["recommendedIntervalToTimeString"] : <any>null;
        }
    }

    static fromJS(data: any): CleaningCalendarCleaning {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningCalendarCleaning();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cleaningName"] = this.cleaningName !== undefined ? this.cleaningName : <any>null;
        data["hasRecommendedInterval"] = this.hasRecommendedInterval !== undefined ? this.hasRecommendedInterval : <any>null;
        data["recommendedIntervalFromTimeString"] = this.recommendedIntervalFromTimeString !== undefined ? this.recommendedIntervalFromTimeString : <any>null;
        data["recommendedIntervalToTimeString"] = this.recommendedIntervalToTimeString !== undefined ? this.recommendedIntervalToTimeString : <any>null;
        return data; 
    }
}

export interface ICleaningCalendarCleaning {
    cleaningName?: string | null;
    hasRecommendedInterval: boolean;
    recommendedIntervalFromTimeString?: string | null;
    recommendedIntervalToTimeString?: string | null;
}

export class GetWeeklyCleaningCalendarQuery implements IGetWeeklyCleaningCalendarQuery {
    hotelId?: string | null;
    fromDate!: moment.Moment;
    toDate!: moment.Moment;

    constructor(data?: IGetWeeklyCleaningCalendarQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.fromDate = _data["fromDate"] ? moment(_data["fromDate"].toString()) : <any>null;
            this.toDate = _data["toDate"] ? moment(_data["toDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): GetWeeklyCleaningCalendarQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetWeeklyCleaningCalendarQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["fromDate"] = this.fromDate ? this.fromDate.toISOString() : <any>null;
        data["toDate"] = this.toDate ? this.toDate.toISOString() : <any>null;
        return data; 
    }
}

export interface IGetWeeklyCleaningCalendarQuery {
    hotelId?: string | null;
    fromDate: moment.Moment;
    toDate: moment.Moment;
}

export class CleaningPlanData implements ICleaningPlanData {
    id!: string;
    date!: moment.Moment;
    isSent!: boolean;
    sentAt?: moment.Moment | null;
    sentById?: string | null;
    sentByFullName?: string | null;
    options?: CleaningPlanOptions | null;
    cpsatConfiguration?: CpsatPlannerConfigurationData | null;
    plannedNonEventTasks?: PlannedCleaningTimelineItemData[] | null;
    plannedCleanings?: PlannedCleaningTimelineItemData[] | null;
    plannedGroups?: CleaningTimelineGroupData[] | null;
    plannableCleanings?: CleaningTimelineItemData[] | null;
    isNewPlan!: boolean;

    constructor(data?: ICleaningPlanData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.date = _data["date"] ? moment(_data["date"].toString()) : <any>null;
            this.isSent = _data["isSent"] !== undefined ? _data["isSent"] : <any>null;
            this.sentAt = _data["sentAt"] ? moment(_data["sentAt"].toString()) : <any>null;
            this.sentById = _data["sentById"] !== undefined ? _data["sentById"] : <any>null;
            this.sentByFullName = _data["sentByFullName"] !== undefined ? _data["sentByFullName"] : <any>null;
            this.options = _data["options"] ? CleaningPlanOptions.fromJS(_data["options"]) : <any>null;
            this.cpsatConfiguration = _data["cpsatConfiguration"] ? CpsatPlannerConfigurationData.fromJS(_data["cpsatConfiguration"]) : <any>null;
            if (Array.isArray(_data["plannedNonEventTasks"])) {
                this.plannedNonEventTasks = [] as any;
                for (let item of _data["plannedNonEventTasks"])
                    this.plannedNonEventTasks!.push(PlannedCleaningTimelineItemData.fromJS(item));
            }
            if (Array.isArray(_data["plannedCleanings"])) {
                this.plannedCleanings = [] as any;
                for (let item of _data["plannedCleanings"])
                    this.plannedCleanings!.push(PlannedCleaningTimelineItemData.fromJS(item));
            }
            if (Array.isArray(_data["plannedGroups"])) {
                this.plannedGroups = [] as any;
                for (let item of _data["plannedGroups"])
                    this.plannedGroups!.push(CleaningTimelineGroupData.fromJS(item));
            }
            if (Array.isArray(_data["plannableCleanings"])) {
                this.plannableCleanings = [] as any;
                for (let item of _data["plannableCleanings"])
                    this.plannableCleanings!.push(CleaningTimelineItemData.fromJS(item));
            }
            this.isNewPlan = _data["isNewPlan"] !== undefined ? _data["isNewPlan"] : <any>null;
        }
    }

    static fromJS(data: any): CleaningPlanData {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningPlanData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["date"] = this.date ? this.date.toISOString() : <any>null;
        data["isSent"] = this.isSent !== undefined ? this.isSent : <any>null;
        data["sentAt"] = this.sentAt ? this.sentAt.toISOString() : <any>null;
        data["sentById"] = this.sentById !== undefined ? this.sentById : <any>null;
        data["sentByFullName"] = this.sentByFullName !== undefined ? this.sentByFullName : <any>null;
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        data["cpsatConfiguration"] = this.cpsatConfiguration ? this.cpsatConfiguration.toJSON() : <any>null;
        if (Array.isArray(this.plannedNonEventTasks)) {
            data["plannedNonEventTasks"] = [];
            for (let item of this.plannedNonEventTasks)
                data["plannedNonEventTasks"].push(item.toJSON());
        }
        if (Array.isArray(this.plannedCleanings)) {
            data["plannedCleanings"] = [];
            for (let item of this.plannedCleanings)
                data["plannedCleanings"].push(item.toJSON());
        }
        if (Array.isArray(this.plannedGroups)) {
            data["plannedGroups"] = [];
            for (let item of this.plannedGroups)
                data["plannedGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.plannableCleanings)) {
            data["plannableCleanings"] = [];
            for (let item of this.plannableCleanings)
                data["plannableCleanings"].push(item.toJSON());
        }
        data["isNewPlan"] = this.isNewPlan !== undefined ? this.isNewPlan : <any>null;
        return data; 
    }
}

export interface ICleaningPlanData {
    id: string;
    date: moment.Moment;
    isSent: boolean;
    sentAt?: moment.Moment | null;
    sentById?: string | null;
    sentByFullName?: string | null;
    options?: CleaningPlanOptions | null;
    cpsatConfiguration?: CpsatPlannerConfigurationData | null;
    plannedNonEventTasks?: PlannedCleaningTimelineItemData[] | null;
    plannedCleanings?: PlannedCleaningTimelineItemData[] | null;
    plannedGroups?: CleaningTimelineGroupData[] | null;
    plannableCleanings?: CleaningTimelineItemData[] | null;
    isNewPlan: boolean;
}

export class CleaningPlanOptions implements ICleaningPlanOptions {
    defaultAttendantStartTime?: string | null;
    defaultAttendantEndTime?: string | null;

    constructor(data?: ICleaningPlanOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.defaultAttendantStartTime = _data["defaultAttendantStartTime"] !== undefined ? _data["defaultAttendantStartTime"] : <any>null;
            this.defaultAttendantEndTime = _data["defaultAttendantEndTime"] !== undefined ? _data["defaultAttendantEndTime"] : <any>null;
        }
    }

    static fromJS(data: any): CleaningPlanOptions {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningPlanOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["defaultAttendantStartTime"] = this.defaultAttendantStartTime !== undefined ? this.defaultAttendantStartTime : <any>null;
        data["defaultAttendantEndTime"] = this.defaultAttendantEndTime !== undefined ? this.defaultAttendantEndTime : <any>null;
        return data; 
    }
}

export interface ICleaningPlanOptions {
    defaultAttendantStartTime?: string | null;
    defaultAttendantEndTime?: string | null;
}

export class CpsatPlannerConfigurationData implements ICpsatPlannerConfigurationData {
    id?: string | null;
    planningStrategyTypeKey?: string | null;
    balanceByRoomsMinRooms!: number;
    balanceByRoomsMaxRooms!: number;
    balanceByCreditsStrictMinCredits!: number;
    balanceByCreditsStrictMaxCredits!: number;
    balanceByCreditsWithAffinitiesMinCredits!: number;
    balanceByCreditsWithAffinitiesMaxCredits!: number;
    targetByRoomsValue?: string | null;
    targetByCreditsValue?: string | null;
    maxTravelTime!: number;
    maxBuildingTravelTime!: number;
    maxNumberOfBuildingsPerAttendant!: number;
    maxNumberOfLevelsPerAttendant!: number;
    roomAward!: number;
    levelAward!: number;
    buildingAward!: number;
    weightTravelTime!: number;
    weightCredits!: number;
    weightRoomsCleaned!: number;
    weightLevelChange!: number;
    limitAttendantsPerLevel!: boolean;
    solverRunTime!: number;
    doesLevelMovementReduceCredits!: boolean;
    applyLevelMovementCreditReductionAfterNumberOfLevels!: number;
    levelMovementCreditsReduction!: number;
    doUsePrePlan!: boolean;
    doUsePreAffinity!: boolean;
    doCompleteProposedPlanOnUsePreplan!: boolean;
    doesBuildingMovementReduceCredits!: boolean;
    buildingMovementCreditsReduction!: number;
    arePreferredLevelsExclusive!: boolean;
    cleaningPriorityKey?: string | null;
    buildingsDistanceMatrix?: string | null;
    levelsDistanceMatrix?: string | null;
    doBalanceStaysAndDepartures!: boolean;
    weightEpsilonStayDeparture!: number;
    maxStay!: number;
    maxDeparture!: number;
    maxDeparturesReducesCredits!: boolean;
    maxDeparturesEquivalentCredits!: number;
    maxDeparturesReductionThreshold!: number;
    maxStaysIncreasesCredits!: boolean;
    maxStaysEquivalentCredits!: number;
    maxStaysIncreaseThreshold!: number;
    minutesPerCredit!: number;
    minCreditsForMultipleCleanersCleaning!: number;

    constructor(data?: ICpsatPlannerConfigurationData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.planningStrategyTypeKey = _data["planningStrategyTypeKey"] !== undefined ? _data["planningStrategyTypeKey"] : <any>null;
            this.balanceByRoomsMinRooms = _data["balanceByRoomsMinRooms"] !== undefined ? _data["balanceByRoomsMinRooms"] : <any>null;
            this.balanceByRoomsMaxRooms = _data["balanceByRoomsMaxRooms"] !== undefined ? _data["balanceByRoomsMaxRooms"] : <any>null;
            this.balanceByCreditsStrictMinCredits = _data["balanceByCreditsStrictMinCredits"] !== undefined ? _data["balanceByCreditsStrictMinCredits"] : <any>null;
            this.balanceByCreditsStrictMaxCredits = _data["balanceByCreditsStrictMaxCredits"] !== undefined ? _data["balanceByCreditsStrictMaxCredits"] : <any>null;
            this.balanceByCreditsWithAffinitiesMinCredits = _data["balanceByCreditsWithAffinitiesMinCredits"] !== undefined ? _data["balanceByCreditsWithAffinitiesMinCredits"] : <any>null;
            this.balanceByCreditsWithAffinitiesMaxCredits = _data["balanceByCreditsWithAffinitiesMaxCredits"] !== undefined ? _data["balanceByCreditsWithAffinitiesMaxCredits"] : <any>null;
            this.targetByRoomsValue = _data["targetByRoomsValue"] !== undefined ? _data["targetByRoomsValue"] : <any>null;
            this.targetByCreditsValue = _data["targetByCreditsValue"] !== undefined ? _data["targetByCreditsValue"] : <any>null;
            this.maxTravelTime = _data["maxTravelTime"] !== undefined ? _data["maxTravelTime"] : <any>null;
            this.maxBuildingTravelTime = _data["maxBuildingTravelTime"] !== undefined ? _data["maxBuildingTravelTime"] : <any>null;
            this.maxNumberOfBuildingsPerAttendant = _data["maxNumberOfBuildingsPerAttendant"] !== undefined ? _data["maxNumberOfBuildingsPerAttendant"] : <any>null;
            this.maxNumberOfLevelsPerAttendant = _data["maxNumberOfLevelsPerAttendant"] !== undefined ? _data["maxNumberOfLevelsPerAttendant"] : <any>null;
            this.roomAward = _data["roomAward"] !== undefined ? _data["roomAward"] : <any>null;
            this.levelAward = _data["levelAward"] !== undefined ? _data["levelAward"] : <any>null;
            this.buildingAward = _data["buildingAward"] !== undefined ? _data["buildingAward"] : <any>null;
            this.weightTravelTime = _data["weightTravelTime"] !== undefined ? _data["weightTravelTime"] : <any>null;
            this.weightCredits = _data["weightCredits"] !== undefined ? _data["weightCredits"] : <any>null;
            this.weightRoomsCleaned = _data["weightRoomsCleaned"] !== undefined ? _data["weightRoomsCleaned"] : <any>null;
            this.weightLevelChange = _data["weightLevelChange"] !== undefined ? _data["weightLevelChange"] : <any>null;
            this.limitAttendantsPerLevel = _data["limitAttendantsPerLevel"] !== undefined ? _data["limitAttendantsPerLevel"] : <any>null;
            this.solverRunTime = _data["solverRunTime"] !== undefined ? _data["solverRunTime"] : <any>null;
            this.doesLevelMovementReduceCredits = _data["doesLevelMovementReduceCredits"] !== undefined ? _data["doesLevelMovementReduceCredits"] : <any>null;
            this.applyLevelMovementCreditReductionAfterNumberOfLevels = _data["applyLevelMovementCreditReductionAfterNumberOfLevels"] !== undefined ? _data["applyLevelMovementCreditReductionAfterNumberOfLevels"] : <any>null;
            this.levelMovementCreditsReduction = _data["levelMovementCreditsReduction"] !== undefined ? _data["levelMovementCreditsReduction"] : <any>null;
            this.doUsePrePlan = _data["doUsePrePlan"] !== undefined ? _data["doUsePrePlan"] : <any>null;
            this.doUsePreAffinity = _data["doUsePreAffinity"] !== undefined ? _data["doUsePreAffinity"] : <any>null;
            this.doCompleteProposedPlanOnUsePreplan = _data["doCompleteProposedPlanOnUsePreplan"] !== undefined ? _data["doCompleteProposedPlanOnUsePreplan"] : <any>null;
            this.doesBuildingMovementReduceCredits = _data["doesBuildingMovementReduceCredits"] !== undefined ? _data["doesBuildingMovementReduceCredits"] : <any>null;
            this.buildingMovementCreditsReduction = _data["buildingMovementCreditsReduction"] !== undefined ? _data["buildingMovementCreditsReduction"] : <any>null;
            this.arePreferredLevelsExclusive = _data["arePreferredLevelsExclusive"] !== undefined ? _data["arePreferredLevelsExclusive"] : <any>null;
            this.cleaningPriorityKey = _data["cleaningPriorityKey"] !== undefined ? _data["cleaningPriorityKey"] : <any>null;
            this.buildingsDistanceMatrix = _data["buildingsDistanceMatrix"] !== undefined ? _data["buildingsDistanceMatrix"] : <any>null;
            this.levelsDistanceMatrix = _data["levelsDistanceMatrix"] !== undefined ? _data["levelsDistanceMatrix"] : <any>null;
            this.doBalanceStaysAndDepartures = _data["doBalanceStaysAndDepartures"] !== undefined ? _data["doBalanceStaysAndDepartures"] : <any>null;
            this.weightEpsilonStayDeparture = _data["weightEpsilonStayDeparture"] !== undefined ? _data["weightEpsilonStayDeparture"] : <any>null;
            this.maxStay = _data["maxStay"] !== undefined ? _data["maxStay"] : <any>null;
            this.maxDeparture = _data["maxDeparture"] !== undefined ? _data["maxDeparture"] : <any>null;
            this.maxDeparturesReducesCredits = _data["maxDeparturesReducesCredits"] !== undefined ? _data["maxDeparturesReducesCredits"] : <any>null;
            this.maxDeparturesEquivalentCredits = _data["maxDeparturesEquivalentCredits"] !== undefined ? _data["maxDeparturesEquivalentCredits"] : <any>null;
            this.maxDeparturesReductionThreshold = _data["maxDeparturesReductionThreshold"] !== undefined ? _data["maxDeparturesReductionThreshold"] : <any>null;
            this.maxStaysIncreasesCredits = _data["maxStaysIncreasesCredits"] !== undefined ? _data["maxStaysIncreasesCredits"] : <any>null;
            this.maxStaysEquivalentCredits = _data["maxStaysEquivalentCredits"] !== undefined ? _data["maxStaysEquivalentCredits"] : <any>null;
            this.maxStaysIncreaseThreshold = _data["maxStaysIncreaseThreshold"] !== undefined ? _data["maxStaysIncreaseThreshold"] : <any>null;
            this.minutesPerCredit = _data["minutesPerCredit"] !== undefined ? _data["minutesPerCredit"] : <any>null;
            this.minCreditsForMultipleCleanersCleaning = _data["minCreditsForMultipleCleanersCleaning"] !== undefined ? _data["minCreditsForMultipleCleanersCleaning"] : <any>null;
        }
    }

    static fromJS(data: any): CpsatPlannerConfigurationData {
        data = typeof data === 'object' ? data : {};
        let result = new CpsatPlannerConfigurationData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["planningStrategyTypeKey"] = this.planningStrategyTypeKey !== undefined ? this.planningStrategyTypeKey : <any>null;
        data["balanceByRoomsMinRooms"] = this.balanceByRoomsMinRooms !== undefined ? this.balanceByRoomsMinRooms : <any>null;
        data["balanceByRoomsMaxRooms"] = this.balanceByRoomsMaxRooms !== undefined ? this.balanceByRoomsMaxRooms : <any>null;
        data["balanceByCreditsStrictMinCredits"] = this.balanceByCreditsStrictMinCredits !== undefined ? this.balanceByCreditsStrictMinCredits : <any>null;
        data["balanceByCreditsStrictMaxCredits"] = this.balanceByCreditsStrictMaxCredits !== undefined ? this.balanceByCreditsStrictMaxCredits : <any>null;
        data["balanceByCreditsWithAffinitiesMinCredits"] = this.balanceByCreditsWithAffinitiesMinCredits !== undefined ? this.balanceByCreditsWithAffinitiesMinCredits : <any>null;
        data["balanceByCreditsWithAffinitiesMaxCredits"] = this.balanceByCreditsWithAffinitiesMaxCredits !== undefined ? this.balanceByCreditsWithAffinitiesMaxCredits : <any>null;
        data["targetByRoomsValue"] = this.targetByRoomsValue !== undefined ? this.targetByRoomsValue : <any>null;
        data["targetByCreditsValue"] = this.targetByCreditsValue !== undefined ? this.targetByCreditsValue : <any>null;
        data["maxTravelTime"] = this.maxTravelTime !== undefined ? this.maxTravelTime : <any>null;
        data["maxBuildingTravelTime"] = this.maxBuildingTravelTime !== undefined ? this.maxBuildingTravelTime : <any>null;
        data["maxNumberOfBuildingsPerAttendant"] = this.maxNumberOfBuildingsPerAttendant !== undefined ? this.maxNumberOfBuildingsPerAttendant : <any>null;
        data["maxNumberOfLevelsPerAttendant"] = this.maxNumberOfLevelsPerAttendant !== undefined ? this.maxNumberOfLevelsPerAttendant : <any>null;
        data["roomAward"] = this.roomAward !== undefined ? this.roomAward : <any>null;
        data["levelAward"] = this.levelAward !== undefined ? this.levelAward : <any>null;
        data["buildingAward"] = this.buildingAward !== undefined ? this.buildingAward : <any>null;
        data["weightTravelTime"] = this.weightTravelTime !== undefined ? this.weightTravelTime : <any>null;
        data["weightCredits"] = this.weightCredits !== undefined ? this.weightCredits : <any>null;
        data["weightRoomsCleaned"] = this.weightRoomsCleaned !== undefined ? this.weightRoomsCleaned : <any>null;
        data["weightLevelChange"] = this.weightLevelChange !== undefined ? this.weightLevelChange : <any>null;
        data["limitAttendantsPerLevel"] = this.limitAttendantsPerLevel !== undefined ? this.limitAttendantsPerLevel : <any>null;
        data["solverRunTime"] = this.solverRunTime !== undefined ? this.solverRunTime : <any>null;
        data["doesLevelMovementReduceCredits"] = this.doesLevelMovementReduceCredits !== undefined ? this.doesLevelMovementReduceCredits : <any>null;
        data["applyLevelMovementCreditReductionAfterNumberOfLevels"] = this.applyLevelMovementCreditReductionAfterNumberOfLevels !== undefined ? this.applyLevelMovementCreditReductionAfterNumberOfLevels : <any>null;
        data["levelMovementCreditsReduction"] = this.levelMovementCreditsReduction !== undefined ? this.levelMovementCreditsReduction : <any>null;
        data["doUsePrePlan"] = this.doUsePrePlan !== undefined ? this.doUsePrePlan : <any>null;
        data["doUsePreAffinity"] = this.doUsePreAffinity !== undefined ? this.doUsePreAffinity : <any>null;
        data["doCompleteProposedPlanOnUsePreplan"] = this.doCompleteProposedPlanOnUsePreplan !== undefined ? this.doCompleteProposedPlanOnUsePreplan : <any>null;
        data["doesBuildingMovementReduceCredits"] = this.doesBuildingMovementReduceCredits !== undefined ? this.doesBuildingMovementReduceCredits : <any>null;
        data["buildingMovementCreditsReduction"] = this.buildingMovementCreditsReduction !== undefined ? this.buildingMovementCreditsReduction : <any>null;
        data["arePreferredLevelsExclusive"] = this.arePreferredLevelsExclusive !== undefined ? this.arePreferredLevelsExclusive : <any>null;
        data["cleaningPriorityKey"] = this.cleaningPriorityKey !== undefined ? this.cleaningPriorityKey : <any>null;
        data["buildingsDistanceMatrix"] = this.buildingsDistanceMatrix !== undefined ? this.buildingsDistanceMatrix : <any>null;
        data["levelsDistanceMatrix"] = this.levelsDistanceMatrix !== undefined ? this.levelsDistanceMatrix : <any>null;
        data["doBalanceStaysAndDepartures"] = this.doBalanceStaysAndDepartures !== undefined ? this.doBalanceStaysAndDepartures : <any>null;
        data["weightEpsilonStayDeparture"] = this.weightEpsilonStayDeparture !== undefined ? this.weightEpsilonStayDeparture : <any>null;
        data["maxStay"] = this.maxStay !== undefined ? this.maxStay : <any>null;
        data["maxDeparture"] = this.maxDeparture !== undefined ? this.maxDeparture : <any>null;
        data["maxDeparturesReducesCredits"] = this.maxDeparturesReducesCredits !== undefined ? this.maxDeparturesReducesCredits : <any>null;
        data["maxDeparturesEquivalentCredits"] = this.maxDeparturesEquivalentCredits !== undefined ? this.maxDeparturesEquivalentCredits : <any>null;
        data["maxDeparturesReductionThreshold"] = this.maxDeparturesReductionThreshold !== undefined ? this.maxDeparturesReductionThreshold : <any>null;
        data["maxStaysIncreasesCredits"] = this.maxStaysIncreasesCredits !== undefined ? this.maxStaysIncreasesCredits : <any>null;
        data["maxStaysEquivalentCredits"] = this.maxStaysEquivalentCredits !== undefined ? this.maxStaysEquivalentCredits : <any>null;
        data["maxStaysIncreaseThreshold"] = this.maxStaysIncreaseThreshold !== undefined ? this.maxStaysIncreaseThreshold : <any>null;
        data["minutesPerCredit"] = this.minutesPerCredit !== undefined ? this.minutesPerCredit : <any>null;
        data["minCreditsForMultipleCleanersCleaning"] = this.minCreditsForMultipleCleanersCleaning !== undefined ? this.minCreditsForMultipleCleanersCleaning : <any>null;
        return data; 
    }
}

export interface ICpsatPlannerConfigurationData {
    id?: string | null;
    planningStrategyTypeKey?: string | null;
    balanceByRoomsMinRooms: number;
    balanceByRoomsMaxRooms: number;
    balanceByCreditsStrictMinCredits: number;
    balanceByCreditsStrictMaxCredits: number;
    balanceByCreditsWithAffinitiesMinCredits: number;
    balanceByCreditsWithAffinitiesMaxCredits: number;
    targetByRoomsValue?: string | null;
    targetByCreditsValue?: string | null;
    maxTravelTime: number;
    maxBuildingTravelTime: number;
    maxNumberOfBuildingsPerAttendant: number;
    maxNumberOfLevelsPerAttendant: number;
    roomAward: number;
    levelAward: number;
    buildingAward: number;
    weightTravelTime: number;
    weightCredits: number;
    weightRoomsCleaned: number;
    weightLevelChange: number;
    limitAttendantsPerLevel: boolean;
    solverRunTime: number;
    doesLevelMovementReduceCredits: boolean;
    applyLevelMovementCreditReductionAfterNumberOfLevels: number;
    levelMovementCreditsReduction: number;
    doUsePrePlan: boolean;
    doUsePreAffinity: boolean;
    doCompleteProposedPlanOnUsePreplan: boolean;
    doesBuildingMovementReduceCredits: boolean;
    buildingMovementCreditsReduction: number;
    arePreferredLevelsExclusive: boolean;
    cleaningPriorityKey?: string | null;
    buildingsDistanceMatrix?: string | null;
    levelsDistanceMatrix?: string | null;
    doBalanceStaysAndDepartures: boolean;
    weightEpsilonStayDeparture: number;
    maxStay: number;
    maxDeparture: number;
    maxDeparturesReducesCredits: boolean;
    maxDeparturesEquivalentCredits: number;
    maxDeparturesReductionThreshold: number;
    maxStaysIncreasesCredits: boolean;
    maxStaysEquivalentCredits: number;
    maxStaysIncreaseThreshold: number;
    minutesPerCredit: number;
    minCreditsForMultipleCleanersCleaning: number;
}

export class CleaningTimelineItemData implements ICleaningTimelineItemData {
    id?: string | null;
    title?: string | null;
    hasArrival!: boolean;
    hasDeparture!: boolean;
    hasStay!: boolean;
    hasVipReservation!: boolean;
    roomCategoryId?: string | null;
    roomCategoryName?: string | null;
    vipValues?: string[] | null;
    isPostponed!: boolean;
    isCustom!: boolean;
    isActive!: boolean;
    roomId!: string;
    bedId?: string | null;
    itemTypeKey?: string | null;
    taskDescription?: string | null;
    isOccupied!: boolean;
    isClean!: boolean;
    isRoomAssigned!: boolean;
    isOutOfOrder!: boolean;
    isDoNotDisturb!: boolean;
    isChangeSheets!: boolean;
    isPriority!: boolean;
    isTaskGuestRequest!: boolean;
    isTaskHighPriority!: boolean;
    isTaskLowPriority!: boolean;
    price!: number;
    credits?: number | null;
    cleaningPluginId?: string | null;
    cleaningPluginName?: string | null;
    reservations?: CleaningTimelineItemReservationData[] | null;
    tasks?: CleaningTimelineItemTaskData[] | null;
    plannedAttendantTasks?: CleaningTimelineItemTaskData[] | null;
    cleaningDescription?: string | null;
    buildingId?: string | null;
    buildingName?: string | null;
    floorId?: string | null;
    floorName?: string | null;
    floorNumber?: number | null;
    floorSectionName?: string | null;
    floorSubSectionName?: string | null;
    hotelId?: string | null;
    hotelName?: string | null;
    areaId?: string | null;
    areaName?: string | null;
    isSent!: boolean;
    cleaningStatus!: CleaningProcessStatus;
    isInspectionRequired!: boolean;
    isReadyForInspection!: boolean;
    isInspected!: boolean;
    inspectedById?: string | null;
    inspectedByFullName?: string | null;
    isInspectionSuccess!: boolean;
    isFilteredOut!: boolean;

    constructor(data?: ICleaningTimelineItemData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.hasArrival = _data["hasArrival"] !== undefined ? _data["hasArrival"] : <any>null;
            this.hasDeparture = _data["hasDeparture"] !== undefined ? _data["hasDeparture"] : <any>null;
            this.hasStay = _data["hasStay"] !== undefined ? _data["hasStay"] : <any>null;
            this.hasVipReservation = _data["hasVipReservation"] !== undefined ? _data["hasVipReservation"] : <any>null;
            this.roomCategoryId = _data["roomCategoryId"] !== undefined ? _data["roomCategoryId"] : <any>null;
            this.roomCategoryName = _data["roomCategoryName"] !== undefined ? _data["roomCategoryName"] : <any>null;
            if (Array.isArray(_data["vipValues"])) {
                this.vipValues = [] as any;
                for (let item of _data["vipValues"])
                    this.vipValues!.push(item);
            }
            this.isPostponed = _data["isPostponed"] !== undefined ? _data["isPostponed"] : <any>null;
            this.isCustom = _data["isCustom"] !== undefined ? _data["isCustom"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.bedId = _data["bedId"] !== undefined ? _data["bedId"] : <any>null;
            this.itemTypeKey = _data["itemTypeKey"] !== undefined ? _data["itemTypeKey"] : <any>null;
            this.taskDescription = _data["taskDescription"] !== undefined ? _data["taskDescription"] : <any>null;
            this.isOccupied = _data["isOccupied"] !== undefined ? _data["isOccupied"] : <any>null;
            this.isClean = _data["isClean"] !== undefined ? _data["isClean"] : <any>null;
            this.isRoomAssigned = _data["isRoomAssigned"] !== undefined ? _data["isRoomAssigned"] : <any>null;
            this.isOutOfOrder = _data["isOutOfOrder"] !== undefined ? _data["isOutOfOrder"] : <any>null;
            this.isDoNotDisturb = _data["isDoNotDisturb"] !== undefined ? _data["isDoNotDisturb"] : <any>null;
            this.isChangeSheets = _data["isChangeSheets"] !== undefined ? _data["isChangeSheets"] : <any>null;
            this.isPriority = _data["isPriority"] !== undefined ? _data["isPriority"] : <any>null;
            this.isTaskGuestRequest = _data["isTaskGuestRequest"] !== undefined ? _data["isTaskGuestRequest"] : <any>null;
            this.isTaskHighPriority = _data["isTaskHighPriority"] !== undefined ? _data["isTaskHighPriority"] : <any>null;
            this.isTaskLowPriority = _data["isTaskLowPriority"] !== undefined ? _data["isTaskLowPriority"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
            this.cleaningPluginId = _data["cleaningPluginId"] !== undefined ? _data["cleaningPluginId"] : <any>null;
            this.cleaningPluginName = _data["cleaningPluginName"] !== undefined ? _data["cleaningPluginName"] : <any>null;
            if (Array.isArray(_data["reservations"])) {
                this.reservations = [] as any;
                for (let item of _data["reservations"])
                    this.reservations!.push(CleaningTimelineItemReservationData.fromJS(item));
            }
            if (Array.isArray(_data["tasks"])) {
                this.tasks = [] as any;
                for (let item of _data["tasks"])
                    this.tasks!.push(CleaningTimelineItemTaskData.fromJS(item));
            }
            if (Array.isArray(_data["plannedAttendantTasks"])) {
                this.plannedAttendantTasks = [] as any;
                for (let item of _data["plannedAttendantTasks"])
                    this.plannedAttendantTasks!.push(CleaningTimelineItemTaskData.fromJS(item));
            }
            this.cleaningDescription = _data["cleaningDescription"] !== undefined ? _data["cleaningDescription"] : <any>null;
            this.buildingId = _data["buildingId"] !== undefined ? _data["buildingId"] : <any>null;
            this.buildingName = _data["buildingName"] !== undefined ? _data["buildingName"] : <any>null;
            this.floorId = _data["floorId"] !== undefined ? _data["floorId"] : <any>null;
            this.floorName = _data["floorName"] !== undefined ? _data["floorName"] : <any>null;
            this.floorNumber = _data["floorNumber"] !== undefined ? _data["floorNumber"] : <any>null;
            this.floorSectionName = _data["floorSectionName"] !== undefined ? _data["floorSectionName"] : <any>null;
            this.floorSubSectionName = _data["floorSubSectionName"] !== undefined ? _data["floorSubSectionName"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.hotelName = _data["hotelName"] !== undefined ? _data["hotelName"] : <any>null;
            this.areaId = _data["areaId"] !== undefined ? _data["areaId"] : <any>null;
            this.areaName = _data["areaName"] !== undefined ? _data["areaName"] : <any>null;
            this.isSent = _data["isSent"] !== undefined ? _data["isSent"] : <any>null;
            this.cleaningStatus = _data["cleaningStatus"] !== undefined ? _data["cleaningStatus"] : <any>null;
            this.isInspectionRequired = _data["isInspectionRequired"] !== undefined ? _data["isInspectionRequired"] : <any>null;
            this.isReadyForInspection = _data["isReadyForInspection"] !== undefined ? _data["isReadyForInspection"] : <any>null;
            this.isInspected = _data["isInspected"] !== undefined ? _data["isInspected"] : <any>null;
            this.inspectedById = _data["inspectedById"] !== undefined ? _data["inspectedById"] : <any>null;
            this.inspectedByFullName = _data["inspectedByFullName"] !== undefined ? _data["inspectedByFullName"] : <any>null;
            this.isInspectionSuccess = _data["isInspectionSuccess"] !== undefined ? _data["isInspectionSuccess"] : <any>null;
            this.isFilteredOut = _data["isFilteredOut"] !== undefined ? _data["isFilteredOut"] : <any>null;
        }
    }

    static fromJS(data: any): CleaningTimelineItemData {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningTimelineItemData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["hasArrival"] = this.hasArrival !== undefined ? this.hasArrival : <any>null;
        data["hasDeparture"] = this.hasDeparture !== undefined ? this.hasDeparture : <any>null;
        data["hasStay"] = this.hasStay !== undefined ? this.hasStay : <any>null;
        data["hasVipReservation"] = this.hasVipReservation !== undefined ? this.hasVipReservation : <any>null;
        data["roomCategoryId"] = this.roomCategoryId !== undefined ? this.roomCategoryId : <any>null;
        data["roomCategoryName"] = this.roomCategoryName !== undefined ? this.roomCategoryName : <any>null;
        if (Array.isArray(this.vipValues)) {
            data["vipValues"] = [];
            for (let item of this.vipValues)
                data["vipValues"].push(item);
        }
        data["isPostponed"] = this.isPostponed !== undefined ? this.isPostponed : <any>null;
        data["isCustom"] = this.isCustom !== undefined ? this.isCustom : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["bedId"] = this.bedId !== undefined ? this.bedId : <any>null;
        data["itemTypeKey"] = this.itemTypeKey !== undefined ? this.itemTypeKey : <any>null;
        data["taskDescription"] = this.taskDescription !== undefined ? this.taskDescription : <any>null;
        data["isOccupied"] = this.isOccupied !== undefined ? this.isOccupied : <any>null;
        data["isClean"] = this.isClean !== undefined ? this.isClean : <any>null;
        data["isRoomAssigned"] = this.isRoomAssigned !== undefined ? this.isRoomAssigned : <any>null;
        data["isOutOfOrder"] = this.isOutOfOrder !== undefined ? this.isOutOfOrder : <any>null;
        data["isDoNotDisturb"] = this.isDoNotDisturb !== undefined ? this.isDoNotDisturb : <any>null;
        data["isChangeSheets"] = this.isChangeSheets !== undefined ? this.isChangeSheets : <any>null;
        data["isPriority"] = this.isPriority !== undefined ? this.isPriority : <any>null;
        data["isTaskGuestRequest"] = this.isTaskGuestRequest !== undefined ? this.isTaskGuestRequest : <any>null;
        data["isTaskHighPriority"] = this.isTaskHighPriority !== undefined ? this.isTaskHighPriority : <any>null;
        data["isTaskLowPriority"] = this.isTaskLowPriority !== undefined ? this.isTaskLowPriority : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        data["cleaningPluginId"] = this.cleaningPluginId !== undefined ? this.cleaningPluginId : <any>null;
        data["cleaningPluginName"] = this.cleaningPluginName !== undefined ? this.cleaningPluginName : <any>null;
        if (Array.isArray(this.reservations)) {
            data["reservations"] = [];
            for (let item of this.reservations)
                data["reservations"].push(item.toJSON());
        }
        if (Array.isArray(this.tasks)) {
            data["tasks"] = [];
            for (let item of this.tasks)
                data["tasks"].push(item.toJSON());
        }
        if (Array.isArray(this.plannedAttendantTasks)) {
            data["plannedAttendantTasks"] = [];
            for (let item of this.plannedAttendantTasks)
                data["plannedAttendantTasks"].push(item.toJSON());
        }
        data["cleaningDescription"] = this.cleaningDescription !== undefined ? this.cleaningDescription : <any>null;
        data["buildingId"] = this.buildingId !== undefined ? this.buildingId : <any>null;
        data["buildingName"] = this.buildingName !== undefined ? this.buildingName : <any>null;
        data["floorId"] = this.floorId !== undefined ? this.floorId : <any>null;
        data["floorName"] = this.floorName !== undefined ? this.floorName : <any>null;
        data["floorNumber"] = this.floorNumber !== undefined ? this.floorNumber : <any>null;
        data["floorSectionName"] = this.floorSectionName !== undefined ? this.floorSectionName : <any>null;
        data["floorSubSectionName"] = this.floorSubSectionName !== undefined ? this.floorSubSectionName : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["hotelName"] = this.hotelName !== undefined ? this.hotelName : <any>null;
        data["areaId"] = this.areaId !== undefined ? this.areaId : <any>null;
        data["areaName"] = this.areaName !== undefined ? this.areaName : <any>null;
        data["isSent"] = this.isSent !== undefined ? this.isSent : <any>null;
        data["cleaningStatus"] = this.cleaningStatus !== undefined ? this.cleaningStatus : <any>null;
        data["isInspectionRequired"] = this.isInspectionRequired !== undefined ? this.isInspectionRequired : <any>null;
        data["isReadyForInspection"] = this.isReadyForInspection !== undefined ? this.isReadyForInspection : <any>null;
        data["isInspected"] = this.isInspected !== undefined ? this.isInspected : <any>null;
        data["inspectedById"] = this.inspectedById !== undefined ? this.inspectedById : <any>null;
        data["inspectedByFullName"] = this.inspectedByFullName !== undefined ? this.inspectedByFullName : <any>null;
        data["isInspectionSuccess"] = this.isInspectionSuccess !== undefined ? this.isInspectionSuccess : <any>null;
        data["isFilteredOut"] = this.isFilteredOut !== undefined ? this.isFilteredOut : <any>null;
        return data; 
    }
}

export interface ICleaningTimelineItemData {
    id?: string | null;
    title?: string | null;
    hasArrival: boolean;
    hasDeparture: boolean;
    hasStay: boolean;
    hasVipReservation: boolean;
    roomCategoryId?: string | null;
    roomCategoryName?: string | null;
    vipValues?: string[] | null;
    isPostponed: boolean;
    isCustom: boolean;
    isActive: boolean;
    roomId: string;
    bedId?: string | null;
    itemTypeKey?: string | null;
    taskDescription?: string | null;
    isOccupied: boolean;
    isClean: boolean;
    isRoomAssigned: boolean;
    isOutOfOrder: boolean;
    isDoNotDisturb: boolean;
    isChangeSheets: boolean;
    isPriority: boolean;
    isTaskGuestRequest: boolean;
    isTaskHighPriority: boolean;
    isTaskLowPriority: boolean;
    price: number;
    credits?: number | null;
    cleaningPluginId?: string | null;
    cleaningPluginName?: string | null;
    reservations?: CleaningTimelineItemReservationData[] | null;
    tasks?: CleaningTimelineItemTaskData[] | null;
    plannedAttendantTasks?: CleaningTimelineItemTaskData[] | null;
    cleaningDescription?: string | null;
    buildingId?: string | null;
    buildingName?: string | null;
    floorId?: string | null;
    floorName?: string | null;
    floorNumber?: number | null;
    floorSectionName?: string | null;
    floorSubSectionName?: string | null;
    hotelId?: string | null;
    hotelName?: string | null;
    areaId?: string | null;
    areaName?: string | null;
    isSent: boolean;
    cleaningStatus: CleaningProcessStatus;
    isInspectionRequired: boolean;
    isReadyForInspection: boolean;
    isInspected: boolean;
    inspectedById?: string | null;
    inspectedByFullName?: string | null;
    isInspectionSuccess: boolean;
    isFilteredOut: boolean;
}

export class PlannedCleaningTimelineItemData extends CleaningTimelineItemData implements IPlannedCleaningTimelineItemData {
    cleaningPlanGroupId?: string | null;
    start!: moment.Moment;
    end!: moment.Moment;

    constructor(data?: IPlannedCleaningTimelineItemData) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.cleaningPlanGroupId = _data["cleaningPlanGroupId"] !== undefined ? _data["cleaningPlanGroupId"] : <any>null;
            this.start = _data["start"] ? moment(_data["start"].toString()) : <any>null;
            this.end = _data["end"] ? moment(_data["end"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): PlannedCleaningTimelineItemData {
        data = typeof data === 'object' ? data : {};
        let result = new PlannedCleaningTimelineItemData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cleaningPlanGroupId"] = this.cleaningPlanGroupId !== undefined ? this.cleaningPlanGroupId : <any>null;
        data["start"] = this.start ? this.start.toISOString() : <any>null;
        data["end"] = this.end ? this.end.toISOString() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IPlannedCleaningTimelineItemData extends ICleaningTimelineItemData {
    cleaningPlanGroupId?: string | null;
    start: moment.Moment;
    end: moment.Moment;
}

export class CleaningTimelineItemReservationData implements ICleaningTimelineItemReservationData {
    reservationId?: string | null;
    reservationStatus?: string | null;
    reservationStatusKey?: string | null;
    timeString?: string | null;
    styleCode?: string | null;
    guestName?: string | null;
    typeAndTimeTag?: string | null;
    isVip!: boolean;
    vipTag?: string | null;
    isDayUse!: boolean;

    constructor(data?: ICleaningTimelineItemReservationData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.reservationId = _data["reservationId"] !== undefined ? _data["reservationId"] : <any>null;
            this.reservationStatus = _data["reservationStatus"] !== undefined ? _data["reservationStatus"] : <any>null;
            this.reservationStatusKey = _data["reservationStatusKey"] !== undefined ? _data["reservationStatusKey"] : <any>null;
            this.timeString = _data["timeString"] !== undefined ? _data["timeString"] : <any>null;
            this.styleCode = _data["styleCode"] !== undefined ? _data["styleCode"] : <any>null;
            this.guestName = _data["guestName"] !== undefined ? _data["guestName"] : <any>null;
            this.typeAndTimeTag = _data["typeAndTimeTag"] !== undefined ? _data["typeAndTimeTag"] : <any>null;
            this.isVip = _data["isVip"] !== undefined ? _data["isVip"] : <any>null;
            this.vipTag = _data["vipTag"] !== undefined ? _data["vipTag"] : <any>null;
            this.isDayUse = _data["isDayUse"] !== undefined ? _data["isDayUse"] : <any>null;
        }
    }

    static fromJS(data: any): CleaningTimelineItemReservationData {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningTimelineItemReservationData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reservationId"] = this.reservationId !== undefined ? this.reservationId : <any>null;
        data["reservationStatus"] = this.reservationStatus !== undefined ? this.reservationStatus : <any>null;
        data["reservationStatusKey"] = this.reservationStatusKey !== undefined ? this.reservationStatusKey : <any>null;
        data["timeString"] = this.timeString !== undefined ? this.timeString : <any>null;
        data["styleCode"] = this.styleCode !== undefined ? this.styleCode : <any>null;
        data["guestName"] = this.guestName !== undefined ? this.guestName : <any>null;
        data["typeAndTimeTag"] = this.typeAndTimeTag !== undefined ? this.typeAndTimeTag : <any>null;
        data["isVip"] = this.isVip !== undefined ? this.isVip : <any>null;
        data["vipTag"] = this.vipTag !== undefined ? this.vipTag : <any>null;
        data["isDayUse"] = this.isDayUse !== undefined ? this.isDayUse : <any>null;
        return data; 
    }
}

export interface ICleaningTimelineItemReservationData {
    reservationId?: string | null;
    reservationStatus?: string | null;
    reservationStatusKey?: string | null;
    timeString?: string | null;
    styleCode?: string | null;
    guestName?: string | null;
    typeAndTimeTag?: string | null;
    isVip: boolean;
    vipTag?: string | null;
    isDayUse: boolean;
}

export class CleaningTimelineItemTaskData implements ICleaningTimelineItemTaskData {
    actions?: CleaningTimelineItemTaskActionData[] | null;
    taskId?: string | null;
    durationMinutes!: number;
    isCompleted!: boolean;
    statusKey?: string | null;
    isForPlannedAttendant!: boolean;
    userId?: string | null;
    userFullName?: string | null;
    fromReferenceId?: string | null;
    fromReferenceName?: string | null;
    fromReferenceTypeKey?: string | null;
    toReferenceId?: string | null;
    toReferenceName?: string | null;
    toReferenceTypeKey?: string | null;

    constructor(data?: ICleaningTimelineItemTaskData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["actions"])) {
                this.actions = [] as any;
                for (let item of _data["actions"])
                    this.actions!.push(CleaningTimelineItemTaskActionData.fromJS(item));
            }
            this.taskId = _data["taskId"] !== undefined ? _data["taskId"] : <any>null;
            this.durationMinutes = _data["durationMinutes"] !== undefined ? _data["durationMinutes"] : <any>null;
            this.isCompleted = _data["isCompleted"] !== undefined ? _data["isCompleted"] : <any>null;
            this.statusKey = _data["statusKey"] !== undefined ? _data["statusKey"] : <any>null;
            this.isForPlannedAttendant = _data["isForPlannedAttendant"] !== undefined ? _data["isForPlannedAttendant"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.userFullName = _data["userFullName"] !== undefined ? _data["userFullName"] : <any>null;
            this.fromReferenceId = _data["fromReferenceId"] !== undefined ? _data["fromReferenceId"] : <any>null;
            this.fromReferenceName = _data["fromReferenceName"] !== undefined ? _data["fromReferenceName"] : <any>null;
            this.fromReferenceTypeKey = _data["fromReferenceTypeKey"] !== undefined ? _data["fromReferenceTypeKey"] : <any>null;
            this.toReferenceId = _data["toReferenceId"] !== undefined ? _data["toReferenceId"] : <any>null;
            this.toReferenceName = _data["toReferenceName"] !== undefined ? _data["toReferenceName"] : <any>null;
            this.toReferenceTypeKey = _data["toReferenceTypeKey"] !== undefined ? _data["toReferenceTypeKey"] : <any>null;
        }
    }

    static fromJS(data: any): CleaningTimelineItemTaskData {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningTimelineItemTaskData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.actions)) {
            data["actions"] = [];
            for (let item of this.actions)
                data["actions"].push(item.toJSON());
        }
        data["taskId"] = this.taskId !== undefined ? this.taskId : <any>null;
        data["durationMinutes"] = this.durationMinutes !== undefined ? this.durationMinutes : <any>null;
        data["isCompleted"] = this.isCompleted !== undefined ? this.isCompleted : <any>null;
        data["statusKey"] = this.statusKey !== undefined ? this.statusKey : <any>null;
        data["isForPlannedAttendant"] = this.isForPlannedAttendant !== undefined ? this.isForPlannedAttendant : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["userFullName"] = this.userFullName !== undefined ? this.userFullName : <any>null;
        data["fromReferenceId"] = this.fromReferenceId !== undefined ? this.fromReferenceId : <any>null;
        data["fromReferenceName"] = this.fromReferenceName !== undefined ? this.fromReferenceName : <any>null;
        data["fromReferenceTypeKey"] = this.fromReferenceTypeKey !== undefined ? this.fromReferenceTypeKey : <any>null;
        data["toReferenceId"] = this.toReferenceId !== undefined ? this.toReferenceId : <any>null;
        data["toReferenceName"] = this.toReferenceName !== undefined ? this.toReferenceName : <any>null;
        data["toReferenceTypeKey"] = this.toReferenceTypeKey !== undefined ? this.toReferenceTypeKey : <any>null;
        return data; 
    }
}

export interface ICleaningTimelineItemTaskData {
    actions?: CleaningTimelineItemTaskActionData[] | null;
    taskId?: string | null;
    durationMinutes: number;
    isCompleted: boolean;
    statusKey?: string | null;
    isForPlannedAttendant: boolean;
    userId?: string | null;
    userFullName?: string | null;
    fromReferenceId?: string | null;
    fromReferenceName?: string | null;
    fromReferenceTypeKey?: string | null;
    toReferenceId?: string | null;
    toReferenceName?: string | null;
    toReferenceTypeKey?: string | null;
}

export class CleaningTimelineItemTaskActionData implements ICleaningTimelineItemTaskActionData {
    actionName?: string | null;
    assetName?: string | null;
    assetQuantity?: string | null;

    constructor(data?: ICleaningTimelineItemTaskActionData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.actionName = _data["actionName"] !== undefined ? _data["actionName"] : <any>null;
            this.assetName = _data["assetName"] !== undefined ? _data["assetName"] : <any>null;
            this.assetQuantity = _data["assetQuantity"] !== undefined ? _data["assetQuantity"] : <any>null;
        }
    }

    static fromJS(data: any): CleaningTimelineItemTaskActionData {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningTimelineItemTaskActionData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["actionName"] = this.actionName !== undefined ? this.actionName : <any>null;
        data["assetName"] = this.assetName !== undefined ? this.assetName : <any>null;
        data["assetQuantity"] = this.assetQuantity !== undefined ? this.assetQuantity : <any>null;
        return data; 
    }
}

export interface ICleaningTimelineItemTaskActionData {
    actionName?: string | null;
    assetName?: string | null;
    assetQuantity?: string | null;
}

export enum CleaningProcessStatus {
    DRAFT = 0,
    NEW = 1,
    SEEN_NEW = 2,
    IN_PROGRESS = 3,
    PAUSED = 4,
    FINISHED = 5,
    REQUIRES_INSPECTION = 6,
    INSPECTION_STARTED = 7,
    INSPECTION_FINISHED = 8,
    INSPECTION_FAILED = 9,
    SEEN_INSPECTION_FAILED = 10,
    CLEANING_CANCELLED_BY_CLEANER = 11,
    CLEANING_CANCELLED_BY_ADMIN = 12,
    CLEANING_CANCELLED_BY_SYSTEM = 13,
    UNKNOWN = 14,
    DO_NOT_DISTURB = 15,
    DELAYED = 16,
    REFUSED = 17,
}

export class CleaningTimelineGroupData implements ICleaningTimelineGroupData {
    id!: string;
    cleaner?: CleanerData | null;
    hasSecondaryCleaner!: boolean;
    secondaryCleanerId?: string | null;
    secondaryCleaner?: CleanerData | null;

    constructor(data?: ICleaningTimelineGroupData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.cleaner = _data["cleaner"] ? CleanerData.fromJS(_data["cleaner"]) : <any>null;
            this.hasSecondaryCleaner = _data["hasSecondaryCleaner"] !== undefined ? _data["hasSecondaryCleaner"] : <any>null;
            this.secondaryCleanerId = _data["secondaryCleanerId"] !== undefined ? _data["secondaryCleanerId"] : <any>null;
            this.secondaryCleaner = _data["secondaryCleaner"] ? CleanerData.fromJS(_data["secondaryCleaner"]) : <any>null;
        }
    }

    static fromJS(data: any): CleaningTimelineGroupData {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningTimelineGroupData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["cleaner"] = this.cleaner ? this.cleaner.toJSON() : <any>null;
        data["hasSecondaryCleaner"] = this.hasSecondaryCleaner !== undefined ? this.hasSecondaryCleaner : <any>null;
        data["secondaryCleanerId"] = this.secondaryCleanerId !== undefined ? this.secondaryCleanerId : <any>null;
        data["secondaryCleaner"] = this.secondaryCleaner ? this.secondaryCleaner.toJSON() : <any>null;
        return data; 
    }
}

export interface ICleaningTimelineGroupData {
    id: string;
    cleaner?: CleanerData | null;
    hasSecondaryCleaner: boolean;
    secondaryCleanerId?: string | null;
    secondaryCleaner?: CleanerData | null;
}

export class CleanerData implements ICleanerData {
    id!: string;
    name?: string | null;
    username?: string | null;
    groupName?: string | null;
    subGroupName?: string | null;
    weekHours?: number | null;
    affinities?: AffinityData[] | null;
    maxCredits?: number | null;
    maxTwins?: number | null;
    maxDepartures?: number | null;
    mustFillAllCredits!: boolean;
    availabilityIntervals?: TimeIntervalData[] | null;
    avatarUrl?: string | null;
    fullNameInitials?: string | null;

    constructor(data?: ICleanerData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.groupName = _data["groupName"] !== undefined ? _data["groupName"] : <any>null;
            this.subGroupName = _data["subGroupName"] !== undefined ? _data["subGroupName"] : <any>null;
            this.weekHours = _data["weekHours"] !== undefined ? _data["weekHours"] : <any>null;
            if (Array.isArray(_data["affinities"])) {
                this.affinities = [] as any;
                for (let item of _data["affinities"])
                    this.affinities!.push(AffinityData.fromJS(item));
            }
            this.maxCredits = _data["maxCredits"] !== undefined ? _data["maxCredits"] : <any>null;
            this.maxTwins = _data["maxTwins"] !== undefined ? _data["maxTwins"] : <any>null;
            this.maxDepartures = _data["maxDepartures"] !== undefined ? _data["maxDepartures"] : <any>null;
            this.mustFillAllCredits = _data["mustFillAllCredits"] !== undefined ? _data["mustFillAllCredits"] : <any>null;
            if (Array.isArray(_data["availabilityIntervals"])) {
                this.availabilityIntervals = [] as any;
                for (let item of _data["availabilityIntervals"])
                    this.availabilityIntervals!.push(TimeIntervalData.fromJS(item));
            }
            this.avatarUrl = _data["avatarUrl"] !== undefined ? _data["avatarUrl"] : <any>null;
            this.fullNameInitials = _data["fullNameInitials"] !== undefined ? _data["fullNameInitials"] : <any>null;
        }
    }

    static fromJS(data: any): CleanerData {
        data = typeof data === 'object' ? data : {};
        let result = new CleanerData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["groupName"] = this.groupName !== undefined ? this.groupName : <any>null;
        data["subGroupName"] = this.subGroupName !== undefined ? this.subGroupName : <any>null;
        data["weekHours"] = this.weekHours !== undefined ? this.weekHours : <any>null;
        if (Array.isArray(this.affinities)) {
            data["affinities"] = [];
            for (let item of this.affinities)
                data["affinities"].push(item.toJSON());
        }
        data["maxCredits"] = this.maxCredits !== undefined ? this.maxCredits : <any>null;
        data["maxTwins"] = this.maxTwins !== undefined ? this.maxTwins : <any>null;
        data["maxDepartures"] = this.maxDepartures !== undefined ? this.maxDepartures : <any>null;
        data["mustFillAllCredits"] = this.mustFillAllCredits !== undefined ? this.mustFillAllCredits : <any>null;
        if (Array.isArray(this.availabilityIntervals)) {
            data["availabilityIntervals"] = [];
            for (let item of this.availabilityIntervals)
                data["availabilityIntervals"].push(item.toJSON());
        }
        data["avatarUrl"] = this.avatarUrl !== undefined ? this.avatarUrl : <any>null;
        data["fullNameInitials"] = this.fullNameInitials !== undefined ? this.fullNameInitials : <any>null;
        return data; 
    }
}

export interface ICleanerData {
    id: string;
    name?: string | null;
    username?: string | null;
    groupName?: string | null;
    subGroupName?: string | null;
    weekHours?: number | null;
    affinities?: AffinityData[] | null;
    maxCredits?: number | null;
    maxTwins?: number | null;
    maxDepartures?: number | null;
    mustFillAllCredits: boolean;
    availabilityIntervals?: TimeIntervalData[] | null;
    avatarUrl?: string | null;
    fullNameInitials?: string | null;
}

export class AffinityData implements IAffinityData {
    referenceId?: string | null;
    referenceName?: string | null;
    referenceDescription?: string | null;
    type!: CleaningPlanGroupAffinityType;

    constructor(data?: IAffinityData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.referenceId = _data["referenceId"] !== undefined ? _data["referenceId"] : <any>null;
            this.referenceName = _data["referenceName"] !== undefined ? _data["referenceName"] : <any>null;
            this.referenceDescription = _data["referenceDescription"] !== undefined ? _data["referenceDescription"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
        }
    }

    static fromJS(data: any): AffinityData {
        data = typeof data === 'object' ? data : {};
        let result = new AffinityData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["referenceId"] = this.referenceId !== undefined ? this.referenceId : <any>null;
        data["referenceName"] = this.referenceName !== undefined ? this.referenceName : <any>null;
        data["referenceDescription"] = this.referenceDescription !== undefined ? this.referenceDescription : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        return data; 
    }
}

export interface IAffinityData {
    referenceId?: string | null;
    referenceName?: string | null;
    referenceDescription?: string | null;
    type: CleaningPlanGroupAffinityType;
}

export enum CleaningPlanGroupAffinityType {
    UNKNOWN = 0,
    BUILDING = 1,
    FLOOR = 2,
    FLOOR_SECTION = 3,
    FLOOR_SUB_SECTION = 4,
}

export class TimeIntervalData implements ITimeIntervalData {
    id!: string;
    fromTimeString?: string | null;
    toTimeString?: string | null;

    constructor(data?: ITimeIntervalData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.fromTimeString = _data["fromTimeString"] !== undefined ? _data["fromTimeString"] : <any>null;
            this.toTimeString = _data["toTimeString"] !== undefined ? _data["toTimeString"] : <any>null;
        }
    }

    static fromJS(data: any): TimeIntervalData {
        data = typeof data === 'object' ? data : {};
        let result = new TimeIntervalData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["fromTimeString"] = this.fromTimeString !== undefined ? this.fromTimeString : <any>null;
        data["toTimeString"] = this.toTimeString !== undefined ? this.toTimeString : <any>null;
        return data; 
    }
}

export interface ITimeIntervalData {
    id: string;
    fromTimeString?: string | null;
    toTimeString?: string | null;
}

export class GetCleaningPlanDetailsQuery implements IGetCleaningPlanDetailsQuery {
    hotelId?: string | null;
    id?: string | null;
    cleaningDateString?: string | null;
    isTodaysCleaningPlan!: boolean;

    constructor(data?: IGetCleaningPlanDetailsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.cleaningDateString = _data["cleaningDateString"] !== undefined ? _data["cleaningDateString"] : <any>null;
            this.isTodaysCleaningPlan = _data["isTodaysCleaningPlan"] !== undefined ? _data["isTodaysCleaningPlan"] : <any>null;
        }
    }

    static fromJS(data: any): GetCleaningPlanDetailsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetCleaningPlanDetailsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["cleaningDateString"] = this.cleaningDateString !== undefined ? this.cleaningDateString : <any>null;
        data["isTodaysCleaningPlan"] = this.isTodaysCleaningPlan !== undefined ? this.isTodaysCleaningPlan : <any>null;
        return data; 
    }
}

export interface IGetCleaningPlanDetailsQuery {
    hotelId?: string | null;
    id?: string | null;
    cleaningDateString?: string | null;
    isTodaysCleaningPlan: boolean;
}

export class ProcessResponseOfAddRemoveCleaningPlanGroupsResult extends ProcessResponse implements IProcessResponseOfAddRemoveCleaningPlanGroupsResult {
    data?: AddRemoveCleaningPlanGroupsResult | null;

    constructor(data?: IProcessResponseOfAddRemoveCleaningPlanGroupsResult) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? AddRemoveCleaningPlanGroupsResult.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfAddRemoveCleaningPlanGroupsResult {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfAddRemoveCleaningPlanGroupsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfAddRemoveCleaningPlanGroupsResult extends IProcessResponse {
    data?: AddRemoveCleaningPlanGroupsResult | null;
}

export class AddRemoveCleaningPlanGroupsResult implements IAddRemoveCleaningPlanGroupsResult {
    hasAnyChanges!: boolean;
    insertedGroups?: CleaningTimelineGroupData[] | null;
    plannedNonEventTasks?: PlannedCleaningTimelineItemData[] | null;

    constructor(data?: IAddRemoveCleaningPlanGroupsResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hasAnyChanges = _data["hasAnyChanges"] !== undefined ? _data["hasAnyChanges"] : <any>null;
            if (Array.isArray(_data["insertedGroups"])) {
                this.insertedGroups = [] as any;
                for (let item of _data["insertedGroups"])
                    this.insertedGroups!.push(CleaningTimelineGroupData.fromJS(item));
            }
            if (Array.isArray(_data["plannedNonEventTasks"])) {
                this.plannedNonEventTasks = [] as any;
                for (let item of _data["plannedNonEventTasks"])
                    this.plannedNonEventTasks!.push(PlannedCleaningTimelineItemData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AddRemoveCleaningPlanGroupsResult {
        data = typeof data === 'object' ? data : {};
        let result = new AddRemoveCleaningPlanGroupsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hasAnyChanges"] = this.hasAnyChanges !== undefined ? this.hasAnyChanges : <any>null;
        if (Array.isArray(this.insertedGroups)) {
            data["insertedGroups"] = [];
            for (let item of this.insertedGroups)
                data["insertedGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.plannedNonEventTasks)) {
            data["plannedNonEventTasks"] = [];
            for (let item of this.plannedNonEventTasks)
                data["plannedNonEventTasks"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAddRemoveCleaningPlanGroupsResult {
    hasAnyChanges: boolean;
    insertedGroups?: CleaningTimelineGroupData[] | null;
    plannedNonEventTasks?: PlannedCleaningTimelineItemData[] | null;
}

export class AddRemoveCleaningPlanGroupsCommand implements IAddRemoveCleaningPlanGroupsCommand {
    planId!: string;
    cleanerIds?: string[] | null;

    constructor(data?: IAddRemoveCleaningPlanGroupsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.planId = _data["planId"] !== undefined ? _data["planId"] : <any>null;
            if (Array.isArray(_data["cleanerIds"])) {
                this.cleanerIds = [] as any;
                for (let item of _data["cleanerIds"])
                    this.cleanerIds!.push(item);
            }
        }
    }

    static fromJS(data: any): AddRemoveCleaningPlanGroupsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddRemoveCleaningPlanGroupsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["planId"] = this.planId !== undefined ? this.planId : <any>null;
        if (Array.isArray(this.cleanerIds)) {
            data["cleanerIds"] = [];
            for (let item of this.cleanerIds)
                data["cleanerIds"].push(item);
        }
        return data; 
    }
}

export interface IAddRemoveCleaningPlanGroupsCommand {
    planId: string;
    cleanerIds?: string[] | null;
}

export class ProcessResponseOfUpdateCleaningPlanGroupResult extends ProcessResponse implements IProcessResponseOfUpdateCleaningPlanGroupResult {
    data?: UpdateCleaningPlanGroupResult | null;

    constructor(data?: IProcessResponseOfUpdateCleaningPlanGroupResult) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? UpdateCleaningPlanGroupResult.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfUpdateCleaningPlanGroupResult {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfUpdateCleaningPlanGroupResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfUpdateCleaningPlanGroupResult extends IProcessResponse {
    data?: UpdateCleaningPlanGroupResult | null;
}

export class UpdateCleaningPlanGroupResult implements IUpdateCleaningPlanGroupResult {
    id!: string;
    intervals?: UpdateCleaningGroupAvailabilityIntervalResult[] | null;
    secondaryCleaner?: CleanerData | null;

    constructor(data?: IUpdateCleaningPlanGroupResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            if (Array.isArray(_data["intervals"])) {
                this.intervals = [] as any;
                for (let item of _data["intervals"])
                    this.intervals!.push(UpdateCleaningGroupAvailabilityIntervalResult.fromJS(item));
            }
            this.secondaryCleaner = _data["secondaryCleaner"] ? CleanerData.fromJS(_data["secondaryCleaner"]) : <any>null;
        }
    }

    static fromJS(data: any): UpdateCleaningPlanGroupResult {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCleaningPlanGroupResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        if (Array.isArray(this.intervals)) {
            data["intervals"] = [];
            for (let item of this.intervals)
                data["intervals"].push(item.toJSON());
        }
        data["secondaryCleaner"] = this.secondaryCleaner ? this.secondaryCleaner.toJSON() : <any>null;
        return data; 
    }
}

export interface IUpdateCleaningPlanGroupResult {
    id: string;
    intervals?: UpdateCleaningGroupAvailabilityIntervalResult[] | null;
    secondaryCleaner?: CleanerData | null;
}

export class UpdateCleaningGroupAvailabilityIntervalResult implements IUpdateCleaningGroupAvailabilityIntervalResult {
    id!: string;
    fromTimeString?: string | null;
    toTimeString?: string | null;

    constructor(data?: IUpdateCleaningGroupAvailabilityIntervalResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.fromTimeString = _data["fromTimeString"] !== undefined ? _data["fromTimeString"] : <any>null;
            this.toTimeString = _data["toTimeString"] !== undefined ? _data["toTimeString"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateCleaningGroupAvailabilityIntervalResult {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCleaningGroupAvailabilityIntervalResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["fromTimeString"] = this.fromTimeString !== undefined ? this.fromTimeString : <any>null;
        data["toTimeString"] = this.toTimeString !== undefined ? this.toTimeString : <any>null;
        return data; 
    }
}

export interface IUpdateCleaningGroupAvailabilityIntervalResult {
    id: string;
    fromTimeString?: string | null;
    toTimeString?: string | null;
}

export class UpdateCleaningPlanGroupCommand implements IUpdateCleaningPlanGroupCommand {
    id!: string;
    maxCredits?: number | null;
    maxDepartures?: number | null;
    maxTwins?: number | null;
    weeklyHours?: number | null;
    mustFillAllCredits!: boolean;
    secondaryCleanerId?: string | null;
    affinities?: UpdateCleaningGroupAffinity[] | null;
    availabilityIntervals?: UpdateCleaningPlanGroupAvailabilityInterval[] | null;

    constructor(data?: IUpdateCleaningPlanGroupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.maxCredits = _data["maxCredits"] !== undefined ? _data["maxCredits"] : <any>null;
            this.maxDepartures = _data["maxDepartures"] !== undefined ? _data["maxDepartures"] : <any>null;
            this.maxTwins = _data["maxTwins"] !== undefined ? _data["maxTwins"] : <any>null;
            this.weeklyHours = _data["weeklyHours"] !== undefined ? _data["weeklyHours"] : <any>null;
            this.mustFillAllCredits = _data["mustFillAllCredits"] !== undefined ? _data["mustFillAllCredits"] : <any>null;
            this.secondaryCleanerId = _data["secondaryCleanerId"] !== undefined ? _data["secondaryCleanerId"] : <any>null;
            if (Array.isArray(_data["affinities"])) {
                this.affinities = [] as any;
                for (let item of _data["affinities"])
                    this.affinities!.push(UpdateCleaningGroupAffinity.fromJS(item));
            }
            if (Array.isArray(_data["availabilityIntervals"])) {
                this.availabilityIntervals = [] as any;
                for (let item of _data["availabilityIntervals"])
                    this.availabilityIntervals!.push(UpdateCleaningPlanGroupAvailabilityInterval.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateCleaningPlanGroupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCleaningPlanGroupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["maxCredits"] = this.maxCredits !== undefined ? this.maxCredits : <any>null;
        data["maxDepartures"] = this.maxDepartures !== undefined ? this.maxDepartures : <any>null;
        data["maxTwins"] = this.maxTwins !== undefined ? this.maxTwins : <any>null;
        data["weeklyHours"] = this.weeklyHours !== undefined ? this.weeklyHours : <any>null;
        data["mustFillAllCredits"] = this.mustFillAllCredits !== undefined ? this.mustFillAllCredits : <any>null;
        data["secondaryCleanerId"] = this.secondaryCleanerId !== undefined ? this.secondaryCleanerId : <any>null;
        if (Array.isArray(this.affinities)) {
            data["affinities"] = [];
            for (let item of this.affinities)
                data["affinities"].push(item.toJSON());
        }
        if (Array.isArray(this.availabilityIntervals)) {
            data["availabilityIntervals"] = [];
            for (let item of this.availabilityIntervals)
                data["availabilityIntervals"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUpdateCleaningPlanGroupCommand {
    id: string;
    maxCredits?: number | null;
    maxDepartures?: number | null;
    maxTwins?: number | null;
    weeklyHours?: number | null;
    mustFillAllCredits: boolean;
    secondaryCleanerId?: string | null;
    affinities?: UpdateCleaningGroupAffinity[] | null;
    availabilityIntervals?: UpdateCleaningPlanGroupAvailabilityInterval[] | null;
}

export class UpdateCleaningGroupAffinity implements IUpdateCleaningGroupAffinity {
    referenceId?: string | null;
    referenceName?: string | null;
    referenceDescription?: string | null;
    type!: CleaningPlanGroupAffinityType;

    constructor(data?: IUpdateCleaningGroupAffinity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.referenceId = _data["referenceId"] !== undefined ? _data["referenceId"] : <any>null;
            this.referenceName = _data["referenceName"] !== undefined ? _data["referenceName"] : <any>null;
            this.referenceDescription = _data["referenceDescription"] !== undefined ? _data["referenceDescription"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateCleaningGroupAffinity {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCleaningGroupAffinity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["referenceId"] = this.referenceId !== undefined ? this.referenceId : <any>null;
        data["referenceName"] = this.referenceName !== undefined ? this.referenceName : <any>null;
        data["referenceDescription"] = this.referenceDescription !== undefined ? this.referenceDescription : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        return data; 
    }
}

export interface IUpdateCleaningGroupAffinity {
    referenceId?: string | null;
    referenceName?: string | null;
    referenceDescription?: string | null;
    type: CleaningPlanGroupAffinityType;
}

export class UpdateCleaningPlanGroupAvailabilityInterval implements IUpdateCleaningPlanGroupAvailabilityInterval {
    id?: string | null;
    fromTimeString?: string | null;
    toTimeString?: string | null;

    constructor(data?: IUpdateCleaningPlanGroupAvailabilityInterval) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.fromTimeString = _data["fromTimeString"] !== undefined ? _data["fromTimeString"] : <any>null;
            this.toTimeString = _data["toTimeString"] !== undefined ? _data["toTimeString"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateCleaningPlanGroupAvailabilityInterval {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCleaningPlanGroupAvailabilityInterval();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["fromTimeString"] = this.fromTimeString !== undefined ? this.fromTimeString : <any>null;
        data["toTimeString"] = this.toTimeString !== undefined ? this.toTimeString : <any>null;
        return data; 
    }
}

export interface IUpdateCleaningPlanGroupAvailabilityInterval {
    id?: string | null;
    fromTimeString?: string | null;
    toTimeString?: string | null;
}

export class AddCleaningPlanItemsCommand implements IAddCleaningPlanItemsCommand {
    cleaningPlanId!: string;
    cleanings?: AddCleaningPlanItem[] | null;

    constructor(data?: IAddCleaningPlanItemsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cleaningPlanId = _data["cleaningPlanId"] !== undefined ? _data["cleaningPlanId"] : <any>null;
            if (Array.isArray(_data["cleanings"])) {
                this.cleanings = [] as any;
                for (let item of _data["cleanings"])
                    this.cleanings!.push(AddCleaningPlanItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AddCleaningPlanItemsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddCleaningPlanItemsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cleaningPlanId"] = this.cleaningPlanId !== undefined ? this.cleaningPlanId : <any>null;
        if (Array.isArray(this.cleanings)) {
            data["cleanings"] = [];
            for (let item of this.cleanings)
                data["cleanings"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAddCleaningPlanItemsCommand {
    cleaningPlanId: string;
    cleanings?: AddCleaningPlanItem[] | null;
}

export class AddCleaningPlanItem implements IAddCleaningPlanItem {
    id!: string;
    cleaningPlanGroupId!: string;
    startString?: string | null;
    endString?: string | null;

    constructor(data?: IAddCleaningPlanItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.cleaningPlanGroupId = _data["cleaningPlanGroupId"] !== undefined ? _data["cleaningPlanGroupId"] : <any>null;
            this.startString = _data["startString"] !== undefined ? _data["startString"] : <any>null;
            this.endString = _data["endString"] !== undefined ? _data["endString"] : <any>null;
        }
    }

    static fromJS(data: any): AddCleaningPlanItem {
        data = typeof data === 'object' ? data : {};
        let result = new AddCleaningPlanItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["cleaningPlanGroupId"] = this.cleaningPlanGroupId !== undefined ? this.cleaningPlanGroupId : <any>null;
        data["startString"] = this.startString !== undefined ? this.startString : <any>null;
        data["endString"] = this.endString !== undefined ? this.endString : <any>null;
        return data; 
    }
}

export interface IAddCleaningPlanItem {
    id: string;
    cleaningPlanGroupId: string;
    startString?: string | null;
    endString?: string | null;
}

export class ProcessResponseOfUpdateCleaningPlanItemsResult extends ProcessResponse implements IProcessResponseOfUpdateCleaningPlanItemsResult {
    data?: UpdateCleaningPlanItemsResult | null;

    constructor(data?: IProcessResponseOfUpdateCleaningPlanItemsResult) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? UpdateCleaningPlanItemsResult.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfUpdateCleaningPlanItemsResult {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfUpdateCleaningPlanItemsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfUpdateCleaningPlanItemsResult extends IProcessResponse {
    data?: UpdateCleaningPlanItemsResult | null;
}

export class UpdateCleaningPlanItemsResult implements IUpdateCleaningPlanItemsResult {

    constructor(data?: IUpdateCleaningPlanItemsResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): UpdateCleaningPlanItemsResult {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCleaningPlanItemsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IUpdateCleaningPlanItemsResult {
}

export class UpdateCleaningPlanItemsCommand implements IUpdateCleaningPlanItemsCommand {
    cleaningPlanId!: string;
    items?: UpdateCleaningPlanItem[] | null;

    constructor(data?: IUpdateCleaningPlanItemsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cleaningPlanId = _data["cleaningPlanId"] !== undefined ? _data["cleaningPlanId"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(UpdateCleaningPlanItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateCleaningPlanItemsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCleaningPlanItemsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cleaningPlanId"] = this.cleaningPlanId !== undefined ? this.cleaningPlanId : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUpdateCleaningPlanItemsCommand {
    cleaningPlanId: string;
    items?: UpdateCleaningPlanItem[] | null;
}

export class UpdateCleaningPlanItem implements IUpdateCleaningPlanItem {
    id!: string;
    roomId!: string;
    cleaningPlanGroupId!: string;
    startString?: string | null;
    endString?: string | null;

    constructor(data?: IUpdateCleaningPlanItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.cleaningPlanGroupId = _data["cleaningPlanGroupId"] !== undefined ? _data["cleaningPlanGroupId"] : <any>null;
            this.startString = _data["startString"] !== undefined ? _data["startString"] : <any>null;
            this.endString = _data["endString"] !== undefined ? _data["endString"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateCleaningPlanItem {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCleaningPlanItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["cleaningPlanGroupId"] = this.cleaningPlanGroupId !== undefined ? this.cleaningPlanGroupId : <any>null;
        data["startString"] = this.startString !== undefined ? this.startString : <any>null;
        data["endString"] = this.endString !== undefined ? this.endString : <any>null;
        return data; 
    }
}

export interface IUpdateCleaningPlanItem {
    id: string;
    roomId: string;
    cleaningPlanGroupId: string;
    startString?: string | null;
    endString?: string | null;
}

export class RemoveCleaningPlanItemsCommand implements IRemoveCleaningPlanItemsCommand {
    ids?: string[] | null;

    constructor(data?: IRemoveCleaningPlanItemsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["ids"])) {
                this.ids = [] as any;
                for (let item of _data["ids"])
                    this.ids!.push(item);
            }
        }
    }

    static fromJS(data: any): RemoveCleaningPlanItemsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveCleaningPlanItemsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ids)) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        return data; 
    }
}

export interface IRemoveCleaningPlanItemsCommand {
    ids?: string[] | null;
}

export class ActivatePlannableCleaningsCommand implements IActivatePlannableCleaningsCommand {
    ids?: string[] | null;

    constructor(data?: IActivatePlannableCleaningsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["ids"])) {
                this.ids = [] as any;
                for (let item of _data["ids"])
                    this.ids!.push(item);
            }
        }
    }

    static fromJS(data: any): ActivatePlannableCleaningsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ActivatePlannableCleaningsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ids)) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        return data; 
    }
}

export interface IActivatePlannableCleaningsCommand {
    ids?: string[] | null;
}

export class CancelPlannableCleaningsCommand implements ICancelPlannableCleaningsCommand {
    ids?: string[] | null;

    constructor(data?: ICancelPlannableCleaningsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["ids"])) {
                this.ids = [] as any;
                for (let item of _data["ids"])
                    this.ids!.push(item);
            }
        }
    }

    static fromJS(data: any): CancelPlannableCleaningsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CancelPlannableCleaningsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ids)) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        return data; 
    }
}

export interface ICancelPlannableCleaningsCommand {
    ids?: string[] | null;
}

export class ProcessResponseOfIEnumerableOfCleaningTimelineItemData extends ProcessResponse implements IProcessResponseOfIEnumerableOfCleaningTimelineItemData {
    data?: CleaningTimelineItemData[] | null;

    constructor(data?: IProcessResponseOfIEnumerableOfCleaningTimelineItemData) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CleaningTimelineItemData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProcessResponseOfIEnumerableOfCleaningTimelineItemData {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfIEnumerableOfCleaningTimelineItemData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfIEnumerableOfCleaningTimelineItemData extends IProcessResponse {
    data?: CleaningTimelineItemData[] | null;
}

export class CreateCustomPlannableCleaningsCommand implements ICreateCustomPlannableCleaningsCommand {
    isToday!: boolean;
    cleaningPlanId!: string;
    description?: string | null;
    credits!: number;
    wheres?: TaskWhereData[] | null;

    constructor(data?: ICreateCustomPlannableCleaningsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isToday = _data["isToday"] !== undefined ? _data["isToday"] : <any>null;
            this.cleaningPlanId = _data["cleaningPlanId"] !== undefined ? _data["cleaningPlanId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
            if (Array.isArray(_data["wheres"])) {
                this.wheres = [] as any;
                for (let item of _data["wheres"])
                    this.wheres!.push(TaskWhereData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateCustomPlannableCleaningsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCustomPlannableCleaningsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isToday"] = this.isToday !== undefined ? this.isToday : <any>null;
        data["cleaningPlanId"] = this.cleaningPlanId !== undefined ? this.cleaningPlanId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        if (Array.isArray(this.wheres)) {
            data["wheres"] = [];
            for (let item of this.wheres)
                data["wheres"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateCustomPlannableCleaningsCommand {
    isToday: boolean;
    cleaningPlanId: string;
    description?: string | null;
    credits: number;
    wheres?: TaskWhereData[] | null;
}

export class TaskWhereData implements ITaskWhereData {
    typeKey?: string | null;
    typeDescription?: string | null;
    referenceId?: string | null;
    referenceName?: string | null;

    constructor(data?: ITaskWhereData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            this.typeDescription = _data["typeDescription"] !== undefined ? _data["typeDescription"] : <any>null;
            this.referenceId = _data["referenceId"] !== undefined ? _data["referenceId"] : <any>null;
            this.referenceName = _data["referenceName"] !== undefined ? _data["referenceName"] : <any>null;
        }
    }

    static fromJS(data: any): TaskWhereData {
        data = typeof data === 'object' ? data : {};
        let result = new TaskWhereData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        data["typeDescription"] = this.typeDescription !== undefined ? this.typeDescription : <any>null;
        data["referenceId"] = this.referenceId !== undefined ? this.referenceId : <any>null;
        data["referenceName"] = this.referenceName !== undefined ? this.referenceName : <any>null;
        return data; 
    }
}

export interface ITaskWhereData {
    typeKey?: string | null;
    typeDescription?: string | null;
    referenceId?: string | null;
    referenceName?: string | null;
}

export class DeleteCustomPlannableCleaningsCommand implements IDeleteCustomPlannableCleaningsCommand {
    ids?: string[] | null;

    constructor(data?: IDeleteCustomPlannableCleaningsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["ids"])) {
                this.ids = [] as any;
                for (let item of _data["ids"])
                    this.ids!.push(item);
            }
        }
    }

    static fromJS(data: any): DeleteCustomPlannableCleaningsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteCustomPlannableCleaningsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ids)) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        return data; 
    }
}

export interface IDeleteCustomPlannableCleaningsCommand {
    ids?: string[] | null;
}

export class PostponePlannableCleaningsCommand implements IPostponePlannableCleaningsCommand {
    cleaningPlanId!: string;
    ids?: string[] | null;

    constructor(data?: IPostponePlannableCleaningsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cleaningPlanId = _data["cleaningPlanId"] !== undefined ? _data["cleaningPlanId"] : <any>null;
            if (Array.isArray(_data["ids"])) {
                this.ids = [] as any;
                for (let item of _data["ids"])
                    this.ids!.push(item);
            }
        }
    }

    static fromJS(data: any): PostponePlannableCleaningsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PostponePlannableCleaningsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cleaningPlanId"] = this.cleaningPlanId !== undefined ? this.cleaningPlanId : <any>null;
        if (Array.isArray(this.ids)) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        return data; 
    }
}

export interface IPostponePlannableCleaningsCommand {
    cleaningPlanId: string;
    ids?: string[] | null;
}

export class UndoPostponePlannableCleaningsCommand implements IUndoPostponePlannableCleaningsCommand {
    ids?: string[] | null;

    constructor(data?: IUndoPostponePlannableCleaningsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["ids"])) {
                this.ids = [] as any;
                for (let item of _data["ids"])
                    this.ids!.push(item);
            }
        }
    }

    static fromJS(data: any): UndoPostponePlannableCleaningsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UndoPostponePlannableCleaningsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ids)) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        return data; 
    }
}

export interface IUndoPostponePlannableCleaningsCommand {
    ids?: string[] | null;
}

export class GenerateCpsatCleaningPlanCommand implements IGenerateCpsatCleaningPlanCommand {
    cleaningPlanId!: string;
    isTodaysCleaningPlan!: boolean;
    configuration?: CpsatPlannerCompactConfigurationData | null;

    constructor(data?: IGenerateCpsatCleaningPlanCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cleaningPlanId = _data["cleaningPlanId"] !== undefined ? _data["cleaningPlanId"] : <any>null;
            this.isTodaysCleaningPlan = _data["isTodaysCleaningPlan"] !== undefined ? _data["isTodaysCleaningPlan"] : <any>null;
            this.configuration = _data["configuration"] ? CpsatPlannerCompactConfigurationData.fromJS(_data["configuration"]) : <any>null;
        }
    }

    static fromJS(data: any): GenerateCpsatCleaningPlanCommand {
        data = typeof data === 'object' ? data : {};
        let result = new GenerateCpsatCleaningPlanCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cleaningPlanId"] = this.cleaningPlanId !== undefined ? this.cleaningPlanId : <any>null;
        data["isTodaysCleaningPlan"] = this.isTodaysCleaningPlan !== undefined ? this.isTodaysCleaningPlan : <any>null;
        data["configuration"] = this.configuration ? this.configuration.toJSON() : <any>null;
        return data; 
    }
}

export interface IGenerateCpsatCleaningPlanCommand {
    cleaningPlanId: string;
    isTodaysCleaningPlan: boolean;
    configuration?: CpsatPlannerCompactConfigurationData | null;
}

export class CpsatPlannerCompactConfigurationData implements ICpsatPlannerCompactConfigurationData {
    cleaningPriorityKey?: string | null;
    doUsePrePlan!: boolean;
    doCompleteProposedPlanOnUsePreplan!: boolean;
    arePreferredLevelsExclusive!: boolean;

    constructor(data?: ICpsatPlannerCompactConfigurationData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cleaningPriorityKey = _data["cleaningPriorityKey"] !== undefined ? _data["cleaningPriorityKey"] : <any>null;
            this.doUsePrePlan = _data["doUsePrePlan"] !== undefined ? _data["doUsePrePlan"] : <any>null;
            this.doCompleteProposedPlanOnUsePreplan = _data["doCompleteProposedPlanOnUsePreplan"] !== undefined ? _data["doCompleteProposedPlanOnUsePreplan"] : <any>null;
            this.arePreferredLevelsExclusive = _data["arePreferredLevelsExclusive"] !== undefined ? _data["arePreferredLevelsExclusive"] : <any>null;
        }
    }

    static fromJS(data: any): CpsatPlannerCompactConfigurationData {
        data = typeof data === 'object' ? data : {};
        let result = new CpsatPlannerCompactConfigurationData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cleaningPriorityKey"] = this.cleaningPriorityKey !== undefined ? this.cleaningPriorityKey : <any>null;
        data["doUsePrePlan"] = this.doUsePrePlan !== undefined ? this.doUsePrePlan : <any>null;
        data["doCompleteProposedPlanOnUsePreplan"] = this.doCompleteProposedPlanOnUsePreplan !== undefined ? this.doCompleteProposedPlanOnUsePreplan : <any>null;
        data["arePreferredLevelsExclusive"] = this.arePreferredLevelsExclusive !== undefined ? this.arePreferredLevelsExclusive : <any>null;
        return data; 
    }
}

export interface ICpsatPlannerCompactConfigurationData {
    cleaningPriorityKey?: string | null;
    doUsePrePlan: boolean;
    doCompleteProposedPlanOnUsePreplan: boolean;
    arePreferredLevelsExclusive: boolean;
}

export class ResetCleaningPlanCommand implements IResetCleaningPlanCommand {
    cleaningPlanId!: string;
    isTodaysCleaningPlan!: boolean;

    constructor(data?: IResetCleaningPlanCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cleaningPlanId = _data["cleaningPlanId"] !== undefined ? _data["cleaningPlanId"] : <any>null;
            this.isTodaysCleaningPlan = _data["isTodaysCleaningPlan"] !== undefined ? _data["isTodaysCleaningPlan"] : <any>null;
        }
    }

    static fromJS(data: any): ResetCleaningPlanCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ResetCleaningPlanCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cleaningPlanId"] = this.cleaningPlanId !== undefined ? this.cleaningPlanId : <any>null;
        data["isTodaysCleaningPlan"] = this.isTodaysCleaningPlan !== undefined ? this.isTodaysCleaningPlan : <any>null;
        return data; 
    }
}

export interface IResetCleaningPlanCommand {
    cleaningPlanId: string;
    isTodaysCleaningPlan: boolean;
}

export class ProcessResponseOfDeleteAndReloadCleaningPlanResult extends ProcessResponse implements IProcessResponseOfDeleteAndReloadCleaningPlanResult {
    data?: DeleteAndReloadCleaningPlanResult | null;

    constructor(data?: IProcessResponseOfDeleteAndReloadCleaningPlanResult) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? DeleteAndReloadCleaningPlanResult.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfDeleteAndReloadCleaningPlanResult {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfDeleteAndReloadCleaningPlanResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfDeleteAndReloadCleaningPlanResult extends IProcessResponse {
    data?: DeleteAndReloadCleaningPlanResult | null;
}

export class DeleteAndReloadCleaningPlanResult implements IDeleteAndReloadCleaningPlanResult {
    plannableItems?: CleaningTimelineItemData[] | null;
    plannedItems?: PlannedCleaningTimelineItemData[] | null;

    constructor(data?: IDeleteAndReloadCleaningPlanResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["plannableItems"])) {
                this.plannableItems = [] as any;
                for (let item of _data["plannableItems"])
                    this.plannableItems!.push(CleaningTimelineItemData.fromJS(item));
            }
            if (Array.isArray(_data["plannedItems"])) {
                this.plannedItems = [] as any;
                for (let item of _data["plannedItems"])
                    this.plannedItems!.push(PlannedCleaningTimelineItemData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeleteAndReloadCleaningPlanResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteAndReloadCleaningPlanResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.plannableItems)) {
            data["plannableItems"] = [];
            for (let item of this.plannableItems)
                data["plannableItems"].push(item.toJSON());
        }
        if (Array.isArray(this.plannedItems)) {
            data["plannedItems"] = [];
            for (let item of this.plannedItems)
                data["plannedItems"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IDeleteAndReloadCleaningPlanResult {
    plannableItems?: CleaningTimelineItemData[] | null;
    plannedItems?: PlannedCleaningTimelineItemData[] | null;
}

export class DeleteAndReloadCleaningPlanCommand implements IDeleteAndReloadCleaningPlanCommand {
    cleaningPlanId!: string;
    isTodaysCleaningPlan!: boolean;

    constructor(data?: IDeleteAndReloadCleaningPlanCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cleaningPlanId = _data["cleaningPlanId"] !== undefined ? _data["cleaningPlanId"] : <any>null;
            this.isTodaysCleaningPlan = _data["isTodaysCleaningPlan"] !== undefined ? _data["isTodaysCleaningPlan"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteAndReloadCleaningPlanCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteAndReloadCleaningPlanCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cleaningPlanId"] = this.cleaningPlanId !== undefined ? this.cleaningPlanId : <any>null;
        data["isTodaysCleaningPlan"] = this.isTodaysCleaningPlan !== undefined ? this.isTodaysCleaningPlan : <any>null;
        return data; 
    }
}

export interface IDeleteAndReloadCleaningPlanCommand {
    cleaningPlanId: string;
    isTodaysCleaningPlan: boolean;
}

export class ChangePlannableCleaningsCreditsCommand implements IChangePlannableCleaningsCreditsCommand {
    ids?: string[] | null;
    credits!: number;

    constructor(data?: IChangePlannableCleaningsCreditsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["ids"])) {
                this.ids = [] as any;
                for (let item of _data["ids"])
                    this.ids!.push(item);
            }
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
        }
    }

    static fromJS(data: any): ChangePlannableCleaningsCreditsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePlannableCleaningsCreditsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ids)) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        return data; 
    }
}

export interface IChangePlannableCleaningsCreditsCommand {
    ids?: string[] | null;
    credits: number;
}

export class ProcessResponseOfSendCleaningPlanResponse extends ProcessResponse implements IProcessResponseOfSendCleaningPlanResponse {
    data?: SendCleaningPlanResponse | null;

    constructor(data?: IProcessResponseOfSendCleaningPlanResponse) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? SendCleaningPlanResponse.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfSendCleaningPlanResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfSendCleaningPlanResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfSendCleaningPlanResponse extends IProcessResponse {
    data?: SendCleaningPlanResponse | null;
}

export class SendCleaningPlanResponse implements ISendCleaningPlanResponse {
    sentAt!: moment.Moment;

    constructor(data?: ISendCleaningPlanResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sentAt = _data["sentAt"] ? moment(_data["sentAt"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): SendCleaningPlanResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SendCleaningPlanResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sentAt"] = this.sentAt ? this.sentAt.toISOString() : <any>null;
        return data; 
    }
}

export interface ISendCleaningPlanResponse {
    sentAt: moment.Moment;
}

export class SendCleaningPlanCommand implements ISendCleaningPlanCommand {
    cleaningPlanId!: string;
    overrideAlreadySentPlan!: boolean;

    constructor(data?: ISendCleaningPlanCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cleaningPlanId = _data["cleaningPlanId"] !== undefined ? _data["cleaningPlanId"] : <any>null;
            this.overrideAlreadySentPlan = _data["overrideAlreadySentPlan"] !== undefined ? _data["overrideAlreadySentPlan"] : <any>null;
        }
    }

    static fromJS(data: any): SendCleaningPlanCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SendCleaningPlanCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cleaningPlanId"] = this.cleaningPlanId !== undefined ? this.cleaningPlanId : <any>null;
        data["overrideAlreadySentPlan"] = this.overrideAlreadySentPlan !== undefined ? this.overrideAlreadySentPlan : <any>null;
        return data; 
    }
}

export interface ISendCleaningPlanCommand {
    cleaningPlanId: string;
    overrideAlreadySentPlan: boolean;
}

export class SaveCpsatConfigurationCommand implements ISaveCpsatConfigurationCommand {
    cleaningPlanId!: string;
    solverRunTime!: number;
    planningStrategyTypeKey?: string | null;
    balanceByRoomsMinRooms!: number;
    balanceByRoomsMaxRooms!: number;
    balanceByCreditsStrictMinCredits!: number;
    balanceByCreditsStrictMaxCredits!: number;
    balanceByCreditsWithAffinitiesMinCredits!: number;
    balanceByCreditsWithAffinitiesMaxCredits!: number;
    targetByRoomsValue?: string | null;
    targetByCreditsValue?: string | null;
    maxNumberOfBuildingsPerAttendant!: number;
    maxBuildingTravelTime!: number;
    doesBuildingMovementReduceCredits!: boolean;
    buildingMovementCreditsReduction!: number;
    maxNumberOfLevelsPerAttendant!: number;
    doesLevelMovementReduceCredits!: boolean;
    levelMovementCreditsReduction!: number;
    applyLevelMovementCreditReductionAfterNumberOfLevels!: number;
    doBalanceStaysAndDepartures!: boolean;
    weightEpsilonStayDeparture!: number;
    maxStay!: number;
    maxDeparture!: number;
    maxDeparturesReducesCredits!: boolean;
    maxDeparturesEquivalentCredits!: number;
    maxDeparturesReductionThreshold!: number;
    maxStaysIncreasesCredits!: boolean;
    maxStaysEquivalentCredits!: number;
    maxStaysIncreaseThreshold!: number;

    constructor(data?: ISaveCpsatConfigurationCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cleaningPlanId = _data["cleaningPlanId"] !== undefined ? _data["cleaningPlanId"] : <any>null;
            this.solverRunTime = _data["solverRunTime"] !== undefined ? _data["solverRunTime"] : <any>null;
            this.planningStrategyTypeKey = _data["planningStrategyTypeKey"] !== undefined ? _data["planningStrategyTypeKey"] : <any>null;
            this.balanceByRoomsMinRooms = _data["balanceByRoomsMinRooms"] !== undefined ? _data["balanceByRoomsMinRooms"] : <any>null;
            this.balanceByRoomsMaxRooms = _data["balanceByRoomsMaxRooms"] !== undefined ? _data["balanceByRoomsMaxRooms"] : <any>null;
            this.balanceByCreditsStrictMinCredits = _data["balanceByCreditsStrictMinCredits"] !== undefined ? _data["balanceByCreditsStrictMinCredits"] : <any>null;
            this.balanceByCreditsStrictMaxCredits = _data["balanceByCreditsStrictMaxCredits"] !== undefined ? _data["balanceByCreditsStrictMaxCredits"] : <any>null;
            this.balanceByCreditsWithAffinitiesMinCredits = _data["balanceByCreditsWithAffinitiesMinCredits"] !== undefined ? _data["balanceByCreditsWithAffinitiesMinCredits"] : <any>null;
            this.balanceByCreditsWithAffinitiesMaxCredits = _data["balanceByCreditsWithAffinitiesMaxCredits"] !== undefined ? _data["balanceByCreditsWithAffinitiesMaxCredits"] : <any>null;
            this.targetByRoomsValue = _data["targetByRoomsValue"] !== undefined ? _data["targetByRoomsValue"] : <any>null;
            this.targetByCreditsValue = _data["targetByCreditsValue"] !== undefined ? _data["targetByCreditsValue"] : <any>null;
            this.maxNumberOfBuildingsPerAttendant = _data["maxNumberOfBuildingsPerAttendant"] !== undefined ? _data["maxNumberOfBuildingsPerAttendant"] : <any>null;
            this.maxBuildingTravelTime = _data["maxBuildingTravelTime"] !== undefined ? _data["maxBuildingTravelTime"] : <any>null;
            this.doesBuildingMovementReduceCredits = _data["doesBuildingMovementReduceCredits"] !== undefined ? _data["doesBuildingMovementReduceCredits"] : <any>null;
            this.buildingMovementCreditsReduction = _data["buildingMovementCreditsReduction"] !== undefined ? _data["buildingMovementCreditsReduction"] : <any>null;
            this.maxNumberOfLevelsPerAttendant = _data["maxNumberOfLevelsPerAttendant"] !== undefined ? _data["maxNumberOfLevelsPerAttendant"] : <any>null;
            this.doesLevelMovementReduceCredits = _data["doesLevelMovementReduceCredits"] !== undefined ? _data["doesLevelMovementReduceCredits"] : <any>null;
            this.levelMovementCreditsReduction = _data["levelMovementCreditsReduction"] !== undefined ? _data["levelMovementCreditsReduction"] : <any>null;
            this.applyLevelMovementCreditReductionAfterNumberOfLevels = _data["applyLevelMovementCreditReductionAfterNumberOfLevels"] !== undefined ? _data["applyLevelMovementCreditReductionAfterNumberOfLevels"] : <any>null;
            this.doBalanceStaysAndDepartures = _data["doBalanceStaysAndDepartures"] !== undefined ? _data["doBalanceStaysAndDepartures"] : <any>null;
            this.weightEpsilonStayDeparture = _data["weightEpsilonStayDeparture"] !== undefined ? _data["weightEpsilonStayDeparture"] : <any>null;
            this.maxStay = _data["maxStay"] !== undefined ? _data["maxStay"] : <any>null;
            this.maxDeparture = _data["maxDeparture"] !== undefined ? _data["maxDeparture"] : <any>null;
            this.maxDeparturesReducesCredits = _data["maxDeparturesReducesCredits"] !== undefined ? _data["maxDeparturesReducesCredits"] : <any>null;
            this.maxDeparturesEquivalentCredits = _data["maxDeparturesEquivalentCredits"] !== undefined ? _data["maxDeparturesEquivalentCredits"] : <any>null;
            this.maxDeparturesReductionThreshold = _data["maxDeparturesReductionThreshold"] !== undefined ? _data["maxDeparturesReductionThreshold"] : <any>null;
            this.maxStaysIncreasesCredits = _data["maxStaysIncreasesCredits"] !== undefined ? _data["maxStaysIncreasesCredits"] : <any>null;
            this.maxStaysEquivalentCredits = _data["maxStaysEquivalentCredits"] !== undefined ? _data["maxStaysEquivalentCredits"] : <any>null;
            this.maxStaysIncreaseThreshold = _data["maxStaysIncreaseThreshold"] !== undefined ? _data["maxStaysIncreaseThreshold"] : <any>null;
        }
    }

    static fromJS(data: any): SaveCpsatConfigurationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SaveCpsatConfigurationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cleaningPlanId"] = this.cleaningPlanId !== undefined ? this.cleaningPlanId : <any>null;
        data["solverRunTime"] = this.solverRunTime !== undefined ? this.solverRunTime : <any>null;
        data["planningStrategyTypeKey"] = this.planningStrategyTypeKey !== undefined ? this.planningStrategyTypeKey : <any>null;
        data["balanceByRoomsMinRooms"] = this.balanceByRoomsMinRooms !== undefined ? this.balanceByRoomsMinRooms : <any>null;
        data["balanceByRoomsMaxRooms"] = this.balanceByRoomsMaxRooms !== undefined ? this.balanceByRoomsMaxRooms : <any>null;
        data["balanceByCreditsStrictMinCredits"] = this.balanceByCreditsStrictMinCredits !== undefined ? this.balanceByCreditsStrictMinCredits : <any>null;
        data["balanceByCreditsStrictMaxCredits"] = this.balanceByCreditsStrictMaxCredits !== undefined ? this.balanceByCreditsStrictMaxCredits : <any>null;
        data["balanceByCreditsWithAffinitiesMinCredits"] = this.balanceByCreditsWithAffinitiesMinCredits !== undefined ? this.balanceByCreditsWithAffinitiesMinCredits : <any>null;
        data["balanceByCreditsWithAffinitiesMaxCredits"] = this.balanceByCreditsWithAffinitiesMaxCredits !== undefined ? this.balanceByCreditsWithAffinitiesMaxCredits : <any>null;
        data["targetByRoomsValue"] = this.targetByRoomsValue !== undefined ? this.targetByRoomsValue : <any>null;
        data["targetByCreditsValue"] = this.targetByCreditsValue !== undefined ? this.targetByCreditsValue : <any>null;
        data["maxNumberOfBuildingsPerAttendant"] = this.maxNumberOfBuildingsPerAttendant !== undefined ? this.maxNumberOfBuildingsPerAttendant : <any>null;
        data["maxBuildingTravelTime"] = this.maxBuildingTravelTime !== undefined ? this.maxBuildingTravelTime : <any>null;
        data["doesBuildingMovementReduceCredits"] = this.doesBuildingMovementReduceCredits !== undefined ? this.doesBuildingMovementReduceCredits : <any>null;
        data["buildingMovementCreditsReduction"] = this.buildingMovementCreditsReduction !== undefined ? this.buildingMovementCreditsReduction : <any>null;
        data["maxNumberOfLevelsPerAttendant"] = this.maxNumberOfLevelsPerAttendant !== undefined ? this.maxNumberOfLevelsPerAttendant : <any>null;
        data["doesLevelMovementReduceCredits"] = this.doesLevelMovementReduceCredits !== undefined ? this.doesLevelMovementReduceCredits : <any>null;
        data["levelMovementCreditsReduction"] = this.levelMovementCreditsReduction !== undefined ? this.levelMovementCreditsReduction : <any>null;
        data["applyLevelMovementCreditReductionAfterNumberOfLevels"] = this.applyLevelMovementCreditReductionAfterNumberOfLevels !== undefined ? this.applyLevelMovementCreditReductionAfterNumberOfLevels : <any>null;
        data["doBalanceStaysAndDepartures"] = this.doBalanceStaysAndDepartures !== undefined ? this.doBalanceStaysAndDepartures : <any>null;
        data["weightEpsilonStayDeparture"] = this.weightEpsilonStayDeparture !== undefined ? this.weightEpsilonStayDeparture : <any>null;
        data["maxStay"] = this.maxStay !== undefined ? this.maxStay : <any>null;
        data["maxDeparture"] = this.maxDeparture !== undefined ? this.maxDeparture : <any>null;
        data["maxDeparturesReducesCredits"] = this.maxDeparturesReducesCredits !== undefined ? this.maxDeparturesReducesCredits : <any>null;
        data["maxDeparturesEquivalentCredits"] = this.maxDeparturesEquivalentCredits !== undefined ? this.maxDeparturesEquivalentCredits : <any>null;
        data["maxDeparturesReductionThreshold"] = this.maxDeparturesReductionThreshold !== undefined ? this.maxDeparturesReductionThreshold : <any>null;
        data["maxStaysIncreasesCredits"] = this.maxStaysIncreasesCredits !== undefined ? this.maxStaysIncreasesCredits : <any>null;
        data["maxStaysEquivalentCredits"] = this.maxStaysEquivalentCredits !== undefined ? this.maxStaysEquivalentCredits : <any>null;
        data["maxStaysIncreaseThreshold"] = this.maxStaysIncreaseThreshold !== undefined ? this.maxStaysIncreaseThreshold : <any>null;
        return data; 
    }
}

export interface ISaveCpsatConfigurationCommand {
    cleaningPlanId: string;
    solverRunTime: number;
    planningStrategyTypeKey?: string | null;
    balanceByRoomsMinRooms: number;
    balanceByRoomsMaxRooms: number;
    balanceByCreditsStrictMinCredits: number;
    balanceByCreditsStrictMaxCredits: number;
    balanceByCreditsWithAffinitiesMinCredits: number;
    balanceByCreditsWithAffinitiesMaxCredits: number;
    targetByRoomsValue?: string | null;
    targetByCreditsValue?: string | null;
    maxNumberOfBuildingsPerAttendant: number;
    maxBuildingTravelTime: number;
    doesBuildingMovementReduceCredits: boolean;
    buildingMovementCreditsReduction: number;
    maxNumberOfLevelsPerAttendant: number;
    doesLevelMovementReduceCredits: boolean;
    levelMovementCreditsReduction: number;
    applyLevelMovementCreditReductionAfterNumberOfLevels: number;
    doBalanceStaysAndDepartures: boolean;
    weightEpsilonStayDeparture: number;
    maxStay: number;
    maxDeparture: number;
    maxDeparturesReducesCredits: boolean;
    maxDeparturesEquivalentCredits: number;
    maxDeparturesReductionThreshold: number;
    maxStaysIncreasesCredits: boolean;
    maxStaysEquivalentCredits: number;
    maxStaysIncreaseThreshold: number;
}

export class AffinityGroup implements IAffinityGroup {
    affinityType!: CleaningPlanGroupAffinityType;
    affinityGroupName?: string | null;
    affinities?: AffinityData2[] | null;

    constructor(data?: IAffinityGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.affinityType = _data["affinityType"] !== undefined ? _data["affinityType"] : <any>null;
            this.affinityGroupName = _data["affinityGroupName"] !== undefined ? _data["affinityGroupName"] : <any>null;
            if (Array.isArray(_data["affinities"])) {
                this.affinities = [] as any;
                for (let item of _data["affinities"])
                    this.affinities!.push(AffinityData2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AffinityGroup {
        data = typeof data === 'object' ? data : {};
        let result = new AffinityGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["affinityType"] = this.affinityType !== undefined ? this.affinityType : <any>null;
        data["affinityGroupName"] = this.affinityGroupName !== undefined ? this.affinityGroupName : <any>null;
        if (Array.isArray(this.affinities)) {
            data["affinities"] = [];
            for (let item of this.affinities)
                data["affinities"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAffinityGroup {
    affinityType: CleaningPlanGroupAffinityType;
    affinityGroupName?: string | null;
    affinities?: AffinityData2[] | null;
}

export class AffinityData2 implements IAffinityData2 {
    referenceId?: string | null;
    referenceName?: string | null;
    referenceDescription?: string | null;

    constructor(data?: IAffinityData2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.referenceId = _data["referenceId"] !== undefined ? _data["referenceId"] : <any>null;
            this.referenceName = _data["referenceName"] !== undefined ? _data["referenceName"] : <any>null;
            this.referenceDescription = _data["referenceDescription"] !== undefined ? _data["referenceDescription"] : <any>null;
        }
    }

    static fromJS(data: any): AffinityData2 {
        data = typeof data === 'object' ? data : {};
        let result = new AffinityData2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["referenceId"] = this.referenceId !== undefined ? this.referenceId : <any>null;
        data["referenceName"] = this.referenceName !== undefined ? this.referenceName : <any>null;
        data["referenceDescription"] = this.referenceDescription !== undefined ? this.referenceDescription : <any>null;
        return data; 
    }
}

export interface IAffinityData2 {
    referenceId?: string | null;
    referenceName?: string | null;
    referenceDescription?: string | null;
}

export class GetListOfAffinityGroupsQuery implements IGetListOfAffinityGroupsQuery {
    hotelId?: string | null;

    constructor(data?: IGetListOfAffinityGroupsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): GetListOfAffinityGroupsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfAffinityGroupsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IGetListOfAffinityGroupsQuery {
    hotelId?: string | null;
}

export class CleaningGeneratorLogItem implements ICleaningGeneratorLogItem {
    generationId!: string;
    at!: moment.Moment;
    cleaningPlanDate!: moment.Moment;
    message?: string | null;
    roomDescription?: string | null;
    reservationsDescription?: string | null;
    reservationsEventsDescription?: string | null;
    pluginEventsDescription?: string | null;
    orderedPluginsDescription?: string | null;
    cleaningEventsDescription?: string | null;
    cleaningsDescription?: string | null;
    hotelId?: string | null;
    hotelName?: string | null;

    constructor(data?: ICleaningGeneratorLogItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.generationId = _data["generationId"] !== undefined ? _data["generationId"] : <any>null;
            this.at = _data["at"] ? moment(_data["at"].toString()) : <any>null;
            this.cleaningPlanDate = _data["cleaningPlanDate"] ? moment(_data["cleaningPlanDate"].toString()) : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.roomDescription = _data["roomDescription"] !== undefined ? _data["roomDescription"] : <any>null;
            this.reservationsDescription = _data["reservationsDescription"] !== undefined ? _data["reservationsDescription"] : <any>null;
            this.reservationsEventsDescription = _data["reservationsEventsDescription"] !== undefined ? _data["reservationsEventsDescription"] : <any>null;
            this.pluginEventsDescription = _data["pluginEventsDescription"] !== undefined ? _data["pluginEventsDescription"] : <any>null;
            this.orderedPluginsDescription = _data["orderedPluginsDescription"] !== undefined ? _data["orderedPluginsDescription"] : <any>null;
            this.cleaningEventsDescription = _data["cleaningEventsDescription"] !== undefined ? _data["cleaningEventsDescription"] : <any>null;
            this.cleaningsDescription = _data["cleaningsDescription"] !== undefined ? _data["cleaningsDescription"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.hotelName = _data["hotelName"] !== undefined ? _data["hotelName"] : <any>null;
        }
    }

    static fromJS(data: any): CleaningGeneratorLogItem {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningGeneratorLogItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["generationId"] = this.generationId !== undefined ? this.generationId : <any>null;
        data["at"] = this.at ? this.at.toISOString() : <any>null;
        data["cleaningPlanDate"] = this.cleaningPlanDate ? this.cleaningPlanDate.toISOString() : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["roomDescription"] = this.roomDescription !== undefined ? this.roomDescription : <any>null;
        data["reservationsDescription"] = this.reservationsDescription !== undefined ? this.reservationsDescription : <any>null;
        data["reservationsEventsDescription"] = this.reservationsEventsDescription !== undefined ? this.reservationsEventsDescription : <any>null;
        data["pluginEventsDescription"] = this.pluginEventsDescription !== undefined ? this.pluginEventsDescription : <any>null;
        data["orderedPluginsDescription"] = this.orderedPluginsDescription !== undefined ? this.orderedPluginsDescription : <any>null;
        data["cleaningEventsDescription"] = this.cleaningEventsDescription !== undefined ? this.cleaningEventsDescription : <any>null;
        data["cleaningsDescription"] = this.cleaningsDescription !== undefined ? this.cleaningsDescription : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["hotelName"] = this.hotelName !== undefined ? this.hotelName : <any>null;
        return data; 
    }
}

export interface ICleaningGeneratorLogItem {
    generationId: string;
    at: moment.Moment;
    cleaningPlanDate: moment.Moment;
    message?: string | null;
    roomDescription?: string | null;
    reservationsDescription?: string | null;
    reservationsEventsDescription?: string | null;
    pluginEventsDescription?: string | null;
    orderedPluginsDescription?: string | null;
    cleaningEventsDescription?: string | null;
    cleaningsDescription?: string | null;
    hotelId?: string | null;
    hotelName?: string | null;
}

export class GetCleaningGeneratorLogsQuery implements IGetCleaningGeneratorLogsQuery {
    cleaningDate!: moment.Moment;
    generationId?: string | null;
    hotelId?: string | null;

    constructor(data?: IGetCleaningGeneratorLogsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cleaningDate = _data["cleaningDate"] ? moment(_data["cleaningDate"].toString()) : <any>null;
            this.generationId = _data["generationId"] !== undefined ? _data["generationId"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): GetCleaningGeneratorLogsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetCleaningGeneratorLogsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cleaningDate"] = this.cleaningDate ? this.cleaningDate.toISOString() : <any>null;
        data["generationId"] = this.generationId !== undefined ? this.generationId : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IGetCleaningGeneratorLogsQuery {
    cleaningDate: moment.Moment;
    generationId?: string | null;
    hotelId?: string | null;
}

export class TempCleaningPlanResult implements ITempCleaningPlanResult {
    temp2?: AutoGeneratedPlan | null;
    temp3?: CpsatAutogeneratedPlan | null;
    temp8?: RealTimeCleaningPlannerCleaningChangedMessage | null;
    temp7?: RealTimeRefreshRoomsOverviewDashboardMessage | null;
    temp9?: RealTimeUserOnDutyChangedMessage | null;
    temp10?: RealTimeTasksChangedMessage | null;
    temp11?: RealTimeCpsatCleaningPlanningProgressChangedMessage | null;
    temp12?: RealTimeCpsatCleaningPlanningFinishedMessage | null;
    temp13?: RealTimeMessagesChangedMessage | null;

    constructor(data?: ITempCleaningPlanResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.temp2 = _data["temp2"] ? AutoGeneratedPlan.fromJS(_data["temp2"]) : <any>null;
            this.temp3 = _data["temp3"] ? CpsatAutogeneratedPlan.fromJS(_data["temp3"]) : <any>null;
            this.temp8 = _data["temp8"] ? RealTimeCleaningPlannerCleaningChangedMessage.fromJS(_data["temp8"]) : <any>null;
            this.temp7 = _data["temp7"] ? RealTimeRefreshRoomsOverviewDashboardMessage.fromJS(_data["temp7"]) : <any>null;
            this.temp9 = _data["temp9"] ? RealTimeUserOnDutyChangedMessage.fromJS(_data["temp9"]) : <any>null;
            this.temp10 = _data["temp10"] ? RealTimeTasksChangedMessage.fromJS(_data["temp10"]) : <any>null;
            this.temp11 = _data["temp11"] ? RealTimeCpsatCleaningPlanningProgressChangedMessage.fromJS(_data["temp11"]) : <any>null;
            this.temp12 = _data["temp12"] ? RealTimeCpsatCleaningPlanningFinishedMessage.fromJS(_data["temp12"]) : <any>null;
            this.temp13 = _data["temp13"] ? RealTimeMessagesChangedMessage.fromJS(_data["temp13"]) : <any>null;
        }
    }

    static fromJS(data: any): TempCleaningPlanResult {
        data = typeof data === 'object' ? data : {};
        let result = new TempCleaningPlanResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["temp2"] = this.temp2 ? this.temp2.toJSON() : <any>null;
        data["temp3"] = this.temp3 ? this.temp3.toJSON() : <any>null;
        data["temp8"] = this.temp8 ? this.temp8.toJSON() : <any>null;
        data["temp7"] = this.temp7 ? this.temp7.toJSON() : <any>null;
        data["temp9"] = this.temp9 ? this.temp9.toJSON() : <any>null;
        data["temp10"] = this.temp10 ? this.temp10.toJSON() : <any>null;
        data["temp11"] = this.temp11 ? this.temp11.toJSON() : <any>null;
        data["temp12"] = this.temp12 ? this.temp12.toJSON() : <any>null;
        data["temp13"] = this.temp13 ? this.temp13.toJSON() : <any>null;
        return data; 
    }
}

export interface ITempCleaningPlanResult {
    temp2?: AutoGeneratedPlan | null;
    temp3?: CpsatAutogeneratedPlan | null;
    temp8?: RealTimeCleaningPlannerCleaningChangedMessage | null;
    temp7?: RealTimeRefreshRoomsOverviewDashboardMessage | null;
    temp9?: RealTimeUserOnDutyChangedMessage | null;
    temp10?: RealTimeTasksChangedMessage | null;
    temp11?: RealTimeCpsatCleaningPlanningProgressChangedMessage | null;
    temp12?: RealTimeCpsatCleaningPlanningFinishedMessage | null;
    temp13?: RealTimeMessagesChangedMessage | null;
}

export class AutoGeneratedPlan implements IAutoGeneratedPlan {
    hotelId?: string | null;
    cleaningContext?: CleaningPlannerContext | null;
    plannedCleanings?: Cleaning[] | null;

    constructor(data?: IAutoGeneratedPlan) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.cleaningContext = _data["cleaningContext"] ? CleaningPlannerContext.fromJS(_data["cleaningContext"]) : <any>null;
            if (Array.isArray(_data["plannedCleanings"])) {
                this.plannedCleanings = [] as any;
                for (let item of _data["plannedCleanings"])
                    this.plannedCleanings!.push(Cleaning.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AutoGeneratedPlan {
        data = typeof data === 'object' ? data : {};
        let result = new AutoGeneratedPlan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["cleaningContext"] = this.cleaningContext ? this.cleaningContext.toJSON() : <any>null;
        if (Array.isArray(this.plannedCleanings)) {
            data["plannedCleanings"] = [];
            for (let item of this.plannedCleanings)
                data["plannedCleanings"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAutoGeneratedPlan {
    hotelId?: string | null;
    cleaningContext?: CleaningPlannerContext | null;
    plannedCleanings?: Cleaning[] | null;
}

export class CleaningPlannerContext implements ICleaningPlannerContext {
    communicatingRoom?: Room[][] | null;
    timeZoneId?: string | null;
    cleanings?: Cleaning[] | null;
    attendants?: Attendant[] | null;
    geoDistances?: GeoDistances | null;
    roomDistances?: Distances | null;
    buildingDistances?: Distances | null;
    hotelStrategy?: HotelStrategy | null;

    constructor(data?: ICleaningPlannerContext) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["communicatingRoom"])) {
                this.communicatingRoom = [] as any;
                for (let item of _data["communicatingRoom"])
                    this.communicatingRoom!.push(item);
            }
            this.timeZoneId = _data["timeZoneId"] !== undefined ? _data["timeZoneId"] : <any>null;
            if (Array.isArray(_data["cleanings"])) {
                this.cleanings = [] as any;
                for (let item of _data["cleanings"])
                    this.cleanings!.push(Cleaning.fromJS(item));
            }
            if (Array.isArray(_data["attendants"])) {
                this.attendants = [] as any;
                for (let item of _data["attendants"])
                    this.attendants!.push(Attendant.fromJS(item));
            }
            this.geoDistances = _data["geoDistances"] ? GeoDistances.fromJS(_data["geoDistances"]) : <any>null;
            this.roomDistances = _data["roomDistances"] ? Distances.fromJS(_data["roomDistances"]) : <any>null;
            this.buildingDistances = _data["buildingDistances"] ? Distances.fromJS(_data["buildingDistances"]) : <any>null;
            this.hotelStrategy = _data["hotelStrategy"] ? HotelStrategy.fromJS(_data["hotelStrategy"]) : <any>null;
        }
    }

    static fromJS(data: any): CleaningPlannerContext {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningPlannerContext();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.communicatingRoom)) {
            data["communicatingRoom"] = [];
            for (let item of this.communicatingRoom)
                data["communicatingRoom"].push(item);
        }
        data["timeZoneId"] = this.timeZoneId !== undefined ? this.timeZoneId : <any>null;
        if (Array.isArray(this.cleanings)) {
            data["cleanings"] = [];
            for (let item of this.cleanings)
                data["cleanings"].push(item.toJSON());
        }
        if (Array.isArray(this.attendants)) {
            data["attendants"] = [];
            for (let item of this.attendants)
                data["attendants"].push(item.toJSON());
        }
        data["geoDistances"] = this.geoDistances ? this.geoDistances.toJSON() : <any>null;
        data["roomDistances"] = this.roomDistances ? this.roomDistances.toJSON() : <any>null;
        data["buildingDistances"] = this.buildingDistances ? this.buildingDistances.toJSON() : <any>null;
        data["hotelStrategy"] = this.hotelStrategy ? this.hotelStrategy.toJSON() : <any>null;
        return data; 
    }
}

export interface ICleaningPlannerContext {
    communicatingRoom?: Room[][] | null;
    timeZoneId?: string | null;
    cleanings?: Cleaning[] | null;
    attendants?: Attendant[] | null;
    geoDistances?: GeoDistances | null;
    roomDistances?: Distances | null;
    buildingDistances?: Distances | null;
    hotelStrategy?: HotelStrategy | null;
}

export class Room implements IRoom {
    id?: string | null;
    isDirty!: boolean;
    roomName?: string | null;
    pmsRoomName?: string | null;
    roomType?: string | null;
    address?: string | null;
    latitude?: string | null;
    longitude?: string | null;
    groupName?: string | null;
    floor?: Level | null;
    building?: Level | null;
    section?: Level | null;
    subsection?: Level | null;
    indexOnFloor!: number;

    constructor(data?: IRoom) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.isDirty = _data["isDirty"] !== undefined ? _data["isDirty"] : <any>null;
            this.roomName = _data["roomName"] !== undefined ? _data["roomName"] : <any>null;
            this.pmsRoomName = _data["pmsRoomName"] !== undefined ? _data["pmsRoomName"] : <any>null;
            this.roomType = _data["roomType"] !== undefined ? _data["roomType"] : <any>null;
            this.address = _data["address"] !== undefined ? _data["address"] : <any>null;
            this.latitude = _data["latitude"] !== undefined ? _data["latitude"] : <any>null;
            this.longitude = _data["longitude"] !== undefined ? _data["longitude"] : <any>null;
            this.groupName = _data["groupName"] !== undefined ? _data["groupName"] : <any>null;
            this.floor = _data["floor"] ? Level.fromJS(_data["floor"]) : <any>null;
            this.building = _data["building"] ? Level.fromJS(_data["building"]) : <any>null;
            this.section = _data["section"] ? Level.fromJS(_data["section"]) : <any>null;
            this.subsection = _data["subsection"] ? Level.fromJS(_data["subsection"]) : <any>null;
            this.indexOnFloor = _data["indexOnFloor"] !== undefined ? _data["indexOnFloor"] : <any>null;
        }
    }

    static fromJS(data: any): Room {
        data = typeof data === 'object' ? data : {};
        let result = new Room();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["isDirty"] = this.isDirty !== undefined ? this.isDirty : <any>null;
        data["roomName"] = this.roomName !== undefined ? this.roomName : <any>null;
        data["pmsRoomName"] = this.pmsRoomName !== undefined ? this.pmsRoomName : <any>null;
        data["roomType"] = this.roomType !== undefined ? this.roomType : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["latitude"] = this.latitude !== undefined ? this.latitude : <any>null;
        data["longitude"] = this.longitude !== undefined ? this.longitude : <any>null;
        data["groupName"] = this.groupName !== undefined ? this.groupName : <any>null;
        data["floor"] = this.floor ? this.floor.toJSON() : <any>null;
        data["building"] = this.building ? this.building.toJSON() : <any>null;
        data["section"] = this.section ? this.section.toJSON() : <any>null;
        data["subsection"] = this.subsection ? this.subsection.toJSON() : <any>null;
        data["indexOnFloor"] = this.indexOnFloor !== undefined ? this.indexOnFloor : <any>null;
        return data; 
    }
}

export interface IRoom {
    id?: string | null;
    isDirty: boolean;
    roomName?: string | null;
    pmsRoomName?: string | null;
    roomType?: string | null;
    address?: string | null;
    latitude?: string | null;
    longitude?: string | null;
    groupName?: string | null;
    floor?: Level | null;
    building?: Level | null;
    section?: Level | null;
    subsection?: Level | null;
    indexOnFloor: number;
}

export class Level implements ILevel {
    levelName?: string | null;
    roomsCount!: number;
    floorIndex!: number;

    constructor(data?: ILevel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.levelName = _data["levelName"] !== undefined ? _data["levelName"] : <any>null;
            this.roomsCount = _data["roomsCount"] !== undefined ? _data["roomsCount"] : <any>null;
            this.floorIndex = _data["floorIndex"] !== undefined ? _data["floorIndex"] : <any>null;
        }
    }

    static fromJS(data: any): Level {
        data = typeof data === 'object' ? data : {};
        let result = new Level();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["levelName"] = this.levelName !== undefined ? this.levelName : <any>null;
        data["roomsCount"] = this.roomsCount !== undefined ? this.roomsCount : <any>null;
        data["floorIndex"] = this.floorIndex !== undefined ? this.floorIndex : <any>null;
        return data; 
    }
}

export interface ILevel {
    levelName?: string | null;
    roomsCount: number;
    floorIndex: number;
}

export abstract class Activity implements IActivity {
    from!: moment.Moment;
    to!: moment.Moment;
    credits!: number;
    label?: string | null;
    tags?: string | null;
    room?: Room | null;
    levels?: string[] | null;

    constructor(data?: IActivity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.from = _data["from"] ? moment(_data["from"].toString()) : <any>null;
            this.to = _data["to"] ? moment(_data["to"].toString()) : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
            this.label = _data["label"] !== undefined ? _data["label"] : <any>null;
            this.tags = _data["tags"] !== undefined ? _data["tags"] : <any>null;
            this.room = _data["room"] ? Room.fromJS(_data["room"]) : <any>null;
            if (Array.isArray(_data["levels"])) {
                this.levels = [] as any;
                for (let item of _data["levels"])
                    this.levels!.push(item);
            }
        }
    }

    static fromJS(data: any): Activity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'Activity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["from"] = this.from ? this.from.toISOString() : <any>null;
        data["to"] = this.to ? this.to.toISOString() : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        data["label"] = this.label !== undefined ? this.label : <any>null;
        data["tags"] = this.tags !== undefined ? this.tags : <any>null;
        data["room"] = this.room ? this.room.toJSON() : <any>null;
        if (Array.isArray(this.levels)) {
            data["levels"] = [];
            for (let item of this.levels)
                data["levels"].push(item);
        }
        return data; 
    }
}

export interface IActivity {
    from: moment.Moment;
    to: moment.Moment;
    credits: number;
    label?: string | null;
    tags?: string | null;
    room?: Room | null;
    levels?: string[] | null;
}

export class Cleaning extends Activity implements ICleaning {
    id!: string;
    cleaningPluginId?: string | null;
    cleaningPluginName?: string | null;
    isActive!: boolean;
    isCustom!: boolean;
    isPostponed!: boolean;
    isChangeSheets!: boolean;
    type!: CleaningType;
    arrivalExpected!: boolean;
    plan?: CleaningPlan | null;

    constructor(data?: ICleaning) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.cleaningPluginId = _data["cleaningPluginId"] !== undefined ? _data["cleaningPluginId"] : <any>null;
            this.cleaningPluginName = _data["cleaningPluginName"] !== undefined ? _data["cleaningPluginName"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.isCustom = _data["isCustom"] !== undefined ? _data["isCustom"] : <any>null;
            this.isPostponed = _data["isPostponed"] !== undefined ? _data["isPostponed"] : <any>null;
            this.isChangeSheets = _data["isChangeSheets"] !== undefined ? _data["isChangeSheets"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.arrivalExpected = _data["arrivalExpected"] !== undefined ? _data["arrivalExpected"] : <any>null;
            this.plan = _data["plan"] ? CleaningPlan.fromJS(_data["plan"]) : <any>null;
        }
    }

    static fromJS(data: any): Cleaning {
        data = typeof data === 'object' ? data : {};
        let result = new Cleaning();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["cleaningPluginId"] = this.cleaningPluginId !== undefined ? this.cleaningPluginId : <any>null;
        data["cleaningPluginName"] = this.cleaningPluginName !== undefined ? this.cleaningPluginName : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["isCustom"] = this.isCustom !== undefined ? this.isCustom : <any>null;
        data["isPostponed"] = this.isPostponed !== undefined ? this.isPostponed : <any>null;
        data["isChangeSheets"] = this.isChangeSheets !== undefined ? this.isChangeSheets : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["arrivalExpected"] = this.arrivalExpected !== undefined ? this.arrivalExpected : <any>null;
        data["plan"] = this.plan ? this.plan.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface ICleaning extends IActivity {
    id: string;
    cleaningPluginId?: string | null;
    cleaningPluginName?: string | null;
    isActive: boolean;
    isCustom: boolean;
    isPostponed: boolean;
    isChangeSheets: boolean;
    type: CleaningType;
    arrivalExpected: boolean;
    plan?: CleaningPlan | null;
}

export enum CleaningType {
    Departure = 0,
    Stay = 1,
    Custom = 2,
    ChangeSheet = 3,
    Vacant = 4,
}

export abstract class Plan implements IPlan {
    workerUsername?: string | null;
    createdBy?: string | null;

    constructor(data?: IPlan) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.workerUsername = _data["workerUsername"] !== undefined ? _data["workerUsername"] : <any>null;
            this.createdBy = _data["createdBy"] !== undefined ? _data["createdBy"] : <any>null;
        }
    }

    static fromJS(data: any): Plan {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'Plan' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["workerUsername"] = this.workerUsername !== undefined ? this.workerUsername : <any>null;
        data["createdBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        return data; 
    }
}

export interface IPlan {
    workerUsername?: string | null;
    createdBy?: string | null;
}

export class CleaningPlan extends Plan implements ICleaningPlan {
    from!: moment.Moment;
    to!: moment.Moment;

    constructor(data?: ICleaningPlan) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.from = _data["from"] ? moment(_data["from"].toString()) : <any>null;
            this.to = _data["to"] ? moment(_data["to"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): CleaningPlan {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningPlan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["from"] = this.from ? this.from.toISOString() : <any>null;
        data["to"] = this.to ? this.to.toISOString() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface ICleaningPlan extends IPlan {
    from: moment.Moment;
    to: moment.Moment;
}

export abstract class Worker implements IWorker {
    id!: string;
    username?: string | null;
    name?: string | null;
    groupName?: string | null;
    secondWorkerUsername?: string | null;
    isSecondWorker?: boolean | null;
    currentTimeSlots?: TimeSlot[] | null;
    currentTimeSlot?: TimeSlot | null;

    constructor(data?: IWorker) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.groupName = _data["groupName"] !== undefined ? _data["groupName"] : <any>null;
            this.secondWorkerUsername = _data["secondWorkerUsername"] !== undefined ? _data["secondWorkerUsername"] : <any>null;
            this.isSecondWorker = _data["isSecondWorker"] !== undefined ? _data["isSecondWorker"] : <any>null;
            if (Array.isArray(_data["currentTimeSlots"])) {
                this.currentTimeSlots = [] as any;
                for (let item of _data["currentTimeSlots"])
                    this.currentTimeSlots!.push(TimeSlot.fromJS(item));
            }
            this.currentTimeSlot = _data["currentTimeSlot"] ? TimeSlot.fromJS(_data["currentTimeSlot"]) : <any>null;
        }
    }

    static fromJS(data: any): Worker {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'Worker' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["groupName"] = this.groupName !== undefined ? this.groupName : <any>null;
        data["secondWorkerUsername"] = this.secondWorkerUsername !== undefined ? this.secondWorkerUsername : <any>null;
        data["isSecondWorker"] = this.isSecondWorker !== undefined ? this.isSecondWorker : <any>null;
        if (Array.isArray(this.currentTimeSlots)) {
            data["currentTimeSlots"] = [];
            for (let item of this.currentTimeSlots)
                data["currentTimeSlots"].push(item.toJSON());
        }
        data["currentTimeSlot"] = this.currentTimeSlot ? this.currentTimeSlot.toJSON() : <any>null;
        return data; 
    }
}

export interface IWorker {
    id: string;
    username?: string | null;
    name?: string | null;
    groupName?: string | null;
    secondWorkerUsername?: string | null;
    isSecondWorker?: boolean | null;
    currentTimeSlots?: TimeSlot[] | null;
    currentTimeSlot?: TimeSlot | null;
}

export class Attendant extends Worker implements IAttendant {
    cleaningGroupId?: string | null;
    cleanings?: Cleaning[] | null;

    constructor(data?: IAttendant) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.cleaningGroupId = _data["cleaningGroupId"] !== undefined ? _data["cleaningGroupId"] : <any>null;
            if (Array.isArray(_data["cleanings"])) {
                this.cleanings = [] as any;
                for (let item of _data["cleanings"])
                    this.cleanings!.push(Cleaning.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Attendant {
        data = typeof data === 'object' ? data : {};
        let result = new Attendant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cleaningGroupId"] = this.cleaningGroupId !== undefined ? this.cleaningGroupId : <any>null;
        if (Array.isArray(this.cleanings)) {
            data["cleanings"] = [];
            for (let item of this.cleanings)
                data["cleanings"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAttendant extends IWorker {
    cleaningGroupId?: string | null;
    cleanings?: Cleaning[] | null;
}

export class TimeSlot implements ITimeSlot {
    from!: moment.Duration;
    to!: moment.Duration;
    maxCredits!: number;
    noOfRooms!: number;
    maxLevels!: number;
    maxDepartures!: number;
    maxStays!: number;
    isPreferred!: boolean;
    affinities?: Affinity[] | null;
    levels?: string[] | null;

    constructor(data?: ITimeSlot) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.from = _data["from"] ? moment.duration(_data["from"].toString()) : <any>null;
            this.to = _data["to"] ? moment.duration(_data["to"].toString()) : <any>null;
            this.maxCredits = _data["maxCredits"] !== undefined ? _data["maxCredits"] : <any>null;
            this.noOfRooms = _data["noOfRooms"] !== undefined ? _data["noOfRooms"] : <any>null;
            this.maxLevels = _data["maxLevels"] !== undefined ? _data["maxLevels"] : <any>null;
            this.maxDepartures = _data["maxDepartures"] !== undefined ? _data["maxDepartures"] : <any>null;
            this.maxStays = _data["maxStays"] !== undefined ? _data["maxStays"] : <any>null;
            this.isPreferred = _data["isPreferred"] !== undefined ? _data["isPreferred"] : <any>null;
            if (Array.isArray(_data["affinities"])) {
                this.affinities = [] as any;
                for (let item of _data["affinities"])
                    this.affinities!.push(Affinity.fromJS(item));
            }
            if (Array.isArray(_data["levels"])) {
                this.levels = [] as any;
                for (let item of _data["levels"])
                    this.levels!.push(item);
            }
        }
    }

    static fromJS(data: any): TimeSlot {
        data = typeof data === 'object' ? data : {};
        let result = new TimeSlot();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["from"] = this.from ? this.from.format('d.hh:mm:ss.SS', { trim: false }) : <any>null;
        data["to"] = this.to ? this.to.format('d.hh:mm:ss.SS', { trim: false }) : <any>null;
        data["maxCredits"] = this.maxCredits !== undefined ? this.maxCredits : <any>null;
        data["noOfRooms"] = this.noOfRooms !== undefined ? this.noOfRooms : <any>null;
        data["maxLevels"] = this.maxLevels !== undefined ? this.maxLevels : <any>null;
        data["maxDepartures"] = this.maxDepartures !== undefined ? this.maxDepartures : <any>null;
        data["maxStays"] = this.maxStays !== undefined ? this.maxStays : <any>null;
        data["isPreferred"] = this.isPreferred !== undefined ? this.isPreferred : <any>null;
        if (Array.isArray(this.affinities)) {
            data["affinities"] = [];
            for (let item of this.affinities)
                data["affinities"].push(item.toJSON());
        }
        if (Array.isArray(this.levels)) {
            data["levels"] = [];
            for (let item of this.levels)
                data["levels"].push(item);
        }
        return data; 
    }
}

export interface ITimeSlot {
    from: moment.Duration;
    to: moment.Duration;
    maxCredits: number;
    noOfRooms: number;
    maxLevels: number;
    maxDepartures: number;
    maxStays: number;
    isPreferred: boolean;
    affinities?: Affinity[] | null;
    levels?: string[] | null;
}

export class Affinity implements IAffinity {
    affinityType!: AffinityType;
    building?: string | null;
    room?: string | null;
    roomType?: string | null;
    level?: string | null;
    floor?: string | null;
    section?: string | null;
    subSection?: string | null;
    cleaningType?: string | null;

    constructor(data?: IAffinity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.affinityType = _data["affinityType"] !== undefined ? _data["affinityType"] : <any>null;
            this.building = _data["building"] !== undefined ? _data["building"] : <any>null;
            this.room = _data["room"] !== undefined ? _data["room"] : <any>null;
            this.roomType = _data["roomType"] !== undefined ? _data["roomType"] : <any>null;
            this.level = _data["level"] !== undefined ? _data["level"] : <any>null;
            this.floor = _data["floor"] !== undefined ? _data["floor"] : <any>null;
            this.section = _data["section"] !== undefined ? _data["section"] : <any>null;
            this.subSection = _data["subSection"] !== undefined ? _data["subSection"] : <any>null;
            this.cleaningType = _data["cleaningType"] !== undefined ? _data["cleaningType"] : <any>null;
        }
    }

    static fromJS(data: any): Affinity {
        data = typeof data === 'object' ? data : {};
        let result = new Affinity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["affinityType"] = this.affinityType !== undefined ? this.affinityType : <any>null;
        data["building"] = this.building !== undefined ? this.building : <any>null;
        data["room"] = this.room !== undefined ? this.room : <any>null;
        data["roomType"] = this.roomType !== undefined ? this.roomType : <any>null;
        data["level"] = this.level !== undefined ? this.level : <any>null;
        data["floor"] = this.floor !== undefined ? this.floor : <any>null;
        data["section"] = this.section !== undefined ? this.section : <any>null;
        data["subSection"] = this.subSection !== undefined ? this.subSection : <any>null;
        data["cleaningType"] = this.cleaningType !== undefined ? this.cleaningType : <any>null;
        return data; 
    }
}

export interface IAffinity {
    affinityType: AffinityType;
    building?: string | null;
    room?: string | null;
    roomType?: string | null;
    level?: string | null;
    floor?: string | null;
    section?: string | null;
    subSection?: string | null;
    cleaningType?: string | null;
}

export enum AffinityType {
    UNKNOWN = 0,
    BUILDING = 1,
    FLOOR = 2,
    FLOOR_SECTION = 3,
    FLOOR_SUB_SECTION = 4,
}

export class GeoDistances implements IGeoDistances {
    needRefresh!: boolean;
    useLocations!: boolean;
    useDistances!: boolean;

    constructor(data?: IGeoDistances) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.needRefresh = _data["needRefresh"] !== undefined ? _data["needRefresh"] : <any>null;
            this.useLocations = _data["useLocations"] !== undefined ? _data["useLocations"] : <any>null;
            this.useDistances = _data["useDistances"] !== undefined ? _data["useDistances"] : <any>null;
        }
    }

    static fromJS(data: any): GeoDistances {
        data = typeof data === 'object' ? data : {};
        let result = new GeoDistances();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["needRefresh"] = this.needRefresh !== undefined ? this.needRefresh : <any>null;
        data["useLocations"] = this.useLocations !== undefined ? this.useLocations : <any>null;
        data["useDistances"] = this.useDistances !== undefined ? this.useDistances : <any>null;
        return data; 
    }
}

export interface IGeoDistances {
    needRefresh: boolean;
    useLocations: boolean;
    useDistances: boolean;
}

export class Distances implements IDistances {
    needRefresh!: boolean;
    useDistances!: boolean;

    constructor(data?: IDistances) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.needRefresh = _data["needRefresh"] !== undefined ? _data["needRefresh"] : <any>null;
            this.useDistances = _data["useDistances"] !== undefined ? _data["useDistances"] : <any>null;
        }
    }

    static fromJS(data: any): Distances {
        data = typeof data === 'object' ? data : {};
        let result = new Distances();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["needRefresh"] = this.needRefresh !== undefined ? this.needRefresh : <any>null;
        data["useDistances"] = this.useDistances !== undefined ? this.useDistances : <any>null;
        return data; 
    }
}

export interface IDistances {
    needRefresh: boolean;
    useDistances: boolean;
}

export class HotelStrategy implements IHotelStrategy {
    cpSat?: CPSat | null;
    defaultAttendantStartTime!: moment.Duration;
    defaultAttendantEndTime!: moment.Duration;
    defaultMaxCredits!: number;
    reserveBetweenCleanings!: number;
    travelReserve!: number;

    constructor(data?: IHotelStrategy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cpSat = _data["cpSat"] ? CPSat.fromJS(_data["cpSat"]) : <any>null;
            this.defaultAttendantStartTime = _data["defaultAttendantStartTime"] ? moment.duration(_data["defaultAttendantStartTime"].toString()) : <any>null;
            this.defaultAttendantEndTime = _data["defaultAttendantEndTime"] ? moment.duration(_data["defaultAttendantEndTime"].toString()) : <any>null;
            this.defaultMaxCredits = _data["defaultMaxCredits"] !== undefined ? _data["defaultMaxCredits"] : <any>null;
            this.reserveBetweenCleanings = _data["reserveBetweenCleanings"] !== undefined ? _data["reserveBetweenCleanings"] : <any>null;
            this.travelReserve = _data["travelReserve"] !== undefined ? _data["travelReserve"] : <any>null;
        }
    }

    static fromJS(data: any): HotelStrategy {
        data = typeof data === 'object' ? data : {};
        let result = new HotelStrategy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cpSat"] = this.cpSat ? this.cpSat.toJSON() : <any>null;
        data["defaultAttendantStartTime"] = this.defaultAttendantStartTime ? this.defaultAttendantStartTime.format('d.hh:mm:ss.SS', { trim: false }) : <any>null;
        data["defaultAttendantEndTime"] = this.defaultAttendantEndTime ? this.defaultAttendantEndTime.format('d.hh:mm:ss.SS', { trim: false }) : <any>null;
        data["defaultMaxCredits"] = this.defaultMaxCredits !== undefined ? this.defaultMaxCredits : <any>null;
        data["reserveBetweenCleanings"] = this.reserveBetweenCleanings !== undefined ? this.reserveBetweenCleanings : <any>null;
        data["travelReserve"] = this.travelReserve !== undefined ? this.travelReserve : <any>null;
        return data; 
    }
}

export interface IHotelStrategy {
    cpSat?: CPSat | null;
    defaultAttendantStartTime: moment.Duration;
    defaultAttendantEndTime: moment.Duration;
    defaultMaxCredits: number;
    reserveBetweenCleanings: number;
    travelReserve: number;
}

export class CPSat implements ICPSat {
    solutionResult?: CPSatSolutionInformation | null;
    usePrePlan!: boolean;
    completePrePlan!: boolean;
    communicatingRooms?: Room[][] | null;
    preferredLevelsAreExclusive!: boolean;
    minCreditsForMultipleCleanersCleaning!: number;
    minRooms!: number;
    maxRooms!: number;
    minCredits!: number;
    maxCredits!: number;
    maxTravelTime!: number;
    maxBuildingTravelTime!: number;
    maxShiftFloorAllowed!: number;
    maxBuildingToBuildingDistanceAllowed!: number;
    maxNumberOfBuildingsPerAttendant!: number;
    maxNumberOfLevelsPerAttendant!: number;
    epsilonCredits!: number;
    epsilonRooms!: number;
    weightTravelTime!: number;
    weightLevelChange!: number;
    limitAttendantsPerLevel!: boolean;
    weightCredits!: number;
    weightRoomsCleaned!: number;
    weightFloorsCompleted!: number;
    awardLevel!: number;
    awardRoom!: number;
    awardBuilding!: number;
    weightLevelAward!: number;
    weightRoomAward!: number;
    weightBuildingAward!: number;
    weightMinimizeAttendants!: number;
    solverRunTime!: number;
    useTargetMode!: boolean;
    targetModeMinimizeAttendants!: boolean;
    targetModeWeightMaxedRooms!: number;
    targetModeWeightMaxedCredits!: number;
    balanceStayDepartMode!: boolean;
    buildingsDistanceMatrix?: string | null;
    levelsDistanceMatrix?: string | null;
    sortBuildingIntervals!: boolean;
    buildingDistanceMultiplier!: number;
    weightepsilonStayDepart!: number;
    maxDepartures!: number;
    maxStays!: number;
    maxDeparturesReducesCredits!: boolean;
    maxDeparturesEquivalentCredits!: number;
    maxDeparturesReductionThreshold!: number;
    maxStaysIncreasesCredits!: boolean;
    maxStaysEquivalentCredits!: number;
    maxStaysIncreaseThreshold!: number;
    levelMovementReducesCredits!: boolean;
    levelMovementEquivalentCredits!: number;
    levelMovementReductionThreshold!: number;
    buildingMovementReducesCredits!: boolean;
    buildingMovementEquivalentCredits!: number;
    cleaningPriorities?: string | null;
    otherCleaningPriorities?: string | null;
    strategy?: string | null;
    minutesPerCredit!: number;

    constructor(data?: ICPSat) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.solutionResult = _data["solutionResult"] ? CPSatSolutionInformation.fromJS(_data["solutionResult"]) : <any>null;
            this.usePrePlan = _data["usePrePlan"] !== undefined ? _data["usePrePlan"] : <any>null;
            this.completePrePlan = _data["completePrePlan"] !== undefined ? _data["completePrePlan"] : <any>null;
            if (Array.isArray(_data["communicatingRooms"])) {
                this.communicatingRooms = [] as any;
                for (let item of _data["communicatingRooms"])
                    this.communicatingRooms!.push(item);
            }
            this.preferredLevelsAreExclusive = _data["preferredLevelsAreExclusive"] !== undefined ? _data["preferredLevelsAreExclusive"] : <any>null;
            this.minCreditsForMultipleCleanersCleaning = _data["minCreditsForMultipleCleanersCleaning"] !== undefined ? _data["minCreditsForMultipleCleanersCleaning"] : <any>null;
            this.minRooms = _data["minRooms"] !== undefined ? _data["minRooms"] : <any>null;
            this.maxRooms = _data["maxRooms"] !== undefined ? _data["maxRooms"] : <any>null;
            this.minCredits = _data["minCredits"] !== undefined ? _data["minCredits"] : <any>null;
            this.maxCredits = _data["maxCredits"] !== undefined ? _data["maxCredits"] : <any>null;
            this.maxTravelTime = _data["maxTravelTime"] !== undefined ? _data["maxTravelTime"] : <any>null;
            this.maxBuildingTravelTime = _data["maxBuildingTravelTime"] !== undefined ? _data["maxBuildingTravelTime"] : <any>null;
            this.maxShiftFloorAllowed = _data["maxShiftFloorAllowed"] !== undefined ? _data["maxShiftFloorAllowed"] : <any>null;
            this.maxBuildingToBuildingDistanceAllowed = _data["maxBuildingToBuildingDistanceAllowed"] !== undefined ? _data["maxBuildingToBuildingDistanceAllowed"] : <any>null;
            this.maxNumberOfBuildingsPerAttendant = _data["maxNumberOfBuildingsPerAttendant"] !== undefined ? _data["maxNumberOfBuildingsPerAttendant"] : <any>null;
            this.maxNumberOfLevelsPerAttendant = _data["maxNumberOfLevelsPerAttendant"] !== undefined ? _data["maxNumberOfLevelsPerAttendant"] : <any>null;
            this.epsilonCredits = _data["epsilonCredits"] !== undefined ? _data["epsilonCredits"] : <any>null;
            this.epsilonRooms = _data["epsilonRooms"] !== undefined ? _data["epsilonRooms"] : <any>null;
            this.weightTravelTime = _data["weightTravelTime"] !== undefined ? _data["weightTravelTime"] : <any>null;
            this.weightLevelChange = _data["weightLevelChange"] !== undefined ? _data["weightLevelChange"] : <any>null;
            this.limitAttendantsPerLevel = _data["limitAttendantsPerLevel"] !== undefined ? _data["limitAttendantsPerLevel"] : <any>null;
            this.weightCredits = _data["weightCredits"] !== undefined ? _data["weightCredits"] : <any>null;
            this.weightRoomsCleaned = _data["weightRoomsCleaned"] !== undefined ? _data["weightRoomsCleaned"] : <any>null;
            this.weightFloorsCompleted = _data["weightFloorsCompleted"] !== undefined ? _data["weightFloorsCompleted"] : <any>null;
            this.awardLevel = _data["awardLevel"] !== undefined ? _data["awardLevel"] : <any>null;
            this.awardRoom = _data["awardRoom"] !== undefined ? _data["awardRoom"] : <any>null;
            this.awardBuilding = _data["awardBuilding"] !== undefined ? _data["awardBuilding"] : <any>null;
            this.weightLevelAward = _data["weightLevelAward"] !== undefined ? _data["weightLevelAward"] : <any>null;
            this.weightRoomAward = _data["weightRoomAward"] !== undefined ? _data["weightRoomAward"] : <any>null;
            this.weightBuildingAward = _data["weightBuildingAward"] !== undefined ? _data["weightBuildingAward"] : <any>null;
            this.weightMinimizeAttendants = _data["weightMinimizeAttendants"] !== undefined ? _data["weightMinimizeAttendants"] : <any>null;
            this.solverRunTime = _data["solverRunTime"] !== undefined ? _data["solverRunTime"] : <any>null;
            this.useTargetMode = _data["useTargetMode"] !== undefined ? _data["useTargetMode"] : <any>null;
            this.targetModeMinimizeAttendants = _data["targetModeMinimizeAttendants"] !== undefined ? _data["targetModeMinimizeAttendants"] : <any>null;
            this.targetModeWeightMaxedRooms = _data["targetModeWeightMaxedRooms"] !== undefined ? _data["targetModeWeightMaxedRooms"] : <any>null;
            this.targetModeWeightMaxedCredits = _data["targetModeWeightMaxedCredits"] !== undefined ? _data["targetModeWeightMaxedCredits"] : <any>null;
            this.balanceStayDepartMode = _data["balanceStayDepartMode"] !== undefined ? _data["balanceStayDepartMode"] : <any>null;
            this.buildingsDistanceMatrix = _data["buildingsDistanceMatrix"] !== undefined ? _data["buildingsDistanceMatrix"] : <any>null;
            this.levelsDistanceMatrix = _data["levelsDistanceMatrix"] !== undefined ? _data["levelsDistanceMatrix"] : <any>null;
            this.sortBuildingIntervals = _data["sortBuildingIntervals"] !== undefined ? _data["sortBuildingIntervals"] : <any>null;
            this.buildingDistanceMultiplier = _data["buildingDistanceMultiplier"] !== undefined ? _data["buildingDistanceMultiplier"] : <any>null;
            this.weightepsilonStayDepart = _data["weightepsilonStayDepart"] !== undefined ? _data["weightepsilonStayDepart"] : <any>null;
            this.maxDepartures = _data["maxDepartures"] !== undefined ? _data["maxDepartures"] : <any>null;
            this.maxStays = _data["maxStays"] !== undefined ? _data["maxStays"] : <any>null;
            this.maxDeparturesReducesCredits = _data["maxDeparturesReducesCredits"] !== undefined ? _data["maxDeparturesReducesCredits"] : <any>null;
            this.maxDeparturesEquivalentCredits = _data["maxDeparturesEquivalentCredits"] !== undefined ? _data["maxDeparturesEquivalentCredits"] : <any>null;
            this.maxDeparturesReductionThreshold = _data["maxDeparturesReductionThreshold"] !== undefined ? _data["maxDeparturesReductionThreshold"] : <any>null;
            this.maxStaysIncreasesCredits = _data["maxStaysIncreasesCredits"] !== undefined ? _data["maxStaysIncreasesCredits"] : <any>null;
            this.maxStaysEquivalentCredits = _data["maxStaysEquivalentCredits"] !== undefined ? _data["maxStaysEquivalentCredits"] : <any>null;
            this.maxStaysIncreaseThreshold = _data["maxStaysIncreaseThreshold"] !== undefined ? _data["maxStaysIncreaseThreshold"] : <any>null;
            this.levelMovementReducesCredits = _data["levelMovementReducesCredits"] !== undefined ? _data["levelMovementReducesCredits"] : <any>null;
            this.levelMovementEquivalentCredits = _data["levelMovementEquivalentCredits"] !== undefined ? _data["levelMovementEquivalentCredits"] : <any>null;
            this.levelMovementReductionThreshold = _data["levelMovementReductionThreshold"] !== undefined ? _data["levelMovementReductionThreshold"] : <any>null;
            this.buildingMovementReducesCredits = _data["buildingMovementReducesCredits"] !== undefined ? _data["buildingMovementReducesCredits"] : <any>null;
            this.buildingMovementEquivalentCredits = _data["buildingMovementEquivalentCredits"] !== undefined ? _data["buildingMovementEquivalentCredits"] : <any>null;
            this.cleaningPriorities = _data["cleaningPriorities"] !== undefined ? _data["cleaningPriorities"] : <any>null;
            this.otherCleaningPriorities = _data["otherCleaningPriorities"] !== undefined ? _data["otherCleaningPriorities"] : <any>null;
            this.strategy = _data["strategy"] !== undefined ? _data["strategy"] : <any>null;
            this.minutesPerCredit = _data["minutesPerCredit"] !== undefined ? _data["minutesPerCredit"] : <any>null;
        }
    }

    static fromJS(data: any): CPSat {
        data = typeof data === 'object' ? data : {};
        let result = new CPSat();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["solutionResult"] = this.solutionResult ? this.solutionResult.toJSON() : <any>null;
        data["usePrePlan"] = this.usePrePlan !== undefined ? this.usePrePlan : <any>null;
        data["completePrePlan"] = this.completePrePlan !== undefined ? this.completePrePlan : <any>null;
        if (Array.isArray(this.communicatingRooms)) {
            data["communicatingRooms"] = [];
            for (let item of this.communicatingRooms)
                data["communicatingRooms"].push(item);
        }
        data["preferredLevelsAreExclusive"] = this.preferredLevelsAreExclusive !== undefined ? this.preferredLevelsAreExclusive : <any>null;
        data["minCreditsForMultipleCleanersCleaning"] = this.minCreditsForMultipleCleanersCleaning !== undefined ? this.minCreditsForMultipleCleanersCleaning : <any>null;
        data["minRooms"] = this.minRooms !== undefined ? this.minRooms : <any>null;
        data["maxRooms"] = this.maxRooms !== undefined ? this.maxRooms : <any>null;
        data["minCredits"] = this.minCredits !== undefined ? this.minCredits : <any>null;
        data["maxCredits"] = this.maxCredits !== undefined ? this.maxCredits : <any>null;
        data["maxTravelTime"] = this.maxTravelTime !== undefined ? this.maxTravelTime : <any>null;
        data["maxBuildingTravelTime"] = this.maxBuildingTravelTime !== undefined ? this.maxBuildingTravelTime : <any>null;
        data["maxShiftFloorAllowed"] = this.maxShiftFloorAllowed !== undefined ? this.maxShiftFloorAllowed : <any>null;
        data["maxBuildingToBuildingDistanceAllowed"] = this.maxBuildingToBuildingDistanceAllowed !== undefined ? this.maxBuildingToBuildingDistanceAllowed : <any>null;
        data["maxNumberOfBuildingsPerAttendant"] = this.maxNumberOfBuildingsPerAttendant !== undefined ? this.maxNumberOfBuildingsPerAttendant : <any>null;
        data["maxNumberOfLevelsPerAttendant"] = this.maxNumberOfLevelsPerAttendant !== undefined ? this.maxNumberOfLevelsPerAttendant : <any>null;
        data["epsilonCredits"] = this.epsilonCredits !== undefined ? this.epsilonCredits : <any>null;
        data["epsilonRooms"] = this.epsilonRooms !== undefined ? this.epsilonRooms : <any>null;
        data["weightTravelTime"] = this.weightTravelTime !== undefined ? this.weightTravelTime : <any>null;
        data["weightLevelChange"] = this.weightLevelChange !== undefined ? this.weightLevelChange : <any>null;
        data["limitAttendantsPerLevel"] = this.limitAttendantsPerLevel !== undefined ? this.limitAttendantsPerLevel : <any>null;
        data["weightCredits"] = this.weightCredits !== undefined ? this.weightCredits : <any>null;
        data["weightRoomsCleaned"] = this.weightRoomsCleaned !== undefined ? this.weightRoomsCleaned : <any>null;
        data["weightFloorsCompleted"] = this.weightFloorsCompleted !== undefined ? this.weightFloorsCompleted : <any>null;
        data["awardLevel"] = this.awardLevel !== undefined ? this.awardLevel : <any>null;
        data["awardRoom"] = this.awardRoom !== undefined ? this.awardRoom : <any>null;
        data["awardBuilding"] = this.awardBuilding !== undefined ? this.awardBuilding : <any>null;
        data["weightLevelAward"] = this.weightLevelAward !== undefined ? this.weightLevelAward : <any>null;
        data["weightRoomAward"] = this.weightRoomAward !== undefined ? this.weightRoomAward : <any>null;
        data["weightBuildingAward"] = this.weightBuildingAward !== undefined ? this.weightBuildingAward : <any>null;
        data["weightMinimizeAttendants"] = this.weightMinimizeAttendants !== undefined ? this.weightMinimizeAttendants : <any>null;
        data["solverRunTime"] = this.solverRunTime !== undefined ? this.solverRunTime : <any>null;
        data["useTargetMode"] = this.useTargetMode !== undefined ? this.useTargetMode : <any>null;
        data["targetModeMinimizeAttendants"] = this.targetModeMinimizeAttendants !== undefined ? this.targetModeMinimizeAttendants : <any>null;
        data["targetModeWeightMaxedRooms"] = this.targetModeWeightMaxedRooms !== undefined ? this.targetModeWeightMaxedRooms : <any>null;
        data["targetModeWeightMaxedCredits"] = this.targetModeWeightMaxedCredits !== undefined ? this.targetModeWeightMaxedCredits : <any>null;
        data["balanceStayDepartMode"] = this.balanceStayDepartMode !== undefined ? this.balanceStayDepartMode : <any>null;
        data["buildingsDistanceMatrix"] = this.buildingsDistanceMatrix !== undefined ? this.buildingsDistanceMatrix : <any>null;
        data["levelsDistanceMatrix"] = this.levelsDistanceMatrix !== undefined ? this.levelsDistanceMatrix : <any>null;
        data["sortBuildingIntervals"] = this.sortBuildingIntervals !== undefined ? this.sortBuildingIntervals : <any>null;
        data["buildingDistanceMultiplier"] = this.buildingDistanceMultiplier !== undefined ? this.buildingDistanceMultiplier : <any>null;
        data["weightepsilonStayDepart"] = this.weightepsilonStayDepart !== undefined ? this.weightepsilonStayDepart : <any>null;
        data["maxDepartures"] = this.maxDepartures !== undefined ? this.maxDepartures : <any>null;
        data["maxStays"] = this.maxStays !== undefined ? this.maxStays : <any>null;
        data["maxDeparturesReducesCredits"] = this.maxDeparturesReducesCredits !== undefined ? this.maxDeparturesReducesCredits : <any>null;
        data["maxDeparturesEquivalentCredits"] = this.maxDeparturesEquivalentCredits !== undefined ? this.maxDeparturesEquivalentCredits : <any>null;
        data["maxDeparturesReductionThreshold"] = this.maxDeparturesReductionThreshold !== undefined ? this.maxDeparturesReductionThreshold : <any>null;
        data["maxStaysIncreasesCredits"] = this.maxStaysIncreasesCredits !== undefined ? this.maxStaysIncreasesCredits : <any>null;
        data["maxStaysEquivalentCredits"] = this.maxStaysEquivalentCredits !== undefined ? this.maxStaysEquivalentCredits : <any>null;
        data["maxStaysIncreaseThreshold"] = this.maxStaysIncreaseThreshold !== undefined ? this.maxStaysIncreaseThreshold : <any>null;
        data["levelMovementReducesCredits"] = this.levelMovementReducesCredits !== undefined ? this.levelMovementReducesCredits : <any>null;
        data["levelMovementEquivalentCredits"] = this.levelMovementEquivalentCredits !== undefined ? this.levelMovementEquivalentCredits : <any>null;
        data["levelMovementReductionThreshold"] = this.levelMovementReductionThreshold !== undefined ? this.levelMovementReductionThreshold : <any>null;
        data["buildingMovementReducesCredits"] = this.buildingMovementReducesCredits !== undefined ? this.buildingMovementReducesCredits : <any>null;
        data["buildingMovementEquivalentCredits"] = this.buildingMovementEquivalentCredits !== undefined ? this.buildingMovementEquivalentCredits : <any>null;
        data["cleaningPriorities"] = this.cleaningPriorities !== undefined ? this.cleaningPriorities : <any>null;
        data["otherCleaningPriorities"] = this.otherCleaningPriorities !== undefined ? this.otherCleaningPriorities : <any>null;
        data["strategy"] = this.strategy !== undefined ? this.strategy : <any>null;
        data["minutesPerCredit"] = this.minutesPerCredit !== undefined ? this.minutesPerCredit : <any>null;
        return data; 
    }
}

export interface ICPSat {
    solutionResult?: CPSatSolutionInformation | null;
    usePrePlan: boolean;
    completePrePlan: boolean;
    communicatingRooms?: Room[][] | null;
    preferredLevelsAreExclusive: boolean;
    minCreditsForMultipleCleanersCleaning: number;
    minRooms: number;
    maxRooms: number;
    minCredits: number;
    maxCredits: number;
    maxTravelTime: number;
    maxBuildingTravelTime: number;
    maxShiftFloorAllowed: number;
    maxBuildingToBuildingDistanceAllowed: number;
    maxNumberOfBuildingsPerAttendant: number;
    maxNumberOfLevelsPerAttendant: number;
    epsilonCredits: number;
    epsilonRooms: number;
    weightTravelTime: number;
    weightLevelChange: number;
    limitAttendantsPerLevel: boolean;
    weightCredits: number;
    weightRoomsCleaned: number;
    weightFloorsCompleted: number;
    awardLevel: number;
    awardRoom: number;
    awardBuilding: number;
    weightLevelAward: number;
    weightRoomAward: number;
    weightBuildingAward: number;
    weightMinimizeAttendants: number;
    solverRunTime: number;
    useTargetMode: boolean;
    targetModeMinimizeAttendants: boolean;
    targetModeWeightMaxedRooms: number;
    targetModeWeightMaxedCredits: number;
    balanceStayDepartMode: boolean;
    buildingsDistanceMatrix?: string | null;
    levelsDistanceMatrix?: string | null;
    sortBuildingIntervals: boolean;
    buildingDistanceMultiplier: number;
    weightepsilonStayDepart: number;
    maxDepartures: number;
    maxStays: number;
    maxDeparturesReducesCredits: boolean;
    maxDeparturesEquivalentCredits: number;
    maxDeparturesReductionThreshold: number;
    maxStaysIncreasesCredits: boolean;
    maxStaysEquivalentCredits: number;
    maxStaysIncreaseThreshold: number;
    levelMovementReducesCredits: boolean;
    levelMovementEquivalentCredits: number;
    levelMovementReductionThreshold: number;
    buildingMovementReducesCredits: boolean;
    buildingMovementEquivalentCredits: number;
    cleaningPriorities?: string | null;
    otherCleaningPriorities?: string | null;
    strategy?: string | null;
    minutesPerCredit: number;
}

export class CPSatSolutionInformation implements ICPSatSolutionInformation {
    solverInformation?: string[] | null;
    roomcheckingInformation?: string[] | null;
    objectiveComponent?: ObjectiveComponents | null;
    visualization?: Visualization | null;

    constructor(data?: ICPSatSolutionInformation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["solverInformation"])) {
                this.solverInformation = [] as any;
                for (let item of _data["solverInformation"])
                    this.solverInformation!.push(item);
            }
            if (Array.isArray(_data["roomcheckingInformation"])) {
                this.roomcheckingInformation = [] as any;
                for (let item of _data["roomcheckingInformation"])
                    this.roomcheckingInformation!.push(item);
            }
            this.objectiveComponent = _data["objectiveComponent"] ? ObjectiveComponents.fromJS(_data["objectiveComponent"]) : <any>null;
            this.visualization = _data["visualization"] ? Visualization.fromJS(_data["visualization"]) : <any>null;
        }
    }

    static fromJS(data: any): CPSatSolutionInformation {
        data = typeof data === 'object' ? data : {};
        let result = new CPSatSolutionInformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.solverInformation)) {
            data["solverInformation"] = [];
            for (let item of this.solverInformation)
                data["solverInformation"].push(item);
        }
        if (Array.isArray(this.roomcheckingInformation)) {
            data["roomcheckingInformation"] = [];
            for (let item of this.roomcheckingInformation)
                data["roomcheckingInformation"].push(item);
        }
        data["objectiveComponent"] = this.objectiveComponent ? this.objectiveComponent.toJSON() : <any>null;
        data["visualization"] = this.visualization ? this.visualization.toJSON() : <any>null;
        return data; 
    }
}

export interface ICPSatSolutionInformation {
    solverInformation?: string[] | null;
    roomcheckingInformation?: string[] | null;
    objectiveComponent?: ObjectiveComponents | null;
    visualization?: Visualization | null;
}

export class ObjectiveComponents implements IObjectiveComponents {
    attendant?: Attendant | null;
    floortravel!: number;
    buildingtravel!: number;
    credits!: number;
    cleaning_jobs?: CleaningInterval[] | null;
    room_awards!: number;
    epsilonCredits!: number;
    epsilonCleaningRooms!: number;
    stays_cleaned!: number;
    departs_cleaned!: number;
    epsilonCleaningStays!: number;
    epsilonCleaningDeparts!: number;
    attendant_literal!: number;
    weight_minimize_attendants!: number;
    weight_epsilon_credits!: number;
    weight_epsilon_rooms!: number;
    weight_epsilon_stay_depart!: number;
    weight_travel_time!: number;
    weight_credits!: number;
    weight_rooms_cleaned!: number;
    weight_building_award!: number;
    weight_level_award!: number;
    weight_room_award!: number;

    constructor(data?: IObjectiveComponents) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.attendant = _data["attendant"] ? Attendant.fromJS(_data["attendant"]) : <any>null;
            this.floortravel = _data["floortravel"] !== undefined ? _data["floortravel"] : <any>null;
            this.buildingtravel = _data["buildingtravel"] !== undefined ? _data["buildingtravel"] : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
            if (Array.isArray(_data["cleaning_jobs"])) {
                this.cleaning_jobs = [] as any;
                for (let item of _data["cleaning_jobs"])
                    this.cleaning_jobs!.push(CleaningInterval.fromJS(item));
            }
            this.room_awards = _data["room_awards"] !== undefined ? _data["room_awards"] : <any>null;
            this.epsilonCredits = _data["epsilonCredits"] !== undefined ? _data["epsilonCredits"] : <any>null;
            this.epsilonCleaningRooms = _data["epsilonCleaningRooms"] !== undefined ? _data["epsilonCleaningRooms"] : <any>null;
            this.stays_cleaned = _data["stays_cleaned"] !== undefined ? _data["stays_cleaned"] : <any>null;
            this.departs_cleaned = _data["departs_cleaned"] !== undefined ? _data["departs_cleaned"] : <any>null;
            this.epsilonCleaningStays = _data["epsilonCleaningStays"] !== undefined ? _data["epsilonCleaningStays"] : <any>null;
            this.epsilonCleaningDeparts = _data["epsilonCleaningDeparts"] !== undefined ? _data["epsilonCleaningDeparts"] : <any>null;
            this.attendant_literal = _data["attendant_literal"] !== undefined ? _data["attendant_literal"] : <any>null;
            this.weight_minimize_attendants = _data["weight_minimize_attendants"] !== undefined ? _data["weight_minimize_attendants"] : <any>null;
            this.weight_epsilon_credits = _data["weight_epsilon_credits"] !== undefined ? _data["weight_epsilon_credits"] : <any>null;
            this.weight_epsilon_rooms = _data["weight_epsilon_rooms"] !== undefined ? _data["weight_epsilon_rooms"] : <any>null;
            this.weight_epsilon_stay_depart = _data["weight_epsilon_stay_depart"] !== undefined ? _data["weight_epsilon_stay_depart"] : <any>null;
            this.weight_travel_time = _data["weight_travel_time"] !== undefined ? _data["weight_travel_time"] : <any>null;
            this.weight_credits = _data["weight_credits"] !== undefined ? _data["weight_credits"] : <any>null;
            this.weight_rooms_cleaned = _data["weight_rooms_cleaned"] !== undefined ? _data["weight_rooms_cleaned"] : <any>null;
            this.weight_building_award = _data["weight_building_award"] !== undefined ? _data["weight_building_award"] : <any>null;
            this.weight_level_award = _data["weight_level_award"] !== undefined ? _data["weight_level_award"] : <any>null;
            this.weight_room_award = _data["weight_room_award"] !== undefined ? _data["weight_room_award"] : <any>null;
        }
    }

    static fromJS(data: any): ObjectiveComponents {
        data = typeof data === 'object' ? data : {};
        let result = new ObjectiveComponents();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attendant"] = this.attendant ? this.attendant.toJSON() : <any>null;
        data["floortravel"] = this.floortravel !== undefined ? this.floortravel : <any>null;
        data["buildingtravel"] = this.buildingtravel !== undefined ? this.buildingtravel : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        if (Array.isArray(this.cleaning_jobs)) {
            data["cleaning_jobs"] = [];
            for (let item of this.cleaning_jobs)
                data["cleaning_jobs"].push(item.toJSON());
        }
        data["room_awards"] = this.room_awards !== undefined ? this.room_awards : <any>null;
        data["epsilonCredits"] = this.epsilonCredits !== undefined ? this.epsilonCredits : <any>null;
        data["epsilonCleaningRooms"] = this.epsilonCleaningRooms !== undefined ? this.epsilonCleaningRooms : <any>null;
        data["stays_cleaned"] = this.stays_cleaned !== undefined ? this.stays_cleaned : <any>null;
        data["departs_cleaned"] = this.departs_cleaned !== undefined ? this.departs_cleaned : <any>null;
        data["epsilonCleaningStays"] = this.epsilonCleaningStays !== undefined ? this.epsilonCleaningStays : <any>null;
        data["epsilonCleaningDeparts"] = this.epsilonCleaningDeparts !== undefined ? this.epsilonCleaningDeparts : <any>null;
        data["attendant_literal"] = this.attendant_literal !== undefined ? this.attendant_literal : <any>null;
        data["weight_minimize_attendants"] = this.weight_minimize_attendants !== undefined ? this.weight_minimize_attendants : <any>null;
        data["weight_epsilon_credits"] = this.weight_epsilon_credits !== undefined ? this.weight_epsilon_credits : <any>null;
        data["weight_epsilon_rooms"] = this.weight_epsilon_rooms !== undefined ? this.weight_epsilon_rooms : <any>null;
        data["weight_epsilon_stay_depart"] = this.weight_epsilon_stay_depart !== undefined ? this.weight_epsilon_stay_depart : <any>null;
        data["weight_travel_time"] = this.weight_travel_time !== undefined ? this.weight_travel_time : <any>null;
        data["weight_credits"] = this.weight_credits !== undefined ? this.weight_credits : <any>null;
        data["weight_rooms_cleaned"] = this.weight_rooms_cleaned !== undefined ? this.weight_rooms_cleaned : <any>null;
        data["weight_building_award"] = this.weight_building_award !== undefined ? this.weight_building_award : <any>null;
        data["weight_level_award"] = this.weight_level_award !== undefined ? this.weight_level_award : <any>null;
        data["weight_room_award"] = this.weight_room_award !== undefined ? this.weight_room_award : <any>null;
        return data; 
    }
}

export interface IObjectiveComponents {
    attendant?: Attendant | null;
    floortravel: number;
    buildingtravel: number;
    credits: number;
    cleaning_jobs?: CleaningInterval[] | null;
    room_awards: number;
    epsilonCredits: number;
    epsilonCleaningRooms: number;
    stays_cleaned: number;
    departs_cleaned: number;
    epsilonCleaningStays: number;
    epsilonCleaningDeparts: number;
    attendant_literal: number;
    weight_minimize_attendants: number;
    weight_epsilon_credits: number;
    weight_epsilon_rooms: number;
    weight_epsilon_stay_depart: number;
    weight_travel_time: number;
    weight_credits: number;
    weight_rooms_cleaned: number;
    weight_building_award: number;
    weight_level_award: number;
    weight_room_award: number;
}

export class CleaningInterval implements ICleaningInterval {
    cleaning?: Cleaning | null;
    start?: IntVar | null;
    end?: IntVar | null;
    duration?: IntVar | null;
    interval?: IntervalVar | null;
    literal?: IntVar | null;
    isFirstLiteral?: IntVar | null;
    isLastLiteral?: IntVar | null;
    from?: number | null;
    to?: number | null;
    credits!: number;
    minutes!: number;

    constructor(data?: ICleaningInterval) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cleaning = _data["cleaning"] ? Cleaning.fromJS(_data["cleaning"]) : <any>null;
            this.start = _data["start"] ? IntVar.fromJS(_data["start"]) : <any>null;
            this.end = _data["end"] ? IntVar.fromJS(_data["end"]) : <any>null;
            this.duration = _data["duration"] ? IntVar.fromJS(_data["duration"]) : <any>null;
            this.interval = _data["interval"] ? IntervalVar.fromJS(_data["interval"]) : <any>null;
            this.literal = _data["literal"] ? IntVar.fromJS(_data["literal"]) : <any>null;
            this.isFirstLiteral = _data["isFirstLiteral"] ? IntVar.fromJS(_data["isFirstLiteral"]) : <any>null;
            this.isLastLiteral = _data["isLastLiteral"] ? IntVar.fromJS(_data["isLastLiteral"]) : <any>null;
            this.from = _data["from"] !== undefined ? _data["from"] : <any>null;
            this.to = _data["to"] !== undefined ? _data["to"] : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
            this.minutes = _data["minutes"] !== undefined ? _data["minutes"] : <any>null;
        }
    }

    static fromJS(data: any): CleaningInterval {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningInterval();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cleaning"] = this.cleaning ? this.cleaning.toJSON() : <any>null;
        data["start"] = this.start ? this.start.toJSON() : <any>null;
        data["end"] = this.end ? this.end.toJSON() : <any>null;
        data["duration"] = this.duration ? this.duration.toJSON() : <any>null;
        data["interval"] = this.interval ? this.interval.toJSON() : <any>null;
        data["literal"] = this.literal ? this.literal.toJSON() : <any>null;
        data["isFirstLiteral"] = this.isFirstLiteral ? this.isFirstLiteral.toJSON() : <any>null;
        data["isLastLiteral"] = this.isLastLiteral ? this.isLastLiteral.toJSON() : <any>null;
        data["from"] = this.from !== undefined ? this.from : <any>null;
        data["to"] = this.to !== undefined ? this.to : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        data["minutes"] = this.minutes !== undefined ? this.minutes : <any>null;
        return data; 
    }
}

export interface ICleaningInterval {
    cleaning?: Cleaning | null;
    start?: IntVar | null;
    end?: IntVar | null;
    duration?: IntVar | null;
    interval?: IntervalVar | null;
    literal?: IntVar | null;
    isFirstLiteral?: IntVar | null;
    isLastLiteral?: IntVar | null;
    from?: number | null;
    to?: number | null;
    credits: number;
    minutes: number;
}

export class LinearExpr implements ILinearExpr {
    index!: number;

    constructor(data?: ILinearExpr) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.index = _data["index"] !== undefined ? _data["index"] : <any>null;
        }
    }

    static fromJS(data: any): LinearExpr {
        data = typeof data === 'object' ? data : {};
        let result = new LinearExpr();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["index"] = this.index !== undefined ? this.index : <any>null;
        return data; 
    }
}

export interface ILinearExpr {
    index: number;
}

export class IntVar extends LinearExpr implements IIntVar {
    proto?: IntegerVariableProto | null;
    domain?: Domain | null;

    constructor(data?: IIntVar) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.proto = _data["proto"] ? IntegerVariableProto.fromJS(_data["proto"]) : <any>null;
            this.domain = _data["domain"] ? Domain.fromJS(_data["domain"]) : <any>null;
        }
    }

    static fromJS(data: any): IntVar {
        data = typeof data === 'object' ? data : {};
        let result = new IntVar();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["proto"] = this.proto ? this.proto.toJSON() : <any>null;
        data["domain"] = this.domain ? this.domain.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IIntVar extends ILinearExpr {
    proto?: IntegerVariableProto | null;
    domain?: Domain | null;
}

export class IntegerVariableProto implements IIntegerVariableProto {
    name?: string | null;
    domain?: number[] | null;

    constructor(data?: IIntegerVariableProto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            if (Array.isArray(_data["domain"])) {
                this.domain = [] as any;
                for (let item of _data["domain"])
                    this.domain!.push(item);
            }
        }
    }

    static fromJS(data: any): IntegerVariableProto {
        data = typeof data === 'object' ? data : {};
        let result = new IntegerVariableProto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.domain)) {
            data["domain"] = [];
            for (let item of this.domain)
                data["domain"].push(item);
        }
        return data; 
    }
}

export interface IIntegerVariableProto {
    name?: string | null;
    domain?: number[] | null;
}

export class Domain implements IDomain {

    constructor(data?: IDomain) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Domain {
        data = typeof data === 'object' ? data : {};
        let result = new Domain();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IDomain {
}

export class IntervalVar implements IIntervalVar {
    proto?: IntervalConstraintProto | null;

    constructor(data?: IIntervalVar) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.proto = _data["proto"] ? IntervalConstraintProto.fromJS(_data["proto"]) : <any>null;
        }
    }

    static fromJS(data: any): IntervalVar {
        data = typeof data === 'object' ? data : {};
        let result = new IntervalVar();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["proto"] = this.proto ? this.proto.toJSON() : <any>null;
        return data; 
    }
}

export interface IIntervalVar {
    proto?: IntervalConstraintProto | null;
}

export class IntervalConstraintProto implements IIntervalConstraintProto {
    start?: LinearExpressionProto | null;
    end?: LinearExpressionProto | null;
    size?: LinearExpressionProto | null;

    constructor(data?: IIntervalConstraintProto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.start = _data["start"] ? LinearExpressionProto.fromJS(_data["start"]) : <any>null;
            this.end = _data["end"] ? LinearExpressionProto.fromJS(_data["end"]) : <any>null;
            this.size = _data["size"] ? LinearExpressionProto.fromJS(_data["size"]) : <any>null;
        }
    }

    static fromJS(data: any): IntervalConstraintProto {
        data = typeof data === 'object' ? data : {};
        let result = new IntervalConstraintProto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["start"] = this.start ? this.start.toJSON() : <any>null;
        data["end"] = this.end ? this.end.toJSON() : <any>null;
        data["size"] = this.size ? this.size.toJSON() : <any>null;
        return data; 
    }
}

export interface IIntervalConstraintProto {
    start?: LinearExpressionProto | null;
    end?: LinearExpressionProto | null;
    size?: LinearExpressionProto | null;
}

export class LinearExpressionProto implements ILinearExpressionProto {
    vars?: number[] | null;
    coeffs?: number[] | null;
    offset!: number;

    constructor(data?: ILinearExpressionProto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["vars"])) {
                this.vars = [] as any;
                for (let item of _data["vars"])
                    this.vars!.push(item);
            }
            if (Array.isArray(_data["coeffs"])) {
                this.coeffs = [] as any;
                for (let item of _data["coeffs"])
                    this.coeffs!.push(item);
            }
            this.offset = _data["offset"] !== undefined ? _data["offset"] : <any>null;
        }
    }

    static fromJS(data: any): LinearExpressionProto {
        data = typeof data === 'object' ? data : {};
        let result = new LinearExpressionProto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.vars)) {
            data["vars"] = [];
            for (let item of this.vars)
                data["vars"].push(item);
        }
        if (Array.isArray(this.coeffs)) {
            data["coeffs"] = [];
            for (let item of this.coeffs)
                data["coeffs"].push(item);
        }
        data["offset"] = this.offset !== undefined ? this.offset : <any>null;
        return data; 
    }
}

export interface ILinearExpressionProto {
    vars?: number[] | null;
    coeffs?: number[] | null;
    offset: number;
}

export class Visualization implements IVisualization {
    groups?: Group[] | null;
    items?: Item[] | null;

    constructor(data?: IVisualization) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["groups"])) {
                this.groups = [] as any;
                for (let item of _data["groups"])
                    this.groups!.push(Group.fromJS(item));
            }
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Item.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Visualization {
        data = typeof data === 'object' ? data : {};
        let result = new Visualization();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.groups)) {
            data["groups"] = [];
            for (let item of this.groups)
                data["groups"].push(item.toJSON());
        }
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IVisualization {
    groups?: Group[] | null;
    items?: Item[] | null;
}

export class Group implements IGroup {
    id?: string | null;
    content!: number;

    constructor(data?: IGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.content = _data["content"] !== undefined ? _data["content"] : <any>null;
        }
    }

    static fromJS(data: any): Group {
        data = typeof data === 'object' ? data : {};
        let result = new Group();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["content"] = this.content !== undefined ? this.content : <any>null;
        return data; 
    }
}

export interface IGroup {
    id?: string | null;
    content: number;
}

export class Item implements IItem {
    x!: number;
    y!: number;
    group?: string | null;

    constructor(data?: IItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.x = _data["x"] !== undefined ? _data["x"] : <any>null;
            this.y = _data["y"] !== undefined ? _data["y"] : <any>null;
            this.group = _data["group"] !== undefined ? _data["group"] : <any>null;
        }
    }

    static fromJS(data: any): Item {
        data = typeof data === 'object' ? data : {};
        let result = new Item();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["x"] = this.x !== undefined ? this.x : <any>null;
        data["y"] = this.y !== undefined ? this.y : <any>null;
        data["group"] = this.group !== undefined ? this.group : <any>null;
        return data; 
    }
}

export interface IItem {
    x: number;
    y: number;
    group?: string | null;
}

export class CpsatAutogeneratedPlan extends AutoGeneratedPlan implements ICpsatAutogeneratedPlan {
    plannedTimelineItems?: PlannedCleaningTimelineItemData[] | null;

    constructor(data?: ICpsatAutogeneratedPlan) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["plannedTimelineItems"])) {
                this.plannedTimelineItems = [] as any;
                for (let item of _data["plannedTimelineItems"])
                    this.plannedTimelineItems!.push(PlannedCleaningTimelineItemData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CpsatAutogeneratedPlan {
        data = typeof data === 'object' ? data : {};
        let result = new CpsatAutogeneratedPlan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.plannedTimelineItems)) {
            data["plannedTimelineItems"] = [];
            for (let item of this.plannedTimelineItems)
                data["plannedTimelineItems"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ICpsatAutogeneratedPlan extends IAutoGeneratedPlan {
    plannedTimelineItems?: PlannedCleaningTimelineItemData[] | null;
}

export class RealTimeCleaningPlannerCleaningChangedMessage implements IRealTimeCleaningPlannerCleaningChangedMessage {
    roomId!: string;
    cleaningPlanId!: string;
    cleaningPlanItemId!: string;
    cleaningId!: string;
    cleaningProcessStatus!: CleaningProcessStatus;
    at!: moment.Moment;

    constructor(data?: IRealTimeCleaningPlannerCleaningChangedMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.cleaningPlanId = _data["cleaningPlanId"] !== undefined ? _data["cleaningPlanId"] : <any>null;
            this.cleaningPlanItemId = _data["cleaningPlanItemId"] !== undefined ? _data["cleaningPlanItemId"] : <any>null;
            this.cleaningId = _data["cleaningId"] !== undefined ? _data["cleaningId"] : <any>null;
            this.cleaningProcessStatus = _data["cleaningProcessStatus"] !== undefined ? _data["cleaningProcessStatus"] : <any>null;
            this.at = _data["at"] ? moment(_data["at"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): RealTimeCleaningPlannerCleaningChangedMessage {
        data = typeof data === 'object' ? data : {};
        let result = new RealTimeCleaningPlannerCleaningChangedMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["cleaningPlanId"] = this.cleaningPlanId !== undefined ? this.cleaningPlanId : <any>null;
        data["cleaningPlanItemId"] = this.cleaningPlanItemId !== undefined ? this.cleaningPlanItemId : <any>null;
        data["cleaningId"] = this.cleaningId !== undefined ? this.cleaningId : <any>null;
        data["cleaningProcessStatus"] = this.cleaningProcessStatus !== undefined ? this.cleaningProcessStatus : <any>null;
        data["at"] = this.at ? this.at.toISOString() : <any>null;
        return data; 
    }
}

export interface IRealTimeCleaningPlannerCleaningChangedMessage {
    roomId: string;
    cleaningPlanId: string;
    cleaningPlanItemId: string;
    cleaningId: string;
    cleaningProcessStatus: CleaningProcessStatus;
    at: moment.Moment;
}

export class RealTimeRefreshRoomsOverviewDashboardMessage implements IRealTimeRefreshRoomsOverviewDashboardMessage {
    roomIds?: string[] | null;

    constructor(data?: IRealTimeRefreshRoomsOverviewDashboardMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["roomIds"])) {
                this.roomIds = [] as any;
                for (let item of _data["roomIds"])
                    this.roomIds!.push(item);
            }
        }
    }

    static fromJS(data: any): RealTimeRefreshRoomsOverviewDashboardMessage {
        data = typeof data === 'object' ? data : {};
        let result = new RealTimeRefreshRoomsOverviewDashboardMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.roomIds)) {
            data["roomIds"] = [];
            for (let item of this.roomIds)
                data["roomIds"].push(item);
        }
        return data; 
    }
}

export interface IRealTimeRefreshRoomsOverviewDashboardMessage {
    roomIds?: string[] | null;
}

export class RealTimeUserOnDutyChangedMessage implements IRealTimeUserOnDutyChangedMessage {
    userId!: string;
    isOnDuty!: boolean;

    constructor(data?: IRealTimeUserOnDutyChangedMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.isOnDuty = _data["isOnDuty"] !== undefined ? _data["isOnDuty"] : <any>null;
        }
    }

    static fromJS(data: any): RealTimeUserOnDutyChangedMessage {
        data = typeof data === 'object' ? data : {};
        let result = new RealTimeUserOnDutyChangedMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["isOnDuty"] = this.isOnDuty !== undefined ? this.isOnDuty : <any>null;
        return data; 
    }
}

export interface IRealTimeUserOnDutyChangedMessage {
    userId: string;
    isOnDuty: boolean;
}

export class RealTimeTasksChangedMessage implements IRealTimeTasksChangedMessage {
    taskIds?: string[] | null;

    constructor(data?: IRealTimeTasksChangedMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["taskIds"])) {
                this.taskIds = [] as any;
                for (let item of _data["taskIds"])
                    this.taskIds!.push(item);
            }
        }
    }

    static fromJS(data: any): RealTimeTasksChangedMessage {
        data = typeof data === 'object' ? data : {};
        let result = new RealTimeTasksChangedMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.taskIds)) {
            data["taskIds"] = [];
            for (let item of this.taskIds)
                data["taskIds"].push(item);
        }
        return data; 
    }
}

export interface IRealTimeTasksChangedMessage {
    taskIds?: string[] | null;
}

export class RealTimeCpsatCleaningPlanningProgressChangedMessage implements IRealTimeCpsatCleaningPlanningProgressChangedMessage {
    cleaningPlanId!: string;
    statusKey?: string | null;
    message?: string | null;
    dateTimeString?: string | null;

    constructor(data?: IRealTimeCpsatCleaningPlanningProgressChangedMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cleaningPlanId = _data["cleaningPlanId"] !== undefined ? _data["cleaningPlanId"] : <any>null;
            this.statusKey = _data["statusKey"] !== undefined ? _data["statusKey"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.dateTimeString = _data["dateTimeString"] !== undefined ? _data["dateTimeString"] : <any>null;
        }
    }

    static fromJS(data: any): RealTimeCpsatCleaningPlanningProgressChangedMessage {
        data = typeof data === 'object' ? data : {};
        let result = new RealTimeCpsatCleaningPlanningProgressChangedMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cleaningPlanId"] = this.cleaningPlanId !== undefined ? this.cleaningPlanId : <any>null;
        data["statusKey"] = this.statusKey !== undefined ? this.statusKey : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["dateTimeString"] = this.dateTimeString !== undefined ? this.dateTimeString : <any>null;
        return data; 
    }
}

export interface IRealTimeCpsatCleaningPlanningProgressChangedMessage {
    cleaningPlanId: string;
    statusKey?: string | null;
    message?: string | null;
    dateTimeString?: string | null;
}

export class RealTimeCpsatCleaningPlanningFinishedMessage implements IRealTimeCpsatCleaningPlanningFinishedMessage {
    plan?: CpsatAutogeneratedPlan | null;

    constructor(data?: IRealTimeCpsatCleaningPlanningFinishedMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.plan = _data["plan"] ? CpsatAutogeneratedPlan.fromJS(_data["plan"]) : <any>null;
        }
    }

    static fromJS(data: any): RealTimeCpsatCleaningPlanningFinishedMessage {
        data = typeof data === 'object' ? data : {};
        let result = new RealTimeCpsatCleaningPlanningFinishedMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["plan"] = this.plan ? this.plan.toJSON() : <any>null;
        return data; 
    }
}

export interface IRealTimeCpsatCleaningPlanningFinishedMessage {
    plan?: CpsatAutogeneratedPlan | null;
}

export class RealTimeMessagesChangedMessage implements IRealTimeMessagesChangedMessage {
    roomIds?: string[] | null;
    reservationIds?: string[] | null;

    constructor(data?: IRealTimeMessagesChangedMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["roomIds"])) {
                this.roomIds = [] as any;
                for (let item of _data["roomIds"])
                    this.roomIds!.push(item);
            }
            if (Array.isArray(_data["reservationIds"])) {
                this.reservationIds = [] as any;
                for (let item of _data["reservationIds"])
                    this.reservationIds!.push(item);
            }
        }
    }

    static fromJS(data: any): RealTimeMessagesChangedMessage {
        data = typeof data === 'object' ? data : {};
        let result = new RealTimeMessagesChangedMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.roomIds)) {
            data["roomIds"] = [];
            for (let item of this.roomIds)
                data["roomIds"].push(item);
        }
        if (Array.isArray(this.reservationIds)) {
            data["reservationIds"] = [];
            for (let item of this.reservationIds)
                data["reservationIds"].push(item);
        }
        return data; 
    }
}

export interface IRealTimeMessagesChangedMessage {
    roomIds?: string[] | null;
    reservationIds?: string[] | null;
}

export class RccHousekeepingStatusColorDetails implements IRccHousekeepingStatusColorDetails {
    rccCode!: RccHousekeepingStatusCode;
    colorHex?: string | null;
    description?: string | null;

    constructor(data?: IRccHousekeepingStatusColorDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.rccCode = _data["rccCode"] !== undefined ? _data["rccCode"] : <any>null;
            this.colorHex = _data["colorHex"] !== undefined ? _data["colorHex"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): RccHousekeepingStatusColorDetails {
        data = typeof data === 'object' ? data : {};
        let result = new RccHousekeepingStatusColorDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rccCode"] = this.rccCode !== undefined ? this.rccCode : <any>null;
        data["colorHex"] = this.colorHex !== undefined ? this.colorHex : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data; 
    }
}

export interface IRccHousekeepingStatusColorDetails {
    rccCode: RccHousekeepingStatusCode;
    colorHex?: string | null;
    description?: string | null;
}

export enum RccHousekeepingStatusCode {
    HD = 0,
    HP = 1,
    HC = 2,
    HCI = 3,
    OHD = 4,
    OHP = 5,
    OHC = 6,
    OHCI = 7,
    VHD = 8,
    VHP = 9,
    VHC = 10,
    VHCI = 11,
    OOO = 12,
    OOS = 13,
    PU = 14,
    TD = 15,
    TDR = 16,
    TDNR = 17,
    DNN = 18,
    NO = 19,
    LUG = 20,
}

export class GetRccHousekeepingColorsQuery implements IGetRccHousekeepingColorsQuery {

    constructor(data?: IGetRccHousekeepingColorsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): GetRccHousekeepingColorsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetRccHousekeepingColorsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IGetRccHousekeepingColorsQuery {
}

export class UpdateRccHouskeepingColorsCommand implements IUpdateRccHouskeepingColorsCommand {
    colors?: SaveRccHousekeepingStatusColor[] | null;

    constructor(data?: IUpdateRccHouskeepingColorsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["colors"])) {
                this.colors = [] as any;
                for (let item of _data["colors"])
                    this.colors!.push(SaveRccHousekeepingStatusColor.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateRccHouskeepingColorsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRccHouskeepingColorsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.colors)) {
            data["colors"] = [];
            for (let item of this.colors)
                data["colors"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUpdateRccHouskeepingColorsCommand {
    colors?: SaveRccHousekeepingStatusColor[] | null;
}

export class SaveRccHousekeepingStatusColor implements ISaveRccHousekeepingStatusColor {
    rccCode!: RccHousekeepingStatusCode;
    colorHex?: string | null;

    constructor(data?: ISaveRccHousekeepingStatusColor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.rccCode = _data["rccCode"] !== undefined ? _data["rccCode"] : <any>null;
            this.colorHex = _data["colorHex"] !== undefined ? _data["colorHex"] : <any>null;
        }
    }

    static fromJS(data: any): SaveRccHousekeepingStatusColor {
        data = typeof data === 'object' ? data : {};
        let result = new SaveRccHousekeepingStatusColor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rccCode"] = this.rccCode !== undefined ? this.rccCode : <any>null;
        data["colorHex"] = this.colorHex !== undefined ? this.colorHex : <any>null;
        return data; 
    }
}

export interface ISaveRccHousekeepingStatusColor {
    rccCode: RccHousekeepingStatusCode;
    colorHex?: string | null;
}

export class RoomViewDashboard implements IRoomViewDashboard {
    rooms?: RoomViewDashboardRoomItem[] | null;
    totalNumberOfRooms!: number;

    constructor(data?: IRoomViewDashboard) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["rooms"])) {
                this.rooms = [] as any;
                for (let item of _data["rooms"])
                    this.rooms!.push(RoomViewDashboardRoomItem.fromJS(item));
            }
            this.totalNumberOfRooms = _data["totalNumberOfRooms"] !== undefined ? _data["totalNumberOfRooms"] : <any>null;
        }
    }

    static fromJS(data: any): RoomViewDashboard {
        data = typeof data === 'object' ? data : {};
        let result = new RoomViewDashboard();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rooms)) {
            data["rooms"] = [];
            for (let item of this.rooms)
                data["rooms"].push(item.toJSON());
        }
        data["totalNumberOfRooms"] = this.totalNumberOfRooms !== undefined ? this.totalNumberOfRooms : <any>null;
        return data; 
    }
}

export interface IRoomViewDashboard {
    rooms?: RoomViewDashboardRoomItem[] | null;
    totalNumberOfRooms: number;
}

export abstract class RoomViewDashboardItem implements IRoomViewDashboardItem {
    id!: string;
    name?: string | null;
    reservations?: RoomViewDashboardReservationItem[] | null;
    workers?: RoomViewDashboardWorkerItem[] | null;
    isOccupied!: boolean;
    isClean!: boolean;
    isOutOfService!: boolean;
    isOutOfOrder!: boolean;
    isDoNotDisturb!: boolean;
    isPriority!: boolean;
    numberOfTasks!: number;
    numberOfMessages!: number;
    numberOfNotes!: number;
    isGuestCurrentlyIn!: boolean;
    housekeepingStatusCode?: string | null;
    housekeepingStatusColorHex?: string | null;

    constructor(data?: IRoomViewDashboardItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            if (Array.isArray(_data["reservations"])) {
                this.reservations = [] as any;
                for (let item of _data["reservations"])
                    this.reservations!.push(RoomViewDashboardReservationItem.fromJS(item));
            }
            if (Array.isArray(_data["workers"])) {
                this.workers = [] as any;
                for (let item of _data["workers"])
                    this.workers!.push(RoomViewDashboardWorkerItem.fromJS(item));
            }
            this.isOccupied = _data["isOccupied"] !== undefined ? _data["isOccupied"] : <any>null;
            this.isClean = _data["isClean"] !== undefined ? _data["isClean"] : <any>null;
            this.isOutOfService = _data["isOutOfService"] !== undefined ? _data["isOutOfService"] : <any>null;
            this.isOutOfOrder = _data["isOutOfOrder"] !== undefined ? _data["isOutOfOrder"] : <any>null;
            this.isDoNotDisturb = _data["isDoNotDisturb"] !== undefined ? _data["isDoNotDisturb"] : <any>null;
            this.isPriority = _data["isPriority"] !== undefined ? _data["isPriority"] : <any>null;
            this.numberOfTasks = _data["numberOfTasks"] !== undefined ? _data["numberOfTasks"] : <any>null;
            this.numberOfMessages = _data["numberOfMessages"] !== undefined ? _data["numberOfMessages"] : <any>null;
            this.numberOfNotes = _data["numberOfNotes"] !== undefined ? _data["numberOfNotes"] : <any>null;
            this.isGuestCurrentlyIn = _data["isGuestCurrentlyIn"] !== undefined ? _data["isGuestCurrentlyIn"] : <any>null;
            this.housekeepingStatusCode = _data["housekeepingStatusCode"] !== undefined ? _data["housekeepingStatusCode"] : <any>null;
            this.housekeepingStatusColorHex = _data["housekeepingStatusColorHex"] !== undefined ? _data["housekeepingStatusColorHex"] : <any>null;
        }
    }

    static fromJS(data: any): RoomViewDashboardItem {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'RoomViewDashboardItem' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.reservations)) {
            data["reservations"] = [];
            for (let item of this.reservations)
                data["reservations"].push(item.toJSON());
        }
        if (Array.isArray(this.workers)) {
            data["workers"] = [];
            for (let item of this.workers)
                data["workers"].push(item.toJSON());
        }
        data["isOccupied"] = this.isOccupied !== undefined ? this.isOccupied : <any>null;
        data["isClean"] = this.isClean !== undefined ? this.isClean : <any>null;
        data["isOutOfService"] = this.isOutOfService !== undefined ? this.isOutOfService : <any>null;
        data["isOutOfOrder"] = this.isOutOfOrder !== undefined ? this.isOutOfOrder : <any>null;
        data["isDoNotDisturb"] = this.isDoNotDisturb !== undefined ? this.isDoNotDisturb : <any>null;
        data["isPriority"] = this.isPriority !== undefined ? this.isPriority : <any>null;
        data["numberOfTasks"] = this.numberOfTasks !== undefined ? this.numberOfTasks : <any>null;
        data["numberOfMessages"] = this.numberOfMessages !== undefined ? this.numberOfMessages : <any>null;
        data["numberOfNotes"] = this.numberOfNotes !== undefined ? this.numberOfNotes : <any>null;
        data["isGuestCurrentlyIn"] = this.isGuestCurrentlyIn !== undefined ? this.isGuestCurrentlyIn : <any>null;
        data["housekeepingStatusCode"] = this.housekeepingStatusCode !== undefined ? this.housekeepingStatusCode : <any>null;
        data["housekeepingStatusColorHex"] = this.housekeepingStatusColorHex !== undefined ? this.housekeepingStatusColorHex : <any>null;
        return data; 
    }
}

export interface IRoomViewDashboardItem {
    id: string;
    name?: string | null;
    reservations?: RoomViewDashboardReservationItem[] | null;
    workers?: RoomViewDashboardWorkerItem[] | null;
    isOccupied: boolean;
    isClean: boolean;
    isOutOfService: boolean;
    isOutOfOrder: boolean;
    isDoNotDisturb: boolean;
    isPriority: boolean;
    numberOfTasks: number;
    numberOfMessages: number;
    numberOfNotes: number;
    isGuestCurrentlyIn: boolean;
    housekeepingStatusCode?: string | null;
    housekeepingStatusColorHex?: string | null;
}

export class RoomViewDashboardRoomItem extends RoomViewDashboardItem implements IRoomViewDashboardRoomItem {
    showBeds!: boolean;
    beds?: RoomViewDashboardBedItem[] | null;

    constructor(data?: IRoomViewDashboardRoomItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.showBeds = _data["showBeds"] !== undefined ? _data["showBeds"] : <any>null;
            if (Array.isArray(_data["beds"])) {
                this.beds = [] as any;
                for (let item of _data["beds"])
                    this.beds!.push(RoomViewDashboardBedItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomViewDashboardRoomItem {
        data = typeof data === 'object' ? data : {};
        let result = new RoomViewDashboardRoomItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["showBeds"] = this.showBeds !== undefined ? this.showBeds : <any>null;
        if (Array.isArray(this.beds)) {
            data["beds"] = [];
            for (let item of this.beds)
                data["beds"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IRoomViewDashboardRoomItem extends IRoomViewDashboardItem {
    showBeds: boolean;
    beds?: RoomViewDashboardBedItem[] | null;
}

export class RoomViewDashboardBedItem extends RoomViewDashboardItem implements IRoomViewDashboardBedItem {
    showBeds!: boolean;
    beds?: RoomViewDashboardBedItem[] | null;

    constructor(data?: IRoomViewDashboardBedItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.showBeds = _data["showBeds"] !== undefined ? _data["showBeds"] : <any>null;
            if (Array.isArray(_data["beds"])) {
                this.beds = [] as any;
                for (let item of _data["beds"])
                    this.beds!.push(RoomViewDashboardBedItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomViewDashboardBedItem {
        data = typeof data === 'object' ? data : {};
        let result = new RoomViewDashboardBedItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["showBeds"] = this.showBeds !== undefined ? this.showBeds : <any>null;
        if (Array.isArray(this.beds)) {
            data["beds"] = [];
            for (let item of this.beds)
                data["beds"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IRoomViewDashboardBedItem extends IRoomViewDashboardItem {
    showBeds: boolean;
    beds?: RoomViewDashboardBedItem[] | null;
}

export class RoomViewDashboardReservationItem implements IRoomViewDashboardReservationItem {
    id?: string | null;
    guestName?: string | null;
    numberOfTasks!: number;
    numberOfMessages!: number;
    numberOfNotes!: number;
    checkInDescription?: string | null;
    checkInTimeString?: string | null;
    checkOutDescription?: string | null;
    checkOutTimeString?: string | null;
    stayDescription?: string | null;
    fullCheckInDescription?: string | null;
    fullCheckOutDescription?: string | null;
    numberOfAdults!: number;
    numberOfChildren!: number;
    numberOfInfants!: number;
    group?: string | null;
    vip?: string | null;
    isDayUse!: boolean;
    notes?: RoomViewDashboardReservationNote[] | null;

    constructor(data?: IRoomViewDashboardReservationItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.guestName = _data["guestName"] !== undefined ? _data["guestName"] : <any>null;
            this.numberOfTasks = _data["numberOfTasks"] !== undefined ? _data["numberOfTasks"] : <any>null;
            this.numberOfMessages = _data["numberOfMessages"] !== undefined ? _data["numberOfMessages"] : <any>null;
            this.numberOfNotes = _data["numberOfNotes"] !== undefined ? _data["numberOfNotes"] : <any>null;
            this.checkInDescription = _data["checkInDescription"] !== undefined ? _data["checkInDescription"] : <any>null;
            this.checkInTimeString = _data["checkInTimeString"] !== undefined ? _data["checkInTimeString"] : <any>null;
            this.checkOutDescription = _data["checkOutDescription"] !== undefined ? _data["checkOutDescription"] : <any>null;
            this.checkOutTimeString = _data["checkOutTimeString"] !== undefined ? _data["checkOutTimeString"] : <any>null;
            this.stayDescription = _data["stayDescription"] !== undefined ? _data["stayDescription"] : <any>null;
            this.fullCheckInDescription = _data["fullCheckInDescription"] !== undefined ? _data["fullCheckInDescription"] : <any>null;
            this.fullCheckOutDescription = _data["fullCheckOutDescription"] !== undefined ? _data["fullCheckOutDescription"] : <any>null;
            this.numberOfAdults = _data["numberOfAdults"] !== undefined ? _data["numberOfAdults"] : <any>null;
            this.numberOfChildren = _data["numberOfChildren"] !== undefined ? _data["numberOfChildren"] : <any>null;
            this.numberOfInfants = _data["numberOfInfants"] !== undefined ? _data["numberOfInfants"] : <any>null;
            this.group = _data["group"] !== undefined ? _data["group"] : <any>null;
            this.vip = _data["vip"] !== undefined ? _data["vip"] : <any>null;
            this.isDayUse = _data["isDayUse"] !== undefined ? _data["isDayUse"] : <any>null;
            if (Array.isArray(_data["notes"])) {
                this.notes = [] as any;
                for (let item of _data["notes"])
                    this.notes!.push(RoomViewDashboardReservationNote.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomViewDashboardReservationItem {
        data = typeof data === 'object' ? data : {};
        let result = new RoomViewDashboardReservationItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["guestName"] = this.guestName !== undefined ? this.guestName : <any>null;
        data["numberOfTasks"] = this.numberOfTasks !== undefined ? this.numberOfTasks : <any>null;
        data["numberOfMessages"] = this.numberOfMessages !== undefined ? this.numberOfMessages : <any>null;
        data["numberOfNotes"] = this.numberOfNotes !== undefined ? this.numberOfNotes : <any>null;
        data["checkInDescription"] = this.checkInDescription !== undefined ? this.checkInDescription : <any>null;
        data["checkInTimeString"] = this.checkInTimeString !== undefined ? this.checkInTimeString : <any>null;
        data["checkOutDescription"] = this.checkOutDescription !== undefined ? this.checkOutDescription : <any>null;
        data["checkOutTimeString"] = this.checkOutTimeString !== undefined ? this.checkOutTimeString : <any>null;
        data["stayDescription"] = this.stayDescription !== undefined ? this.stayDescription : <any>null;
        data["fullCheckInDescription"] = this.fullCheckInDescription !== undefined ? this.fullCheckInDescription : <any>null;
        data["fullCheckOutDescription"] = this.fullCheckOutDescription !== undefined ? this.fullCheckOutDescription : <any>null;
        data["numberOfAdults"] = this.numberOfAdults !== undefined ? this.numberOfAdults : <any>null;
        data["numberOfChildren"] = this.numberOfChildren !== undefined ? this.numberOfChildren : <any>null;
        data["numberOfInfants"] = this.numberOfInfants !== undefined ? this.numberOfInfants : <any>null;
        data["group"] = this.group !== undefined ? this.group : <any>null;
        data["vip"] = this.vip !== undefined ? this.vip : <any>null;
        data["isDayUse"] = this.isDayUse !== undefined ? this.isDayUse : <any>null;
        if (Array.isArray(this.notes)) {
            data["notes"] = [];
            for (let item of this.notes)
                data["notes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRoomViewDashboardReservationItem {
    id?: string | null;
    guestName?: string | null;
    numberOfTasks: number;
    numberOfMessages: number;
    numberOfNotes: number;
    checkInDescription?: string | null;
    checkInTimeString?: string | null;
    checkOutDescription?: string | null;
    checkOutTimeString?: string | null;
    stayDescription?: string | null;
    fullCheckInDescription?: string | null;
    fullCheckOutDescription?: string | null;
    numberOfAdults: number;
    numberOfChildren: number;
    numberOfInfants: number;
    group?: string | null;
    vip?: string | null;
    isDayUse: boolean;
    notes?: RoomViewDashboardReservationNote[] | null;
}

export class RoomViewDashboardReservationNote implements IRoomViewDashboardReservationNote {
    isPmsNote!: boolean;
    note?: string | null;
    createdById?: string | null;
    createdByName?: string | null;
    isMyNote!: boolean;

    constructor(data?: IRoomViewDashboardReservationNote) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isPmsNote = _data["isPmsNote"] !== undefined ? _data["isPmsNote"] : <any>null;
            this.note = _data["note"] !== undefined ? _data["note"] : <any>null;
            this.createdById = _data["createdById"] !== undefined ? _data["createdById"] : <any>null;
            this.createdByName = _data["createdByName"] !== undefined ? _data["createdByName"] : <any>null;
            this.isMyNote = _data["isMyNote"] !== undefined ? _data["isMyNote"] : <any>null;
        }
    }

    static fromJS(data: any): RoomViewDashboardReservationNote {
        data = typeof data === 'object' ? data : {};
        let result = new RoomViewDashboardReservationNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isPmsNote"] = this.isPmsNote !== undefined ? this.isPmsNote : <any>null;
        data["note"] = this.note !== undefined ? this.note : <any>null;
        data["createdById"] = this.createdById !== undefined ? this.createdById : <any>null;
        data["createdByName"] = this.createdByName !== undefined ? this.createdByName : <any>null;
        data["isMyNote"] = this.isMyNote !== undefined ? this.isMyNote : <any>null;
        return data; 
    }
}

export interface IRoomViewDashboardReservationNote {
    isPmsNote: boolean;
    note?: string | null;
    createdById?: string | null;
    createdByName?: string | null;
    isMyNote: boolean;
}

export class RoomViewDashboardWorkerItem implements IRoomViewDashboardWorkerItem {
    id!: string;
    fullName?: string | null;
    userName?: string | null;
    initials?: string | null;
    defaultAvatarColorHex?: string | null;
    avatarImageUrl?: string | null;
    workTypeKey?: string | null;
    workStatusDescription?: string | null;
    workDescription?: string | null;

    constructor(data?: IRoomViewDashboardWorkerItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.fullName = _data["fullName"] !== undefined ? _data["fullName"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.initials = _data["initials"] !== undefined ? _data["initials"] : <any>null;
            this.defaultAvatarColorHex = _data["defaultAvatarColorHex"] !== undefined ? _data["defaultAvatarColorHex"] : <any>null;
            this.avatarImageUrl = _data["avatarImageUrl"] !== undefined ? _data["avatarImageUrl"] : <any>null;
            this.workTypeKey = _data["workTypeKey"] !== undefined ? _data["workTypeKey"] : <any>null;
            this.workStatusDescription = _data["workStatusDescription"] !== undefined ? _data["workStatusDescription"] : <any>null;
            this.workDescription = _data["workDescription"] !== undefined ? _data["workDescription"] : <any>null;
        }
    }

    static fromJS(data: any): RoomViewDashboardWorkerItem {
        data = typeof data === 'object' ? data : {};
        let result = new RoomViewDashboardWorkerItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["fullName"] = this.fullName !== undefined ? this.fullName : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["initials"] = this.initials !== undefined ? this.initials : <any>null;
        data["defaultAvatarColorHex"] = this.defaultAvatarColorHex !== undefined ? this.defaultAvatarColorHex : <any>null;
        data["avatarImageUrl"] = this.avatarImageUrl !== undefined ? this.avatarImageUrl : <any>null;
        data["workTypeKey"] = this.workTypeKey !== undefined ? this.workTypeKey : <any>null;
        data["workStatusDescription"] = this.workStatusDescription !== undefined ? this.workStatusDescription : <any>null;
        data["workDescription"] = this.workDescription !== undefined ? this.workDescription : <any>null;
        return data; 
    }
}

export interface IRoomViewDashboardWorkerItem {
    id: string;
    fullName?: string | null;
    userName?: string | null;
    initials?: string | null;
    defaultAvatarColorHex?: string | null;
    avatarImageUrl?: string | null;
    workTypeKey?: string | null;
    workStatusDescription?: string | null;
    workDescription?: string | null;
}

export class GetRoomViewDashboardQuery implements IGetRoomViewDashboardQuery {
    sortKey?: string | null;
    spaceAccessTypeKey?: string | null;
    hotelId?: string | null;
    filterValues?: GetRoomViewDashboardFilterValue[] | null;
    skip!: number;
    take!: number;

    constructor(data?: IGetRoomViewDashboardQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sortKey = _data["sortKey"] !== undefined ? _data["sortKey"] : <any>null;
            this.spaceAccessTypeKey = _data["spaceAccessTypeKey"] !== undefined ? _data["spaceAccessTypeKey"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            if (Array.isArray(_data["filterValues"])) {
                this.filterValues = [] as any;
                for (let item of _data["filterValues"])
                    this.filterValues!.push(GetRoomViewDashboardFilterValue.fromJS(item));
            }
            this.skip = _data["skip"] !== undefined ? _data["skip"] : <any>null;
            this.take = _data["take"] !== undefined ? _data["take"] : <any>null;
        }
    }

    static fromJS(data: any): GetRoomViewDashboardQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoomViewDashboardQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sortKey"] = this.sortKey !== undefined ? this.sortKey : <any>null;
        data["spaceAccessTypeKey"] = this.spaceAccessTypeKey !== undefined ? this.spaceAccessTypeKey : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        if (Array.isArray(this.filterValues)) {
            data["filterValues"] = [];
            for (let item of this.filterValues)
                data["filterValues"].push(item.toJSON());
        }
        data["skip"] = this.skip !== undefined ? this.skip : <any>null;
        data["take"] = this.take !== undefined ? this.take : <any>null;
        return data; 
    }
}

export interface IGetRoomViewDashboardQuery {
    sortKey?: string | null;
    spaceAccessTypeKey?: string | null;
    hotelId?: string | null;
    filterValues?: GetRoomViewDashboardFilterValue[] | null;
    skip: number;
    take: number;
}

export class GetRoomViewDashboardFilterValue implements IGetRoomViewDashboardFilterValue {
    type!: MasterFilterGroupType;
    id?: string | null;

    constructor(data?: IGetRoomViewDashboardFilterValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): GetRoomViewDashboardFilterValue {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoomViewDashboardFilterValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IGetRoomViewDashboardFilterValue {
    type: MasterFilterGroupType;
    id?: string | null;
}

export enum MasterFilterGroupType {
    GUESTS = 0,
    GUEST_STATUSES = 1,
    CLENLINESS = 2,
    HOUSEKEEPING_STATUSES = 3,
    PMS = 4,
    OTHERS = 5,
    ROOM_CATEGORIES = 6,
    BUILDINGS = 7,
    FLOORS = 8,
    ROOMS = 9,
    FLOOR_SECTIONS = 10,
    FLOOR_SUB_SECTIONS = 11,
}

export class MasterFilterGroup implements IMasterFilterGroup {
    type!: MasterFilterGroupType;
    name?: string | null;
    items?: MasterFilterGroupItem[] | null;

    constructor(data?: IMasterFilterGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(MasterFilterGroupItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MasterFilterGroup {
        data = typeof data === 'object' ? data : {};
        let result = new MasterFilterGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IMasterFilterGroup {
    type: MasterFilterGroupType;
    name?: string | null;
    items?: MasterFilterGroupItem[] | null;
}

export class MasterFilterGroupItem implements IMasterFilterGroupItem {
    id?: string | null;
    name?: string | null;
    description?: string | null;

    constructor(data?: IMasterFilterGroupItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): MasterFilterGroupItem {
        data = typeof data === 'object' ? data : {};
        let result = new MasterFilterGroupItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data; 
    }
}

export interface IMasterFilterGroupItem {
    id?: string | null;
    name?: string | null;
    description?: string | null;
}

export class GetRoomViewDashboardFilterValuesQuery implements IGetRoomViewDashboardFilterValuesQuery {
    hotelId?: string | null;
    type!: MasterFilterType;

    constructor(data?: IGetRoomViewDashboardFilterValuesQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
        }
    }

    static fromJS(data: any): GetRoomViewDashboardFilterValuesQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoomViewDashboardFilterValuesQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        return data; 
    }
}

export interface IGetRoomViewDashboardFilterValuesQuery {
    hotelId?: string | null;
    type: MasterFilterType;
}

export enum MasterFilterType {
    ROOMS_OVERVIEW_DASHBOARD = 0,
}

export class TemporaryUploadedFileDetails implements ITemporaryUploadedFileDetails {
    fileName?: string | null;
    imageUrl?: string | null;
    hasError!: boolean;
    message?: string | null;
    alreadyExists!: boolean;

    constructor(data?: ITemporaryUploadedFileDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileName = _data["fileName"] !== undefined ? _data["fileName"] : <any>null;
            this.imageUrl = _data["imageUrl"] !== undefined ? _data["imageUrl"] : <any>null;
            this.hasError = _data["hasError"] !== undefined ? _data["hasError"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.alreadyExists = _data["alreadyExists"] !== undefined ? _data["alreadyExists"] : <any>null;
        }
    }

    static fromJS(data: any): TemporaryUploadedFileDetails {
        data = typeof data === 'object' ? data : {};
        let result = new TemporaryUploadedFileDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        data["imageUrl"] = this.imageUrl !== undefined ? this.imageUrl : <any>null;
        data["hasError"] = this.hasError !== undefined ? this.hasError : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["alreadyExists"] = this.alreadyExists !== undefined ? this.alreadyExists : <any>null;
        return data; 
    }
}

export interface ITemporaryUploadedFileDetails {
    fileName?: string | null;
    imageUrl?: string | null;
    hasError: boolean;
    message?: string | null;
    alreadyExists: boolean;
}

export class UploadFilesDataRequest implements IUploadFilesDataRequest {
    sanitizedFileName?: string | null;

    constructor(data?: IUploadFilesDataRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sanitizedFileName = _data["sanitizedFileName"] !== undefined ? _data["sanitizedFileName"] : <any>null;
        }
    }

    static fromJS(data: any): UploadFilesDataRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UploadFilesDataRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sanitizedFileName"] = this.sanitizedFileName !== undefined ? this.sanitizedFileName : <any>null;
        return data; 
    }
}

export interface IUploadFilesDataRequest {
    sanitizedFileName?: string | null;
}

export class HotelItemData implements IHotelItemData {
    id?: string | null;
    name?: string | null;

    constructor(data?: IHotelItemData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): HotelItemData {
        data = typeof data === 'object' ? data : {};
        let result = new HotelItemData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data; 
    }
}

export interface IHotelItemData {
    id?: string | null;
    name?: string | null;
}

export class GetListOfHotelsQuery implements IGetListOfHotelsQuery {

    constructor(data?: IGetListOfHotelsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): GetListOfHotelsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfHotelsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IGetListOfHotelsQuery {
}

export class ProcessResponseOfHotelSettingsData extends ProcessResponse implements IProcessResponseOfHotelSettingsData {
    data?: HotelSettingsData | null;

    constructor(data?: IProcessResponseOfHotelSettingsData) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? HotelSettingsData.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfHotelSettingsData {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfHotelSettingsData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfHotelSettingsData extends IProcessResponse {
    data?: HotelSettingsData | null;
}

export class HotelSettingsData implements IHotelSettingsData {
    id?: string | null;
    hotelId?: string | null;
    defaultCheckInTime?: string | null;
    defaultCheckOutTime?: string | null;
    defaultAttendantStartTime?: string | null;
    defaultAttendantEndTime?: string | null;
    defaultAttendantMaxCredits?: number | null;
    reserveBetweenCleanings?: number | null;
    travelReserve?: number | null;
    showHoursInWorkerPlanner!: boolean;
    useOrderInPlanning!: boolean;
    showCleaningDelays!: boolean;
    allowPostponeCleanings!: boolean;
    emailAddressesForSendingPlan?: string | null;
    sendPlanToAttendantsByEmail!: boolean;
    fromEmailAddress?: string | null;
    cleanHostelRoomBedsInGroups!: boolean;
    windowsTimeZoneId?: string | null;
    ianaTimeZoneId?: string | null;
    plugins?: HotelSettingsPluginData[] | null;
    buildingsDistanceMatrixExists!: boolean;
    levelsDistanceMatrixExists!: boolean;
    buildingAward!: number;
    levelAward!: number;
    roomAward!: number;
    levelTime!: number;
    cleaningTime!: number;
    weightLevelChange!: number;
    weightCredits!: number;
    minutesPerCredit!: number;
    minCreditsForMultipleCleanersCleaning!: number;

    constructor(data?: IHotelSettingsData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.defaultCheckInTime = _data["defaultCheckInTime"] !== undefined ? _data["defaultCheckInTime"] : <any>null;
            this.defaultCheckOutTime = _data["defaultCheckOutTime"] !== undefined ? _data["defaultCheckOutTime"] : <any>null;
            this.defaultAttendantStartTime = _data["defaultAttendantStartTime"] !== undefined ? _data["defaultAttendantStartTime"] : <any>null;
            this.defaultAttendantEndTime = _data["defaultAttendantEndTime"] !== undefined ? _data["defaultAttendantEndTime"] : <any>null;
            this.defaultAttendantMaxCredits = _data["defaultAttendantMaxCredits"] !== undefined ? _data["defaultAttendantMaxCredits"] : <any>null;
            this.reserveBetweenCleanings = _data["reserveBetweenCleanings"] !== undefined ? _data["reserveBetweenCleanings"] : <any>null;
            this.travelReserve = _data["travelReserve"] !== undefined ? _data["travelReserve"] : <any>null;
            this.showHoursInWorkerPlanner = _data["showHoursInWorkerPlanner"] !== undefined ? _data["showHoursInWorkerPlanner"] : <any>null;
            this.useOrderInPlanning = _data["useOrderInPlanning"] !== undefined ? _data["useOrderInPlanning"] : <any>null;
            this.showCleaningDelays = _data["showCleaningDelays"] !== undefined ? _data["showCleaningDelays"] : <any>null;
            this.allowPostponeCleanings = _data["allowPostponeCleanings"] !== undefined ? _data["allowPostponeCleanings"] : <any>null;
            this.emailAddressesForSendingPlan = _data["emailAddressesForSendingPlan"] !== undefined ? _data["emailAddressesForSendingPlan"] : <any>null;
            this.sendPlanToAttendantsByEmail = _data["sendPlanToAttendantsByEmail"] !== undefined ? _data["sendPlanToAttendantsByEmail"] : <any>null;
            this.fromEmailAddress = _data["fromEmailAddress"] !== undefined ? _data["fromEmailAddress"] : <any>null;
            this.cleanHostelRoomBedsInGroups = _data["cleanHostelRoomBedsInGroups"] !== undefined ? _data["cleanHostelRoomBedsInGroups"] : <any>null;
            this.windowsTimeZoneId = _data["windowsTimeZoneId"] !== undefined ? _data["windowsTimeZoneId"] : <any>null;
            this.ianaTimeZoneId = _data["ianaTimeZoneId"] !== undefined ? _data["ianaTimeZoneId"] : <any>null;
            if (Array.isArray(_data["plugins"])) {
                this.plugins = [] as any;
                for (let item of _data["plugins"])
                    this.plugins!.push(HotelSettingsPluginData.fromJS(item));
            }
            this.buildingsDistanceMatrixExists = _data["buildingsDistanceMatrixExists"] !== undefined ? _data["buildingsDistanceMatrixExists"] : <any>null;
            this.levelsDistanceMatrixExists = _data["levelsDistanceMatrixExists"] !== undefined ? _data["levelsDistanceMatrixExists"] : <any>null;
            this.buildingAward = _data["buildingAward"] !== undefined ? _data["buildingAward"] : <any>null;
            this.levelAward = _data["levelAward"] !== undefined ? _data["levelAward"] : <any>null;
            this.roomAward = _data["roomAward"] !== undefined ? _data["roomAward"] : <any>null;
            this.levelTime = _data["levelTime"] !== undefined ? _data["levelTime"] : <any>null;
            this.cleaningTime = _data["cleaningTime"] !== undefined ? _data["cleaningTime"] : <any>null;
            this.weightLevelChange = _data["weightLevelChange"] !== undefined ? _data["weightLevelChange"] : <any>null;
            this.weightCredits = _data["weightCredits"] !== undefined ? _data["weightCredits"] : <any>null;
            this.minutesPerCredit = _data["minutesPerCredit"] !== undefined ? _data["minutesPerCredit"] : <any>null;
            this.minCreditsForMultipleCleanersCleaning = _data["minCreditsForMultipleCleanersCleaning"] !== undefined ? _data["minCreditsForMultipleCleanersCleaning"] : <any>null;
        }
    }

    static fromJS(data: any): HotelSettingsData {
        data = typeof data === 'object' ? data : {};
        let result = new HotelSettingsData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["defaultCheckInTime"] = this.defaultCheckInTime !== undefined ? this.defaultCheckInTime : <any>null;
        data["defaultCheckOutTime"] = this.defaultCheckOutTime !== undefined ? this.defaultCheckOutTime : <any>null;
        data["defaultAttendantStartTime"] = this.defaultAttendantStartTime !== undefined ? this.defaultAttendantStartTime : <any>null;
        data["defaultAttendantEndTime"] = this.defaultAttendantEndTime !== undefined ? this.defaultAttendantEndTime : <any>null;
        data["defaultAttendantMaxCredits"] = this.defaultAttendantMaxCredits !== undefined ? this.defaultAttendantMaxCredits : <any>null;
        data["reserveBetweenCleanings"] = this.reserveBetweenCleanings !== undefined ? this.reserveBetweenCleanings : <any>null;
        data["travelReserve"] = this.travelReserve !== undefined ? this.travelReserve : <any>null;
        data["showHoursInWorkerPlanner"] = this.showHoursInWorkerPlanner !== undefined ? this.showHoursInWorkerPlanner : <any>null;
        data["useOrderInPlanning"] = this.useOrderInPlanning !== undefined ? this.useOrderInPlanning : <any>null;
        data["showCleaningDelays"] = this.showCleaningDelays !== undefined ? this.showCleaningDelays : <any>null;
        data["allowPostponeCleanings"] = this.allowPostponeCleanings !== undefined ? this.allowPostponeCleanings : <any>null;
        data["emailAddressesForSendingPlan"] = this.emailAddressesForSendingPlan !== undefined ? this.emailAddressesForSendingPlan : <any>null;
        data["sendPlanToAttendantsByEmail"] = this.sendPlanToAttendantsByEmail !== undefined ? this.sendPlanToAttendantsByEmail : <any>null;
        data["fromEmailAddress"] = this.fromEmailAddress !== undefined ? this.fromEmailAddress : <any>null;
        data["cleanHostelRoomBedsInGroups"] = this.cleanHostelRoomBedsInGroups !== undefined ? this.cleanHostelRoomBedsInGroups : <any>null;
        data["windowsTimeZoneId"] = this.windowsTimeZoneId !== undefined ? this.windowsTimeZoneId : <any>null;
        data["ianaTimeZoneId"] = this.ianaTimeZoneId !== undefined ? this.ianaTimeZoneId : <any>null;
        if (Array.isArray(this.plugins)) {
            data["plugins"] = [];
            for (let item of this.plugins)
                data["plugins"].push(item.toJSON());
        }
        data["buildingsDistanceMatrixExists"] = this.buildingsDistanceMatrixExists !== undefined ? this.buildingsDistanceMatrixExists : <any>null;
        data["levelsDistanceMatrixExists"] = this.levelsDistanceMatrixExists !== undefined ? this.levelsDistanceMatrixExists : <any>null;
        data["buildingAward"] = this.buildingAward !== undefined ? this.buildingAward : <any>null;
        data["levelAward"] = this.levelAward !== undefined ? this.levelAward : <any>null;
        data["roomAward"] = this.roomAward !== undefined ? this.roomAward : <any>null;
        data["levelTime"] = this.levelTime !== undefined ? this.levelTime : <any>null;
        data["cleaningTime"] = this.cleaningTime !== undefined ? this.cleaningTime : <any>null;
        data["weightLevelChange"] = this.weightLevelChange !== undefined ? this.weightLevelChange : <any>null;
        data["weightCredits"] = this.weightCredits !== undefined ? this.weightCredits : <any>null;
        data["minutesPerCredit"] = this.minutesPerCredit !== undefined ? this.minutesPerCredit : <any>null;
        data["minCreditsForMultipleCleanersCleaning"] = this.minCreditsForMultipleCleanersCleaning !== undefined ? this.minCreditsForMultipleCleanersCleaning : <any>null;
        return data; 
    }
}

export interface IHotelSettingsData {
    id?: string | null;
    hotelId?: string | null;
    defaultCheckInTime?: string | null;
    defaultCheckOutTime?: string | null;
    defaultAttendantStartTime?: string | null;
    defaultAttendantEndTime?: string | null;
    defaultAttendantMaxCredits?: number | null;
    reserveBetweenCleanings?: number | null;
    travelReserve?: number | null;
    showHoursInWorkerPlanner: boolean;
    useOrderInPlanning: boolean;
    showCleaningDelays: boolean;
    allowPostponeCleanings: boolean;
    emailAddressesForSendingPlan?: string | null;
    sendPlanToAttendantsByEmail: boolean;
    fromEmailAddress?: string | null;
    cleanHostelRoomBedsInGroups: boolean;
    windowsTimeZoneId?: string | null;
    ianaTimeZoneId?: string | null;
    plugins?: HotelSettingsPluginData[] | null;
    buildingsDistanceMatrixExists: boolean;
    levelsDistanceMatrixExists: boolean;
    buildingAward: number;
    levelAward: number;
    roomAward: number;
    levelTime: number;
    cleaningTime: number;
    weightLevelChange: number;
    weightCredits: number;
    minutesPerCredit: number;
    minCreditsForMultipleCleanersCleaning: number;
}

export class HotelSettingsPluginData implements IHotelSettingsPluginData {
    id!: string;
    name?: string | null;
    ordinalNumber!: number;

    constructor(data?: IHotelSettingsPluginData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.ordinalNumber = _data["ordinalNumber"] !== undefined ? _data["ordinalNumber"] : <any>null;
        }
    }

    static fromJS(data: any): HotelSettingsPluginData {
        data = typeof data === 'object' ? data : {};
        let result = new HotelSettingsPluginData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["ordinalNumber"] = this.ordinalNumber !== undefined ? this.ordinalNumber : <any>null;
        return data; 
    }
}

export interface IHotelSettingsPluginData {
    id: string;
    name?: string | null;
    ordinalNumber: number;
}

export class ProcessResponseOfString extends ProcessResponse implements IProcessResponseOfString {
    data?: string | null;

    constructor(data?: IProcessResponseOfString) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] !== undefined ? _data["data"] : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfString {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data !== undefined ? this.data : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfString extends IProcessResponse {
    data?: string | null;
}

export class SaveHotelSettingsCommand implements ISaveHotelSettingsCommand {
    id?: string | null;
    hotelId?: string | null;
    defaultCheckInTime?: string | null;
    defaultCheckOutTime?: string | null;
    defaultAttendantStartTime?: string | null;
    defaultAttendantEndTime?: string | null;
    defaultAttendantMaxCredits?: number | null;
    reserveBetweenCleanings?: number | null;
    travelReserve?: number | null;
    showHoursInWorkerPlanner!: boolean;
    useOrderInPlanning!: boolean;
    showCleaningDelays!: boolean;
    allowPostponeCleanings!: boolean;
    emailAddressesForSendingPlan?: string | null;
    sendPlanToAttendantsByEmail!: boolean;
    fromEmailAddress?: string | null;
    cleanHostelRoomBedsInGroups!: boolean;
    buildingAward!: number;
    levelAward!: number;
    roomAward!: number;
    levelTime!: number;
    cleaningTime!: number;
    weightLevelChange!: number;
    weightCredits!: number;
    minutesPerCredit!: number;
    minCreditsForMultipleCleanersCleaning!: number;

    constructor(data?: ISaveHotelSettingsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.defaultCheckInTime = _data["defaultCheckInTime"] !== undefined ? _data["defaultCheckInTime"] : <any>null;
            this.defaultCheckOutTime = _data["defaultCheckOutTime"] !== undefined ? _data["defaultCheckOutTime"] : <any>null;
            this.defaultAttendantStartTime = _data["defaultAttendantStartTime"] !== undefined ? _data["defaultAttendantStartTime"] : <any>null;
            this.defaultAttendantEndTime = _data["defaultAttendantEndTime"] !== undefined ? _data["defaultAttendantEndTime"] : <any>null;
            this.defaultAttendantMaxCredits = _data["defaultAttendantMaxCredits"] !== undefined ? _data["defaultAttendantMaxCredits"] : <any>null;
            this.reserveBetweenCleanings = _data["reserveBetweenCleanings"] !== undefined ? _data["reserveBetweenCleanings"] : <any>null;
            this.travelReserve = _data["travelReserve"] !== undefined ? _data["travelReserve"] : <any>null;
            this.showHoursInWorkerPlanner = _data["showHoursInWorkerPlanner"] !== undefined ? _data["showHoursInWorkerPlanner"] : <any>null;
            this.useOrderInPlanning = _data["useOrderInPlanning"] !== undefined ? _data["useOrderInPlanning"] : <any>null;
            this.showCleaningDelays = _data["showCleaningDelays"] !== undefined ? _data["showCleaningDelays"] : <any>null;
            this.allowPostponeCleanings = _data["allowPostponeCleanings"] !== undefined ? _data["allowPostponeCleanings"] : <any>null;
            this.emailAddressesForSendingPlan = _data["emailAddressesForSendingPlan"] !== undefined ? _data["emailAddressesForSendingPlan"] : <any>null;
            this.sendPlanToAttendantsByEmail = _data["sendPlanToAttendantsByEmail"] !== undefined ? _data["sendPlanToAttendantsByEmail"] : <any>null;
            this.fromEmailAddress = _data["fromEmailAddress"] !== undefined ? _data["fromEmailAddress"] : <any>null;
            this.cleanHostelRoomBedsInGroups = _data["cleanHostelRoomBedsInGroups"] !== undefined ? _data["cleanHostelRoomBedsInGroups"] : <any>null;
            this.buildingAward = _data["buildingAward"] !== undefined ? _data["buildingAward"] : <any>null;
            this.levelAward = _data["levelAward"] !== undefined ? _data["levelAward"] : <any>null;
            this.roomAward = _data["roomAward"] !== undefined ? _data["roomAward"] : <any>null;
            this.levelTime = _data["levelTime"] !== undefined ? _data["levelTime"] : <any>null;
            this.cleaningTime = _data["cleaningTime"] !== undefined ? _data["cleaningTime"] : <any>null;
            this.weightLevelChange = _data["weightLevelChange"] !== undefined ? _data["weightLevelChange"] : <any>null;
            this.weightCredits = _data["weightCredits"] !== undefined ? _data["weightCredits"] : <any>null;
            this.minutesPerCredit = _data["minutesPerCredit"] !== undefined ? _data["minutesPerCredit"] : <any>null;
            this.minCreditsForMultipleCleanersCleaning = _data["minCreditsForMultipleCleanersCleaning"] !== undefined ? _data["minCreditsForMultipleCleanersCleaning"] : <any>null;
        }
    }

    static fromJS(data: any): SaveHotelSettingsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SaveHotelSettingsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["defaultCheckInTime"] = this.defaultCheckInTime !== undefined ? this.defaultCheckInTime : <any>null;
        data["defaultCheckOutTime"] = this.defaultCheckOutTime !== undefined ? this.defaultCheckOutTime : <any>null;
        data["defaultAttendantStartTime"] = this.defaultAttendantStartTime !== undefined ? this.defaultAttendantStartTime : <any>null;
        data["defaultAttendantEndTime"] = this.defaultAttendantEndTime !== undefined ? this.defaultAttendantEndTime : <any>null;
        data["defaultAttendantMaxCredits"] = this.defaultAttendantMaxCredits !== undefined ? this.defaultAttendantMaxCredits : <any>null;
        data["reserveBetweenCleanings"] = this.reserveBetweenCleanings !== undefined ? this.reserveBetweenCleanings : <any>null;
        data["travelReserve"] = this.travelReserve !== undefined ? this.travelReserve : <any>null;
        data["showHoursInWorkerPlanner"] = this.showHoursInWorkerPlanner !== undefined ? this.showHoursInWorkerPlanner : <any>null;
        data["useOrderInPlanning"] = this.useOrderInPlanning !== undefined ? this.useOrderInPlanning : <any>null;
        data["showCleaningDelays"] = this.showCleaningDelays !== undefined ? this.showCleaningDelays : <any>null;
        data["allowPostponeCleanings"] = this.allowPostponeCleanings !== undefined ? this.allowPostponeCleanings : <any>null;
        data["emailAddressesForSendingPlan"] = this.emailAddressesForSendingPlan !== undefined ? this.emailAddressesForSendingPlan : <any>null;
        data["sendPlanToAttendantsByEmail"] = this.sendPlanToAttendantsByEmail !== undefined ? this.sendPlanToAttendantsByEmail : <any>null;
        data["fromEmailAddress"] = this.fromEmailAddress !== undefined ? this.fromEmailAddress : <any>null;
        data["cleanHostelRoomBedsInGroups"] = this.cleanHostelRoomBedsInGroups !== undefined ? this.cleanHostelRoomBedsInGroups : <any>null;
        data["buildingAward"] = this.buildingAward !== undefined ? this.buildingAward : <any>null;
        data["levelAward"] = this.levelAward !== undefined ? this.levelAward : <any>null;
        data["roomAward"] = this.roomAward !== undefined ? this.roomAward : <any>null;
        data["levelTime"] = this.levelTime !== undefined ? this.levelTime : <any>null;
        data["cleaningTime"] = this.cleaningTime !== undefined ? this.cleaningTime : <any>null;
        data["weightLevelChange"] = this.weightLevelChange !== undefined ? this.weightLevelChange : <any>null;
        data["weightCredits"] = this.weightCredits !== undefined ? this.weightCredits : <any>null;
        data["minutesPerCredit"] = this.minutesPerCredit !== undefined ? this.minutesPerCredit : <any>null;
        data["minCreditsForMultipleCleanersCleaning"] = this.minCreditsForMultipleCleanersCleaning !== undefined ? this.minCreditsForMultipleCleanersCleaning : <any>null;
        return data; 
    }
}

export interface ISaveHotelSettingsCommand {
    id?: string | null;
    hotelId?: string | null;
    defaultCheckInTime?: string | null;
    defaultCheckOutTime?: string | null;
    defaultAttendantStartTime?: string | null;
    defaultAttendantEndTime?: string | null;
    defaultAttendantMaxCredits?: number | null;
    reserveBetweenCleanings?: number | null;
    travelReserve?: number | null;
    showHoursInWorkerPlanner: boolean;
    useOrderInPlanning: boolean;
    showCleaningDelays: boolean;
    allowPostponeCleanings: boolean;
    emailAddressesForSendingPlan?: string | null;
    sendPlanToAttendantsByEmail: boolean;
    fromEmailAddress?: string | null;
    cleanHostelRoomBedsInGroups: boolean;
    buildingAward: number;
    levelAward: number;
    roomAward: number;
    levelTime: number;
    cleaningTime: number;
    weightLevelChange: number;
    weightCredits: number;
    minutesPerCredit: number;
    minCreditsForMultipleCleanersCleaning: number;
}

export enum DistanceMatrixType {
    BUILDING = 0,
    FLOOR = 1,
}

export class ImportAssetsPreview implements IImportAssetsPreview {
    fileName?: string | null;
    assets?: ImportAssetPreview[] | null;
    hasError!: boolean;
    message?: string | null;

    constructor(data?: IImportAssetsPreview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileName = _data["fileName"] !== undefined ? _data["fileName"] : <any>null;
            if (Array.isArray(_data["assets"])) {
                this.assets = [] as any;
                for (let item of _data["assets"])
                    this.assets!.push(ImportAssetPreview.fromJS(item));
            }
            this.hasError = _data["hasError"] !== undefined ? _data["hasError"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
        }
    }

    static fromJS(data: any): ImportAssetsPreview {
        data = typeof data === 'object' ? data : {};
        let result = new ImportAssetsPreview();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        if (Array.isArray(this.assets)) {
            data["assets"] = [];
            for (let item of this.assets)
                data["assets"].push(item.toJSON());
        }
        data["hasError"] = this.hasError !== undefined ? this.hasError : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        return data; 
    }
}

export interface IImportAssetsPreview {
    fileName?: string | null;
    assets?: ImportAssetPreview[] | null;
    hasError: boolean;
    message?: string | null;
}

export class ImportAssetPreview implements IImportAssetPreview {
    assetName?: string | null;
    assetGroupName?: string | null;
    isBulk!: boolean;
    serialNumber?: string | null;
    assetImageName?: string | null;
    assetQrCodeImageName?: string | null;
    assetTags?: string | null;
    hasError!: boolean;
    message?: string | null;
    alreadyExists!: boolean;

    constructor(data?: IImportAssetPreview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetName = _data["assetName"] !== undefined ? _data["assetName"] : <any>null;
            this.assetGroupName = _data["assetGroupName"] !== undefined ? _data["assetGroupName"] : <any>null;
            this.isBulk = _data["isBulk"] !== undefined ? _data["isBulk"] : <any>null;
            this.serialNumber = _data["serialNumber"] !== undefined ? _data["serialNumber"] : <any>null;
            this.assetImageName = _data["assetImageName"] !== undefined ? _data["assetImageName"] : <any>null;
            this.assetQrCodeImageName = _data["assetQrCodeImageName"] !== undefined ? _data["assetQrCodeImageName"] : <any>null;
            this.assetTags = _data["assetTags"] !== undefined ? _data["assetTags"] : <any>null;
            this.hasError = _data["hasError"] !== undefined ? _data["hasError"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.alreadyExists = _data["alreadyExists"] !== undefined ? _data["alreadyExists"] : <any>null;
        }
    }

    static fromJS(data: any): ImportAssetPreview {
        data = typeof data === 'object' ? data : {};
        let result = new ImportAssetPreview();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetName"] = this.assetName !== undefined ? this.assetName : <any>null;
        data["assetGroupName"] = this.assetGroupName !== undefined ? this.assetGroupName : <any>null;
        data["isBulk"] = this.isBulk !== undefined ? this.isBulk : <any>null;
        data["serialNumber"] = this.serialNumber !== undefined ? this.serialNumber : <any>null;
        data["assetImageName"] = this.assetImageName !== undefined ? this.assetImageName : <any>null;
        data["assetQrCodeImageName"] = this.assetQrCodeImageName !== undefined ? this.assetQrCodeImageName : <any>null;
        data["assetTags"] = this.assetTags !== undefined ? this.assetTags : <any>null;
        data["hasError"] = this.hasError !== undefined ? this.hasError : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["alreadyExists"] = this.alreadyExists !== undefined ? this.alreadyExists : <any>null;
        return data; 
    }
}

export interface IImportAssetPreview {
    assetName?: string | null;
    assetGroupName?: string | null;
    isBulk: boolean;
    serialNumber?: string | null;
    assetImageName?: string | null;
    assetQrCodeImageName?: string | null;
    assetTags?: string | null;
    hasError: boolean;
    message?: string | null;
    alreadyExists: boolean;
}

export class ProcessResponseOfIEnumerableOfSaveAssetImportResult extends ProcessResponse implements IProcessResponseOfIEnumerableOfSaveAssetImportResult {
    data?: SaveAssetImportResult[] | null;

    constructor(data?: IProcessResponseOfIEnumerableOfSaveAssetImportResult) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SaveAssetImportResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProcessResponseOfIEnumerableOfSaveAssetImportResult {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfIEnumerableOfSaveAssetImportResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfIEnumerableOfSaveAssetImportResult extends IProcessResponse {
    data?: SaveAssetImportResult[] | null;
}

export class SaveAssetImportResult implements ISaveAssetImportResult {
    id?: string | null;
    assetName?: string | null;
    assetGroupName?: string | null;
    hasErrors!: boolean;
    message?: string | null;

    constructor(data?: ISaveAssetImportResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.assetName = _data["assetName"] !== undefined ? _data["assetName"] : <any>null;
            this.assetGroupName = _data["assetGroupName"] !== undefined ? _data["assetGroupName"] : <any>null;
            this.hasErrors = _data["hasErrors"] !== undefined ? _data["hasErrors"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
        }
    }

    static fromJS(data: any): SaveAssetImportResult {
        data = typeof data === 'object' ? data : {};
        let result = new SaveAssetImportResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["assetName"] = this.assetName !== undefined ? this.assetName : <any>null;
        data["assetGroupName"] = this.assetGroupName !== undefined ? this.assetGroupName : <any>null;
        data["hasErrors"] = this.hasErrors !== undefined ? this.hasErrors : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        return data; 
    }
}

export interface ISaveAssetImportResult {
    id?: string | null;
    assetName?: string | null;
    assetGroupName?: string | null;
    hasErrors: boolean;
    message?: string | null;
}

export class SaveImportPreviewAssetsCommand implements ISaveImportPreviewAssetsCommand {
    assets?: ImportAssetPreview[] | null;

    constructor(data?: ISaveImportPreviewAssetsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["assets"])) {
                this.assets = [] as any;
                for (let item of _data["assets"])
                    this.assets!.push(ImportAssetPreview.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SaveImportPreviewAssetsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SaveImportPreviewAssetsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.assets)) {
            data["assets"] = [];
            for (let item of this.assets)
                data["assets"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISaveImportPreviewAssetsCommand {
    assets?: ImportAssetPreview[] | null;
}

export class ImportAssetActionsPreview implements IImportAssetActionsPreview {
    fileName?: string | null;
    assetActions?: ImportAssetActionPreview[] | null;
    hasError!: boolean;
    message?: string | null;

    constructor(data?: IImportAssetActionsPreview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileName = _data["fileName"] !== undefined ? _data["fileName"] : <any>null;
            if (Array.isArray(_data["assetActions"])) {
                this.assetActions = [] as any;
                for (let item of _data["assetActions"])
                    this.assetActions!.push(ImportAssetActionPreview.fromJS(item));
            }
            this.hasError = _data["hasError"] !== undefined ? _data["hasError"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
        }
    }

    static fromJS(data: any): ImportAssetActionsPreview {
        data = typeof data === 'object' ? data : {};
        let result = new ImportAssetActionsPreview();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        if (Array.isArray(this.assetActions)) {
            data["assetActions"] = [];
            for (let item of this.assetActions)
                data["assetActions"].push(item.toJSON());
        }
        data["hasError"] = this.hasError !== undefined ? this.hasError : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        return data; 
    }
}

export interface IImportAssetActionsPreview {
    fileName?: string | null;
    assetActions?: ImportAssetActionPreview[] | null;
    hasError: boolean;
    message?: string | null;
}

export class ImportAssetActionPreview implements IImportAssetActionPreview {
    asset?: string | null;
    action?: string | null;
    credits?: number | null;
    price?: number | null;
    type?: string | null;
    priority?: string | null;
    hasError!: boolean;
    message?: string | null;

    constructor(data?: IImportAssetActionPreview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.asset = _data["asset"] !== undefined ? _data["asset"] : <any>null;
            this.action = _data["action"] !== undefined ? _data["action"] : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.priority = _data["priority"] !== undefined ? _data["priority"] : <any>null;
            this.hasError = _data["hasError"] !== undefined ? _data["hasError"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
        }
    }

    static fromJS(data: any): ImportAssetActionPreview {
        data = typeof data === 'object' ? data : {};
        let result = new ImportAssetActionPreview();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["asset"] = this.asset !== undefined ? this.asset : <any>null;
        data["action"] = this.action !== undefined ? this.action : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["priority"] = this.priority !== undefined ? this.priority : <any>null;
        data["hasError"] = this.hasError !== undefined ? this.hasError : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        return data; 
    }
}

export interface IImportAssetActionPreview {
    asset?: string | null;
    action?: string | null;
    credits?: number | null;
    price?: number | null;
    type?: string | null;
    priority?: string | null;
    hasError: boolean;
    message?: string | null;
}

export class ProcessResponseOfIEnumerableOfSaveAssetActionImportResult extends ProcessResponse implements IProcessResponseOfIEnumerableOfSaveAssetActionImportResult {
    data?: SaveAssetActionImportResult[] | null;

    constructor(data?: IProcessResponseOfIEnumerableOfSaveAssetActionImportResult) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SaveAssetActionImportResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProcessResponseOfIEnumerableOfSaveAssetActionImportResult {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfIEnumerableOfSaveAssetActionImportResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfIEnumerableOfSaveAssetActionImportResult extends IProcessResponse {
    data?: SaveAssetActionImportResult[] | null;
}

export class SaveAssetActionImportResult extends ImportAssetActionPreview implements ISaveAssetActionImportResult {
    actionId?: string | null;

    constructor(data?: ISaveAssetActionImportResult) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.actionId = _data["actionId"] !== undefined ? _data["actionId"] : <any>null;
        }
    }

    static fromJS(data: any): SaveAssetActionImportResult {
        data = typeof data === 'object' ? data : {};
        let result = new SaveAssetActionImportResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["actionId"] = this.actionId !== undefined ? this.actionId : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface ISaveAssetActionImportResult extends IImportAssetActionPreview {
    actionId?: string | null;
}

export class SaveImportPreviewAssetActionsCommand implements ISaveImportPreviewAssetActionsCommand {
    assetActions?: ImportAssetActionPreview[] | null;

    constructor(data?: ISaveImportPreviewAssetActionsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["assetActions"])) {
                this.assetActions = [] as any;
                for (let item of _data["assetActions"])
                    this.assetActions!.push(ImportAssetActionPreview.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SaveImportPreviewAssetActionsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SaveImportPreviewAssetActionsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.assetActions)) {
            data["assetActions"] = [];
            for (let item of this.assetActions)
                data["assetActions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISaveImportPreviewAssetActionsCommand {
    assetActions?: ImportAssetActionPreview[] | null;
}

export class ImportRoomsPreview implements IImportRoomsPreview {
    fileName?: string | null;
    rooms?: ImportRoomPreview[] | null;
    hasError!: boolean;
    message?: string | null;

    constructor(data?: IImportRoomsPreview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileName = _data["fileName"] !== undefined ? _data["fileName"] : <any>null;
            if (Array.isArray(_data["rooms"])) {
                this.rooms = [] as any;
                for (let item of _data["rooms"])
                    this.rooms!.push(ImportRoomPreview.fromJS(item));
            }
            this.hasError = _data["hasError"] !== undefined ? _data["hasError"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
        }
    }

    static fromJS(data: any): ImportRoomsPreview {
        data = typeof data === 'object' ? data : {};
        let result = new ImportRoomsPreview();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        if (Array.isArray(this.rooms)) {
            data["rooms"] = [];
            for (let item of this.rooms)
                data["rooms"].push(item.toJSON());
        }
        data["hasError"] = this.hasError !== undefined ? this.hasError : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        return data; 
    }
}

export interface IImportRoomsPreview {
    fileName?: string | null;
    rooms?: ImportRoomPreview[] | null;
    hasError: boolean;
    message?: string | null;
}

export class ImportRoomPreview implements IImportRoomPreview {
    roomName?: string | null;
    roomType?: string | null;
    roomCategory?: string | null;
    beds?: string | null;
    order?: string | null;
    floorSubSection?: string | null;
    floorSection?: string | null;
    floor?: string | null;
    building?: string | null;
    area?: string | null;
    hotel?: string | null;
    hasError!: boolean;
    message?: string | null;
    alreadyExists!: boolean;

    constructor(data?: IImportRoomPreview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomName = _data["roomName"] !== undefined ? _data["roomName"] : <any>null;
            this.roomType = _data["roomType"] !== undefined ? _data["roomType"] : <any>null;
            this.roomCategory = _data["roomCategory"] !== undefined ? _data["roomCategory"] : <any>null;
            this.beds = _data["beds"] !== undefined ? _data["beds"] : <any>null;
            this.order = _data["order"] !== undefined ? _data["order"] : <any>null;
            this.floorSubSection = _data["floorSubSection"] !== undefined ? _data["floorSubSection"] : <any>null;
            this.floorSection = _data["floorSection"] !== undefined ? _data["floorSection"] : <any>null;
            this.floor = _data["floor"] !== undefined ? _data["floor"] : <any>null;
            this.building = _data["building"] !== undefined ? _data["building"] : <any>null;
            this.area = _data["area"] !== undefined ? _data["area"] : <any>null;
            this.hotel = _data["hotel"] !== undefined ? _data["hotel"] : <any>null;
            this.hasError = _data["hasError"] !== undefined ? _data["hasError"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.alreadyExists = _data["alreadyExists"] !== undefined ? _data["alreadyExists"] : <any>null;
        }
    }

    static fromJS(data: any): ImportRoomPreview {
        data = typeof data === 'object' ? data : {};
        let result = new ImportRoomPreview();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomName"] = this.roomName !== undefined ? this.roomName : <any>null;
        data["roomType"] = this.roomType !== undefined ? this.roomType : <any>null;
        data["roomCategory"] = this.roomCategory !== undefined ? this.roomCategory : <any>null;
        data["beds"] = this.beds !== undefined ? this.beds : <any>null;
        data["order"] = this.order !== undefined ? this.order : <any>null;
        data["floorSubSection"] = this.floorSubSection !== undefined ? this.floorSubSection : <any>null;
        data["floorSection"] = this.floorSection !== undefined ? this.floorSection : <any>null;
        data["floor"] = this.floor !== undefined ? this.floor : <any>null;
        data["building"] = this.building !== undefined ? this.building : <any>null;
        data["area"] = this.area !== undefined ? this.area : <any>null;
        data["hotel"] = this.hotel !== undefined ? this.hotel : <any>null;
        data["hasError"] = this.hasError !== undefined ? this.hasError : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["alreadyExists"] = this.alreadyExists !== undefined ? this.alreadyExists : <any>null;
        return data; 
    }
}

export interface IImportRoomPreview {
    roomName?: string | null;
    roomType?: string | null;
    roomCategory?: string | null;
    beds?: string | null;
    order?: string | null;
    floorSubSection?: string | null;
    floorSection?: string | null;
    floor?: string | null;
    building?: string | null;
    area?: string | null;
    hotel?: string | null;
    hasError: boolean;
    message?: string | null;
    alreadyExists: boolean;
}

export class ProcessResponseOfIEnumerableOfSaveRoomImportResult extends ProcessResponse implements IProcessResponseOfIEnumerableOfSaveRoomImportResult {
    data?: SaveRoomImportResult[] | null;

    constructor(data?: IProcessResponseOfIEnumerableOfSaveRoomImportResult) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SaveRoomImportResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProcessResponseOfIEnumerableOfSaveRoomImportResult {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfIEnumerableOfSaveRoomImportResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfIEnumerableOfSaveRoomImportResult extends IProcessResponse {
    data?: SaveRoomImportResult[] | null;
}

export class SaveRoomImportResult implements ISaveRoomImportResult {
    id?: string | null;
    roomName?: string | null;
    roomType?: string | null;
    roomCategory?: string | null;
    beds?: string | null;
    order?: string | null;
    floorSubSection?: string | null;
    floorSection?: string | null;
    floor?: string | null;
    building?: string | null;
    hotel?: string | null;
    area?: string | null;
    hasErrors!: boolean;
    message?: string | null;

    constructor(data?: ISaveRoomImportResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.roomName = _data["roomName"] !== undefined ? _data["roomName"] : <any>null;
            this.roomType = _data["roomType"] !== undefined ? _data["roomType"] : <any>null;
            this.roomCategory = _data["roomCategory"] !== undefined ? _data["roomCategory"] : <any>null;
            this.beds = _data["beds"] !== undefined ? _data["beds"] : <any>null;
            this.order = _data["order"] !== undefined ? _data["order"] : <any>null;
            this.floorSubSection = _data["floorSubSection"] !== undefined ? _data["floorSubSection"] : <any>null;
            this.floorSection = _data["floorSection"] !== undefined ? _data["floorSection"] : <any>null;
            this.floor = _data["floor"] !== undefined ? _data["floor"] : <any>null;
            this.building = _data["building"] !== undefined ? _data["building"] : <any>null;
            this.hotel = _data["hotel"] !== undefined ? _data["hotel"] : <any>null;
            this.area = _data["area"] !== undefined ? _data["area"] : <any>null;
            this.hasErrors = _data["hasErrors"] !== undefined ? _data["hasErrors"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
        }
    }

    static fromJS(data: any): SaveRoomImportResult {
        data = typeof data === 'object' ? data : {};
        let result = new SaveRoomImportResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["roomName"] = this.roomName !== undefined ? this.roomName : <any>null;
        data["roomType"] = this.roomType !== undefined ? this.roomType : <any>null;
        data["roomCategory"] = this.roomCategory !== undefined ? this.roomCategory : <any>null;
        data["beds"] = this.beds !== undefined ? this.beds : <any>null;
        data["order"] = this.order !== undefined ? this.order : <any>null;
        data["floorSubSection"] = this.floorSubSection !== undefined ? this.floorSubSection : <any>null;
        data["floorSection"] = this.floorSection !== undefined ? this.floorSection : <any>null;
        data["floor"] = this.floor !== undefined ? this.floor : <any>null;
        data["building"] = this.building !== undefined ? this.building : <any>null;
        data["hotel"] = this.hotel !== undefined ? this.hotel : <any>null;
        data["area"] = this.area !== undefined ? this.area : <any>null;
        data["hasErrors"] = this.hasErrors !== undefined ? this.hasErrors : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        return data; 
    }
}

export interface ISaveRoomImportResult {
    id?: string | null;
    roomName?: string | null;
    roomType?: string | null;
    roomCategory?: string | null;
    beds?: string | null;
    order?: string | null;
    floorSubSection?: string | null;
    floorSection?: string | null;
    floor?: string | null;
    building?: string | null;
    hotel?: string | null;
    area?: string | null;
    hasErrors: boolean;
    message?: string | null;
}

export class SaveImportPreviewRoomsCommand implements ISaveImportPreviewRoomsCommand {
    rooms?: ImportRoomPreview[] | null;

    constructor(data?: ISaveImportPreviewRoomsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["rooms"])) {
                this.rooms = [] as any;
                for (let item of _data["rooms"])
                    this.rooms!.push(ImportRoomPreview.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SaveImportPreviewRoomsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SaveImportPreviewRoomsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rooms)) {
            data["rooms"] = [];
            for (let item of this.rooms)
                data["rooms"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISaveImportPreviewRoomsCommand {
    rooms?: ImportRoomPreview[] | null;
}

export class ImportUsersPreview implements IImportUsersPreview {
    fileName?: string | null;
    users?: ImportUserPreview[] | null;
    hasError!: boolean;
    message?: string | null;

    constructor(data?: IImportUsersPreview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileName = _data["fileName"] !== undefined ? _data["fileName"] : <any>null;
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(ImportUserPreview.fromJS(item));
            }
            this.hasError = _data["hasError"] !== undefined ? _data["hasError"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
        }
    }

    static fromJS(data: any): ImportUsersPreview {
        data = typeof data === 'object' ? data : {};
        let result = new ImportUsersPreview();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        data["hasError"] = this.hasError !== undefined ? this.hasError : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        return data; 
    }
}

export interface IImportUsersPreview {
    fileName?: string | null;
    users?: ImportUserPreview[] | null;
    hasError: boolean;
    message?: string | null;
}

export class ImportUserPreview implements IImportUserPreview {
    alreadyExists!: boolean;
    defaultAvatarColorHex?: string | null;
    email?: string | null;
    firstName?: string | null;
    hasError!: boolean;
    isUserGroupLeader!: boolean;
    isUserSubGroupLeader!: boolean;
    lastName?: string | null;
    message?: string | null;
    password?: string | null;
    phone?: string | null;
    roleName?: string | null;
    userGroup?: string | null;
    userName?: string | null;
    userSubGroup?: string | null;
    accessibleHotels?: string | null;

    constructor(data?: IImportUserPreview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.alreadyExists = _data["alreadyExists"] !== undefined ? _data["alreadyExists"] : <any>null;
            this.defaultAvatarColorHex = _data["defaultAvatarColorHex"] !== undefined ? _data["defaultAvatarColorHex"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.hasError = _data["hasError"] !== undefined ? _data["hasError"] : <any>null;
            this.isUserGroupLeader = _data["isUserGroupLeader"] !== undefined ? _data["isUserGroupLeader"] : <any>null;
            this.isUserSubGroupLeader = _data["isUserSubGroupLeader"] !== undefined ? _data["isUserSubGroupLeader"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
            this.phone = _data["phone"] !== undefined ? _data["phone"] : <any>null;
            this.roleName = _data["roleName"] !== undefined ? _data["roleName"] : <any>null;
            this.userGroup = _data["userGroup"] !== undefined ? _data["userGroup"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.userSubGroup = _data["userSubGroup"] !== undefined ? _data["userSubGroup"] : <any>null;
            this.accessibleHotels = _data["accessibleHotels"] !== undefined ? _data["accessibleHotels"] : <any>null;
        }
    }

    static fromJS(data: any): ImportUserPreview {
        data = typeof data === 'object' ? data : {};
        let result = new ImportUserPreview();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["alreadyExists"] = this.alreadyExists !== undefined ? this.alreadyExists : <any>null;
        data["defaultAvatarColorHex"] = this.defaultAvatarColorHex !== undefined ? this.defaultAvatarColorHex : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["hasError"] = this.hasError !== undefined ? this.hasError : <any>null;
        data["isUserGroupLeader"] = this.isUserGroupLeader !== undefined ? this.isUserGroupLeader : <any>null;
        data["isUserSubGroupLeader"] = this.isUserSubGroupLeader !== undefined ? this.isUserSubGroupLeader : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["phone"] = this.phone !== undefined ? this.phone : <any>null;
        data["roleName"] = this.roleName !== undefined ? this.roleName : <any>null;
        data["userGroup"] = this.userGroup !== undefined ? this.userGroup : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["userSubGroup"] = this.userSubGroup !== undefined ? this.userSubGroup : <any>null;
        data["accessibleHotels"] = this.accessibleHotels !== undefined ? this.accessibleHotels : <any>null;
        return data; 
    }
}

export interface IImportUserPreview {
    alreadyExists: boolean;
    defaultAvatarColorHex?: string | null;
    email?: string | null;
    firstName?: string | null;
    hasError: boolean;
    isUserGroupLeader: boolean;
    isUserSubGroupLeader: boolean;
    lastName?: string | null;
    message?: string | null;
    password?: string | null;
    phone?: string | null;
    roleName?: string | null;
    userGroup?: string | null;
    userName?: string | null;
    userSubGroup?: string | null;
    accessibleHotels?: string | null;
}

export class ProcessResponseOfIEnumerableOfSaveUserImportResult extends ProcessResponse implements IProcessResponseOfIEnumerableOfSaveUserImportResult {
    data?: SaveUserImportResult[] | null;

    constructor(data?: IProcessResponseOfIEnumerableOfSaveUserImportResult) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SaveUserImportResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProcessResponseOfIEnumerableOfSaveUserImportResult {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfIEnumerableOfSaveUserImportResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfIEnumerableOfSaveUserImportResult extends IProcessResponse {
    data?: SaveUserImportResult[] | null;
}

export class SaveUserImportResult implements ISaveUserImportResult {
    id?: string | null;
    userName?: string | null;
    hasErrors!: boolean;
    message?: string | null;

    constructor(data?: ISaveUserImportResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.hasErrors = _data["hasErrors"] !== undefined ? _data["hasErrors"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
        }
    }

    static fromJS(data: any): SaveUserImportResult {
        data = typeof data === 'object' ? data : {};
        let result = new SaveUserImportResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["hasErrors"] = this.hasErrors !== undefined ? this.hasErrors : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        return data; 
    }
}

export interface ISaveUserImportResult {
    id?: string | null;
    userName?: string | null;
    hasErrors: boolean;
    message?: string | null;
}

export class SaveImportPreviewUsersCommand implements ISaveImportPreviewUsersCommand {
    users?: ImportUserPreview[] | null;

    constructor(data?: ISaveImportPreviewUsersCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(ImportUserPreview.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SaveImportPreviewUsersCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SaveImportPreviewUsersCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISaveImportPreviewUsersCommand {
    users?: ImportUserPreview[] | null;
}

export class ProcessResponseOfPageOfOfLostAndFoundListItem extends ProcessResponse implements IProcessResponseOfPageOfOfLostAndFoundListItem {
    data?: PageOfOfLostAndFoundListItem | null;

    constructor(data?: IProcessResponseOfPageOfOfLostAndFoundListItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? PageOfOfLostAndFoundListItem.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfPageOfOfLostAndFoundListItem {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfPageOfOfLostAndFoundListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfPageOfOfLostAndFoundListItem extends IProcessResponse {
    data?: PageOfOfLostAndFoundListItem | null;
}

export class PageOfOfLostAndFoundListItem implements IPageOfOfLostAndFoundListItem {
    items?: LostAndFoundListItem[] | null;
    totalNumberOfItems!: number;

    constructor(data?: IPageOfOfLostAndFoundListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(LostAndFoundListItem.fromJS(item));
            }
            this.totalNumberOfItems = _data["totalNumberOfItems"] !== undefined ? _data["totalNumberOfItems"] : <any>null;
        }
    }

    static fromJS(data: any): PageOfOfLostAndFoundListItem {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfOfLostAndFoundListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalNumberOfItems"] = this.totalNumberOfItems !== undefined ? this.totalNumberOfItems : <any>null;
        return data; 
    }
}

export interface IPageOfOfLostAndFoundListItem {
    items?: LostAndFoundListItem[] | null;
    totalNumberOfItems: number;
}

export class LostAndFoundListItem implements ILostAndFoundListItem {
    id!: string;
    description?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    address?: string | null;
    phoneNumber?: string | null;
    referenceNumber?: string | null;
    notes?: string | null;
    lostOn?: moment.Moment | null;
    status!: LostAndFoundStatus;
    typeOfLoss!: TypeOfLoss;

    constructor(data?: ILostAndFoundListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.address = _data["address"] !== undefined ? _data["address"] : <any>null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
            this.referenceNumber = _data["referenceNumber"] !== undefined ? _data["referenceNumber"] : <any>null;
            this.notes = _data["notes"] !== undefined ? _data["notes"] : <any>null;
            this.lostOn = _data["lostOn"] ? moment(_data["lostOn"].toString()) : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.typeOfLoss = _data["typeOfLoss"] !== undefined ? _data["typeOfLoss"] : <any>null;
        }
    }

    static fromJS(data: any): LostAndFoundListItem {
        data = typeof data === 'object' ? data : {};
        let result = new LostAndFoundListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
        data["referenceNumber"] = this.referenceNumber !== undefined ? this.referenceNumber : <any>null;
        data["notes"] = this.notes !== undefined ? this.notes : <any>null;
        data["lostOn"] = this.lostOn ? this.lostOn.toISOString() : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["typeOfLoss"] = this.typeOfLoss !== undefined ? this.typeOfLoss : <any>null;
        return data; 
    }
}

export interface ILostAndFoundListItem {
    id: string;
    description?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    address?: string | null;
    phoneNumber?: string | null;
    referenceNumber?: string | null;
    notes?: string | null;
    lostOn?: moment.Moment | null;
    status: LostAndFoundStatus;
    typeOfLoss: TypeOfLoss;
}

export enum LostAndFoundStatus {
    Unknown = 0,
    Unclaimed = 1,
    ClientContacted = 2,
    ClientUndecided = 3,
    WaitingForClientReturn = 4,
    WaitingForShipment = 5,
    OTShipped = 6,
    WaitingForHandDelivered = 7,
    HandDelivered = 8,
    Expired = 9,
    RefusedByTheClient = 10,
    BadReferencing = 11,
    WaitingRoomMaid = 12,
    Deleted = 13,
}

export enum TypeOfLoss {
    Customer = 0,
    Employee = 1,
    Unknown = 2,
}

export class GetPageRequest implements IGetPageRequest {
    skip!: number;
    take!: number;

    constructor(data?: IGetPageRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.skip = _data["skip"] !== undefined ? _data["skip"] : <any>null;
            this.take = _data["take"] !== undefined ? _data["take"] : <any>null;
        }
    }

    static fromJS(data: any): GetPageRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetPageRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["skip"] = this.skip !== undefined ? this.skip : <any>null;
        data["take"] = this.take !== undefined ? this.take : <any>null;
        return data; 
    }
}

export interface IGetPageRequest {
    skip: number;
    take: number;
}

export class GetLostAndFoundListQuery extends GetPageRequest implements IGetLostAndFoundListQuery {
    keyword?: string | null;
    dateFrom?: moment.Moment | null;
    dateTo?: moment.Moment | null;
    loadLostItems!: boolean;
    loadFoundItems!: boolean;

    constructor(data?: IGetLostAndFoundListQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.keyword = _data["keyword"] !== undefined ? _data["keyword"] : <any>null;
            this.dateFrom = _data["dateFrom"] ? moment(_data["dateFrom"].toString()) : <any>null;
            this.dateTo = _data["dateTo"] ? moment(_data["dateTo"].toString()) : <any>null;
            this.loadLostItems = _data["loadLostItems"] !== undefined ? _data["loadLostItems"] : <any>null;
            this.loadFoundItems = _data["loadFoundItems"] !== undefined ? _data["loadFoundItems"] : <any>null;
        }
    }

    static fromJS(data: any): GetLostAndFoundListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetLostAndFoundListQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["keyword"] = this.keyword !== undefined ? this.keyword : <any>null;
        data["dateFrom"] = this.dateFrom ? this.dateFrom.toISOString() : <any>null;
        data["dateTo"] = this.dateTo ? this.dateTo.toISOString() : <any>null;
        data["loadLostItems"] = this.loadLostItems !== undefined ? this.loadLostItems : <any>null;
        data["loadFoundItems"] = this.loadFoundItems !== undefined ? this.loadFoundItems : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetLostAndFoundListQuery extends IGetPageRequest {
    keyword?: string | null;
    dateFrom?: moment.Moment | null;
    dateTo?: moment.Moment | null;
    loadLostItems: boolean;
    loadFoundItems: boolean;
}

export class ProcessResponseOfLostAndFoundModel extends ProcessResponse implements IProcessResponseOfLostAndFoundModel {
    data?: LostAndFoundModel | null;

    constructor(data?: IProcessResponseOfLostAndFoundModel) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? LostAndFoundModel.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfLostAndFoundModel {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfLostAndFoundModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfLostAndFoundModel extends IProcessResponse {
    data?: LostAndFoundModel | null;
}

export class LostAndFoundModel implements ILostAndFoundModel {
    id!: string;
    description?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    address?: string | null;
    city?: string | null;
    postalCode?: string | null;
    country?: string | null;
    phoneNumber?: string | null;
    email?: string | null;
    referenceNumber?: string | null;
    notes?: string | null;
    roomId?: string | null;
    room?: Room2 | null;
    reservationId?: string | null;
    reservation?: Reservation | null;
    lostOn?: moment.Moment | null;
    status!: LostAndFoundStatus;
    typeOfLoss!: TypeOfLoss;
    placeOfStorage?: string | null;
    trackingNumber?: string | null;
    hotelId?: string | null;
    files?: LostAndFoundFileModel[] | null;

    constructor(data?: ILostAndFoundModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.address = _data["address"] !== undefined ? _data["address"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.postalCode = _data["postalCode"] !== undefined ? _data["postalCode"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.referenceNumber = _data["referenceNumber"] !== undefined ? _data["referenceNumber"] : <any>null;
            this.notes = _data["notes"] !== undefined ? _data["notes"] : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.room = _data["room"] ? Room2.fromJS(_data["room"]) : <any>null;
            this.reservationId = _data["reservationId"] !== undefined ? _data["reservationId"] : <any>null;
            this.reservation = _data["reservation"] ? Reservation.fromJS(_data["reservation"]) : <any>null;
            this.lostOn = _data["lostOn"] ? moment(_data["lostOn"].toString()) : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.typeOfLoss = _data["typeOfLoss"] !== undefined ? _data["typeOfLoss"] : <any>null;
            this.placeOfStorage = _data["placeOfStorage"] !== undefined ? _data["placeOfStorage"] : <any>null;
            this.trackingNumber = _data["trackingNumber"] !== undefined ? _data["trackingNumber"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            if (Array.isArray(_data["files"])) {
                this.files = [] as any;
                for (let item of _data["files"])
                    this.files!.push(LostAndFoundFileModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LostAndFoundModel {
        data = typeof data === 'object' ? data : {};
        let result = new LostAndFoundModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["postalCode"] = this.postalCode !== undefined ? this.postalCode : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["referenceNumber"] = this.referenceNumber !== undefined ? this.referenceNumber : <any>null;
        data["notes"] = this.notes !== undefined ? this.notes : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["room"] = this.room ? this.room.toJSON() : <any>null;
        data["reservationId"] = this.reservationId !== undefined ? this.reservationId : <any>null;
        data["reservation"] = this.reservation ? this.reservation.toJSON() : <any>null;
        data["lostOn"] = this.lostOn ? this.lostOn.toISOString() : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["typeOfLoss"] = this.typeOfLoss !== undefined ? this.typeOfLoss : <any>null;
        data["placeOfStorage"] = this.placeOfStorage !== undefined ? this.placeOfStorage : <any>null;
        data["trackingNumber"] = this.trackingNumber !== undefined ? this.trackingNumber : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        if (Array.isArray(this.files)) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILostAndFoundModel {
    id: string;
    description?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    address?: string | null;
    city?: string | null;
    postalCode?: string | null;
    country?: string | null;
    phoneNumber?: string | null;
    email?: string | null;
    referenceNumber?: string | null;
    notes?: string | null;
    roomId?: string | null;
    room?: Room2 | null;
    reservationId?: string | null;
    reservation?: Reservation | null;
    lostOn?: moment.Moment | null;
    status: LostAndFoundStatus;
    typeOfLoss: TypeOfLoss;
    placeOfStorage?: string | null;
    trackingNumber?: string | null;
    hotelId?: string | null;
    files?: LostAndFoundFileModel[] | null;
}

export abstract class ChangeTrackingBaseEntity implements IChangeTrackingBaseEntity {
    createdAt!: moment.Moment;
    createdById?: string | null;
    createdBy?: User | null;
    modifiedAt!: moment.Moment;
    modifiedBy?: User | null;
    modifiedById?: string | null;

    constructor(data?: IChangeTrackingBaseEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>null;
            this.createdById = _data["createdById"] !== undefined ? _data["createdById"] : <any>null;
            this.createdBy = _data["createdBy"] ? User.fromJS(_data["createdBy"]) : <any>null;
            this.modifiedAt = _data["modifiedAt"] ? moment(_data["modifiedAt"].toString()) : <any>null;
            this.modifiedBy = _data["modifiedBy"] ? User.fromJS(_data["modifiedBy"]) : <any>null;
            this.modifiedById = _data["modifiedById"] !== undefined ? _data["modifiedById"] : <any>null;
        }
    }

    static fromJS(data: any): ChangeTrackingBaseEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ChangeTrackingBaseEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        data["createdById"] = this.createdById !== undefined ? this.createdById : <any>null;
        data["createdBy"] = this.createdBy ? this.createdBy.toJSON() : <any>null;
        data["modifiedAt"] = this.modifiedAt ? this.modifiedAt.toISOString() : <any>null;
        data["modifiedBy"] = this.modifiedBy ? this.modifiedBy.toJSON() : <any>null;
        data["modifiedById"] = this.modifiedById !== undefined ? this.modifiedById : <any>null;
        return data; 
    }
}

export interface IChangeTrackingBaseEntity {
    createdAt: moment.Moment;
    createdById?: string | null;
    createdBy?: User | null;
    modifiedAt: moment.Moment;
    modifiedBy?: User | null;
    modifiedById?: string | null;
}

export abstract class BaseEntity extends ChangeTrackingBaseEntity implements IBaseEntity {
    hotelId?: string | null;
    hotel?: Hotel | null;

    constructor(data?: IBaseEntity) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.hotel = _data["hotel"] ? Hotel.fromJS(_data["hotel"]) : <any>null;
        }
    }

    static fromJS(data: any): BaseEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["hotel"] = this.hotel ? this.hotel.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IBaseEntity extends IChangeTrackingBaseEntity {
    hotelId?: string | null;
    hotel?: Hotel | null;
}

export class Room2 extends BaseEntity implements IRoom2 {
    id!: string;
    externalId?: string | null;
    name?: string | null;
    typeKey?: string | null;
    ordinalNumber!: number;
    floorSectionName?: string | null;
    floorSubSectionName?: string | null;
    areaId?: string | null;
    area?: Area | null;
    buildingId?: string | null;
    building?: Building | null;
    floorId?: string | null;
    floor?: Floor | null;
    roomAssetModels?: RoomAssetModel[] | null;
    categoryId?: string | null;
    category?: RoomCategory | null;
    isAutogeneratedFromReservationSync?: boolean | null;
    reservations?: Reservation[] | null;
    isOccupied!: boolean;
    isClean!: boolean;
    isOutOfOrder!: boolean;
    isOutOfService!: boolean;
    isDoNotDisturb!: boolean;
    isCleaningInProgress!: boolean;
    isInspected!: boolean;
    isGuestCurrentlyIn!: boolean;
    isCleaningPriority!: boolean;
    assetUsages?: RoomAssetUsage[] | null;
    roomNotes?: RoomNote[] | null;
    roomHistoryEvents?: RoomHistoryEvent[] | null;
    cleaningHistoryEvents?: CleaningHistoryEvent[] | null;
    roomBeds?: RoomBed[] | null;
    cleanings?: Cleaning2[] | null;
    rccHousekeepingStatus?: RccHousekeepingStatusCode | null;
    rccRoomStatus?: RccRoomStatusCode | null;

    constructor(data?: IRoom2) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.externalId = _data["externalId"] !== undefined ? _data["externalId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            this.ordinalNumber = _data["ordinalNumber"] !== undefined ? _data["ordinalNumber"] : <any>null;
            this.floorSectionName = _data["floorSectionName"] !== undefined ? _data["floorSectionName"] : <any>null;
            this.floorSubSectionName = _data["floorSubSectionName"] !== undefined ? _data["floorSubSectionName"] : <any>null;
            this.areaId = _data["areaId"] !== undefined ? _data["areaId"] : <any>null;
            this.area = _data["area"] ? Area.fromJS(_data["area"]) : <any>null;
            this.buildingId = _data["buildingId"] !== undefined ? _data["buildingId"] : <any>null;
            this.building = _data["building"] ? Building.fromJS(_data["building"]) : <any>null;
            this.floorId = _data["floorId"] !== undefined ? _data["floorId"] : <any>null;
            this.floor = _data["floor"] ? Floor.fromJS(_data["floor"]) : <any>null;
            if (Array.isArray(_data["roomAssetModels"])) {
                this.roomAssetModels = [] as any;
                for (let item of _data["roomAssetModels"])
                    this.roomAssetModels!.push(RoomAssetModel.fromJS(item));
            }
            this.categoryId = _data["categoryId"] !== undefined ? _data["categoryId"] : <any>null;
            this.category = _data["category"] ? RoomCategory.fromJS(_data["category"]) : <any>null;
            this.isAutogeneratedFromReservationSync = _data["isAutogeneratedFromReservationSync"] !== undefined ? _data["isAutogeneratedFromReservationSync"] : <any>null;
            if (Array.isArray(_data["reservations"])) {
                this.reservations = [] as any;
                for (let item of _data["reservations"])
                    this.reservations!.push(Reservation.fromJS(item));
            }
            this.isOccupied = _data["isOccupied"] !== undefined ? _data["isOccupied"] : <any>null;
            this.isClean = _data["isClean"] !== undefined ? _data["isClean"] : <any>null;
            this.isOutOfOrder = _data["isOutOfOrder"] !== undefined ? _data["isOutOfOrder"] : <any>null;
            this.isOutOfService = _data["isOutOfService"] !== undefined ? _data["isOutOfService"] : <any>null;
            this.isDoNotDisturb = _data["isDoNotDisturb"] !== undefined ? _data["isDoNotDisturb"] : <any>null;
            this.isCleaningInProgress = _data["isCleaningInProgress"] !== undefined ? _data["isCleaningInProgress"] : <any>null;
            this.isInspected = _data["isInspected"] !== undefined ? _data["isInspected"] : <any>null;
            this.isGuestCurrentlyIn = _data["isGuestCurrentlyIn"] !== undefined ? _data["isGuestCurrentlyIn"] : <any>null;
            this.isCleaningPriority = _data["isCleaningPriority"] !== undefined ? _data["isCleaningPriority"] : <any>null;
            if (Array.isArray(_data["assetUsages"])) {
                this.assetUsages = [] as any;
                for (let item of _data["assetUsages"])
                    this.assetUsages!.push(RoomAssetUsage.fromJS(item));
            }
            if (Array.isArray(_data["roomNotes"])) {
                this.roomNotes = [] as any;
                for (let item of _data["roomNotes"])
                    this.roomNotes!.push(RoomNote.fromJS(item));
            }
            if (Array.isArray(_data["roomHistoryEvents"])) {
                this.roomHistoryEvents = [] as any;
                for (let item of _data["roomHistoryEvents"])
                    this.roomHistoryEvents!.push(RoomHistoryEvent.fromJS(item));
            }
            if (Array.isArray(_data["cleaningHistoryEvents"])) {
                this.cleaningHistoryEvents = [] as any;
                for (let item of _data["cleaningHistoryEvents"])
                    this.cleaningHistoryEvents!.push(CleaningHistoryEvent.fromJS(item));
            }
            if (Array.isArray(_data["roomBeds"])) {
                this.roomBeds = [] as any;
                for (let item of _data["roomBeds"])
                    this.roomBeds!.push(RoomBed.fromJS(item));
            }
            if (Array.isArray(_data["cleanings"])) {
                this.cleanings = [] as any;
                for (let item of _data["cleanings"])
                    this.cleanings!.push(Cleaning2.fromJS(item));
            }
            this.rccHousekeepingStatus = _data["rccHousekeepingStatus"] !== undefined ? _data["rccHousekeepingStatus"] : <any>null;
            this.rccRoomStatus = _data["rccRoomStatus"] !== undefined ? _data["rccRoomStatus"] : <any>null;
        }
    }

    static fromJS(data: any): Room2 {
        data = typeof data === 'object' ? data : {};
        let result = new Room2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["externalId"] = this.externalId !== undefined ? this.externalId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        data["ordinalNumber"] = this.ordinalNumber !== undefined ? this.ordinalNumber : <any>null;
        data["floorSectionName"] = this.floorSectionName !== undefined ? this.floorSectionName : <any>null;
        data["floorSubSectionName"] = this.floorSubSectionName !== undefined ? this.floorSubSectionName : <any>null;
        data["areaId"] = this.areaId !== undefined ? this.areaId : <any>null;
        data["area"] = this.area ? this.area.toJSON() : <any>null;
        data["buildingId"] = this.buildingId !== undefined ? this.buildingId : <any>null;
        data["building"] = this.building ? this.building.toJSON() : <any>null;
        data["floorId"] = this.floorId !== undefined ? this.floorId : <any>null;
        data["floor"] = this.floor ? this.floor.toJSON() : <any>null;
        if (Array.isArray(this.roomAssetModels)) {
            data["roomAssetModels"] = [];
            for (let item of this.roomAssetModels)
                data["roomAssetModels"].push(item.toJSON());
        }
        data["categoryId"] = this.categoryId !== undefined ? this.categoryId : <any>null;
        data["category"] = this.category ? this.category.toJSON() : <any>null;
        data["isAutogeneratedFromReservationSync"] = this.isAutogeneratedFromReservationSync !== undefined ? this.isAutogeneratedFromReservationSync : <any>null;
        if (Array.isArray(this.reservations)) {
            data["reservations"] = [];
            for (let item of this.reservations)
                data["reservations"].push(item.toJSON());
        }
        data["isOccupied"] = this.isOccupied !== undefined ? this.isOccupied : <any>null;
        data["isClean"] = this.isClean !== undefined ? this.isClean : <any>null;
        data["isOutOfOrder"] = this.isOutOfOrder !== undefined ? this.isOutOfOrder : <any>null;
        data["isOutOfService"] = this.isOutOfService !== undefined ? this.isOutOfService : <any>null;
        data["isDoNotDisturb"] = this.isDoNotDisturb !== undefined ? this.isDoNotDisturb : <any>null;
        data["isCleaningInProgress"] = this.isCleaningInProgress !== undefined ? this.isCleaningInProgress : <any>null;
        data["isInspected"] = this.isInspected !== undefined ? this.isInspected : <any>null;
        data["isGuestCurrentlyIn"] = this.isGuestCurrentlyIn !== undefined ? this.isGuestCurrentlyIn : <any>null;
        data["isCleaningPriority"] = this.isCleaningPriority !== undefined ? this.isCleaningPriority : <any>null;
        if (Array.isArray(this.assetUsages)) {
            data["assetUsages"] = [];
            for (let item of this.assetUsages)
                data["assetUsages"].push(item.toJSON());
        }
        if (Array.isArray(this.roomNotes)) {
            data["roomNotes"] = [];
            for (let item of this.roomNotes)
                data["roomNotes"].push(item.toJSON());
        }
        if (Array.isArray(this.roomHistoryEvents)) {
            data["roomHistoryEvents"] = [];
            for (let item of this.roomHistoryEvents)
                data["roomHistoryEvents"].push(item.toJSON());
        }
        if (Array.isArray(this.cleaningHistoryEvents)) {
            data["cleaningHistoryEvents"] = [];
            for (let item of this.cleaningHistoryEvents)
                data["cleaningHistoryEvents"].push(item.toJSON());
        }
        if (Array.isArray(this.roomBeds)) {
            data["roomBeds"] = [];
            for (let item of this.roomBeds)
                data["roomBeds"].push(item.toJSON());
        }
        if (Array.isArray(this.cleanings)) {
            data["cleanings"] = [];
            for (let item of this.cleanings)
                data["cleanings"].push(item.toJSON());
        }
        data["rccHousekeepingStatus"] = this.rccHousekeepingStatus !== undefined ? this.rccHousekeepingStatus : <any>null;
        data["rccRoomStatus"] = this.rccRoomStatus !== undefined ? this.rccRoomStatus : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IRoom2 extends IBaseEntity {
    id: string;
    externalId?: string | null;
    name?: string | null;
    typeKey?: string | null;
    ordinalNumber: number;
    floorSectionName?: string | null;
    floorSubSectionName?: string | null;
    areaId?: string | null;
    area?: Area | null;
    buildingId?: string | null;
    building?: Building | null;
    floorId?: string | null;
    floor?: Floor | null;
    roomAssetModels?: RoomAssetModel[] | null;
    categoryId?: string | null;
    category?: RoomCategory | null;
    isAutogeneratedFromReservationSync?: boolean | null;
    reservations?: Reservation[] | null;
    isOccupied: boolean;
    isClean: boolean;
    isOutOfOrder: boolean;
    isOutOfService: boolean;
    isDoNotDisturb: boolean;
    isCleaningInProgress: boolean;
    isInspected: boolean;
    isGuestCurrentlyIn: boolean;
    isCleaningPriority: boolean;
    assetUsages?: RoomAssetUsage[] | null;
    roomNotes?: RoomNote[] | null;
    roomHistoryEvents?: RoomHistoryEvent[] | null;
    cleaningHistoryEvents?: CleaningHistoryEvent[] | null;
    roomBeds?: RoomBed[] | null;
    cleanings?: Cleaning2[] | null;
    rccHousekeepingStatus?: RccHousekeepingStatusCode | null;
    rccRoomStatus?: RccRoomStatusCode | null;
}

export class Area extends BaseEntity implements IArea {
    id!: string;
    name?: string | null;
    buildings?: Building[] | null;
    rooms?: Room2[] | null;

    constructor(data?: IArea) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            if (Array.isArray(_data["buildings"])) {
                this.buildings = [] as any;
                for (let item of _data["buildings"])
                    this.buildings!.push(Building.fromJS(item));
            }
            if (Array.isArray(_data["rooms"])) {
                this.rooms = [] as any;
                for (let item of _data["rooms"])
                    this.rooms!.push(Room2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Area {
        data = typeof data === 'object' ? data : {};
        let result = new Area();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.buildings)) {
            data["buildings"] = [];
            for (let item of this.buildings)
                data["buildings"].push(item.toJSON());
        }
        if (Array.isArray(this.rooms)) {
            data["rooms"] = [];
            for (let item of this.rooms)
                data["rooms"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IArea extends IBaseEntity {
    id: string;
    name?: string | null;
    buildings?: Building[] | null;
    rooms?: Room2[] | null;
}

export class Building extends BaseEntity implements IBuilding {
    id!: string;
    name?: string | null;
    typeKey?: string | null;
    address?: string | null;
    latitude?: number | null;
    longitude?: number | null;
    ordinalNumber!: number;
    areaId?: string | null;
    area?: Area | null;
    floors?: Floor[] | null;
    rooms?: Room2[] | null;

    constructor(data?: IBuilding) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            this.address = _data["address"] !== undefined ? _data["address"] : <any>null;
            this.latitude = _data["latitude"] !== undefined ? _data["latitude"] : <any>null;
            this.longitude = _data["longitude"] !== undefined ? _data["longitude"] : <any>null;
            this.ordinalNumber = _data["ordinalNumber"] !== undefined ? _data["ordinalNumber"] : <any>null;
            this.areaId = _data["areaId"] !== undefined ? _data["areaId"] : <any>null;
            this.area = _data["area"] ? Area.fromJS(_data["area"]) : <any>null;
            if (Array.isArray(_data["floors"])) {
                this.floors = [] as any;
                for (let item of _data["floors"])
                    this.floors!.push(Floor.fromJS(item));
            }
            if (Array.isArray(_data["rooms"])) {
                this.rooms = [] as any;
                for (let item of _data["rooms"])
                    this.rooms!.push(Room2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Building {
        data = typeof data === 'object' ? data : {};
        let result = new Building();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["latitude"] = this.latitude !== undefined ? this.latitude : <any>null;
        data["longitude"] = this.longitude !== undefined ? this.longitude : <any>null;
        data["ordinalNumber"] = this.ordinalNumber !== undefined ? this.ordinalNumber : <any>null;
        data["areaId"] = this.areaId !== undefined ? this.areaId : <any>null;
        data["area"] = this.area ? this.area.toJSON() : <any>null;
        if (Array.isArray(this.floors)) {
            data["floors"] = [];
            for (let item of this.floors)
                data["floors"].push(item.toJSON());
        }
        if (Array.isArray(this.rooms)) {
            data["rooms"] = [];
            for (let item of this.rooms)
                data["rooms"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IBuilding extends IBaseEntity {
    id: string;
    name?: string | null;
    typeKey?: string | null;
    address?: string | null;
    latitude?: number | null;
    longitude?: number | null;
    ordinalNumber: number;
    areaId?: string | null;
    area?: Area | null;
    floors?: Floor[] | null;
    rooms?: Room2[] | null;
}

export class Floor extends BaseEntity implements IFloor {
    id!: string;
    name?: string | null;
    number!: number;
    ordinalNumber!: number;
    buildingId!: string;
    building?: Building | null;
    rooms?: Room2[] | null;
    warehouses?: Warehouse[] | null;

    constructor(data?: IFloor) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.number = _data["number"] !== undefined ? _data["number"] : <any>null;
            this.ordinalNumber = _data["ordinalNumber"] !== undefined ? _data["ordinalNumber"] : <any>null;
            this.buildingId = _data["buildingId"] !== undefined ? _data["buildingId"] : <any>null;
            this.building = _data["building"] ? Building.fromJS(_data["building"]) : <any>null;
            if (Array.isArray(_data["rooms"])) {
                this.rooms = [] as any;
                for (let item of _data["rooms"])
                    this.rooms!.push(Room2.fromJS(item));
            }
            if (Array.isArray(_data["warehouses"])) {
                this.warehouses = [] as any;
                for (let item of _data["warehouses"])
                    this.warehouses!.push(Warehouse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Floor {
        data = typeof data === 'object' ? data : {};
        let result = new Floor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["number"] = this.number !== undefined ? this.number : <any>null;
        data["ordinalNumber"] = this.ordinalNumber !== undefined ? this.ordinalNumber : <any>null;
        data["buildingId"] = this.buildingId !== undefined ? this.buildingId : <any>null;
        data["building"] = this.building ? this.building.toJSON() : <any>null;
        if (Array.isArray(this.rooms)) {
            data["rooms"] = [];
            for (let item of this.rooms)
                data["rooms"].push(item.toJSON());
        }
        if (Array.isArray(this.warehouses)) {
            data["warehouses"] = [];
            for (let item of this.warehouses)
                data["warehouses"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IFloor extends IBaseEntity {
    id: string;
    name?: string | null;
    number: number;
    ordinalNumber: number;
    buildingId: string;
    building?: Building | null;
    rooms?: Room2[] | null;
    warehouses?: Warehouse[] | null;
}

export class Warehouse extends ChangeTrackingBaseEntity implements IWarehouse {
    id!: string;
    name?: string | null;
    isCentral!: boolean;
    floorId?: string | null;
    floor?: Floor | null;
    hotelId?: string | null;
    hotel?: Hotel | null;
    assetAvailabilities?: WarehouseAssetAvailability[] | null;
    inventories?: Inventory[] | null;
    warehouseDocuments?: WarehouseDocument[] | null;
    warehouseDocumentArchives?: WarehouseDocumentArchive[] | null;

    constructor(data?: IWarehouse) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isCentral = _data["isCentral"] !== undefined ? _data["isCentral"] : <any>null;
            this.floorId = _data["floorId"] !== undefined ? _data["floorId"] : <any>null;
            this.floor = _data["floor"] ? Floor.fromJS(_data["floor"]) : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.hotel = _data["hotel"] ? Hotel.fromJS(_data["hotel"]) : <any>null;
            if (Array.isArray(_data["assetAvailabilities"])) {
                this.assetAvailabilities = [] as any;
                for (let item of _data["assetAvailabilities"])
                    this.assetAvailabilities!.push(WarehouseAssetAvailability.fromJS(item));
            }
            if (Array.isArray(_data["inventories"])) {
                this.inventories = [] as any;
                for (let item of _data["inventories"])
                    this.inventories!.push(Inventory.fromJS(item));
            }
            if (Array.isArray(_data["warehouseDocuments"])) {
                this.warehouseDocuments = [] as any;
                for (let item of _data["warehouseDocuments"])
                    this.warehouseDocuments!.push(WarehouseDocument.fromJS(item));
            }
            if (Array.isArray(_data["warehouseDocumentArchives"])) {
                this.warehouseDocumentArchives = [] as any;
                for (let item of _data["warehouseDocumentArchives"])
                    this.warehouseDocumentArchives!.push(WarehouseDocumentArchive.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Warehouse {
        data = typeof data === 'object' ? data : {};
        let result = new Warehouse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isCentral"] = this.isCentral !== undefined ? this.isCentral : <any>null;
        data["floorId"] = this.floorId !== undefined ? this.floorId : <any>null;
        data["floor"] = this.floor ? this.floor.toJSON() : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["hotel"] = this.hotel ? this.hotel.toJSON() : <any>null;
        if (Array.isArray(this.assetAvailabilities)) {
            data["assetAvailabilities"] = [];
            for (let item of this.assetAvailabilities)
                data["assetAvailabilities"].push(item.toJSON());
        }
        if (Array.isArray(this.inventories)) {
            data["inventories"] = [];
            for (let item of this.inventories)
                data["inventories"].push(item.toJSON());
        }
        if (Array.isArray(this.warehouseDocuments)) {
            data["warehouseDocuments"] = [];
            for (let item of this.warehouseDocuments)
                data["warehouseDocuments"].push(item.toJSON());
        }
        if (Array.isArray(this.warehouseDocumentArchives)) {
            data["warehouseDocumentArchives"] = [];
            for (let item of this.warehouseDocumentArchives)
                data["warehouseDocumentArchives"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IWarehouse extends IChangeTrackingBaseEntity {
    id: string;
    name?: string | null;
    isCentral: boolean;
    floorId?: string | null;
    floor?: Floor | null;
    hotelId?: string | null;
    hotel?: Hotel | null;
    assetAvailabilities?: WarehouseAssetAvailability[] | null;
    inventories?: Inventory[] | null;
    warehouseDocuments?: WarehouseDocument[] | null;
    warehouseDocumentArchives?: WarehouseDocumentArchive[] | null;
}

export class Hotel implements IHotel {
    id?: string | null;
    name?: string | null;
    windowsTimeZoneId?: string | null;
    ianaTimeZoneId?: string | null;
    createdAt!: moment.Moment;
    modifiedAt!: moment.Moment;
    rooms?: Room2[] | null;
    buildings?: Building[] | null;
    cleaningPlugins?: CleaningPlugin[] | null;
    settings?: Settings | null;

    constructor(data?: IHotel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.windowsTimeZoneId = _data["windowsTimeZoneId"] !== undefined ? _data["windowsTimeZoneId"] : <any>null;
            this.ianaTimeZoneId = _data["ianaTimeZoneId"] !== undefined ? _data["ianaTimeZoneId"] : <any>null;
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>null;
            this.modifiedAt = _data["modifiedAt"] ? moment(_data["modifiedAt"].toString()) : <any>null;
            if (Array.isArray(_data["rooms"])) {
                this.rooms = [] as any;
                for (let item of _data["rooms"])
                    this.rooms!.push(Room2.fromJS(item));
            }
            if (Array.isArray(_data["buildings"])) {
                this.buildings = [] as any;
                for (let item of _data["buildings"])
                    this.buildings!.push(Building.fromJS(item));
            }
            if (Array.isArray(_data["cleaningPlugins"])) {
                this.cleaningPlugins = [] as any;
                for (let item of _data["cleaningPlugins"])
                    this.cleaningPlugins!.push(CleaningPlugin.fromJS(item));
            }
            this.settings = _data["settings"] ? Settings.fromJS(_data["settings"]) : <any>null;
        }
    }

    static fromJS(data: any): Hotel {
        data = typeof data === 'object' ? data : {};
        let result = new Hotel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["windowsTimeZoneId"] = this.windowsTimeZoneId !== undefined ? this.windowsTimeZoneId : <any>null;
        data["ianaTimeZoneId"] = this.ianaTimeZoneId !== undefined ? this.ianaTimeZoneId : <any>null;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        data["modifiedAt"] = this.modifiedAt ? this.modifiedAt.toISOString() : <any>null;
        if (Array.isArray(this.rooms)) {
            data["rooms"] = [];
            for (let item of this.rooms)
                data["rooms"].push(item.toJSON());
        }
        if (Array.isArray(this.buildings)) {
            data["buildings"] = [];
            for (let item of this.buildings)
                data["buildings"].push(item.toJSON());
        }
        if (Array.isArray(this.cleaningPlugins)) {
            data["cleaningPlugins"] = [];
            for (let item of this.cleaningPlugins)
                data["cleaningPlugins"].push(item.toJSON());
        }
        data["settings"] = this.settings ? this.settings.toJSON() : <any>null;
        return data; 
    }
}

export interface IHotel {
    id?: string | null;
    name?: string | null;
    windowsTimeZoneId?: string | null;
    ianaTimeZoneId?: string | null;
    createdAt: moment.Moment;
    modifiedAt: moment.Moment;
    rooms?: Room2[] | null;
    buildings?: Building[] | null;
    cleaningPlugins?: CleaningPlugin[] | null;
    settings?: Settings | null;
}

export class CleaningPlugin implements ICleaningPlugin {
    hotelId?: string | null;
    hotel?: Hotel | null;
    id!: string;
    name?: string | null;
    description?: string | null;
    isActive!: boolean;
    isTopRule!: boolean;
    ordinalNumber!: number;
    data?: CleaningPluginJson | null;

    constructor(data?: ICleaningPlugin) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.hotel = _data["hotel"] ? Hotel.fromJS(_data["hotel"]) : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.isTopRule = _data["isTopRule"] !== undefined ? _data["isTopRule"] : <any>null;
            this.ordinalNumber = _data["ordinalNumber"] !== undefined ? _data["ordinalNumber"] : <any>null;
            this.data = _data["data"] ? CleaningPluginJson.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): CleaningPlugin {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningPlugin();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["hotel"] = this.hotel ? this.hotel.toJSON() : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["isTopRule"] = this.isTopRule !== undefined ? this.isTopRule : <any>null;
        data["ordinalNumber"] = this.ordinalNumber !== undefined ? this.ordinalNumber : <any>null;
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        return data; 
    }
}

export interface ICleaningPlugin {
    hotelId?: string | null;
    hotel?: Hotel | null;
    id: string;
    name?: string | null;
    description?: string | null;
    isActive: boolean;
    isTopRule: boolean;
    ordinalNumber: number;
    data?: CleaningPluginJson | null;
}

export class CleaningPluginJson implements ICleaningPluginJson {
    periodicalIntervals?: CleaningPluginPeriodicalIntervalJson[] | null;
    periodicalPostponeSundayCleaningsToMonday?: boolean | null;
    changeSheets!: boolean;
    isNightlyCleaningPlugin!: boolean;
    cleanOnHolidays!: boolean;
    cleanOnSaturday!: boolean;
    cleanOnSunday!: boolean;
    color?: string | null;
    dailyCleaningTypeTimes?: string[] | null;
    dailyCleaningTimeTypeKey?: string | null;
    displayStyleKey?: string | null;
    instructions?: string | null;
    monthlyCleaningTypeTimeOfMonthKey?: string | null;
    name?: string | null;
    postponeUntilVacant!: boolean;
    startsCleaningAfter?: number | null;
    typeKey?: string | null;
    weekBasedCleaningTypeWeeks?: number[] | null;
    weeklyCleanOnMonday?: boolean | null;
    weeklyCleanOnTuesday?: boolean | null;
    weeklyCleanOnWednesday?: boolean | null;
    weeklyCleanOnThursday?: boolean | null;
    weeklyCleanOnFriday?: boolean | null;
    weeklyCleanOnSaturday?: boolean | null;
    weeklyCleanOnSunday?: boolean | null;
    weeklyCleaningTypeMondayTimes?: string[] | null;
    weeklyCleaningTypeTuesdayTimes?: string[] | null;
    weeklyCleaningTypeWednesdayTimes?: string[] | null;
    weeklyCleaningTypeThursdayTimes?: string[] | null;
    weeklyCleaningTypeFridayTimes?: string[] | null;
    weeklyCleaningTypeSaturdayTimes?: string[] | null;
    weeklyCleaningTypeSundayTimes?: string[] | null;
    weeklyTimeMondayTypeKey?: string | null;
    weeklyTimeTuesdayTypeKey?: string | null;
    weeklyTimeWednesdayTypeKey?: string | null;
    weeklyTimeThursdayTypeKey?: string | null;
    weeklyTimeFridayTypeKey?: string | null;
    weeklyTimeSaturdayTypeKey?: string | null;
    weeklyTimeSundayTypeKey?: string | null;
    weekBasedCleaningDayOfTheWeekKey?: string | null;
    basedOns?: CleaningPluginBasedOnJson[] | null;

    constructor(data?: ICleaningPluginJson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["periodicalIntervals"])) {
                this.periodicalIntervals = [] as any;
                for (let item of _data["periodicalIntervals"])
                    this.periodicalIntervals!.push(CleaningPluginPeriodicalIntervalJson.fromJS(item));
            }
            this.periodicalPostponeSundayCleaningsToMonday = _data["periodicalPostponeSundayCleaningsToMonday"] !== undefined ? _data["periodicalPostponeSundayCleaningsToMonday"] : <any>null;
            this.changeSheets = _data["changeSheets"] !== undefined ? _data["changeSheets"] : <any>null;
            this.isNightlyCleaningPlugin = _data["isNightlyCleaningPlugin"] !== undefined ? _data["isNightlyCleaningPlugin"] : <any>null;
            this.cleanOnHolidays = _data["cleanOnHolidays"] !== undefined ? _data["cleanOnHolidays"] : <any>null;
            this.cleanOnSaturday = _data["cleanOnSaturday"] !== undefined ? _data["cleanOnSaturday"] : <any>null;
            this.cleanOnSunday = _data["cleanOnSunday"] !== undefined ? _data["cleanOnSunday"] : <any>null;
            this.color = _data["color"] !== undefined ? _data["color"] : <any>null;
            if (Array.isArray(_data["dailyCleaningTypeTimes"])) {
                this.dailyCleaningTypeTimes = [] as any;
                for (let item of _data["dailyCleaningTypeTimes"])
                    this.dailyCleaningTypeTimes!.push(item);
            }
            this.dailyCleaningTimeTypeKey = _data["dailyCleaningTimeTypeKey"] !== undefined ? _data["dailyCleaningTimeTypeKey"] : <any>null;
            this.displayStyleKey = _data["displayStyleKey"] !== undefined ? _data["displayStyleKey"] : <any>null;
            this.instructions = _data["instructions"] !== undefined ? _data["instructions"] : <any>null;
            this.monthlyCleaningTypeTimeOfMonthKey = _data["monthlyCleaningTypeTimeOfMonthKey"] !== undefined ? _data["monthlyCleaningTypeTimeOfMonthKey"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.postponeUntilVacant = _data["postponeUntilVacant"] !== undefined ? _data["postponeUntilVacant"] : <any>null;
            this.startsCleaningAfter = _data["startsCleaningAfter"] !== undefined ? _data["startsCleaningAfter"] : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            if (Array.isArray(_data["weekBasedCleaningTypeWeeks"])) {
                this.weekBasedCleaningTypeWeeks = [] as any;
                for (let item of _data["weekBasedCleaningTypeWeeks"])
                    this.weekBasedCleaningTypeWeeks!.push(item);
            }
            this.weeklyCleanOnMonday = _data["weeklyCleanOnMonday"] !== undefined ? _data["weeklyCleanOnMonday"] : <any>null;
            this.weeklyCleanOnTuesday = _data["weeklyCleanOnTuesday"] !== undefined ? _data["weeklyCleanOnTuesday"] : <any>null;
            this.weeklyCleanOnWednesday = _data["weeklyCleanOnWednesday"] !== undefined ? _data["weeklyCleanOnWednesday"] : <any>null;
            this.weeklyCleanOnThursday = _data["weeklyCleanOnThursday"] !== undefined ? _data["weeklyCleanOnThursday"] : <any>null;
            this.weeklyCleanOnFriday = _data["weeklyCleanOnFriday"] !== undefined ? _data["weeklyCleanOnFriday"] : <any>null;
            this.weeklyCleanOnSaturday = _data["weeklyCleanOnSaturday"] !== undefined ? _data["weeklyCleanOnSaturday"] : <any>null;
            this.weeklyCleanOnSunday = _data["weeklyCleanOnSunday"] !== undefined ? _data["weeklyCleanOnSunday"] : <any>null;
            if (Array.isArray(_data["weeklyCleaningTypeMondayTimes"])) {
                this.weeklyCleaningTypeMondayTimes = [] as any;
                for (let item of _data["weeklyCleaningTypeMondayTimes"])
                    this.weeklyCleaningTypeMondayTimes!.push(item);
            }
            if (Array.isArray(_data["weeklyCleaningTypeTuesdayTimes"])) {
                this.weeklyCleaningTypeTuesdayTimes = [] as any;
                for (let item of _data["weeklyCleaningTypeTuesdayTimes"])
                    this.weeklyCleaningTypeTuesdayTimes!.push(item);
            }
            if (Array.isArray(_data["weeklyCleaningTypeWednesdayTimes"])) {
                this.weeklyCleaningTypeWednesdayTimes = [] as any;
                for (let item of _data["weeklyCleaningTypeWednesdayTimes"])
                    this.weeklyCleaningTypeWednesdayTimes!.push(item);
            }
            if (Array.isArray(_data["weeklyCleaningTypeThursdayTimes"])) {
                this.weeklyCleaningTypeThursdayTimes = [] as any;
                for (let item of _data["weeklyCleaningTypeThursdayTimes"])
                    this.weeklyCleaningTypeThursdayTimes!.push(item);
            }
            if (Array.isArray(_data["weeklyCleaningTypeFridayTimes"])) {
                this.weeklyCleaningTypeFridayTimes = [] as any;
                for (let item of _data["weeklyCleaningTypeFridayTimes"])
                    this.weeklyCleaningTypeFridayTimes!.push(item);
            }
            if (Array.isArray(_data["weeklyCleaningTypeSaturdayTimes"])) {
                this.weeklyCleaningTypeSaturdayTimes = [] as any;
                for (let item of _data["weeklyCleaningTypeSaturdayTimes"])
                    this.weeklyCleaningTypeSaturdayTimes!.push(item);
            }
            if (Array.isArray(_data["weeklyCleaningTypeSundayTimes"])) {
                this.weeklyCleaningTypeSundayTimes = [] as any;
                for (let item of _data["weeklyCleaningTypeSundayTimes"])
                    this.weeklyCleaningTypeSundayTimes!.push(item);
            }
            this.weeklyTimeMondayTypeKey = _data["weeklyTimeMondayTypeKey"] !== undefined ? _data["weeklyTimeMondayTypeKey"] : <any>null;
            this.weeklyTimeTuesdayTypeKey = _data["weeklyTimeTuesdayTypeKey"] !== undefined ? _data["weeklyTimeTuesdayTypeKey"] : <any>null;
            this.weeklyTimeWednesdayTypeKey = _data["weeklyTimeWednesdayTypeKey"] !== undefined ? _data["weeklyTimeWednesdayTypeKey"] : <any>null;
            this.weeklyTimeThursdayTypeKey = _data["weeklyTimeThursdayTypeKey"] !== undefined ? _data["weeklyTimeThursdayTypeKey"] : <any>null;
            this.weeklyTimeFridayTypeKey = _data["weeklyTimeFridayTypeKey"] !== undefined ? _data["weeklyTimeFridayTypeKey"] : <any>null;
            this.weeklyTimeSaturdayTypeKey = _data["weeklyTimeSaturdayTypeKey"] !== undefined ? _data["weeklyTimeSaturdayTypeKey"] : <any>null;
            this.weeklyTimeSundayTypeKey = _data["weeklyTimeSundayTypeKey"] !== undefined ? _data["weeklyTimeSundayTypeKey"] : <any>null;
            this.weekBasedCleaningDayOfTheWeekKey = _data["weekBasedCleaningDayOfTheWeekKey"] !== undefined ? _data["weekBasedCleaningDayOfTheWeekKey"] : <any>null;
            if (Array.isArray(_data["basedOns"])) {
                this.basedOns = [] as any;
                for (let item of _data["basedOns"])
                    this.basedOns!.push(CleaningPluginBasedOnJson.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CleaningPluginJson {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningPluginJson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.periodicalIntervals)) {
            data["periodicalIntervals"] = [];
            for (let item of this.periodicalIntervals)
                data["periodicalIntervals"].push(item.toJSON());
        }
        data["periodicalPostponeSundayCleaningsToMonday"] = this.periodicalPostponeSundayCleaningsToMonday !== undefined ? this.periodicalPostponeSundayCleaningsToMonday : <any>null;
        data["changeSheets"] = this.changeSheets !== undefined ? this.changeSheets : <any>null;
        data["isNightlyCleaningPlugin"] = this.isNightlyCleaningPlugin !== undefined ? this.isNightlyCleaningPlugin : <any>null;
        data["cleanOnHolidays"] = this.cleanOnHolidays !== undefined ? this.cleanOnHolidays : <any>null;
        data["cleanOnSaturday"] = this.cleanOnSaturday !== undefined ? this.cleanOnSaturday : <any>null;
        data["cleanOnSunday"] = this.cleanOnSunday !== undefined ? this.cleanOnSunday : <any>null;
        data["color"] = this.color !== undefined ? this.color : <any>null;
        if (Array.isArray(this.dailyCleaningTypeTimes)) {
            data["dailyCleaningTypeTimes"] = [];
            for (let item of this.dailyCleaningTypeTimes)
                data["dailyCleaningTypeTimes"].push(item);
        }
        data["dailyCleaningTimeTypeKey"] = this.dailyCleaningTimeTypeKey !== undefined ? this.dailyCleaningTimeTypeKey : <any>null;
        data["displayStyleKey"] = this.displayStyleKey !== undefined ? this.displayStyleKey : <any>null;
        data["instructions"] = this.instructions !== undefined ? this.instructions : <any>null;
        data["monthlyCleaningTypeTimeOfMonthKey"] = this.monthlyCleaningTypeTimeOfMonthKey !== undefined ? this.monthlyCleaningTypeTimeOfMonthKey : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["postponeUntilVacant"] = this.postponeUntilVacant !== undefined ? this.postponeUntilVacant : <any>null;
        data["startsCleaningAfter"] = this.startsCleaningAfter !== undefined ? this.startsCleaningAfter : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        if (Array.isArray(this.weekBasedCleaningTypeWeeks)) {
            data["weekBasedCleaningTypeWeeks"] = [];
            for (let item of this.weekBasedCleaningTypeWeeks)
                data["weekBasedCleaningTypeWeeks"].push(item);
        }
        data["weeklyCleanOnMonday"] = this.weeklyCleanOnMonday !== undefined ? this.weeklyCleanOnMonday : <any>null;
        data["weeklyCleanOnTuesday"] = this.weeklyCleanOnTuesday !== undefined ? this.weeklyCleanOnTuesday : <any>null;
        data["weeklyCleanOnWednesday"] = this.weeklyCleanOnWednesday !== undefined ? this.weeklyCleanOnWednesday : <any>null;
        data["weeklyCleanOnThursday"] = this.weeklyCleanOnThursday !== undefined ? this.weeklyCleanOnThursday : <any>null;
        data["weeklyCleanOnFriday"] = this.weeklyCleanOnFriday !== undefined ? this.weeklyCleanOnFriday : <any>null;
        data["weeklyCleanOnSaturday"] = this.weeklyCleanOnSaturday !== undefined ? this.weeklyCleanOnSaturday : <any>null;
        data["weeklyCleanOnSunday"] = this.weeklyCleanOnSunday !== undefined ? this.weeklyCleanOnSunday : <any>null;
        if (Array.isArray(this.weeklyCleaningTypeMondayTimes)) {
            data["weeklyCleaningTypeMondayTimes"] = [];
            for (let item of this.weeklyCleaningTypeMondayTimes)
                data["weeklyCleaningTypeMondayTimes"].push(item);
        }
        if (Array.isArray(this.weeklyCleaningTypeTuesdayTimes)) {
            data["weeklyCleaningTypeTuesdayTimes"] = [];
            for (let item of this.weeklyCleaningTypeTuesdayTimes)
                data["weeklyCleaningTypeTuesdayTimes"].push(item);
        }
        if (Array.isArray(this.weeklyCleaningTypeWednesdayTimes)) {
            data["weeklyCleaningTypeWednesdayTimes"] = [];
            for (let item of this.weeklyCleaningTypeWednesdayTimes)
                data["weeklyCleaningTypeWednesdayTimes"].push(item);
        }
        if (Array.isArray(this.weeklyCleaningTypeThursdayTimes)) {
            data["weeklyCleaningTypeThursdayTimes"] = [];
            for (let item of this.weeklyCleaningTypeThursdayTimes)
                data["weeklyCleaningTypeThursdayTimes"].push(item);
        }
        if (Array.isArray(this.weeklyCleaningTypeFridayTimes)) {
            data["weeklyCleaningTypeFridayTimes"] = [];
            for (let item of this.weeklyCleaningTypeFridayTimes)
                data["weeklyCleaningTypeFridayTimes"].push(item);
        }
        if (Array.isArray(this.weeklyCleaningTypeSaturdayTimes)) {
            data["weeklyCleaningTypeSaturdayTimes"] = [];
            for (let item of this.weeklyCleaningTypeSaturdayTimes)
                data["weeklyCleaningTypeSaturdayTimes"].push(item);
        }
        if (Array.isArray(this.weeklyCleaningTypeSundayTimes)) {
            data["weeklyCleaningTypeSundayTimes"] = [];
            for (let item of this.weeklyCleaningTypeSundayTimes)
                data["weeklyCleaningTypeSundayTimes"].push(item);
        }
        data["weeklyTimeMondayTypeKey"] = this.weeklyTimeMondayTypeKey !== undefined ? this.weeklyTimeMondayTypeKey : <any>null;
        data["weeklyTimeTuesdayTypeKey"] = this.weeklyTimeTuesdayTypeKey !== undefined ? this.weeklyTimeTuesdayTypeKey : <any>null;
        data["weeklyTimeWednesdayTypeKey"] = this.weeklyTimeWednesdayTypeKey !== undefined ? this.weeklyTimeWednesdayTypeKey : <any>null;
        data["weeklyTimeThursdayTypeKey"] = this.weeklyTimeThursdayTypeKey !== undefined ? this.weeklyTimeThursdayTypeKey : <any>null;
        data["weeklyTimeFridayTypeKey"] = this.weeklyTimeFridayTypeKey !== undefined ? this.weeklyTimeFridayTypeKey : <any>null;
        data["weeklyTimeSaturdayTypeKey"] = this.weeklyTimeSaturdayTypeKey !== undefined ? this.weeklyTimeSaturdayTypeKey : <any>null;
        data["weeklyTimeSundayTypeKey"] = this.weeklyTimeSundayTypeKey !== undefined ? this.weeklyTimeSundayTypeKey : <any>null;
        data["weekBasedCleaningDayOfTheWeekKey"] = this.weekBasedCleaningDayOfTheWeekKey !== undefined ? this.weekBasedCleaningDayOfTheWeekKey : <any>null;
        if (Array.isArray(this.basedOns)) {
            data["basedOns"] = [];
            for (let item of this.basedOns)
                data["basedOns"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICleaningPluginJson {
    periodicalIntervals?: CleaningPluginPeriodicalIntervalJson[] | null;
    periodicalPostponeSundayCleaningsToMonday?: boolean | null;
    changeSheets: boolean;
    isNightlyCleaningPlugin: boolean;
    cleanOnHolidays: boolean;
    cleanOnSaturday: boolean;
    cleanOnSunday: boolean;
    color?: string | null;
    dailyCleaningTypeTimes?: string[] | null;
    dailyCleaningTimeTypeKey?: string | null;
    displayStyleKey?: string | null;
    instructions?: string | null;
    monthlyCleaningTypeTimeOfMonthKey?: string | null;
    name?: string | null;
    postponeUntilVacant: boolean;
    startsCleaningAfter?: number | null;
    typeKey?: string | null;
    weekBasedCleaningTypeWeeks?: number[] | null;
    weeklyCleanOnMonday?: boolean | null;
    weeklyCleanOnTuesday?: boolean | null;
    weeklyCleanOnWednesday?: boolean | null;
    weeklyCleanOnThursday?: boolean | null;
    weeklyCleanOnFriday?: boolean | null;
    weeklyCleanOnSaturday?: boolean | null;
    weeklyCleanOnSunday?: boolean | null;
    weeklyCleaningTypeMondayTimes?: string[] | null;
    weeklyCleaningTypeTuesdayTimes?: string[] | null;
    weeklyCleaningTypeWednesdayTimes?: string[] | null;
    weeklyCleaningTypeThursdayTimes?: string[] | null;
    weeklyCleaningTypeFridayTimes?: string[] | null;
    weeklyCleaningTypeSaturdayTimes?: string[] | null;
    weeklyCleaningTypeSundayTimes?: string[] | null;
    weeklyTimeMondayTypeKey?: string | null;
    weeklyTimeTuesdayTypeKey?: string | null;
    weeklyTimeWednesdayTypeKey?: string | null;
    weeklyTimeThursdayTypeKey?: string | null;
    weeklyTimeFridayTypeKey?: string | null;
    weeklyTimeSaturdayTypeKey?: string | null;
    weeklyTimeSundayTypeKey?: string | null;
    weekBasedCleaningDayOfTheWeekKey?: string | null;
    basedOns?: CleaningPluginBasedOnJson[] | null;
}

export class CleaningPluginPeriodicalIntervalJson implements ICleaningPluginPeriodicalIntervalJson {
    numberOfCleanings!: number;
    everyNumberOfDays!: number;
    fromNights!: number;
    toNights!: number;
    fromDayKey?: string | null;
    periodTypeKey?: string | null;
    intervalTypeKey?: string | null;

    constructor(data?: ICleaningPluginPeriodicalIntervalJson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.numberOfCleanings = _data["numberOfCleanings"] !== undefined ? _data["numberOfCleanings"] : <any>null;
            this.everyNumberOfDays = _data["everyNumberOfDays"] !== undefined ? _data["everyNumberOfDays"] : <any>null;
            this.fromNights = _data["fromNights"] !== undefined ? _data["fromNights"] : <any>null;
            this.toNights = _data["toNights"] !== undefined ? _data["toNights"] : <any>null;
            this.fromDayKey = _data["fromDayKey"] !== undefined ? _data["fromDayKey"] : <any>null;
            this.periodTypeKey = _data["periodTypeKey"] !== undefined ? _data["periodTypeKey"] : <any>null;
            this.intervalTypeKey = _data["intervalTypeKey"] !== undefined ? _data["intervalTypeKey"] : <any>null;
        }
    }

    static fromJS(data: any): CleaningPluginPeriodicalIntervalJson {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningPluginPeriodicalIntervalJson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["numberOfCleanings"] = this.numberOfCleanings !== undefined ? this.numberOfCleanings : <any>null;
        data["everyNumberOfDays"] = this.everyNumberOfDays !== undefined ? this.everyNumberOfDays : <any>null;
        data["fromNights"] = this.fromNights !== undefined ? this.fromNights : <any>null;
        data["toNights"] = this.toNights !== undefined ? this.toNights : <any>null;
        data["fromDayKey"] = this.fromDayKey !== undefined ? this.fromDayKey : <any>null;
        data["periodTypeKey"] = this.periodTypeKey !== undefined ? this.periodTypeKey : <any>null;
        data["intervalTypeKey"] = this.intervalTypeKey !== undefined ? this.intervalTypeKey : <any>null;
        return data; 
    }
}

export interface ICleaningPluginPeriodicalIntervalJson {
    numberOfCleanings: number;
    everyNumberOfDays: number;
    fromNights: number;
    toNights: number;
    fromDayKey?: string | null;
    periodTypeKey?: string | null;
    intervalTypeKey?: string | null;
}

export class CleaningPluginBasedOnJson implements ICleaningPluginBasedOnJson {
    id?: string | null;
    name?: string | null;
    key?: string | null;
    description?: string | null;
    cleanDeparture?: boolean | null;
    cleanStay?: boolean | null;
    cleanVacant?: boolean | null;
    cleanVacantEveryNumberOfDays?: number | null;
    cleanOutOfService?: boolean | null;
    productsTagsMustBeConsumedOnTime?: boolean | null;
    productsTagsConsumationIntervalFrom?: moment.Moment | null;
    productsTagsConsumationIntervalTo?: moment.Moment | null;
    cleanlinessKey?: string | null;
    nightsTypeKey?: string | null;
    nightsEveryNumberOfDays?: number | null;
    nightsFromKey?: string | null;
    foorIds?: string[] | null;
    sections?: string[] | null;
    subSections?: string[] | null;
    nights?: number[] | null;
    reservationSpaceCategories?: string[] | null;
    productsTags?: string[] | null;
    rooms?: HotelRoomCreditsDataJson[] | null;
    otherProperties?: CleaningPluginKeyValueJson[] | null;
    categories?: CleaningPluginBasedOnRoomCategoryJson[] | null;
    productsTagsExtended?: CleaningPluginBasedOnProductsTagsExtendedJson[] | null;
    otherPropertiesExtended?: BasedOnOtherPropertiesExtendedJson[] | null;

    constructor(data?: ICleaningPluginBasedOnJson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.key = _data["key"] !== undefined ? _data["key"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.cleanDeparture = _data["cleanDeparture"] !== undefined ? _data["cleanDeparture"] : <any>null;
            this.cleanStay = _data["cleanStay"] !== undefined ? _data["cleanStay"] : <any>null;
            this.cleanVacant = _data["cleanVacant"] !== undefined ? _data["cleanVacant"] : <any>null;
            this.cleanVacantEveryNumberOfDays = _data["cleanVacantEveryNumberOfDays"] !== undefined ? _data["cleanVacantEveryNumberOfDays"] : <any>null;
            this.cleanOutOfService = _data["cleanOutOfService"] !== undefined ? _data["cleanOutOfService"] : <any>null;
            this.productsTagsMustBeConsumedOnTime = _data["productsTagsMustBeConsumedOnTime"] !== undefined ? _data["productsTagsMustBeConsumedOnTime"] : <any>null;
            this.productsTagsConsumationIntervalFrom = _data["productsTagsConsumationIntervalFrom"] ? moment(_data["productsTagsConsumationIntervalFrom"].toString()) : <any>null;
            this.productsTagsConsumationIntervalTo = _data["productsTagsConsumationIntervalTo"] ? moment(_data["productsTagsConsumationIntervalTo"].toString()) : <any>null;
            this.cleanlinessKey = _data["cleanlinessKey"] !== undefined ? _data["cleanlinessKey"] : <any>null;
            this.nightsTypeKey = _data["nightsTypeKey"] !== undefined ? _data["nightsTypeKey"] : <any>null;
            this.nightsEveryNumberOfDays = _data["nightsEveryNumberOfDays"] !== undefined ? _data["nightsEveryNumberOfDays"] : <any>null;
            this.nightsFromKey = _data["nightsFromKey"] !== undefined ? _data["nightsFromKey"] : <any>null;
            if (Array.isArray(_data["foorIds"])) {
                this.foorIds = [] as any;
                for (let item of _data["foorIds"])
                    this.foorIds!.push(item);
            }
            if (Array.isArray(_data["sections"])) {
                this.sections = [] as any;
                for (let item of _data["sections"])
                    this.sections!.push(item);
            }
            if (Array.isArray(_data["subSections"])) {
                this.subSections = [] as any;
                for (let item of _data["subSections"])
                    this.subSections!.push(item);
            }
            if (Array.isArray(_data["nights"])) {
                this.nights = [] as any;
                for (let item of _data["nights"])
                    this.nights!.push(item);
            }
            if (Array.isArray(_data["reservationSpaceCategories"])) {
                this.reservationSpaceCategories = [] as any;
                for (let item of _data["reservationSpaceCategories"])
                    this.reservationSpaceCategories!.push(item);
            }
            if (Array.isArray(_data["productsTags"])) {
                this.productsTags = [] as any;
                for (let item of _data["productsTags"])
                    this.productsTags!.push(item);
            }
            if (Array.isArray(_data["rooms"])) {
                this.rooms = [] as any;
                for (let item of _data["rooms"])
                    this.rooms!.push(HotelRoomCreditsDataJson.fromJS(item));
            }
            if (Array.isArray(_data["otherProperties"])) {
                this.otherProperties = [] as any;
                for (let item of _data["otherProperties"])
                    this.otherProperties!.push(CleaningPluginKeyValueJson.fromJS(item));
            }
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(CleaningPluginBasedOnRoomCategoryJson.fromJS(item));
            }
            if (Array.isArray(_data["productsTagsExtended"])) {
                this.productsTagsExtended = [] as any;
                for (let item of _data["productsTagsExtended"])
                    this.productsTagsExtended!.push(CleaningPluginBasedOnProductsTagsExtendedJson.fromJS(item));
            }
            if (Array.isArray(_data["otherPropertiesExtended"])) {
                this.otherPropertiesExtended = [] as any;
                for (let item of _data["otherPropertiesExtended"])
                    this.otherPropertiesExtended!.push(BasedOnOtherPropertiesExtendedJson.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CleaningPluginBasedOnJson {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningPluginBasedOnJson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["key"] = this.key !== undefined ? this.key : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["cleanDeparture"] = this.cleanDeparture !== undefined ? this.cleanDeparture : <any>null;
        data["cleanStay"] = this.cleanStay !== undefined ? this.cleanStay : <any>null;
        data["cleanVacant"] = this.cleanVacant !== undefined ? this.cleanVacant : <any>null;
        data["cleanVacantEveryNumberOfDays"] = this.cleanVacantEveryNumberOfDays !== undefined ? this.cleanVacantEveryNumberOfDays : <any>null;
        data["cleanOutOfService"] = this.cleanOutOfService !== undefined ? this.cleanOutOfService : <any>null;
        data["productsTagsMustBeConsumedOnTime"] = this.productsTagsMustBeConsumedOnTime !== undefined ? this.productsTagsMustBeConsumedOnTime : <any>null;
        data["productsTagsConsumationIntervalFrom"] = this.productsTagsConsumationIntervalFrom ? this.productsTagsConsumationIntervalFrom.toISOString() : <any>null;
        data["productsTagsConsumationIntervalTo"] = this.productsTagsConsumationIntervalTo ? this.productsTagsConsumationIntervalTo.toISOString() : <any>null;
        data["cleanlinessKey"] = this.cleanlinessKey !== undefined ? this.cleanlinessKey : <any>null;
        data["nightsTypeKey"] = this.nightsTypeKey !== undefined ? this.nightsTypeKey : <any>null;
        data["nightsEveryNumberOfDays"] = this.nightsEveryNumberOfDays !== undefined ? this.nightsEveryNumberOfDays : <any>null;
        data["nightsFromKey"] = this.nightsFromKey !== undefined ? this.nightsFromKey : <any>null;
        if (Array.isArray(this.foorIds)) {
            data["foorIds"] = [];
            for (let item of this.foorIds)
                data["foorIds"].push(item);
        }
        if (Array.isArray(this.sections)) {
            data["sections"] = [];
            for (let item of this.sections)
                data["sections"].push(item);
        }
        if (Array.isArray(this.subSections)) {
            data["subSections"] = [];
            for (let item of this.subSections)
                data["subSections"].push(item);
        }
        if (Array.isArray(this.nights)) {
            data["nights"] = [];
            for (let item of this.nights)
                data["nights"].push(item);
        }
        if (Array.isArray(this.reservationSpaceCategories)) {
            data["reservationSpaceCategories"] = [];
            for (let item of this.reservationSpaceCategories)
                data["reservationSpaceCategories"].push(item);
        }
        if (Array.isArray(this.productsTags)) {
            data["productsTags"] = [];
            for (let item of this.productsTags)
                data["productsTags"].push(item);
        }
        if (Array.isArray(this.rooms)) {
            data["rooms"] = [];
            for (let item of this.rooms)
                data["rooms"].push(item.toJSON());
        }
        if (Array.isArray(this.otherProperties)) {
            data["otherProperties"] = [];
            for (let item of this.otherProperties)
                data["otherProperties"].push(item.toJSON());
        }
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        if (Array.isArray(this.productsTagsExtended)) {
            data["productsTagsExtended"] = [];
            for (let item of this.productsTagsExtended)
                data["productsTagsExtended"].push(item.toJSON());
        }
        if (Array.isArray(this.otherPropertiesExtended)) {
            data["otherPropertiesExtended"] = [];
            for (let item of this.otherPropertiesExtended)
                data["otherPropertiesExtended"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICleaningPluginBasedOnJson {
    id?: string | null;
    name?: string | null;
    key?: string | null;
    description?: string | null;
    cleanDeparture?: boolean | null;
    cleanStay?: boolean | null;
    cleanVacant?: boolean | null;
    cleanVacantEveryNumberOfDays?: number | null;
    cleanOutOfService?: boolean | null;
    productsTagsMustBeConsumedOnTime?: boolean | null;
    productsTagsConsumationIntervalFrom?: moment.Moment | null;
    productsTagsConsumationIntervalTo?: moment.Moment | null;
    cleanlinessKey?: string | null;
    nightsTypeKey?: string | null;
    nightsEveryNumberOfDays?: number | null;
    nightsFromKey?: string | null;
    foorIds?: string[] | null;
    sections?: string[] | null;
    subSections?: string[] | null;
    nights?: number[] | null;
    reservationSpaceCategories?: string[] | null;
    productsTags?: string[] | null;
    rooms?: HotelRoomCreditsDataJson[] | null;
    otherProperties?: CleaningPluginKeyValueJson[] | null;
    categories?: CleaningPluginBasedOnRoomCategoryJson[] | null;
    productsTagsExtended?: CleaningPluginBasedOnProductsTagsExtendedJson[] | null;
    otherPropertiesExtended?: BasedOnOtherPropertiesExtendedJson[] | null;
}

export class HotelRoomCreditsDataJson implements IHotelRoomCreditsDataJson {
    roomId!: string;
    credits?: number | null;

    constructor(data?: IHotelRoomCreditsDataJson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
        }
    }

    static fromJS(data: any): HotelRoomCreditsDataJson {
        data = typeof data === 'object' ? data : {};
        let result = new HotelRoomCreditsDataJson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        return data; 
    }
}

export interface IHotelRoomCreditsDataJson {
    roomId: string;
    credits?: number | null;
}

export class CleaningPluginKeyValueJson implements ICleaningPluginKeyValueJson {
    key?: string | null;
    value?: string | null;

    constructor(data?: ICleaningPluginKeyValueJson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"] !== undefined ? _data["key"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any): CleaningPluginKeyValueJson {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningPluginKeyValueJson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key !== undefined ? this.key : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data; 
    }
}

export interface ICleaningPluginKeyValueJson {
    key?: string | null;
    value?: string | null;
}

export class CleaningPluginBasedOnRoomCategoryJson implements ICleaningPluginBasedOnRoomCategoryJson {
    categoryId!: string;
    isSelected!: boolean;
    credits!: number;

    constructor(data?: ICleaningPluginBasedOnRoomCategoryJson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.categoryId = _data["categoryId"] !== undefined ? _data["categoryId"] : <any>null;
            this.isSelected = _data["isSelected"] !== undefined ? _data["isSelected"] : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
        }
    }

    static fromJS(data: any): CleaningPluginBasedOnRoomCategoryJson {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningPluginBasedOnRoomCategoryJson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryId"] = this.categoryId !== undefined ? this.categoryId : <any>null;
        data["isSelected"] = this.isSelected !== undefined ? this.isSelected : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        return data; 
    }
}

export interface ICleaningPluginBasedOnRoomCategoryJson {
    categoryId: string;
    isSelected: boolean;
    credits: number;
}

export class CleaningPluginBasedOnProductsTagsExtendedJson implements ICleaningPluginBasedOnProductsTagsExtendedJson {
    basedOnProductsTagsTypeKey?: string | null;
    isCaseSensitive!: boolean;
    comparisonValue?: string | null;
    productId?: string | null;

    constructor(data?: ICleaningPluginBasedOnProductsTagsExtendedJson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.basedOnProductsTagsTypeKey = _data["basedOnProductsTagsTypeKey"] !== undefined ? _data["basedOnProductsTagsTypeKey"] : <any>null;
            this.isCaseSensitive = _data["isCaseSensitive"] !== undefined ? _data["isCaseSensitive"] : <any>null;
            this.comparisonValue = _data["comparisonValue"] !== undefined ? _data["comparisonValue"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
        }
    }

    static fromJS(data: any): CleaningPluginBasedOnProductsTagsExtendedJson {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningPluginBasedOnProductsTagsExtendedJson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["basedOnProductsTagsTypeKey"] = this.basedOnProductsTagsTypeKey !== undefined ? this.basedOnProductsTagsTypeKey : <any>null;
        data["isCaseSensitive"] = this.isCaseSensitive !== undefined ? this.isCaseSensitive : <any>null;
        data["comparisonValue"] = this.comparisonValue !== undefined ? this.comparisonValue : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        return data; 
    }
}

export interface ICleaningPluginBasedOnProductsTagsExtendedJson {
    basedOnProductsTagsTypeKey?: string | null;
    isCaseSensitive: boolean;
    comparisonValue?: string | null;
    productId?: string | null;
}

export class BasedOnOtherPropertiesExtendedJson implements IBasedOnOtherPropertiesExtendedJson {
    basedOnOtherPropertiesTypeKey?: string | null;
    key?: string | null;
    value?: string | null;

    constructor(data?: IBasedOnOtherPropertiesExtendedJson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.basedOnOtherPropertiesTypeKey = _data["basedOnOtherPropertiesTypeKey"] !== undefined ? _data["basedOnOtherPropertiesTypeKey"] : <any>null;
            this.key = _data["key"] !== undefined ? _data["key"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any): BasedOnOtherPropertiesExtendedJson {
        data = typeof data === 'object' ? data : {};
        let result = new BasedOnOtherPropertiesExtendedJson();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["basedOnOtherPropertiesTypeKey"] = this.basedOnOtherPropertiesTypeKey !== undefined ? this.basedOnOtherPropertiesTypeKey : <any>null;
        data["key"] = this.key !== undefined ? this.key : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data; 
    }
}

export interface IBasedOnOtherPropertiesExtendedJson {
    basedOnOtherPropertiesTypeKey?: string | null;
    key?: string | null;
    value?: string | null;
}

export class Settings extends ChangeTrackingBaseEntity implements ISettings {
    id!: string;
    hotelId?: string | null;
    hotel?: Hotel | null;
    defaultCheckInTime?: string | null;
    defaultCheckOutTime?: string | null;
    defaultAttendantStartTime?: string | null;
    defaultAttendantEndTime?: string | null;
    defaultAttendantMaxCredits?: number | null;
    reserveBetweenCleanings?: number | null;
    travelReserve?: number | null;
    showHoursInWorkerPlanner!: boolean;
    useOrderInPlanning!: boolean;
    showCleaningDelays!: boolean;
    allowPostponeCleanings!: boolean;
    emailAddressesForSendingPlan?: string | null;
    sendPlanToAttendantsByEmail!: boolean;
    fromEmailAddress?: string | null;
    useGroups!: boolean;
    cleanHostelRoomBedsInGroups!: boolean;
    buildingsDistanceMatrix?: string | null;
    levelsDistanceMatrix?: string | null;
    buildingAward!: number;
    levelAward!: number;
    roomAward!: number;
    levelTime!: number;
    cleaningTime!: number;
    weightLevelChange!: number;
    weightCredits!: number;
    minutesPerCredit!: number;
    minCreditsForMultipleCleanersCleaning!: number;

    constructor(data?: ISettings) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.hotel = _data["hotel"] ? Hotel.fromJS(_data["hotel"]) : <any>null;
            this.defaultCheckInTime = _data["defaultCheckInTime"] !== undefined ? _data["defaultCheckInTime"] : <any>null;
            this.defaultCheckOutTime = _data["defaultCheckOutTime"] !== undefined ? _data["defaultCheckOutTime"] : <any>null;
            this.defaultAttendantStartTime = _data["defaultAttendantStartTime"] !== undefined ? _data["defaultAttendantStartTime"] : <any>null;
            this.defaultAttendantEndTime = _data["defaultAttendantEndTime"] !== undefined ? _data["defaultAttendantEndTime"] : <any>null;
            this.defaultAttendantMaxCredits = _data["defaultAttendantMaxCredits"] !== undefined ? _data["defaultAttendantMaxCredits"] : <any>null;
            this.reserveBetweenCleanings = _data["reserveBetweenCleanings"] !== undefined ? _data["reserveBetweenCleanings"] : <any>null;
            this.travelReserve = _data["travelReserve"] !== undefined ? _data["travelReserve"] : <any>null;
            this.showHoursInWorkerPlanner = _data["showHoursInWorkerPlanner"] !== undefined ? _data["showHoursInWorkerPlanner"] : <any>null;
            this.useOrderInPlanning = _data["useOrderInPlanning"] !== undefined ? _data["useOrderInPlanning"] : <any>null;
            this.showCleaningDelays = _data["showCleaningDelays"] !== undefined ? _data["showCleaningDelays"] : <any>null;
            this.allowPostponeCleanings = _data["allowPostponeCleanings"] !== undefined ? _data["allowPostponeCleanings"] : <any>null;
            this.emailAddressesForSendingPlan = _data["emailAddressesForSendingPlan"] !== undefined ? _data["emailAddressesForSendingPlan"] : <any>null;
            this.sendPlanToAttendantsByEmail = _data["sendPlanToAttendantsByEmail"] !== undefined ? _data["sendPlanToAttendantsByEmail"] : <any>null;
            this.fromEmailAddress = _data["fromEmailAddress"] !== undefined ? _data["fromEmailAddress"] : <any>null;
            this.useGroups = _data["useGroups"] !== undefined ? _data["useGroups"] : <any>null;
            this.cleanHostelRoomBedsInGroups = _data["cleanHostelRoomBedsInGroups"] !== undefined ? _data["cleanHostelRoomBedsInGroups"] : <any>null;
            this.buildingsDistanceMatrix = _data["buildingsDistanceMatrix"] !== undefined ? _data["buildingsDistanceMatrix"] : <any>null;
            this.levelsDistanceMatrix = _data["levelsDistanceMatrix"] !== undefined ? _data["levelsDistanceMatrix"] : <any>null;
            this.buildingAward = _data["buildingAward"] !== undefined ? _data["buildingAward"] : <any>null;
            this.levelAward = _data["levelAward"] !== undefined ? _data["levelAward"] : <any>null;
            this.roomAward = _data["roomAward"] !== undefined ? _data["roomAward"] : <any>null;
            this.levelTime = _data["levelTime"] !== undefined ? _data["levelTime"] : <any>null;
            this.cleaningTime = _data["cleaningTime"] !== undefined ? _data["cleaningTime"] : <any>null;
            this.weightLevelChange = _data["weightLevelChange"] !== undefined ? _data["weightLevelChange"] : <any>null;
            this.weightCredits = _data["weightCredits"] !== undefined ? _data["weightCredits"] : <any>null;
            this.minutesPerCredit = _data["minutesPerCredit"] !== undefined ? _data["minutesPerCredit"] : <any>null;
            this.minCreditsForMultipleCleanersCleaning = _data["minCreditsForMultipleCleanersCleaning"] !== undefined ? _data["minCreditsForMultipleCleanersCleaning"] : <any>null;
        }
    }

    static fromJS(data: any): Settings {
        data = typeof data === 'object' ? data : {};
        let result = new Settings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["hotel"] = this.hotel ? this.hotel.toJSON() : <any>null;
        data["defaultCheckInTime"] = this.defaultCheckInTime !== undefined ? this.defaultCheckInTime : <any>null;
        data["defaultCheckOutTime"] = this.defaultCheckOutTime !== undefined ? this.defaultCheckOutTime : <any>null;
        data["defaultAttendantStartTime"] = this.defaultAttendantStartTime !== undefined ? this.defaultAttendantStartTime : <any>null;
        data["defaultAttendantEndTime"] = this.defaultAttendantEndTime !== undefined ? this.defaultAttendantEndTime : <any>null;
        data["defaultAttendantMaxCredits"] = this.defaultAttendantMaxCredits !== undefined ? this.defaultAttendantMaxCredits : <any>null;
        data["reserveBetweenCleanings"] = this.reserveBetweenCleanings !== undefined ? this.reserveBetweenCleanings : <any>null;
        data["travelReserve"] = this.travelReserve !== undefined ? this.travelReserve : <any>null;
        data["showHoursInWorkerPlanner"] = this.showHoursInWorkerPlanner !== undefined ? this.showHoursInWorkerPlanner : <any>null;
        data["useOrderInPlanning"] = this.useOrderInPlanning !== undefined ? this.useOrderInPlanning : <any>null;
        data["showCleaningDelays"] = this.showCleaningDelays !== undefined ? this.showCleaningDelays : <any>null;
        data["allowPostponeCleanings"] = this.allowPostponeCleanings !== undefined ? this.allowPostponeCleanings : <any>null;
        data["emailAddressesForSendingPlan"] = this.emailAddressesForSendingPlan !== undefined ? this.emailAddressesForSendingPlan : <any>null;
        data["sendPlanToAttendantsByEmail"] = this.sendPlanToAttendantsByEmail !== undefined ? this.sendPlanToAttendantsByEmail : <any>null;
        data["fromEmailAddress"] = this.fromEmailAddress !== undefined ? this.fromEmailAddress : <any>null;
        data["useGroups"] = this.useGroups !== undefined ? this.useGroups : <any>null;
        data["cleanHostelRoomBedsInGroups"] = this.cleanHostelRoomBedsInGroups !== undefined ? this.cleanHostelRoomBedsInGroups : <any>null;
        data["buildingsDistanceMatrix"] = this.buildingsDistanceMatrix !== undefined ? this.buildingsDistanceMatrix : <any>null;
        data["levelsDistanceMatrix"] = this.levelsDistanceMatrix !== undefined ? this.levelsDistanceMatrix : <any>null;
        data["buildingAward"] = this.buildingAward !== undefined ? this.buildingAward : <any>null;
        data["levelAward"] = this.levelAward !== undefined ? this.levelAward : <any>null;
        data["roomAward"] = this.roomAward !== undefined ? this.roomAward : <any>null;
        data["levelTime"] = this.levelTime !== undefined ? this.levelTime : <any>null;
        data["cleaningTime"] = this.cleaningTime !== undefined ? this.cleaningTime : <any>null;
        data["weightLevelChange"] = this.weightLevelChange !== undefined ? this.weightLevelChange : <any>null;
        data["weightCredits"] = this.weightCredits !== undefined ? this.weightCredits : <any>null;
        data["minutesPerCredit"] = this.minutesPerCredit !== undefined ? this.minutesPerCredit : <any>null;
        data["minCreditsForMultipleCleanersCleaning"] = this.minCreditsForMultipleCleanersCleaning !== undefined ? this.minCreditsForMultipleCleanersCleaning : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface ISettings extends IChangeTrackingBaseEntity {
    id: string;
    hotelId?: string | null;
    hotel?: Hotel | null;
    defaultCheckInTime?: string | null;
    defaultCheckOutTime?: string | null;
    defaultAttendantStartTime?: string | null;
    defaultAttendantEndTime?: string | null;
    defaultAttendantMaxCredits?: number | null;
    reserveBetweenCleanings?: number | null;
    travelReserve?: number | null;
    showHoursInWorkerPlanner: boolean;
    useOrderInPlanning: boolean;
    showCleaningDelays: boolean;
    allowPostponeCleanings: boolean;
    emailAddressesForSendingPlan?: string | null;
    sendPlanToAttendantsByEmail: boolean;
    fromEmailAddress?: string | null;
    useGroups: boolean;
    cleanHostelRoomBedsInGroups: boolean;
    buildingsDistanceMatrix?: string | null;
    levelsDistanceMatrix?: string | null;
    buildingAward: number;
    levelAward: number;
    roomAward: number;
    levelTime: number;
    cleaningTime: number;
    weightLevelChange: number;
    weightCredits: number;
    minutesPerCredit: number;
    minCreditsForMultipleCleanersCleaning: number;
}

export class IdentityUserOfGuid implements IIdentityUserOfGuid {
    id!: string;
    userName?: string | null;
    normalizedUserName?: string | null;
    email?: string | null;
    normalizedEmail?: string | null;
    emailConfirmed!: boolean;
    passwordHash?: string | null;
    securityStamp?: string | null;
    concurrencyStamp?: string | null;
    phoneNumber?: string | null;
    phoneNumberConfirmed!: boolean;
    twoFactorEnabled!: boolean;
    lockoutEnd?: moment.Moment | null;
    lockoutEnabled!: boolean;
    accessFailedCount!: number;

    constructor(data?: IIdentityUserOfGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.normalizedUserName = _data["normalizedUserName"] !== undefined ? _data["normalizedUserName"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.normalizedEmail = _data["normalizedEmail"] !== undefined ? _data["normalizedEmail"] : <any>null;
            this.emailConfirmed = _data["emailConfirmed"] !== undefined ? _data["emailConfirmed"] : <any>null;
            this.passwordHash = _data["passwordHash"] !== undefined ? _data["passwordHash"] : <any>null;
            this.securityStamp = _data["securityStamp"] !== undefined ? _data["securityStamp"] : <any>null;
            this.concurrencyStamp = _data["concurrencyStamp"] !== undefined ? _data["concurrencyStamp"] : <any>null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"] !== undefined ? _data["phoneNumberConfirmed"] : <any>null;
            this.twoFactorEnabled = _data["twoFactorEnabled"] !== undefined ? _data["twoFactorEnabled"] : <any>null;
            this.lockoutEnd = _data["lockoutEnd"] ? moment(_data["lockoutEnd"].toString()) : <any>null;
            this.lockoutEnabled = _data["lockoutEnabled"] !== undefined ? _data["lockoutEnabled"] : <any>null;
            this.accessFailedCount = _data["accessFailedCount"] !== undefined ? _data["accessFailedCount"] : <any>null;
        }
    }

    static fromJS(data: any): IdentityUserOfGuid {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUserOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["normalizedUserName"] = this.normalizedUserName !== undefined ? this.normalizedUserName : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["normalizedEmail"] = this.normalizedEmail !== undefined ? this.normalizedEmail : <any>null;
        data["emailConfirmed"] = this.emailConfirmed !== undefined ? this.emailConfirmed : <any>null;
        data["passwordHash"] = this.passwordHash !== undefined ? this.passwordHash : <any>null;
        data["securityStamp"] = this.securityStamp !== undefined ? this.securityStamp : <any>null;
        data["concurrencyStamp"] = this.concurrencyStamp !== undefined ? this.concurrencyStamp : <any>null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed !== undefined ? this.phoneNumberConfirmed : <any>null;
        data["twoFactorEnabled"] = this.twoFactorEnabled !== undefined ? this.twoFactorEnabled : <any>null;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>null;
        data["lockoutEnabled"] = this.lockoutEnabled !== undefined ? this.lockoutEnabled : <any>null;
        data["accessFailedCount"] = this.accessFailedCount !== undefined ? this.accessFailedCount : <any>null;
        return data; 
    }
}

export interface IIdentityUserOfGuid {
    id: string;
    userName?: string | null;
    normalizedUserName?: string | null;
    email?: string | null;
    normalizedEmail?: string | null;
    emailConfirmed: boolean;
    passwordHash?: string | null;
    securityStamp?: string | null;
    concurrencyStamp?: string | null;
    phoneNumber?: string | null;
    phoneNumberConfirmed: boolean;
    twoFactorEnabled: boolean;
    lockoutEnd?: moment.Moment | null;
    lockoutEnabled: boolean;
    accessFailedCount: number;
}

export class User extends IdentityUserOfGuid implements IUser {
    firstName?: string | null;
    lastName?: string | null;
    connectionName?: string | null;
    registrationNumber?: string | null;
    language?: string | null;
    originalHotel?: string | null;
    userSubGroupId?: string | null;
    userSubGroup?: UserSubGroup | null;
    userGroupId?: string | null;
    userGroup?: UserGroup | null;
    isSubGroupLeader!: boolean;
    isActive!: boolean;
    defaultAvatarColorHex?: string | null;
    userRoles?: IdentityUserRoleOfGuid[] | null;
    userClaims?: IdentityUserClaimOfGuid[] | null;
    avatar?: ApplicationUserAvatar | null;
    isOnDuty!: boolean;
    userHistoryEvents?: UserHistoryEvent[] | null;
    roomHistoryEvents?: RoomHistoryEvent[] | null;
    cleaningHistoryEvents?: CleaningHistoryEvent[] | null;
    cleanings?: Cleaning2[] | null;
    inspectedCleanings?: Cleaning2[] | null;

    constructor(data?: IUser) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.connectionName = _data["connectionName"] !== undefined ? _data["connectionName"] : <any>null;
            this.registrationNumber = _data["registrationNumber"] !== undefined ? _data["registrationNumber"] : <any>null;
            this.language = _data["language"] !== undefined ? _data["language"] : <any>null;
            this.originalHotel = _data["originalHotel"] !== undefined ? _data["originalHotel"] : <any>null;
            this.userSubGroupId = _data["userSubGroupId"] !== undefined ? _data["userSubGroupId"] : <any>null;
            this.userSubGroup = _data["userSubGroup"] ? UserSubGroup.fromJS(_data["userSubGroup"]) : <any>null;
            this.userGroupId = _data["userGroupId"] !== undefined ? _data["userGroupId"] : <any>null;
            this.userGroup = _data["userGroup"] ? UserGroup.fromJS(_data["userGroup"]) : <any>null;
            this.isSubGroupLeader = _data["isSubGroupLeader"] !== undefined ? _data["isSubGroupLeader"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.defaultAvatarColorHex = _data["defaultAvatarColorHex"] !== undefined ? _data["defaultAvatarColorHex"] : <any>null;
            if (Array.isArray(_data["userRoles"])) {
                this.userRoles = [] as any;
                for (let item of _data["userRoles"])
                    this.userRoles!.push(IdentityUserRoleOfGuid.fromJS(item));
            }
            if (Array.isArray(_data["userClaims"])) {
                this.userClaims = [] as any;
                for (let item of _data["userClaims"])
                    this.userClaims!.push(IdentityUserClaimOfGuid.fromJS(item));
            }
            this.avatar = _data["avatar"] ? ApplicationUserAvatar.fromJS(_data["avatar"]) : <any>null;
            this.isOnDuty = _data["isOnDuty"] !== undefined ? _data["isOnDuty"] : <any>null;
            if (Array.isArray(_data["userHistoryEvents"])) {
                this.userHistoryEvents = [] as any;
                for (let item of _data["userHistoryEvents"])
                    this.userHistoryEvents!.push(UserHistoryEvent.fromJS(item));
            }
            if (Array.isArray(_data["roomHistoryEvents"])) {
                this.roomHistoryEvents = [] as any;
                for (let item of _data["roomHistoryEvents"])
                    this.roomHistoryEvents!.push(RoomHistoryEvent.fromJS(item));
            }
            if (Array.isArray(_data["cleaningHistoryEvents"])) {
                this.cleaningHistoryEvents = [] as any;
                for (let item of _data["cleaningHistoryEvents"])
                    this.cleaningHistoryEvents!.push(CleaningHistoryEvent.fromJS(item));
            }
            if (Array.isArray(_data["cleanings"])) {
                this.cleanings = [] as any;
                for (let item of _data["cleanings"])
                    this.cleanings!.push(Cleaning2.fromJS(item));
            }
            if (Array.isArray(_data["inspectedCleanings"])) {
                this.inspectedCleanings = [] as any;
                for (let item of _data["inspectedCleanings"])
                    this.inspectedCleanings!.push(Cleaning2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["connectionName"] = this.connectionName !== undefined ? this.connectionName : <any>null;
        data["registrationNumber"] = this.registrationNumber !== undefined ? this.registrationNumber : <any>null;
        data["language"] = this.language !== undefined ? this.language : <any>null;
        data["originalHotel"] = this.originalHotel !== undefined ? this.originalHotel : <any>null;
        data["userSubGroupId"] = this.userSubGroupId !== undefined ? this.userSubGroupId : <any>null;
        data["userSubGroup"] = this.userSubGroup ? this.userSubGroup.toJSON() : <any>null;
        data["userGroupId"] = this.userGroupId !== undefined ? this.userGroupId : <any>null;
        data["userGroup"] = this.userGroup ? this.userGroup.toJSON() : <any>null;
        data["isSubGroupLeader"] = this.isSubGroupLeader !== undefined ? this.isSubGroupLeader : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["defaultAvatarColorHex"] = this.defaultAvatarColorHex !== undefined ? this.defaultAvatarColorHex : <any>null;
        if (Array.isArray(this.userRoles)) {
            data["userRoles"] = [];
            for (let item of this.userRoles)
                data["userRoles"].push(item.toJSON());
        }
        if (Array.isArray(this.userClaims)) {
            data["userClaims"] = [];
            for (let item of this.userClaims)
                data["userClaims"].push(item.toJSON());
        }
        data["avatar"] = this.avatar ? this.avatar.toJSON() : <any>null;
        data["isOnDuty"] = this.isOnDuty !== undefined ? this.isOnDuty : <any>null;
        if (Array.isArray(this.userHistoryEvents)) {
            data["userHistoryEvents"] = [];
            for (let item of this.userHistoryEvents)
                data["userHistoryEvents"].push(item.toJSON());
        }
        if (Array.isArray(this.roomHistoryEvents)) {
            data["roomHistoryEvents"] = [];
            for (let item of this.roomHistoryEvents)
                data["roomHistoryEvents"].push(item.toJSON());
        }
        if (Array.isArray(this.cleaningHistoryEvents)) {
            data["cleaningHistoryEvents"] = [];
            for (let item of this.cleaningHistoryEvents)
                data["cleaningHistoryEvents"].push(item.toJSON());
        }
        if (Array.isArray(this.cleanings)) {
            data["cleanings"] = [];
            for (let item of this.cleanings)
                data["cleanings"].push(item.toJSON());
        }
        if (Array.isArray(this.inspectedCleanings)) {
            data["inspectedCleanings"] = [];
            for (let item of this.inspectedCleanings)
                data["inspectedCleanings"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IUser extends IIdentityUserOfGuid {
    firstName?: string | null;
    lastName?: string | null;
    connectionName?: string | null;
    registrationNumber?: string | null;
    language?: string | null;
    originalHotel?: string | null;
    userSubGroupId?: string | null;
    userSubGroup?: UserSubGroup | null;
    userGroupId?: string | null;
    userGroup?: UserGroup | null;
    isSubGroupLeader: boolean;
    isActive: boolean;
    defaultAvatarColorHex?: string | null;
    userRoles?: IdentityUserRoleOfGuid[] | null;
    userClaims?: IdentityUserClaimOfGuid[] | null;
    avatar?: ApplicationUserAvatar | null;
    isOnDuty: boolean;
    userHistoryEvents?: UserHistoryEvent[] | null;
    roomHistoryEvents?: RoomHistoryEvent[] | null;
    cleaningHistoryEvents?: CleaningHistoryEvent[] | null;
    cleanings?: Cleaning2[] | null;
    inspectedCleanings?: Cleaning2[] | null;
}

export class UserSubGroup extends ChangeTrackingBaseEntity implements IUserSubGroup {
    id!: string;
    name?: string | null;
    userGroupId!: string;
    userGroup?: UserGroup | null;
    users?: User[] | null;

    constructor(data?: IUserSubGroup) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.userGroupId = _data["userGroupId"] !== undefined ? _data["userGroupId"] : <any>null;
            this.userGroup = _data["userGroup"] ? UserGroup.fromJS(_data["userGroup"]) : <any>null;
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(User.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserSubGroup {
        data = typeof data === 'object' ? data : {};
        let result = new UserSubGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["userGroupId"] = this.userGroupId !== undefined ? this.userGroupId : <any>null;
        data["userGroup"] = this.userGroup ? this.userGroup.toJSON() : <any>null;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IUserSubGroup extends IChangeTrackingBaseEntity {
    id: string;
    name?: string | null;
    userGroupId: string;
    userGroup?: UserGroup | null;
    users?: User[] | null;
}

export class UserGroup extends ChangeTrackingBaseEntity implements IUserGroup {
    id!: string;
    name?: string | null;
    userSubGroups?: UserSubGroup[] | null;
    users?: User[] | null;

    constructor(data?: IUserGroup) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            if (Array.isArray(_data["userSubGroups"])) {
                this.userSubGroups = [] as any;
                for (let item of _data["userSubGroups"])
                    this.userSubGroups!.push(UserSubGroup.fromJS(item));
            }
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(User.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserGroup {
        data = typeof data === 'object' ? data : {};
        let result = new UserGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.userSubGroups)) {
            data["userSubGroups"] = [];
            for (let item of this.userSubGroups)
                data["userSubGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IUserGroup extends IChangeTrackingBaseEntity {
    id: string;
    name?: string | null;
    userSubGroups?: UserSubGroup[] | null;
    users?: User[] | null;
}

export class IdentityUserRoleOfGuid implements IIdentityUserRoleOfGuid {
    userId!: string;
    roleId!: string;

    constructor(data?: IIdentityUserRoleOfGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.roleId = _data["roleId"] !== undefined ? _data["roleId"] : <any>null;
        }
    }

    static fromJS(data: any): IdentityUserRoleOfGuid {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUserRoleOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["roleId"] = this.roleId !== undefined ? this.roleId : <any>null;
        return data; 
    }
}

export interface IIdentityUserRoleOfGuid {
    userId: string;
    roleId: string;
}

export class IdentityUserClaimOfGuid implements IIdentityUserClaimOfGuid {
    id!: number;
    userId!: string;
    claimType?: string | null;
    claimValue?: string | null;

    constructor(data?: IIdentityUserClaimOfGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.claimType = _data["claimType"] !== undefined ? _data["claimType"] : <any>null;
            this.claimValue = _data["claimValue"] !== undefined ? _data["claimValue"] : <any>null;
        }
    }

    static fromJS(data: any): IdentityUserClaimOfGuid {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUserClaimOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["claimType"] = this.claimType !== undefined ? this.claimType : <any>null;
        data["claimValue"] = this.claimValue !== undefined ? this.claimValue : <any>null;
        return data; 
    }
}

export interface IIdentityUserClaimOfGuid {
    id: number;
    userId: string;
    claimType?: string | null;
    claimValue?: string | null;
}

export class ApplicationUserAvatar implements IApplicationUserAvatar {
    id!: string;
    fileName?: string | null;
    fileUrl?: string | null;
    file?: string | null;
    user?: User | null;

    constructor(data?: IApplicationUserAvatar) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.fileName = _data["fileName"] !== undefined ? _data["fileName"] : <any>null;
            this.fileUrl = _data["fileUrl"] !== undefined ? _data["fileUrl"] : <any>null;
            this.file = _data["file"] !== undefined ? _data["file"] : <any>null;
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>null;
        }
    }

    static fromJS(data: any): ApplicationUserAvatar {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationUserAvatar();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["fileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        data["fileUrl"] = this.fileUrl !== undefined ? this.fileUrl : <any>null;
        data["file"] = this.file !== undefined ? this.file : <any>null;
        data["user"] = this.user ? this.user.toJSON() : <any>null;
        return data; 
    }
}

export interface IApplicationUserAvatar {
    id: string;
    fileName?: string | null;
    fileUrl?: string | null;
    file?: string | null;
    user?: User | null;
}

export class UserHistoryEvent implements IUserHistoryEvent {
    id!: string;
    userId!: string;
    user?: User | null;
    type!: UserEventType;
    at!: moment.Moment;
    message?: string | null;
    oldData?: string | null;
    newData?: string | null;

    constructor(data?: IUserHistoryEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.at = _data["at"] ? moment(_data["at"].toString()) : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.oldData = _data["oldData"] !== undefined ? _data["oldData"] : <any>null;
            this.newData = _data["newData"] !== undefined ? _data["newData"] : <any>null;
        }
    }

    static fromJS(data: any): UserHistoryEvent {
        data = typeof data === 'object' ? data : {};
        let result = new UserHistoryEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["user"] = this.user ? this.user.toJSON() : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["at"] = this.at ? this.at.toISOString() : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["oldData"] = this.oldData !== undefined ? this.oldData : <any>null;
        data["newData"] = this.newData !== undefined ? this.newData : <any>null;
        return data; 
    }
}

export interface IUserHistoryEvent {
    id: string;
    userId: string;
    user?: User | null;
    type: UserEventType;
    at: moment.Moment;
    message?: string | null;
    oldData?: string | null;
    newData?: string | null;
}

export enum UserEventType {
    LOGGED_IN = 0,
    LOGGED_OUT = 1,
    CAME_ON_DUTY = 2,
    CAME_OFF_DUTY = 3,
    CLEANING_STARTED = 4,
    CLEANING_PAUSED = 5,
    CLEANING_UNPAUSED = 6,
    CLEANING_RESTARTED = 7,
    CLEANING_FINISHED = 8,
    CLEANING_INSPECTION_FINISHED = 9,
    CLEANING_REFUSED = 10,
    CLEANING_DO_NOT_DISTURB = 11,
    CLEANING_DELAYED = 12,
    REGISTERED_GUEST_ENTERED_ROOM = 13,
    REGISTERED_GUEST_LEFT_ROOM = 14,
    CLEANING_INSPECTION_DO_NOT_DISTURB = 15,
    CLEANING_INSPECTION_REQUIRES_INSPECTION = 16,
    CLEANING_INSPECTION_CLEANING_IN_PROGRESS = 17,
    CLEANING_INSPECTION_NEW_CLEANING = 18,
    CLEANING_INSPECTION_CHANGED = 19,
    CLEANING_NEW = 20,
    ROOM_CLEANING_PRIORITY_ENABLED = 21,
    ROOM_CLEANING_PRIORITY_DISABLED = 22,
}

export class RoomHistoryEvent implements IRoomHistoryEvent {
    id!: string;
    roomId!: string;
    room?: Room2 | null;
    roomBedId?: string | null;
    roomBed?: RoomBed | null;
    userId?: string | null;
    user?: User | null;
    type!: RoomEventType;
    at!: moment.Moment;
    message?: string | null;
    oldData?: string | null;
    newData?: string | null;

    constructor(data?: IRoomHistoryEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.room = _data["room"] ? Room2.fromJS(_data["room"]) : <any>null;
            this.roomBedId = _data["roomBedId"] !== undefined ? _data["roomBedId"] : <any>null;
            this.roomBed = _data["roomBed"] ? RoomBed.fromJS(_data["roomBed"]) : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.at = _data["at"] ? moment(_data["at"].toString()) : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.oldData = _data["oldData"] !== undefined ? _data["oldData"] : <any>null;
            this.newData = _data["newData"] !== undefined ? _data["newData"] : <any>null;
        }
    }

    static fromJS(data: any): RoomHistoryEvent {
        data = typeof data === 'object' ? data : {};
        let result = new RoomHistoryEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["room"] = this.room ? this.room.toJSON() : <any>null;
        data["roomBedId"] = this.roomBedId !== undefined ? this.roomBedId : <any>null;
        data["roomBed"] = this.roomBed ? this.roomBed.toJSON() : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["user"] = this.user ? this.user.toJSON() : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["at"] = this.at ? this.at.toISOString() : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["oldData"] = this.oldData !== undefined ? this.oldData : <any>null;
        data["newData"] = this.newData !== undefined ? this.newData : <any>null;
        return data; 
    }
}

export interface IRoomHistoryEvent {
    id: string;
    roomId: string;
    room?: Room2 | null;
    roomBedId?: string | null;
    roomBed?: RoomBed | null;
    userId?: string | null;
    user?: User | null;
    type: RoomEventType;
    at: moment.Moment;
    message?: string | null;
    oldData?: string | null;
    newData?: string | null;
}

export class RoomBed implements IRoomBed {
    id!: string;
    roomId!: string;
    room?: Room2 | null;
    name?: string | null;
    externalId?: string | null;
    isAutogeneratedFromReservationSync!: boolean;
    reservations?: Reservation[] | null;
    isOccupied!: boolean;
    isClean!: boolean;
    isOutOfOrder!: boolean;
    isOutOfService!: boolean;
    isDoNotDisturb!: boolean;
    isCleaningInProgress!: boolean;
    isInspected!: boolean;
    isGuestCurrentlyIn!: boolean;
    isCleaningPriority!: boolean;
    cleanings?: Cleaning2[] | null;
    roomHistoryEvents?: RoomHistoryEvent[] | null;
    rccHousekeepingStatus?: RccHousekeepingStatusCode | null;
    rccRoomStatus?: RccRoomStatusCode | null;

    constructor(data?: IRoomBed) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.room = _data["room"] ? Room2.fromJS(_data["room"]) : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.externalId = _data["externalId"] !== undefined ? _data["externalId"] : <any>null;
            this.isAutogeneratedFromReservationSync = _data["isAutogeneratedFromReservationSync"] !== undefined ? _data["isAutogeneratedFromReservationSync"] : <any>null;
            if (Array.isArray(_data["reservations"])) {
                this.reservations = [] as any;
                for (let item of _data["reservations"])
                    this.reservations!.push(Reservation.fromJS(item));
            }
            this.isOccupied = _data["isOccupied"] !== undefined ? _data["isOccupied"] : <any>null;
            this.isClean = _data["isClean"] !== undefined ? _data["isClean"] : <any>null;
            this.isOutOfOrder = _data["isOutOfOrder"] !== undefined ? _data["isOutOfOrder"] : <any>null;
            this.isOutOfService = _data["isOutOfService"] !== undefined ? _data["isOutOfService"] : <any>null;
            this.isDoNotDisturb = _data["isDoNotDisturb"] !== undefined ? _data["isDoNotDisturb"] : <any>null;
            this.isCleaningInProgress = _data["isCleaningInProgress"] !== undefined ? _data["isCleaningInProgress"] : <any>null;
            this.isInspected = _data["isInspected"] !== undefined ? _data["isInspected"] : <any>null;
            this.isGuestCurrentlyIn = _data["isGuestCurrentlyIn"] !== undefined ? _data["isGuestCurrentlyIn"] : <any>null;
            this.isCleaningPriority = _data["isCleaningPriority"] !== undefined ? _data["isCleaningPriority"] : <any>null;
            if (Array.isArray(_data["cleanings"])) {
                this.cleanings = [] as any;
                for (let item of _data["cleanings"])
                    this.cleanings!.push(Cleaning2.fromJS(item));
            }
            if (Array.isArray(_data["roomHistoryEvents"])) {
                this.roomHistoryEvents = [] as any;
                for (let item of _data["roomHistoryEvents"])
                    this.roomHistoryEvents!.push(RoomHistoryEvent.fromJS(item));
            }
            this.rccHousekeepingStatus = _data["rccHousekeepingStatus"] !== undefined ? _data["rccHousekeepingStatus"] : <any>null;
            this.rccRoomStatus = _data["rccRoomStatus"] !== undefined ? _data["rccRoomStatus"] : <any>null;
        }
    }

    static fromJS(data: any): RoomBed {
        data = typeof data === 'object' ? data : {};
        let result = new RoomBed();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["room"] = this.room ? this.room.toJSON() : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["externalId"] = this.externalId !== undefined ? this.externalId : <any>null;
        data["isAutogeneratedFromReservationSync"] = this.isAutogeneratedFromReservationSync !== undefined ? this.isAutogeneratedFromReservationSync : <any>null;
        if (Array.isArray(this.reservations)) {
            data["reservations"] = [];
            for (let item of this.reservations)
                data["reservations"].push(item.toJSON());
        }
        data["isOccupied"] = this.isOccupied !== undefined ? this.isOccupied : <any>null;
        data["isClean"] = this.isClean !== undefined ? this.isClean : <any>null;
        data["isOutOfOrder"] = this.isOutOfOrder !== undefined ? this.isOutOfOrder : <any>null;
        data["isOutOfService"] = this.isOutOfService !== undefined ? this.isOutOfService : <any>null;
        data["isDoNotDisturb"] = this.isDoNotDisturb !== undefined ? this.isDoNotDisturb : <any>null;
        data["isCleaningInProgress"] = this.isCleaningInProgress !== undefined ? this.isCleaningInProgress : <any>null;
        data["isInspected"] = this.isInspected !== undefined ? this.isInspected : <any>null;
        data["isGuestCurrentlyIn"] = this.isGuestCurrentlyIn !== undefined ? this.isGuestCurrentlyIn : <any>null;
        data["isCleaningPriority"] = this.isCleaningPriority !== undefined ? this.isCleaningPriority : <any>null;
        if (Array.isArray(this.cleanings)) {
            data["cleanings"] = [];
            for (let item of this.cleanings)
                data["cleanings"].push(item.toJSON());
        }
        if (Array.isArray(this.roomHistoryEvents)) {
            data["roomHistoryEvents"] = [];
            for (let item of this.roomHistoryEvents)
                data["roomHistoryEvents"].push(item.toJSON());
        }
        data["rccHousekeepingStatus"] = this.rccHousekeepingStatus !== undefined ? this.rccHousekeepingStatus : <any>null;
        data["rccRoomStatus"] = this.rccRoomStatus !== undefined ? this.rccRoomStatus : <any>null;
        return data; 
    }
}

export interface IRoomBed {
    id: string;
    roomId: string;
    room?: Room2 | null;
    name?: string | null;
    externalId?: string | null;
    isAutogeneratedFromReservationSync: boolean;
    reservations?: Reservation[] | null;
    isOccupied: boolean;
    isClean: boolean;
    isOutOfOrder: boolean;
    isOutOfService: boolean;
    isDoNotDisturb: boolean;
    isCleaningInProgress: boolean;
    isInspected: boolean;
    isGuestCurrentlyIn: boolean;
    isCleaningPriority: boolean;
    cleanings?: Cleaning2[] | null;
    roomHistoryEvents?: RoomHistoryEvent[] | null;
    rccHousekeepingStatus?: RccHousekeepingStatusCode | null;
    rccRoomStatus?: RccRoomStatusCode | null;
}

export class Reservation implements IReservation {
    id?: string | null;
    roomName?: string | null;
    pmsRoomName?: string | null;
    bedName?: string | null;
    pmsBedName?: string | null;
    guestName?: string | null;
    checkIn?: moment.Moment | null;
    actualCheckIn?: moment.Moment | null;
    checkOut?: moment.Moment | null;
    actualCheckOut?: moment.Moment | null;
    rccReservationStatusKey?: string | null;
    numberOfAdults!: number;
    numberOfChildren!: number;
    numberOfInfants!: number;
    pmsNote?: string | null;
    vip?: string | null;
    group?: string | null;
    otherProperties?: ReservationOtherProperty[] | null;
    hotelId?: string | null;
    hotel?: Hotel | null;
    roomId?: string | null;
    room?: Room2 | null;
    roomBedId?: string | null;
    roomBed?: RoomBed | null;
    isActive!: boolean;
    isSynchronizedFromRcc!: boolean;
    lastTimeModifiedBySynchronization?: moment.Moment | null;
    synchronizedAt?: moment.Moment | null;
    isActiveToday!: boolean;
    reservationStatusKey?: string | null;
    reservationStatusDescription?: string | null;

    constructor(data?: IReservation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.roomName = _data["roomName"] !== undefined ? _data["roomName"] : <any>null;
            this.pmsRoomName = _data["pmsRoomName"] !== undefined ? _data["pmsRoomName"] : <any>null;
            this.bedName = _data["bedName"] !== undefined ? _data["bedName"] : <any>null;
            this.pmsBedName = _data["pmsBedName"] !== undefined ? _data["pmsBedName"] : <any>null;
            this.guestName = _data["guestName"] !== undefined ? _data["guestName"] : <any>null;
            this.checkIn = _data["checkIn"] ? moment(_data["checkIn"].toString()) : <any>null;
            this.actualCheckIn = _data["actualCheckIn"] ? moment(_data["actualCheckIn"].toString()) : <any>null;
            this.checkOut = _data["checkOut"] ? moment(_data["checkOut"].toString()) : <any>null;
            this.actualCheckOut = _data["actualCheckOut"] ? moment(_data["actualCheckOut"].toString()) : <any>null;
            this.rccReservationStatusKey = _data["rccReservationStatusKey"] !== undefined ? _data["rccReservationStatusKey"] : <any>null;
            this.numberOfAdults = _data["numberOfAdults"] !== undefined ? _data["numberOfAdults"] : <any>null;
            this.numberOfChildren = _data["numberOfChildren"] !== undefined ? _data["numberOfChildren"] : <any>null;
            this.numberOfInfants = _data["numberOfInfants"] !== undefined ? _data["numberOfInfants"] : <any>null;
            this.pmsNote = _data["pmsNote"] !== undefined ? _data["pmsNote"] : <any>null;
            this.vip = _data["vip"] !== undefined ? _data["vip"] : <any>null;
            this.group = _data["group"] !== undefined ? _data["group"] : <any>null;
            if (Array.isArray(_data["otherProperties"])) {
                this.otherProperties = [] as any;
                for (let item of _data["otherProperties"])
                    this.otherProperties!.push(ReservationOtherProperty.fromJS(item));
            }
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.hotel = _data["hotel"] ? Hotel.fromJS(_data["hotel"]) : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.room = _data["room"] ? Room2.fromJS(_data["room"]) : <any>null;
            this.roomBedId = _data["roomBedId"] !== undefined ? _data["roomBedId"] : <any>null;
            this.roomBed = _data["roomBed"] ? RoomBed.fromJS(_data["roomBed"]) : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.isSynchronizedFromRcc = _data["isSynchronizedFromRcc"] !== undefined ? _data["isSynchronizedFromRcc"] : <any>null;
            this.lastTimeModifiedBySynchronization = _data["lastTimeModifiedBySynchronization"] ? moment(_data["lastTimeModifiedBySynchronization"].toString()) : <any>null;
            this.synchronizedAt = _data["synchronizedAt"] ? moment(_data["synchronizedAt"].toString()) : <any>null;
            this.isActiveToday = _data["isActiveToday"] !== undefined ? _data["isActiveToday"] : <any>null;
            this.reservationStatusKey = _data["reservationStatusKey"] !== undefined ? _data["reservationStatusKey"] : <any>null;
            this.reservationStatusDescription = _data["reservationStatusDescription"] !== undefined ? _data["reservationStatusDescription"] : <any>null;
        }
    }

    static fromJS(data: any): Reservation {
        data = typeof data === 'object' ? data : {};
        let result = new Reservation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["roomName"] = this.roomName !== undefined ? this.roomName : <any>null;
        data["pmsRoomName"] = this.pmsRoomName !== undefined ? this.pmsRoomName : <any>null;
        data["bedName"] = this.bedName !== undefined ? this.bedName : <any>null;
        data["pmsBedName"] = this.pmsBedName !== undefined ? this.pmsBedName : <any>null;
        data["guestName"] = this.guestName !== undefined ? this.guestName : <any>null;
        data["checkIn"] = this.checkIn ? this.checkIn.toISOString() : <any>null;
        data["actualCheckIn"] = this.actualCheckIn ? this.actualCheckIn.toISOString() : <any>null;
        data["checkOut"] = this.checkOut ? this.checkOut.toISOString() : <any>null;
        data["actualCheckOut"] = this.actualCheckOut ? this.actualCheckOut.toISOString() : <any>null;
        data["rccReservationStatusKey"] = this.rccReservationStatusKey !== undefined ? this.rccReservationStatusKey : <any>null;
        data["numberOfAdults"] = this.numberOfAdults !== undefined ? this.numberOfAdults : <any>null;
        data["numberOfChildren"] = this.numberOfChildren !== undefined ? this.numberOfChildren : <any>null;
        data["numberOfInfants"] = this.numberOfInfants !== undefined ? this.numberOfInfants : <any>null;
        data["pmsNote"] = this.pmsNote !== undefined ? this.pmsNote : <any>null;
        data["vip"] = this.vip !== undefined ? this.vip : <any>null;
        data["group"] = this.group !== undefined ? this.group : <any>null;
        if (Array.isArray(this.otherProperties)) {
            data["otherProperties"] = [];
            for (let item of this.otherProperties)
                data["otherProperties"].push(item.toJSON());
        }
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["hotel"] = this.hotel ? this.hotel.toJSON() : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["room"] = this.room ? this.room.toJSON() : <any>null;
        data["roomBedId"] = this.roomBedId !== undefined ? this.roomBedId : <any>null;
        data["roomBed"] = this.roomBed ? this.roomBed.toJSON() : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["isSynchronizedFromRcc"] = this.isSynchronizedFromRcc !== undefined ? this.isSynchronizedFromRcc : <any>null;
        data["lastTimeModifiedBySynchronization"] = this.lastTimeModifiedBySynchronization ? this.lastTimeModifiedBySynchronization.toISOString() : <any>null;
        data["synchronizedAt"] = this.synchronizedAt ? this.synchronizedAt.toISOString() : <any>null;
        data["isActiveToday"] = this.isActiveToday !== undefined ? this.isActiveToday : <any>null;
        data["reservationStatusKey"] = this.reservationStatusKey !== undefined ? this.reservationStatusKey : <any>null;
        data["reservationStatusDescription"] = this.reservationStatusDescription !== undefined ? this.reservationStatusDescription : <any>null;
        return data; 
    }
}

export interface IReservation {
    id?: string | null;
    roomName?: string | null;
    pmsRoomName?: string | null;
    bedName?: string | null;
    pmsBedName?: string | null;
    guestName?: string | null;
    checkIn?: moment.Moment | null;
    actualCheckIn?: moment.Moment | null;
    checkOut?: moment.Moment | null;
    actualCheckOut?: moment.Moment | null;
    rccReservationStatusKey?: string | null;
    numberOfAdults: number;
    numberOfChildren: number;
    numberOfInfants: number;
    pmsNote?: string | null;
    vip?: string | null;
    group?: string | null;
    otherProperties?: ReservationOtherProperty[] | null;
    hotelId?: string | null;
    hotel?: Hotel | null;
    roomId?: string | null;
    room?: Room2 | null;
    roomBedId?: string | null;
    roomBed?: RoomBed | null;
    isActive: boolean;
    isSynchronizedFromRcc: boolean;
    lastTimeModifiedBySynchronization?: moment.Moment | null;
    synchronizedAt?: moment.Moment | null;
    isActiveToday: boolean;
    reservationStatusKey?: string | null;
    reservationStatusDescription?: string | null;
}

export class ReservationOtherProperty implements IReservationOtherProperty {
    key?: string | null;
    value?: string | null;

    constructor(data?: IReservationOtherProperty) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"] !== undefined ? _data["key"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any): ReservationOtherProperty {
        data = typeof data === 'object' ? data : {};
        let result = new ReservationOtherProperty();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key !== undefined ? this.key : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data; 
    }
}

export interface IReservationOtherProperty {
    key?: string | null;
    value?: string | null;
}

export class Cleaning2 implements ICleaning2 {
    id!: string;
    description?: string | null;
    credits?: number | null;
    isActive!: boolean;
    isCustom!: boolean;
    isPostponed!: boolean;
    isChangeSheets!: boolean;
    isInspectionRequired!: boolean;
    isReadyForInspection!: boolean;
    isInspected!: boolean;
    isInspectionSuccess!: boolean;
    inspectedById?: string | null;
    inspectedBy?: User | null;
    status!: CleaningProcessStatus;
    isPlanned!: boolean;
    isPriority!: boolean;
    startsAt!: moment.Moment;
    endsAt!: moment.Moment;
    durationSec!: number;
    cleanerId!: string;
    cleaner?: User | null;
    roomId!: string;
    room?: Room2 | null;
    roomBedId?: string | null;
    roomBed?: RoomBed | null;
    cleaningPluginId?: string | null;
    cleaningPlugin?: CleaningPlugin | null;
    cleaningInspections?: CleaningInspection[] | null;
    cleaningHistoryEvents?: CleaningHistoryEvent[] | null;
    cleaningPlanId!: string;
    cleaningPlan?: CleaningPlan2 | null;
    cleaningPlanItems?: CleaningPlanItem[] | null;

    constructor(data?: ICleaning2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.isCustom = _data["isCustom"] !== undefined ? _data["isCustom"] : <any>null;
            this.isPostponed = _data["isPostponed"] !== undefined ? _data["isPostponed"] : <any>null;
            this.isChangeSheets = _data["isChangeSheets"] !== undefined ? _data["isChangeSheets"] : <any>null;
            this.isInspectionRequired = _data["isInspectionRequired"] !== undefined ? _data["isInspectionRequired"] : <any>null;
            this.isReadyForInspection = _data["isReadyForInspection"] !== undefined ? _data["isReadyForInspection"] : <any>null;
            this.isInspected = _data["isInspected"] !== undefined ? _data["isInspected"] : <any>null;
            this.isInspectionSuccess = _data["isInspectionSuccess"] !== undefined ? _data["isInspectionSuccess"] : <any>null;
            this.inspectedById = _data["inspectedById"] !== undefined ? _data["inspectedById"] : <any>null;
            this.inspectedBy = _data["inspectedBy"] ? User.fromJS(_data["inspectedBy"]) : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.isPlanned = _data["isPlanned"] !== undefined ? _data["isPlanned"] : <any>null;
            this.isPriority = _data["isPriority"] !== undefined ? _data["isPriority"] : <any>null;
            this.startsAt = _data["startsAt"] ? moment(_data["startsAt"].toString()) : <any>null;
            this.endsAt = _data["endsAt"] ? moment(_data["endsAt"].toString()) : <any>null;
            this.durationSec = _data["durationSec"] !== undefined ? _data["durationSec"] : <any>null;
            this.cleanerId = _data["cleanerId"] !== undefined ? _data["cleanerId"] : <any>null;
            this.cleaner = _data["cleaner"] ? User.fromJS(_data["cleaner"]) : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.room = _data["room"] ? Room2.fromJS(_data["room"]) : <any>null;
            this.roomBedId = _data["roomBedId"] !== undefined ? _data["roomBedId"] : <any>null;
            this.roomBed = _data["roomBed"] ? RoomBed.fromJS(_data["roomBed"]) : <any>null;
            this.cleaningPluginId = _data["cleaningPluginId"] !== undefined ? _data["cleaningPluginId"] : <any>null;
            this.cleaningPlugin = _data["cleaningPlugin"] ? CleaningPlugin.fromJS(_data["cleaningPlugin"]) : <any>null;
            if (Array.isArray(_data["cleaningInspections"])) {
                this.cleaningInspections = [] as any;
                for (let item of _data["cleaningInspections"])
                    this.cleaningInspections!.push(CleaningInspection.fromJS(item));
            }
            if (Array.isArray(_data["cleaningHistoryEvents"])) {
                this.cleaningHistoryEvents = [] as any;
                for (let item of _data["cleaningHistoryEvents"])
                    this.cleaningHistoryEvents!.push(CleaningHistoryEvent.fromJS(item));
            }
            this.cleaningPlanId = _data["cleaningPlanId"] !== undefined ? _data["cleaningPlanId"] : <any>null;
            this.cleaningPlan = _data["cleaningPlan"] ? CleaningPlan2.fromJS(_data["cleaningPlan"]) : <any>null;
            if (Array.isArray(_data["cleaningPlanItems"])) {
                this.cleaningPlanItems = [] as any;
                for (let item of _data["cleaningPlanItems"])
                    this.cleaningPlanItems!.push(CleaningPlanItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Cleaning2 {
        data = typeof data === 'object' ? data : {};
        let result = new Cleaning2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["isCustom"] = this.isCustom !== undefined ? this.isCustom : <any>null;
        data["isPostponed"] = this.isPostponed !== undefined ? this.isPostponed : <any>null;
        data["isChangeSheets"] = this.isChangeSheets !== undefined ? this.isChangeSheets : <any>null;
        data["isInspectionRequired"] = this.isInspectionRequired !== undefined ? this.isInspectionRequired : <any>null;
        data["isReadyForInspection"] = this.isReadyForInspection !== undefined ? this.isReadyForInspection : <any>null;
        data["isInspected"] = this.isInspected !== undefined ? this.isInspected : <any>null;
        data["isInspectionSuccess"] = this.isInspectionSuccess !== undefined ? this.isInspectionSuccess : <any>null;
        data["inspectedById"] = this.inspectedById !== undefined ? this.inspectedById : <any>null;
        data["inspectedBy"] = this.inspectedBy ? this.inspectedBy.toJSON() : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["isPlanned"] = this.isPlanned !== undefined ? this.isPlanned : <any>null;
        data["isPriority"] = this.isPriority !== undefined ? this.isPriority : <any>null;
        data["startsAt"] = this.startsAt ? this.startsAt.toISOString() : <any>null;
        data["endsAt"] = this.endsAt ? this.endsAt.toISOString() : <any>null;
        data["durationSec"] = this.durationSec !== undefined ? this.durationSec : <any>null;
        data["cleanerId"] = this.cleanerId !== undefined ? this.cleanerId : <any>null;
        data["cleaner"] = this.cleaner ? this.cleaner.toJSON() : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["room"] = this.room ? this.room.toJSON() : <any>null;
        data["roomBedId"] = this.roomBedId !== undefined ? this.roomBedId : <any>null;
        data["roomBed"] = this.roomBed ? this.roomBed.toJSON() : <any>null;
        data["cleaningPluginId"] = this.cleaningPluginId !== undefined ? this.cleaningPluginId : <any>null;
        data["cleaningPlugin"] = this.cleaningPlugin ? this.cleaningPlugin.toJSON() : <any>null;
        if (Array.isArray(this.cleaningInspections)) {
            data["cleaningInspections"] = [];
            for (let item of this.cleaningInspections)
                data["cleaningInspections"].push(item.toJSON());
        }
        if (Array.isArray(this.cleaningHistoryEvents)) {
            data["cleaningHistoryEvents"] = [];
            for (let item of this.cleaningHistoryEvents)
                data["cleaningHistoryEvents"].push(item.toJSON());
        }
        data["cleaningPlanId"] = this.cleaningPlanId !== undefined ? this.cleaningPlanId : <any>null;
        data["cleaningPlan"] = this.cleaningPlan ? this.cleaningPlan.toJSON() : <any>null;
        if (Array.isArray(this.cleaningPlanItems)) {
            data["cleaningPlanItems"] = [];
            for (let item of this.cleaningPlanItems)
                data["cleaningPlanItems"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICleaning2 {
    id: string;
    description?: string | null;
    credits?: number | null;
    isActive: boolean;
    isCustom: boolean;
    isPostponed: boolean;
    isChangeSheets: boolean;
    isInspectionRequired: boolean;
    isReadyForInspection: boolean;
    isInspected: boolean;
    isInspectionSuccess: boolean;
    inspectedById?: string | null;
    inspectedBy?: User | null;
    status: CleaningProcessStatus;
    isPlanned: boolean;
    isPriority: boolean;
    startsAt: moment.Moment;
    endsAt: moment.Moment;
    durationSec: number;
    cleanerId: string;
    cleaner?: User | null;
    roomId: string;
    room?: Room2 | null;
    roomBedId?: string | null;
    roomBed?: RoomBed | null;
    cleaningPluginId?: string | null;
    cleaningPlugin?: CleaningPlugin | null;
    cleaningInspections?: CleaningInspection[] | null;
    cleaningHistoryEvents?: CleaningHistoryEvent[] | null;
    cleaningPlanId: string;
    cleaningPlan?: CleaningPlan2 | null;
    cleaningPlanItems?: CleaningPlanItem[] | null;
}

export class CleaningInspection implements ICleaningInspection {
    id!: string;
    createdById!: string;
    createdBy?: User | null;
    startedAt!: moment.Moment;
    endedAt?: moment.Moment | null;
    isFinished!: boolean;
    isSuccess!: boolean;
    note?: string | null;
    cleaningId!: string;
    cleaning?: Cleaning2 | null;

    constructor(data?: ICleaningInspection) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.createdById = _data["createdById"] !== undefined ? _data["createdById"] : <any>null;
            this.createdBy = _data["createdBy"] ? User.fromJS(_data["createdBy"]) : <any>null;
            this.startedAt = _data["startedAt"] ? moment(_data["startedAt"].toString()) : <any>null;
            this.endedAt = _data["endedAt"] ? moment(_data["endedAt"].toString()) : <any>null;
            this.isFinished = _data["isFinished"] !== undefined ? _data["isFinished"] : <any>null;
            this.isSuccess = _data["isSuccess"] !== undefined ? _data["isSuccess"] : <any>null;
            this.note = _data["note"] !== undefined ? _data["note"] : <any>null;
            this.cleaningId = _data["cleaningId"] !== undefined ? _data["cleaningId"] : <any>null;
            this.cleaning = _data["cleaning"] ? Cleaning2.fromJS(_data["cleaning"]) : <any>null;
        }
    }

    static fromJS(data: any): CleaningInspection {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningInspection();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["createdById"] = this.createdById !== undefined ? this.createdById : <any>null;
        data["createdBy"] = this.createdBy ? this.createdBy.toJSON() : <any>null;
        data["startedAt"] = this.startedAt ? this.startedAt.toISOString() : <any>null;
        data["endedAt"] = this.endedAt ? this.endedAt.toISOString() : <any>null;
        data["isFinished"] = this.isFinished !== undefined ? this.isFinished : <any>null;
        data["isSuccess"] = this.isSuccess !== undefined ? this.isSuccess : <any>null;
        data["note"] = this.note !== undefined ? this.note : <any>null;
        data["cleaningId"] = this.cleaningId !== undefined ? this.cleaningId : <any>null;
        data["cleaning"] = this.cleaning ? this.cleaning.toJSON() : <any>null;
        return data; 
    }
}

export interface ICleaningInspection {
    id: string;
    createdById: string;
    createdBy?: User | null;
    startedAt: moment.Moment;
    endedAt?: moment.Moment | null;
    isFinished: boolean;
    isSuccess: boolean;
    note?: string | null;
    cleaningId: string;
    cleaning?: Cleaning2 | null;
}

export class CleaningHistoryEvent implements ICleaningHistoryEvent {
    id!: string;
    cleaningId!: string;
    cleaning?: Cleaning2 | null;
    roomId!: string;
    room?: Room2 | null;
    userId?: string | null;
    user?: User | null;
    type!: CleaningEventType;
    status!: CleaningProcessStatus;
    at!: moment.Moment;
    message?: string | null;
    oldData?: string | null;
    newData?: string | null;

    constructor(data?: ICleaningHistoryEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.cleaningId = _data["cleaningId"] !== undefined ? _data["cleaningId"] : <any>null;
            this.cleaning = _data["cleaning"] ? Cleaning2.fromJS(_data["cleaning"]) : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.room = _data["room"] ? Room2.fromJS(_data["room"]) : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.at = _data["at"] ? moment(_data["at"].toString()) : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.oldData = _data["oldData"] !== undefined ? _data["oldData"] : <any>null;
            this.newData = _data["newData"] !== undefined ? _data["newData"] : <any>null;
        }
    }

    static fromJS(data: any): CleaningHistoryEvent {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningHistoryEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["cleaningId"] = this.cleaningId !== undefined ? this.cleaningId : <any>null;
        data["cleaning"] = this.cleaning ? this.cleaning.toJSON() : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["room"] = this.room ? this.room.toJSON() : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["user"] = this.user ? this.user.toJSON() : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["at"] = this.at ? this.at.toISOString() : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["oldData"] = this.oldData !== undefined ? this.oldData : <any>null;
        data["newData"] = this.newData !== undefined ? this.newData : <any>null;
        return data; 
    }
}

export interface ICleaningHistoryEvent {
    id: string;
    cleaningId: string;
    cleaning?: Cleaning2 | null;
    roomId: string;
    room?: Room2 | null;
    userId?: string | null;
    user?: User | null;
    type: CleaningEventType;
    status: CleaningProcessStatus;
    at: moment.Moment;
    message?: string | null;
    oldData?: string | null;
    newData?: string | null;
}

export enum CleaningEventType {
    CREATED = 0,
    SENT_TO_CLIENT = 1,
    CANCELLED = 2,
    UPDATED = 3,
    SEEN_BY_CLEANER = 4,
    STARTED = 5,
    PAUSED = 6,
    FINISHED = 7,
    RESTARTED = 8,
    UNPAUSED = 9,
    INSPECTION_FINISHED = 10,
    INSPECTION_DO_NOT_DISTURB = 11,
    INSPECTION_REQUIRES_INSPECTION = 12,
    INSPECTION_CLEANING_IN_PROGRESS = 13,
    INSPECTION_NEW_CLEANING = 14,
    INSPECTION_CHANGED = 15,
    REFUSED = 16,
    DO_NOT_DISTURB = 17,
    DELAYED = 18,
    NEW = 19,
}

export class CleaningPlan2 extends BaseEntity implements ICleaningPlan2 {
    id!: string;
    date!: moment.Moment;
    isSent!: boolean;
    sentAt?: moment.Moment | null;
    sentById?: string | null;
    sentBy?: User | null;
    sendingHistory?: CleaningPlanSendingHistory[] | null;
    groups?: CleaningPlanGroup[] | null;
    ungroupedItems?: CleaningPlanItem[] | null;
    cleanings?: Cleaning2[] | null;
    cleaningPlanCpsatConfiguration?: CleaningPlanCpsatConfiguration | null;

    constructor(data?: ICleaningPlan2) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.date = _data["date"] ? moment(_data["date"].toString()) : <any>null;
            this.isSent = _data["isSent"] !== undefined ? _data["isSent"] : <any>null;
            this.sentAt = _data["sentAt"] ? moment(_data["sentAt"].toString()) : <any>null;
            this.sentById = _data["sentById"] !== undefined ? _data["sentById"] : <any>null;
            this.sentBy = _data["sentBy"] ? User.fromJS(_data["sentBy"]) : <any>null;
            if (Array.isArray(_data["sendingHistory"])) {
                this.sendingHistory = [] as any;
                for (let item of _data["sendingHistory"])
                    this.sendingHistory!.push(CleaningPlanSendingHistory.fromJS(item));
            }
            if (Array.isArray(_data["groups"])) {
                this.groups = [] as any;
                for (let item of _data["groups"])
                    this.groups!.push(CleaningPlanGroup.fromJS(item));
            }
            if (Array.isArray(_data["ungroupedItems"])) {
                this.ungroupedItems = [] as any;
                for (let item of _data["ungroupedItems"])
                    this.ungroupedItems!.push(CleaningPlanItem.fromJS(item));
            }
            if (Array.isArray(_data["cleanings"])) {
                this.cleanings = [] as any;
                for (let item of _data["cleanings"])
                    this.cleanings!.push(Cleaning2.fromJS(item));
            }
            this.cleaningPlanCpsatConfiguration = _data["cleaningPlanCpsatConfiguration"] ? CleaningPlanCpsatConfiguration.fromJS(_data["cleaningPlanCpsatConfiguration"]) : <any>null;
        }
    }

    static fromJS(data: any): CleaningPlan2 {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningPlan2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["date"] = this.date ? this.date.toISOString() : <any>null;
        data["isSent"] = this.isSent !== undefined ? this.isSent : <any>null;
        data["sentAt"] = this.sentAt ? this.sentAt.toISOString() : <any>null;
        data["sentById"] = this.sentById !== undefined ? this.sentById : <any>null;
        data["sentBy"] = this.sentBy ? this.sentBy.toJSON() : <any>null;
        if (Array.isArray(this.sendingHistory)) {
            data["sendingHistory"] = [];
            for (let item of this.sendingHistory)
                data["sendingHistory"].push(item.toJSON());
        }
        if (Array.isArray(this.groups)) {
            data["groups"] = [];
            for (let item of this.groups)
                data["groups"].push(item.toJSON());
        }
        if (Array.isArray(this.ungroupedItems)) {
            data["ungroupedItems"] = [];
            for (let item of this.ungroupedItems)
                data["ungroupedItems"].push(item.toJSON());
        }
        if (Array.isArray(this.cleanings)) {
            data["cleanings"] = [];
            for (let item of this.cleanings)
                data["cleanings"].push(item.toJSON());
        }
        data["cleaningPlanCpsatConfiguration"] = this.cleaningPlanCpsatConfiguration ? this.cleaningPlanCpsatConfiguration.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface ICleaningPlan2 extends IBaseEntity {
    id: string;
    date: moment.Moment;
    isSent: boolean;
    sentAt?: moment.Moment | null;
    sentById?: string | null;
    sentBy?: User | null;
    sendingHistory?: CleaningPlanSendingHistory[] | null;
    groups?: CleaningPlanGroup[] | null;
    ungroupedItems?: CleaningPlanItem[] | null;
    cleanings?: Cleaning2[] | null;
    cleaningPlanCpsatConfiguration?: CleaningPlanCpsatConfiguration | null;
}

export class CleaningPlanSendingHistory implements ICleaningPlanSendingHistory {
    id!: string;
    sentAt!: moment.Moment;
    sentById!: string;
    sentBy?: User | null;
    cleaningPlanId!: string;
    cleaningPlan?: CleaningPlan2 | null;
    cleaningPlanJson?: string | null;

    constructor(data?: ICleaningPlanSendingHistory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.sentAt = _data["sentAt"] ? moment(_data["sentAt"].toString()) : <any>null;
            this.sentById = _data["sentById"] !== undefined ? _data["sentById"] : <any>null;
            this.sentBy = _data["sentBy"] ? User.fromJS(_data["sentBy"]) : <any>null;
            this.cleaningPlanId = _data["cleaningPlanId"] !== undefined ? _data["cleaningPlanId"] : <any>null;
            this.cleaningPlan = _data["cleaningPlan"] ? CleaningPlan2.fromJS(_data["cleaningPlan"]) : <any>null;
            this.cleaningPlanJson = _data["cleaningPlanJson"] !== undefined ? _data["cleaningPlanJson"] : <any>null;
        }
    }

    static fromJS(data: any): CleaningPlanSendingHistory {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningPlanSendingHistory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["sentAt"] = this.sentAt ? this.sentAt.toISOString() : <any>null;
        data["sentById"] = this.sentById !== undefined ? this.sentById : <any>null;
        data["sentBy"] = this.sentBy ? this.sentBy.toJSON() : <any>null;
        data["cleaningPlanId"] = this.cleaningPlanId !== undefined ? this.cleaningPlanId : <any>null;
        data["cleaningPlan"] = this.cleaningPlan ? this.cleaningPlan.toJSON() : <any>null;
        data["cleaningPlanJson"] = this.cleaningPlanJson !== undefined ? this.cleaningPlanJson : <any>null;
        return data; 
    }
}

export interface ICleaningPlanSendingHistory {
    id: string;
    sentAt: moment.Moment;
    sentById: string;
    sentBy?: User | null;
    cleaningPlanId: string;
    cleaningPlan?: CleaningPlan2 | null;
    cleaningPlanJson?: string | null;
}

export class CleaningPlanGroup implements ICleaningPlanGroup {
    id!: string;
    cleaningPlanId!: string;
    cleaningPlan?: CleaningPlan2 | null;
    cleanerId!: string;
    cleaner?: User | null;
    secondaryCleanerId?: string | null;
    secondaryCleaner?: User | null;
    maxCredits?: number | null;
    maxDepartures?: number | null;
    maxTwins?: number | null;
    weeklyHours?: number | null;
    mustFillAllCredits!: boolean;
    items?: CleaningPlanItem[] | null;
    affinities?: CleaningPlanGroupAffinity[] | null;
    availabilityIntervals?: CleaningPlanGroupAvailabilityInterval[] | null;

    constructor(data?: ICleaningPlanGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.cleaningPlanId = _data["cleaningPlanId"] !== undefined ? _data["cleaningPlanId"] : <any>null;
            this.cleaningPlan = _data["cleaningPlan"] ? CleaningPlan2.fromJS(_data["cleaningPlan"]) : <any>null;
            this.cleanerId = _data["cleanerId"] !== undefined ? _data["cleanerId"] : <any>null;
            this.cleaner = _data["cleaner"] ? User.fromJS(_data["cleaner"]) : <any>null;
            this.secondaryCleanerId = _data["secondaryCleanerId"] !== undefined ? _data["secondaryCleanerId"] : <any>null;
            this.secondaryCleaner = _data["secondaryCleaner"] ? User.fromJS(_data["secondaryCleaner"]) : <any>null;
            this.maxCredits = _data["maxCredits"] !== undefined ? _data["maxCredits"] : <any>null;
            this.maxDepartures = _data["maxDepartures"] !== undefined ? _data["maxDepartures"] : <any>null;
            this.maxTwins = _data["maxTwins"] !== undefined ? _data["maxTwins"] : <any>null;
            this.weeklyHours = _data["weeklyHours"] !== undefined ? _data["weeklyHours"] : <any>null;
            this.mustFillAllCredits = _data["mustFillAllCredits"] !== undefined ? _data["mustFillAllCredits"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CleaningPlanItem.fromJS(item));
            }
            if (Array.isArray(_data["affinities"])) {
                this.affinities = [] as any;
                for (let item of _data["affinities"])
                    this.affinities!.push(CleaningPlanGroupAffinity.fromJS(item));
            }
            if (Array.isArray(_data["availabilityIntervals"])) {
                this.availabilityIntervals = [] as any;
                for (let item of _data["availabilityIntervals"])
                    this.availabilityIntervals!.push(CleaningPlanGroupAvailabilityInterval.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CleaningPlanGroup {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningPlanGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["cleaningPlanId"] = this.cleaningPlanId !== undefined ? this.cleaningPlanId : <any>null;
        data["cleaningPlan"] = this.cleaningPlan ? this.cleaningPlan.toJSON() : <any>null;
        data["cleanerId"] = this.cleanerId !== undefined ? this.cleanerId : <any>null;
        data["cleaner"] = this.cleaner ? this.cleaner.toJSON() : <any>null;
        data["secondaryCleanerId"] = this.secondaryCleanerId !== undefined ? this.secondaryCleanerId : <any>null;
        data["secondaryCleaner"] = this.secondaryCleaner ? this.secondaryCleaner.toJSON() : <any>null;
        data["maxCredits"] = this.maxCredits !== undefined ? this.maxCredits : <any>null;
        data["maxDepartures"] = this.maxDepartures !== undefined ? this.maxDepartures : <any>null;
        data["maxTwins"] = this.maxTwins !== undefined ? this.maxTwins : <any>null;
        data["weeklyHours"] = this.weeklyHours !== undefined ? this.weeklyHours : <any>null;
        data["mustFillAllCredits"] = this.mustFillAllCredits !== undefined ? this.mustFillAllCredits : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        if (Array.isArray(this.affinities)) {
            data["affinities"] = [];
            for (let item of this.affinities)
                data["affinities"].push(item.toJSON());
        }
        if (Array.isArray(this.availabilityIntervals)) {
            data["availabilityIntervals"] = [];
            for (let item of this.availabilityIntervals)
                data["availabilityIntervals"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICleaningPlanGroup {
    id: string;
    cleaningPlanId: string;
    cleaningPlan?: CleaningPlan2 | null;
    cleanerId: string;
    cleaner?: User | null;
    secondaryCleanerId?: string | null;
    secondaryCleaner?: User | null;
    maxCredits?: number | null;
    maxDepartures?: number | null;
    maxTwins?: number | null;
    weeklyHours?: number | null;
    mustFillAllCredits: boolean;
    items?: CleaningPlanItem[] | null;
    affinities?: CleaningPlanGroupAffinity[] | null;
    availabilityIntervals?: CleaningPlanGroupAvailabilityInterval[] | null;
}

export class CleaningPlanItem implements ICleaningPlanItem {
    id!: string;
    description?: string | null;
    credits?: number | null;
    isActive!: boolean;
    isCustom!: boolean;
    isPostponed!: boolean;
    isChangeSheets!: boolean;
    isPriority!: boolean;
    isPostponer!: boolean;
    isPostponee!: boolean;
    postponerCleaningPlanItemId?: string | null;
    postponerCleaningPlanItem?: CleaningPlanItem | null;
    postponeeCleaningPlanItemId?: string | null;
    postponeeCleaningPlanItem?: CleaningPlanItem | null;
    isPlanned!: boolean;
    startsAt?: moment.Moment | null;
    endsAt?: moment.Moment | null;
    durationSec?: number | null;
    cleaningPlanId!: string;
    cleaningPlan?: CleaningPlan2 | null;
    cleaningPlanGroupId?: string | null;
    cleaningPlanGroup?: CleaningPlanGroup | null;
    roomId!: string;
    room?: Room2 | null;
    roomBedId?: string | null;
    roomBed?: RoomBed | null;
    cleaningPluginId?: string | null;
    cleaningPlugin?: CleaningPlugin | null;
    cleaningId?: string | null;
    cleaning?: Cleaning2 | null;

    constructor(data?: ICleaningPlanItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.isCustom = _data["isCustom"] !== undefined ? _data["isCustom"] : <any>null;
            this.isPostponed = _data["isPostponed"] !== undefined ? _data["isPostponed"] : <any>null;
            this.isChangeSheets = _data["isChangeSheets"] !== undefined ? _data["isChangeSheets"] : <any>null;
            this.isPriority = _data["isPriority"] !== undefined ? _data["isPriority"] : <any>null;
            this.isPostponer = _data["isPostponer"] !== undefined ? _data["isPostponer"] : <any>null;
            this.isPostponee = _data["isPostponee"] !== undefined ? _data["isPostponee"] : <any>null;
            this.postponerCleaningPlanItemId = _data["postponerCleaningPlanItemId"] !== undefined ? _data["postponerCleaningPlanItemId"] : <any>null;
            this.postponerCleaningPlanItem = _data["postponerCleaningPlanItem"] ? CleaningPlanItem.fromJS(_data["postponerCleaningPlanItem"]) : <any>null;
            this.postponeeCleaningPlanItemId = _data["postponeeCleaningPlanItemId"] !== undefined ? _data["postponeeCleaningPlanItemId"] : <any>null;
            this.postponeeCleaningPlanItem = _data["postponeeCleaningPlanItem"] ? CleaningPlanItem.fromJS(_data["postponeeCleaningPlanItem"]) : <any>null;
            this.isPlanned = _data["isPlanned"] !== undefined ? _data["isPlanned"] : <any>null;
            this.startsAt = _data["startsAt"] ? moment(_data["startsAt"].toString()) : <any>null;
            this.endsAt = _data["endsAt"] ? moment(_data["endsAt"].toString()) : <any>null;
            this.durationSec = _data["durationSec"] !== undefined ? _data["durationSec"] : <any>null;
            this.cleaningPlanId = _data["cleaningPlanId"] !== undefined ? _data["cleaningPlanId"] : <any>null;
            this.cleaningPlan = _data["cleaningPlan"] ? CleaningPlan2.fromJS(_data["cleaningPlan"]) : <any>null;
            this.cleaningPlanGroupId = _data["cleaningPlanGroupId"] !== undefined ? _data["cleaningPlanGroupId"] : <any>null;
            this.cleaningPlanGroup = _data["cleaningPlanGroup"] ? CleaningPlanGroup.fromJS(_data["cleaningPlanGroup"]) : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.room = _data["room"] ? Room2.fromJS(_data["room"]) : <any>null;
            this.roomBedId = _data["roomBedId"] !== undefined ? _data["roomBedId"] : <any>null;
            this.roomBed = _data["roomBed"] ? RoomBed.fromJS(_data["roomBed"]) : <any>null;
            this.cleaningPluginId = _data["cleaningPluginId"] !== undefined ? _data["cleaningPluginId"] : <any>null;
            this.cleaningPlugin = _data["cleaningPlugin"] ? CleaningPlugin.fromJS(_data["cleaningPlugin"]) : <any>null;
            this.cleaningId = _data["cleaningId"] !== undefined ? _data["cleaningId"] : <any>null;
            this.cleaning = _data["cleaning"] ? Cleaning2.fromJS(_data["cleaning"]) : <any>null;
        }
    }

    static fromJS(data: any): CleaningPlanItem {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningPlanItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["isCustom"] = this.isCustom !== undefined ? this.isCustom : <any>null;
        data["isPostponed"] = this.isPostponed !== undefined ? this.isPostponed : <any>null;
        data["isChangeSheets"] = this.isChangeSheets !== undefined ? this.isChangeSheets : <any>null;
        data["isPriority"] = this.isPriority !== undefined ? this.isPriority : <any>null;
        data["isPostponer"] = this.isPostponer !== undefined ? this.isPostponer : <any>null;
        data["isPostponee"] = this.isPostponee !== undefined ? this.isPostponee : <any>null;
        data["postponerCleaningPlanItemId"] = this.postponerCleaningPlanItemId !== undefined ? this.postponerCleaningPlanItemId : <any>null;
        data["postponerCleaningPlanItem"] = this.postponerCleaningPlanItem ? this.postponerCleaningPlanItem.toJSON() : <any>null;
        data["postponeeCleaningPlanItemId"] = this.postponeeCleaningPlanItemId !== undefined ? this.postponeeCleaningPlanItemId : <any>null;
        data["postponeeCleaningPlanItem"] = this.postponeeCleaningPlanItem ? this.postponeeCleaningPlanItem.toJSON() : <any>null;
        data["isPlanned"] = this.isPlanned !== undefined ? this.isPlanned : <any>null;
        data["startsAt"] = this.startsAt ? this.startsAt.toISOString() : <any>null;
        data["endsAt"] = this.endsAt ? this.endsAt.toISOString() : <any>null;
        data["durationSec"] = this.durationSec !== undefined ? this.durationSec : <any>null;
        data["cleaningPlanId"] = this.cleaningPlanId !== undefined ? this.cleaningPlanId : <any>null;
        data["cleaningPlan"] = this.cleaningPlan ? this.cleaningPlan.toJSON() : <any>null;
        data["cleaningPlanGroupId"] = this.cleaningPlanGroupId !== undefined ? this.cleaningPlanGroupId : <any>null;
        data["cleaningPlanGroup"] = this.cleaningPlanGroup ? this.cleaningPlanGroup.toJSON() : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["room"] = this.room ? this.room.toJSON() : <any>null;
        data["roomBedId"] = this.roomBedId !== undefined ? this.roomBedId : <any>null;
        data["roomBed"] = this.roomBed ? this.roomBed.toJSON() : <any>null;
        data["cleaningPluginId"] = this.cleaningPluginId !== undefined ? this.cleaningPluginId : <any>null;
        data["cleaningPlugin"] = this.cleaningPlugin ? this.cleaningPlugin.toJSON() : <any>null;
        data["cleaningId"] = this.cleaningId !== undefined ? this.cleaningId : <any>null;
        data["cleaning"] = this.cleaning ? this.cleaning.toJSON() : <any>null;
        return data; 
    }
}

export interface ICleaningPlanItem {
    id: string;
    description?: string | null;
    credits?: number | null;
    isActive: boolean;
    isCustom: boolean;
    isPostponed: boolean;
    isChangeSheets: boolean;
    isPriority: boolean;
    isPostponer: boolean;
    isPostponee: boolean;
    postponerCleaningPlanItemId?: string | null;
    postponerCleaningPlanItem?: CleaningPlanItem | null;
    postponeeCleaningPlanItemId?: string | null;
    postponeeCleaningPlanItem?: CleaningPlanItem | null;
    isPlanned: boolean;
    startsAt?: moment.Moment | null;
    endsAt?: moment.Moment | null;
    durationSec?: number | null;
    cleaningPlanId: string;
    cleaningPlan?: CleaningPlan2 | null;
    cleaningPlanGroupId?: string | null;
    cleaningPlanGroup?: CleaningPlanGroup | null;
    roomId: string;
    room?: Room2 | null;
    roomBedId?: string | null;
    roomBed?: RoomBed | null;
    cleaningPluginId?: string | null;
    cleaningPlugin?: CleaningPlugin | null;
    cleaningId?: string | null;
    cleaning?: Cleaning2 | null;
}

export class CleaningPlanGroupAffinity implements ICleaningPlanGroupAffinity {
    cleaningPlanGroupId!: string;
    cleaningPlanGroup?: CleaningPlanGroup | null;
    referenceId?: string | null;
    affinityType!: CleaningPlanGroupAffinityType;

    constructor(data?: ICleaningPlanGroupAffinity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cleaningPlanGroupId = _data["cleaningPlanGroupId"] !== undefined ? _data["cleaningPlanGroupId"] : <any>null;
            this.cleaningPlanGroup = _data["cleaningPlanGroup"] ? CleaningPlanGroup.fromJS(_data["cleaningPlanGroup"]) : <any>null;
            this.referenceId = _data["referenceId"] !== undefined ? _data["referenceId"] : <any>null;
            this.affinityType = _data["affinityType"] !== undefined ? _data["affinityType"] : <any>null;
        }
    }

    static fromJS(data: any): CleaningPlanGroupAffinity {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningPlanGroupAffinity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cleaningPlanGroupId"] = this.cleaningPlanGroupId !== undefined ? this.cleaningPlanGroupId : <any>null;
        data["cleaningPlanGroup"] = this.cleaningPlanGroup ? this.cleaningPlanGroup.toJSON() : <any>null;
        data["referenceId"] = this.referenceId !== undefined ? this.referenceId : <any>null;
        data["affinityType"] = this.affinityType !== undefined ? this.affinityType : <any>null;
        return data; 
    }
}

export interface ICleaningPlanGroupAffinity {
    cleaningPlanGroupId: string;
    cleaningPlanGroup?: CleaningPlanGroup | null;
    referenceId?: string | null;
    affinityType: CleaningPlanGroupAffinityType;
}

export class CleaningPlanGroupAvailabilityInterval implements ICleaningPlanGroupAvailabilityInterval {
    id!: string;
    cleaningPlanGroupId!: string;
    cleaningPlanGroup?: CleaningPlanGroup | null;
    from!: moment.Duration;
    to!: moment.Duration;

    constructor(data?: ICleaningPlanGroupAvailabilityInterval) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.cleaningPlanGroupId = _data["cleaningPlanGroupId"] !== undefined ? _data["cleaningPlanGroupId"] : <any>null;
            this.cleaningPlanGroup = _data["cleaningPlanGroup"] ? CleaningPlanGroup.fromJS(_data["cleaningPlanGroup"]) : <any>null;
            this.from = _data["from"] ? moment.duration(_data["from"].toString()) : <any>null;
            this.to = _data["to"] ? moment.duration(_data["to"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): CleaningPlanGroupAvailabilityInterval {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningPlanGroupAvailabilityInterval();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["cleaningPlanGroupId"] = this.cleaningPlanGroupId !== undefined ? this.cleaningPlanGroupId : <any>null;
        data["cleaningPlanGroup"] = this.cleaningPlanGroup ? this.cleaningPlanGroup.toJSON() : <any>null;
        data["from"] = this.from ? this.from.format('d.hh:mm:ss.SS', { trim: false }) : <any>null;
        data["to"] = this.to ? this.to.format('d.hh:mm:ss.SS', { trim: false }) : <any>null;
        return data; 
    }
}

export interface ICleaningPlanGroupAvailabilityInterval {
    id: string;
    cleaningPlanGroupId: string;
    cleaningPlanGroup?: CleaningPlanGroup | null;
    from: moment.Duration;
    to: moment.Duration;
}

export class CleaningPlanCpsatConfiguration implements ICleaningPlanCpsatConfiguration {
    id!: string;
    cleaningPlan?: CleaningPlan2 | null;
    planningStrategyTypeKey?: string | null;
    balanceByRoomsMinRooms!: number;
    balanceByRoomsMaxRooms!: number;
    balanceByCreditsStrictMinCredits!: number;
    balanceByCreditsStrictMaxCredits!: number;
    balanceByCreditsWithAffinitiesMinCredits!: number;
    balanceByCreditsWithAffinitiesMaxCredits!: number;
    targetByRoomsValue?: string | null;
    targetByCreditsValue?: string | null;
    doBalanceStaysAndDepartures!: boolean;
    weightEpsilonStayDeparture!: number;
    maxStay!: number;
    maxDeparture!: number;
    maxTravelTime!: number;
    maxBuildingTravelTime!: number;
    maxNumberOfBuildingsPerAttendant!: number;
    maxNumberOfLevelsPerAttendant!: number;
    roomAward!: number;
    levelAward!: number;
    buildingAward!: number;
    weightTravelTime!: number;
    weightCredits!: number;
    weightRoomsCleaned!: number;
    weightLevelChange!: number;
    limitAttendantsPerLevel!: boolean;
    solverRunTime!: number;
    doesLevelMovementReduceCredits!: boolean;
    applyLevelMovementCreditReductionAfterNumberOfLevels!: number;
    levelMovementCreditsReduction!: number;
    doUsePrePlan!: boolean;
    doUsePreAffinity!: boolean;
    doCompleteProposedPlanOnUsePreplan!: boolean;
    doesBuildingMovementReduceCredits!: boolean;
    buildingMovementCreditsReduction!: number;
    arePreferredLevelsExclusive!: boolean;
    cleaningPriorityKey?: string | null;
    buildingsDistanceMatrix?: string | null;
    levelsDistanceMatrix?: string | null;
    minutesPerCredit!: number;
    minCreditsForMultipleCleanersCleaning!: number;
    maxDeparturesReducesCredits!: boolean;
    maxDeparturesEquivalentCredits!: number;
    maxDeparturesReductionThreshold!: number;
    maxStaysIncreasesCredits!: boolean;
    maxStaysEquivalentCredits!: number;
    maxStaysIncreaseThreshold!: number;

    constructor(data?: ICleaningPlanCpsatConfiguration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.cleaningPlan = _data["cleaningPlan"] ? CleaningPlan2.fromJS(_data["cleaningPlan"]) : <any>null;
            this.planningStrategyTypeKey = _data["planningStrategyTypeKey"] !== undefined ? _data["planningStrategyTypeKey"] : <any>null;
            this.balanceByRoomsMinRooms = _data["balanceByRoomsMinRooms"] !== undefined ? _data["balanceByRoomsMinRooms"] : <any>null;
            this.balanceByRoomsMaxRooms = _data["balanceByRoomsMaxRooms"] !== undefined ? _data["balanceByRoomsMaxRooms"] : <any>null;
            this.balanceByCreditsStrictMinCredits = _data["balanceByCreditsStrictMinCredits"] !== undefined ? _data["balanceByCreditsStrictMinCredits"] : <any>null;
            this.balanceByCreditsStrictMaxCredits = _data["balanceByCreditsStrictMaxCredits"] !== undefined ? _data["balanceByCreditsStrictMaxCredits"] : <any>null;
            this.balanceByCreditsWithAffinitiesMinCredits = _data["balanceByCreditsWithAffinitiesMinCredits"] !== undefined ? _data["balanceByCreditsWithAffinitiesMinCredits"] : <any>null;
            this.balanceByCreditsWithAffinitiesMaxCredits = _data["balanceByCreditsWithAffinitiesMaxCredits"] !== undefined ? _data["balanceByCreditsWithAffinitiesMaxCredits"] : <any>null;
            this.targetByRoomsValue = _data["targetByRoomsValue"] !== undefined ? _data["targetByRoomsValue"] : <any>null;
            this.targetByCreditsValue = _data["targetByCreditsValue"] !== undefined ? _data["targetByCreditsValue"] : <any>null;
            this.doBalanceStaysAndDepartures = _data["doBalanceStaysAndDepartures"] !== undefined ? _data["doBalanceStaysAndDepartures"] : <any>null;
            this.weightEpsilonStayDeparture = _data["weightEpsilonStayDeparture"] !== undefined ? _data["weightEpsilonStayDeparture"] : <any>null;
            this.maxStay = _data["maxStay"] !== undefined ? _data["maxStay"] : <any>null;
            this.maxDeparture = _data["maxDeparture"] !== undefined ? _data["maxDeparture"] : <any>null;
            this.maxTravelTime = _data["maxTravelTime"] !== undefined ? _data["maxTravelTime"] : <any>null;
            this.maxBuildingTravelTime = _data["maxBuildingTravelTime"] !== undefined ? _data["maxBuildingTravelTime"] : <any>null;
            this.maxNumberOfBuildingsPerAttendant = _data["maxNumberOfBuildingsPerAttendant"] !== undefined ? _data["maxNumberOfBuildingsPerAttendant"] : <any>null;
            this.maxNumberOfLevelsPerAttendant = _data["maxNumberOfLevelsPerAttendant"] !== undefined ? _data["maxNumberOfLevelsPerAttendant"] : <any>null;
            this.roomAward = _data["roomAward"] !== undefined ? _data["roomAward"] : <any>null;
            this.levelAward = _data["levelAward"] !== undefined ? _data["levelAward"] : <any>null;
            this.buildingAward = _data["buildingAward"] !== undefined ? _data["buildingAward"] : <any>null;
            this.weightTravelTime = _data["weightTravelTime"] !== undefined ? _data["weightTravelTime"] : <any>null;
            this.weightCredits = _data["weightCredits"] !== undefined ? _data["weightCredits"] : <any>null;
            this.weightRoomsCleaned = _data["weightRoomsCleaned"] !== undefined ? _data["weightRoomsCleaned"] : <any>null;
            this.weightLevelChange = _data["weightLevelChange"] !== undefined ? _data["weightLevelChange"] : <any>null;
            this.limitAttendantsPerLevel = _data["limitAttendantsPerLevel"] !== undefined ? _data["limitAttendantsPerLevel"] : <any>null;
            this.solverRunTime = _data["solverRunTime"] !== undefined ? _data["solverRunTime"] : <any>null;
            this.doesLevelMovementReduceCredits = _data["doesLevelMovementReduceCredits"] !== undefined ? _data["doesLevelMovementReduceCredits"] : <any>null;
            this.applyLevelMovementCreditReductionAfterNumberOfLevels = _data["applyLevelMovementCreditReductionAfterNumberOfLevels"] !== undefined ? _data["applyLevelMovementCreditReductionAfterNumberOfLevels"] : <any>null;
            this.levelMovementCreditsReduction = _data["levelMovementCreditsReduction"] !== undefined ? _data["levelMovementCreditsReduction"] : <any>null;
            this.doUsePrePlan = _data["doUsePrePlan"] !== undefined ? _data["doUsePrePlan"] : <any>null;
            this.doUsePreAffinity = _data["doUsePreAffinity"] !== undefined ? _data["doUsePreAffinity"] : <any>null;
            this.doCompleteProposedPlanOnUsePreplan = _data["doCompleteProposedPlanOnUsePreplan"] !== undefined ? _data["doCompleteProposedPlanOnUsePreplan"] : <any>null;
            this.doesBuildingMovementReduceCredits = _data["doesBuildingMovementReduceCredits"] !== undefined ? _data["doesBuildingMovementReduceCredits"] : <any>null;
            this.buildingMovementCreditsReduction = _data["buildingMovementCreditsReduction"] !== undefined ? _data["buildingMovementCreditsReduction"] : <any>null;
            this.arePreferredLevelsExclusive = _data["arePreferredLevelsExclusive"] !== undefined ? _data["arePreferredLevelsExclusive"] : <any>null;
            this.cleaningPriorityKey = _data["cleaningPriorityKey"] !== undefined ? _data["cleaningPriorityKey"] : <any>null;
            this.buildingsDistanceMatrix = _data["buildingsDistanceMatrix"] !== undefined ? _data["buildingsDistanceMatrix"] : <any>null;
            this.levelsDistanceMatrix = _data["levelsDistanceMatrix"] !== undefined ? _data["levelsDistanceMatrix"] : <any>null;
            this.minutesPerCredit = _data["minutesPerCredit"] !== undefined ? _data["minutesPerCredit"] : <any>null;
            this.minCreditsForMultipleCleanersCleaning = _data["minCreditsForMultipleCleanersCleaning"] !== undefined ? _data["minCreditsForMultipleCleanersCleaning"] : <any>null;
            this.maxDeparturesReducesCredits = _data["maxDeparturesReducesCredits"] !== undefined ? _data["maxDeparturesReducesCredits"] : <any>null;
            this.maxDeparturesEquivalentCredits = _data["maxDeparturesEquivalentCredits"] !== undefined ? _data["maxDeparturesEquivalentCredits"] : <any>null;
            this.maxDeparturesReductionThreshold = _data["maxDeparturesReductionThreshold"] !== undefined ? _data["maxDeparturesReductionThreshold"] : <any>null;
            this.maxStaysIncreasesCredits = _data["maxStaysIncreasesCredits"] !== undefined ? _data["maxStaysIncreasesCredits"] : <any>null;
            this.maxStaysEquivalentCredits = _data["maxStaysEquivalentCredits"] !== undefined ? _data["maxStaysEquivalentCredits"] : <any>null;
            this.maxStaysIncreaseThreshold = _data["maxStaysIncreaseThreshold"] !== undefined ? _data["maxStaysIncreaseThreshold"] : <any>null;
        }
    }

    static fromJS(data: any): CleaningPlanCpsatConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningPlanCpsatConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["cleaningPlan"] = this.cleaningPlan ? this.cleaningPlan.toJSON() : <any>null;
        data["planningStrategyTypeKey"] = this.planningStrategyTypeKey !== undefined ? this.planningStrategyTypeKey : <any>null;
        data["balanceByRoomsMinRooms"] = this.balanceByRoomsMinRooms !== undefined ? this.balanceByRoomsMinRooms : <any>null;
        data["balanceByRoomsMaxRooms"] = this.balanceByRoomsMaxRooms !== undefined ? this.balanceByRoomsMaxRooms : <any>null;
        data["balanceByCreditsStrictMinCredits"] = this.balanceByCreditsStrictMinCredits !== undefined ? this.balanceByCreditsStrictMinCredits : <any>null;
        data["balanceByCreditsStrictMaxCredits"] = this.balanceByCreditsStrictMaxCredits !== undefined ? this.balanceByCreditsStrictMaxCredits : <any>null;
        data["balanceByCreditsWithAffinitiesMinCredits"] = this.balanceByCreditsWithAffinitiesMinCredits !== undefined ? this.balanceByCreditsWithAffinitiesMinCredits : <any>null;
        data["balanceByCreditsWithAffinitiesMaxCredits"] = this.balanceByCreditsWithAffinitiesMaxCredits !== undefined ? this.balanceByCreditsWithAffinitiesMaxCredits : <any>null;
        data["targetByRoomsValue"] = this.targetByRoomsValue !== undefined ? this.targetByRoomsValue : <any>null;
        data["targetByCreditsValue"] = this.targetByCreditsValue !== undefined ? this.targetByCreditsValue : <any>null;
        data["doBalanceStaysAndDepartures"] = this.doBalanceStaysAndDepartures !== undefined ? this.doBalanceStaysAndDepartures : <any>null;
        data["weightEpsilonStayDeparture"] = this.weightEpsilonStayDeparture !== undefined ? this.weightEpsilonStayDeparture : <any>null;
        data["maxStay"] = this.maxStay !== undefined ? this.maxStay : <any>null;
        data["maxDeparture"] = this.maxDeparture !== undefined ? this.maxDeparture : <any>null;
        data["maxTravelTime"] = this.maxTravelTime !== undefined ? this.maxTravelTime : <any>null;
        data["maxBuildingTravelTime"] = this.maxBuildingTravelTime !== undefined ? this.maxBuildingTravelTime : <any>null;
        data["maxNumberOfBuildingsPerAttendant"] = this.maxNumberOfBuildingsPerAttendant !== undefined ? this.maxNumberOfBuildingsPerAttendant : <any>null;
        data["maxNumberOfLevelsPerAttendant"] = this.maxNumberOfLevelsPerAttendant !== undefined ? this.maxNumberOfLevelsPerAttendant : <any>null;
        data["roomAward"] = this.roomAward !== undefined ? this.roomAward : <any>null;
        data["levelAward"] = this.levelAward !== undefined ? this.levelAward : <any>null;
        data["buildingAward"] = this.buildingAward !== undefined ? this.buildingAward : <any>null;
        data["weightTravelTime"] = this.weightTravelTime !== undefined ? this.weightTravelTime : <any>null;
        data["weightCredits"] = this.weightCredits !== undefined ? this.weightCredits : <any>null;
        data["weightRoomsCleaned"] = this.weightRoomsCleaned !== undefined ? this.weightRoomsCleaned : <any>null;
        data["weightLevelChange"] = this.weightLevelChange !== undefined ? this.weightLevelChange : <any>null;
        data["limitAttendantsPerLevel"] = this.limitAttendantsPerLevel !== undefined ? this.limitAttendantsPerLevel : <any>null;
        data["solverRunTime"] = this.solverRunTime !== undefined ? this.solverRunTime : <any>null;
        data["doesLevelMovementReduceCredits"] = this.doesLevelMovementReduceCredits !== undefined ? this.doesLevelMovementReduceCredits : <any>null;
        data["applyLevelMovementCreditReductionAfterNumberOfLevels"] = this.applyLevelMovementCreditReductionAfterNumberOfLevels !== undefined ? this.applyLevelMovementCreditReductionAfterNumberOfLevels : <any>null;
        data["levelMovementCreditsReduction"] = this.levelMovementCreditsReduction !== undefined ? this.levelMovementCreditsReduction : <any>null;
        data["doUsePrePlan"] = this.doUsePrePlan !== undefined ? this.doUsePrePlan : <any>null;
        data["doUsePreAffinity"] = this.doUsePreAffinity !== undefined ? this.doUsePreAffinity : <any>null;
        data["doCompleteProposedPlanOnUsePreplan"] = this.doCompleteProposedPlanOnUsePreplan !== undefined ? this.doCompleteProposedPlanOnUsePreplan : <any>null;
        data["doesBuildingMovementReduceCredits"] = this.doesBuildingMovementReduceCredits !== undefined ? this.doesBuildingMovementReduceCredits : <any>null;
        data["buildingMovementCreditsReduction"] = this.buildingMovementCreditsReduction !== undefined ? this.buildingMovementCreditsReduction : <any>null;
        data["arePreferredLevelsExclusive"] = this.arePreferredLevelsExclusive !== undefined ? this.arePreferredLevelsExclusive : <any>null;
        data["cleaningPriorityKey"] = this.cleaningPriorityKey !== undefined ? this.cleaningPriorityKey : <any>null;
        data["buildingsDistanceMatrix"] = this.buildingsDistanceMatrix !== undefined ? this.buildingsDistanceMatrix : <any>null;
        data["levelsDistanceMatrix"] = this.levelsDistanceMatrix !== undefined ? this.levelsDistanceMatrix : <any>null;
        data["minutesPerCredit"] = this.minutesPerCredit !== undefined ? this.minutesPerCredit : <any>null;
        data["minCreditsForMultipleCleanersCleaning"] = this.minCreditsForMultipleCleanersCleaning !== undefined ? this.minCreditsForMultipleCleanersCleaning : <any>null;
        data["maxDeparturesReducesCredits"] = this.maxDeparturesReducesCredits !== undefined ? this.maxDeparturesReducesCredits : <any>null;
        data["maxDeparturesEquivalentCredits"] = this.maxDeparturesEquivalentCredits !== undefined ? this.maxDeparturesEquivalentCredits : <any>null;
        data["maxDeparturesReductionThreshold"] = this.maxDeparturesReductionThreshold !== undefined ? this.maxDeparturesReductionThreshold : <any>null;
        data["maxStaysIncreasesCredits"] = this.maxStaysIncreasesCredits !== undefined ? this.maxStaysIncreasesCredits : <any>null;
        data["maxStaysEquivalentCredits"] = this.maxStaysEquivalentCredits !== undefined ? this.maxStaysEquivalentCredits : <any>null;
        data["maxStaysIncreaseThreshold"] = this.maxStaysIncreaseThreshold !== undefined ? this.maxStaysIncreaseThreshold : <any>null;
        return data; 
    }
}

export interface ICleaningPlanCpsatConfiguration {
    id: string;
    cleaningPlan?: CleaningPlan2 | null;
    planningStrategyTypeKey?: string | null;
    balanceByRoomsMinRooms: number;
    balanceByRoomsMaxRooms: number;
    balanceByCreditsStrictMinCredits: number;
    balanceByCreditsStrictMaxCredits: number;
    balanceByCreditsWithAffinitiesMinCredits: number;
    balanceByCreditsWithAffinitiesMaxCredits: number;
    targetByRoomsValue?: string | null;
    targetByCreditsValue?: string | null;
    doBalanceStaysAndDepartures: boolean;
    weightEpsilonStayDeparture: number;
    maxStay: number;
    maxDeparture: number;
    maxTravelTime: number;
    maxBuildingTravelTime: number;
    maxNumberOfBuildingsPerAttendant: number;
    maxNumberOfLevelsPerAttendant: number;
    roomAward: number;
    levelAward: number;
    buildingAward: number;
    weightTravelTime: number;
    weightCredits: number;
    weightRoomsCleaned: number;
    weightLevelChange: number;
    limitAttendantsPerLevel: boolean;
    solverRunTime: number;
    doesLevelMovementReduceCredits: boolean;
    applyLevelMovementCreditReductionAfterNumberOfLevels: number;
    levelMovementCreditsReduction: number;
    doUsePrePlan: boolean;
    doUsePreAffinity: boolean;
    doCompleteProposedPlanOnUsePreplan: boolean;
    doesBuildingMovementReduceCredits: boolean;
    buildingMovementCreditsReduction: number;
    arePreferredLevelsExclusive: boolean;
    cleaningPriorityKey?: string | null;
    buildingsDistanceMatrix?: string | null;
    levelsDistanceMatrix?: string | null;
    minutesPerCredit: number;
    minCreditsForMultipleCleanersCleaning: number;
    maxDeparturesReducesCredits: boolean;
    maxDeparturesEquivalentCredits: number;
    maxDeparturesReductionThreshold: number;
    maxStaysIncreasesCredits: boolean;
    maxStaysEquivalentCredits: number;
    maxStaysIncreaseThreshold: number;
}

export enum RccRoomStatusCode {
    ARR = 0,
    ARL = 1,
    ARD = 2,
    DEP = 3,
    DPE = 4,
    DPD = 5,
    DA = 6,
    DPEA = 7,
    DPAR = 8,
    DARD = 9,
    STAY = 10,
    DU = 11,
    DUA = 12,
    NR = 13,
    OCC = 14,
    VAC = 15,
    OOO = 16,
    OOS = 17,
    PU = 18,
}

export enum RoomEventType {
    CREATED_BY_USER = 0,
    CREATED_BY_RCC_SYNC = 1,
    CREATED_BY_SYSTEM = 2,
    UPDATED_BY_USER = 3,
    UPDATED_BY_SYSTEM = 4,
    CLEANING_CREATED = 5,
    CLEANING_STARTED = 6,
    CLEANING_PAUSED = 7,
    CLEANING_UNPAUSED = 8,
    CLEANING_RESTARTED = 9,
    CLEANING_FINISHED = 10,
    CLEANING_FINISHED_READY_FOR_INSPECTION = 11,
    CLEANING_CANCELLED_BY_CLEANER = 12,
    CLEANING_CANCELLED_BY_ADMIN = 13,
    CLEANING_CANCELLED_BY_SYSTEM = 14,
    CLEANING_INSPECTION_STARTED = 15,
    CLEANING_INSPECTION_PAUSED = 16,
    CLEANING_INSPECTION_FINISHED = 17,
    CLEANING_INSPECTION_CANCELLED_BY_INSPECTOR = 18,
    CLEANING_INSPECTION_CANCELLED_BY_ADMIN = 19,
    CLEANING_INSPECTION_CANCELLED_BY_SYSTEM = 20,
    CLEANING_INSPECTION_DO_NOT_DISTURB = 21,
    CLEANING_INSPECTION_REQUIRES_INSPECTION = 22,
    CLEANING_INSPECTION_CLEANING_IN_PROGRESS = 23,
    CLEANING_INSPECTION_NEW_CLEANING = 24,
    CLEANING_INSPECTION_CHANGED = 25,
    CLEANING_REFUSED = 26,
    CLEANING_DO_NOT_DISTURB = 27,
    CLEANING_DELAYED = 28,
    MAINTENANCE_STARTED = 29,
    MAINTENANCE_PAUSED = 30,
    MAINTENANCE_FINISHED = 31,
    MAINTENANCE_CANCELLED_BY_INSPECTOR = 32,
    MAINTENANCE_CANCELLED_BY_ADMIN = 33,
    MAINTENANCE_CANCELLED_BY_SYSTEM = 34,
    GUEST_CHECKED_IN = 35,
    GUEST_CHECKED_OUT = 36,
    GUEST_ENTERED_ROOM = 37,
    GUEST_LEFT_ROOM = 38,
    CLEANING_NEW = 39,
    CLEANING_PRIORITY_ENABLED = 40,
    CLEANING_PRIORITY_DISABLED = 41,
    PMS_EVENT = 42,
    RCCSYNC_GUEST_ENTERED_ROOM = 43,
    RCCSYNC_GUEST_LEFT_ROOM = 44,
    RCCSYNC_ROOM_IS_OCCUPIED = 45,
    RCCSYNC_ROOM_IS_VACANT = 46,
    RCCSYNC_RCC_HK_STATUS_CHANGED = 47,
    RCCSYNC_RCC_ROOM_STATUS_CHANGED = 48,
    RCCSYNC_ROOM_EXTERNAL_ID_CHANGED = 49,
    RCCSYNC_BED_EXTERNAL_ID_CHANGED = 50,
    RCCSYNC_ROOM_CREATED = 51,
    RCCSYNC_BED_CREATED = 52,
    RCCSYNC_RCC_ROOM_BED_STATUS_CHANGED = 53,
    RCCSYNC_ROOM_OUT_OF_SERVICE = 54,
    RCCSYNC_ROOM_IN_SERVICE = 55,
}

export class WarehouseAssetAvailability implements IWarehouseAssetAvailability {
    id!: string;
    quantity!: number;
    reservedQuantity!: number;
    warehouseId!: string;
    warehouse?: Warehouse | null;
    assetId!: string;
    asset?: Asset | null;
    xmin!: number;

    constructor(data?: IWarehouseAssetAvailability) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.quantity = _data["quantity"] !== undefined ? _data["quantity"] : <any>null;
            this.reservedQuantity = _data["reservedQuantity"] !== undefined ? _data["reservedQuantity"] : <any>null;
            this.warehouseId = _data["warehouseId"] !== undefined ? _data["warehouseId"] : <any>null;
            this.warehouse = _data["warehouse"] ? Warehouse.fromJS(_data["warehouse"]) : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.asset = _data["asset"] ? Asset.fromJS(_data["asset"]) : <any>null;
            this.xmin = _data["xmin"] !== undefined ? _data["xmin"] : <any>null;
        }
    }

    static fromJS(data: any): WarehouseAssetAvailability {
        data = typeof data === 'object' ? data : {};
        let result = new WarehouseAssetAvailability();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["reservedQuantity"] = this.reservedQuantity !== undefined ? this.reservedQuantity : <any>null;
        data["warehouseId"] = this.warehouseId !== undefined ? this.warehouseId : <any>null;
        data["warehouse"] = this.warehouse ? this.warehouse.toJSON() : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["asset"] = this.asset ? this.asset.toJSON() : <any>null;
        data["xmin"] = this.xmin !== undefined ? this.xmin : <any>null;
        return data; 
    }
}

export interface IWarehouseAssetAvailability {
    id: string;
    quantity: number;
    reservedQuantity: number;
    warehouseId: string;
    warehouse?: Warehouse | null;
    assetId: string;
    asset?: Asset | null;
    xmin: number;
}

export class Asset extends ChangeTrackingBaseEntity implements IAsset {
    id!: string;
    name?: string | null;
    isBulk!: boolean;
    serialNumber?: string | null;
    assetGroupId?: string | null;
    assetSubGroupId?: string | null;
    assetGroup?: AssetGroup | null;
    assetSubGroup?: AssetGroup | null;
    assetTags?: AssetTag[] | null;
    assetFiles?: AssetFile[] | null;
    warehouseAvailabilities?: WarehouseAssetAvailability[] | null;
    roomUsages?: RoomAssetUsage[] | null;
    inventoryStatuses?: InventoryAssetStatus[] | null;
    warehouseDocuments?: WarehouseDocument[] | null;
    warehouseDocumentArchives?: WarehouseDocumentArchive[] | null;

    constructor(data?: IAsset) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isBulk = _data["isBulk"] !== undefined ? _data["isBulk"] : <any>null;
            this.serialNumber = _data["serialNumber"] !== undefined ? _data["serialNumber"] : <any>null;
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            this.assetSubGroupId = _data["assetSubGroupId"] !== undefined ? _data["assetSubGroupId"] : <any>null;
            this.assetGroup = _data["assetGroup"] ? AssetGroup.fromJS(_data["assetGroup"]) : <any>null;
            this.assetSubGroup = _data["assetSubGroup"] ? AssetGroup.fromJS(_data["assetSubGroup"]) : <any>null;
            if (Array.isArray(_data["assetTags"])) {
                this.assetTags = [] as any;
                for (let item of _data["assetTags"])
                    this.assetTags!.push(AssetTag.fromJS(item));
            }
            if (Array.isArray(_data["assetFiles"])) {
                this.assetFiles = [] as any;
                for (let item of _data["assetFiles"])
                    this.assetFiles!.push(AssetFile.fromJS(item));
            }
            if (Array.isArray(_data["warehouseAvailabilities"])) {
                this.warehouseAvailabilities = [] as any;
                for (let item of _data["warehouseAvailabilities"])
                    this.warehouseAvailabilities!.push(WarehouseAssetAvailability.fromJS(item));
            }
            if (Array.isArray(_data["roomUsages"])) {
                this.roomUsages = [] as any;
                for (let item of _data["roomUsages"])
                    this.roomUsages!.push(RoomAssetUsage.fromJS(item));
            }
            if (Array.isArray(_data["inventoryStatuses"])) {
                this.inventoryStatuses = [] as any;
                for (let item of _data["inventoryStatuses"])
                    this.inventoryStatuses!.push(InventoryAssetStatus.fromJS(item));
            }
            if (Array.isArray(_data["warehouseDocuments"])) {
                this.warehouseDocuments = [] as any;
                for (let item of _data["warehouseDocuments"])
                    this.warehouseDocuments!.push(WarehouseDocument.fromJS(item));
            }
            if (Array.isArray(_data["warehouseDocumentArchives"])) {
                this.warehouseDocumentArchives = [] as any;
                for (let item of _data["warehouseDocumentArchives"])
                    this.warehouseDocumentArchives!.push(WarehouseDocumentArchive.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Asset {
        data = typeof data === 'object' ? data : {};
        let result = new Asset();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isBulk"] = this.isBulk !== undefined ? this.isBulk : <any>null;
        data["serialNumber"] = this.serialNumber !== undefined ? this.serialNumber : <any>null;
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        data["assetSubGroupId"] = this.assetSubGroupId !== undefined ? this.assetSubGroupId : <any>null;
        data["assetGroup"] = this.assetGroup ? this.assetGroup.toJSON() : <any>null;
        data["assetSubGroup"] = this.assetSubGroup ? this.assetSubGroup.toJSON() : <any>null;
        if (Array.isArray(this.assetTags)) {
            data["assetTags"] = [];
            for (let item of this.assetTags)
                data["assetTags"].push(item.toJSON());
        }
        if (Array.isArray(this.assetFiles)) {
            data["assetFiles"] = [];
            for (let item of this.assetFiles)
                data["assetFiles"].push(item.toJSON());
        }
        if (Array.isArray(this.warehouseAvailabilities)) {
            data["warehouseAvailabilities"] = [];
            for (let item of this.warehouseAvailabilities)
                data["warehouseAvailabilities"].push(item.toJSON());
        }
        if (Array.isArray(this.roomUsages)) {
            data["roomUsages"] = [];
            for (let item of this.roomUsages)
                data["roomUsages"].push(item.toJSON());
        }
        if (Array.isArray(this.inventoryStatuses)) {
            data["inventoryStatuses"] = [];
            for (let item of this.inventoryStatuses)
                data["inventoryStatuses"].push(item.toJSON());
        }
        if (Array.isArray(this.warehouseDocuments)) {
            data["warehouseDocuments"] = [];
            for (let item of this.warehouseDocuments)
                data["warehouseDocuments"].push(item.toJSON());
        }
        if (Array.isArray(this.warehouseDocumentArchives)) {
            data["warehouseDocumentArchives"] = [];
            for (let item of this.warehouseDocumentArchives)
                data["warehouseDocumentArchives"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAsset extends IChangeTrackingBaseEntity {
    id: string;
    name?: string | null;
    isBulk: boolean;
    serialNumber?: string | null;
    assetGroupId?: string | null;
    assetSubGroupId?: string | null;
    assetGroup?: AssetGroup | null;
    assetSubGroup?: AssetGroup | null;
    assetTags?: AssetTag[] | null;
    assetFiles?: AssetFile[] | null;
    warehouseAvailabilities?: WarehouseAssetAvailability[] | null;
    roomUsages?: RoomAssetUsage[] | null;
    inventoryStatuses?: InventoryAssetStatus[] | null;
    warehouseDocuments?: WarehouseDocument[] | null;
    warehouseDocumentArchives?: WarehouseDocumentArchive[] | null;
}

export class AssetGroup extends ChangeTrackingBaseEntity implements IAssetGroup {
    id!: string;
    parentAssetGroupId?: string | null;
    name?: string | null;
    typeKey?: string | null;
    parentAssetGroup?: AssetGroup | null;
    childAssetGroups?: AssetGroup[] | null;
    groupAssets?: Asset[] | null;
    subGroupAssets?: Asset[] | null;
    assetActions?: AssetAction[] | null;

    constructor(data?: IAssetGroup) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.parentAssetGroupId = _data["parentAssetGroupId"] !== undefined ? _data["parentAssetGroupId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            this.parentAssetGroup = _data["parentAssetGroup"] ? AssetGroup.fromJS(_data["parentAssetGroup"]) : <any>null;
            if (Array.isArray(_data["childAssetGroups"])) {
                this.childAssetGroups = [] as any;
                for (let item of _data["childAssetGroups"])
                    this.childAssetGroups!.push(AssetGroup.fromJS(item));
            }
            if (Array.isArray(_data["groupAssets"])) {
                this.groupAssets = [] as any;
                for (let item of _data["groupAssets"])
                    this.groupAssets!.push(Asset.fromJS(item));
            }
            if (Array.isArray(_data["subGroupAssets"])) {
                this.subGroupAssets = [] as any;
                for (let item of _data["subGroupAssets"])
                    this.subGroupAssets!.push(Asset.fromJS(item));
            }
            if (Array.isArray(_data["assetActions"])) {
                this.assetActions = [] as any;
                for (let item of _data["assetActions"])
                    this.assetActions!.push(AssetAction.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AssetGroup {
        data = typeof data === 'object' ? data : {};
        let result = new AssetGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["parentAssetGroupId"] = this.parentAssetGroupId !== undefined ? this.parentAssetGroupId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        data["parentAssetGroup"] = this.parentAssetGroup ? this.parentAssetGroup.toJSON() : <any>null;
        if (Array.isArray(this.childAssetGroups)) {
            data["childAssetGroups"] = [];
            for (let item of this.childAssetGroups)
                data["childAssetGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.groupAssets)) {
            data["groupAssets"] = [];
            for (let item of this.groupAssets)
                data["groupAssets"].push(item.toJSON());
        }
        if (Array.isArray(this.subGroupAssets)) {
            data["subGroupAssets"] = [];
            for (let item of this.subGroupAssets)
                data["subGroupAssets"].push(item.toJSON());
        }
        if (Array.isArray(this.assetActions)) {
            data["assetActions"] = [];
            for (let item of this.assetActions)
                data["assetActions"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAssetGroup extends IChangeTrackingBaseEntity {
    id: string;
    parentAssetGroupId?: string | null;
    name?: string | null;
    typeKey?: string | null;
    parentAssetGroup?: AssetGroup | null;
    childAssetGroups?: AssetGroup[] | null;
    groupAssets?: Asset[] | null;
    subGroupAssets?: Asset[] | null;
    assetActions?: AssetAction[] | null;
}

export class AssetAction extends ChangeTrackingBaseEntity implements IAssetAction {
    id!: string;
    assetGroupId!: string;
    assetGroup?: AssetGroup | null;
    name?: string | null;
    quickOrTimedKey?: string | null;
    priorityKey?: string | null;
    defaultAssignedToUserId?: string | null;
    defaultAssignedToUser?: User | null;
    defaultAssignedToUserGroupId?: string | null;
    defaultAssignedToUserGroup?: UserGroup | null;
    defaultAssignedToUserSubGroupId?: string | null;
    defaultAssignedToUserSubGroup?: UserSubGroup | null;
    credits?: number | null;
    price?: number | null;
    isSystemDefined!: boolean;
    systemActionTypeKey?: string | null;
    systemDefinedActionIdentifierKey?: string | null;

    constructor(data?: IAssetAction) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            this.assetGroup = _data["assetGroup"] ? AssetGroup.fromJS(_data["assetGroup"]) : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.quickOrTimedKey = _data["quickOrTimedKey"] !== undefined ? _data["quickOrTimedKey"] : <any>null;
            this.priorityKey = _data["priorityKey"] !== undefined ? _data["priorityKey"] : <any>null;
            this.defaultAssignedToUserId = _data["defaultAssignedToUserId"] !== undefined ? _data["defaultAssignedToUserId"] : <any>null;
            this.defaultAssignedToUser = _data["defaultAssignedToUser"] ? User.fromJS(_data["defaultAssignedToUser"]) : <any>null;
            this.defaultAssignedToUserGroupId = _data["defaultAssignedToUserGroupId"] !== undefined ? _data["defaultAssignedToUserGroupId"] : <any>null;
            this.defaultAssignedToUserGroup = _data["defaultAssignedToUserGroup"] ? UserGroup.fromJS(_data["defaultAssignedToUserGroup"]) : <any>null;
            this.defaultAssignedToUserSubGroupId = _data["defaultAssignedToUserSubGroupId"] !== undefined ? _data["defaultAssignedToUserSubGroupId"] : <any>null;
            this.defaultAssignedToUserSubGroup = _data["defaultAssignedToUserSubGroup"] ? UserSubGroup.fromJS(_data["defaultAssignedToUserSubGroup"]) : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
            this.isSystemDefined = _data["isSystemDefined"] !== undefined ? _data["isSystemDefined"] : <any>null;
            this.systemActionTypeKey = _data["systemActionTypeKey"] !== undefined ? _data["systemActionTypeKey"] : <any>null;
            this.systemDefinedActionIdentifierKey = _data["systemDefinedActionIdentifierKey"] !== undefined ? _data["systemDefinedActionIdentifierKey"] : <any>null;
        }
    }

    static fromJS(data: any): AssetAction {
        data = typeof data === 'object' ? data : {};
        let result = new AssetAction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        data["assetGroup"] = this.assetGroup ? this.assetGroup.toJSON() : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["quickOrTimedKey"] = this.quickOrTimedKey !== undefined ? this.quickOrTimedKey : <any>null;
        data["priorityKey"] = this.priorityKey !== undefined ? this.priorityKey : <any>null;
        data["defaultAssignedToUserId"] = this.defaultAssignedToUserId !== undefined ? this.defaultAssignedToUserId : <any>null;
        data["defaultAssignedToUser"] = this.defaultAssignedToUser ? this.defaultAssignedToUser.toJSON() : <any>null;
        data["defaultAssignedToUserGroupId"] = this.defaultAssignedToUserGroupId !== undefined ? this.defaultAssignedToUserGroupId : <any>null;
        data["defaultAssignedToUserGroup"] = this.defaultAssignedToUserGroup ? this.defaultAssignedToUserGroup.toJSON() : <any>null;
        data["defaultAssignedToUserSubGroupId"] = this.defaultAssignedToUserSubGroupId !== undefined ? this.defaultAssignedToUserSubGroupId : <any>null;
        data["defaultAssignedToUserSubGroup"] = this.defaultAssignedToUserSubGroup ? this.defaultAssignedToUserSubGroup.toJSON() : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["isSystemDefined"] = this.isSystemDefined !== undefined ? this.isSystemDefined : <any>null;
        data["systemActionTypeKey"] = this.systemActionTypeKey !== undefined ? this.systemActionTypeKey : <any>null;
        data["systemDefinedActionIdentifierKey"] = this.systemDefinedActionIdentifierKey !== undefined ? this.systemDefinedActionIdentifierKey : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IAssetAction extends IChangeTrackingBaseEntity {
    id: string;
    assetGroupId: string;
    assetGroup?: AssetGroup | null;
    name?: string | null;
    quickOrTimedKey?: string | null;
    priorityKey?: string | null;
    defaultAssignedToUserId?: string | null;
    defaultAssignedToUser?: User | null;
    defaultAssignedToUserGroupId?: string | null;
    defaultAssignedToUserGroup?: UserGroup | null;
    defaultAssignedToUserSubGroupId?: string | null;
    defaultAssignedToUserSubGroup?: UserSubGroup | null;
    credits?: number | null;
    price?: number | null;
    isSystemDefined: boolean;
    systemActionTypeKey?: string | null;
    systemDefinedActionIdentifierKey?: string | null;
}

export class AssetTag implements IAssetTag {
    assetId!: string;
    asset?: Asset | null;
    tagKey?: string | null;
    tag?: Tag | null;

    constructor(data?: IAssetTag) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.asset = _data["asset"] ? Asset.fromJS(_data["asset"]) : <any>null;
            this.tagKey = _data["tagKey"] !== undefined ? _data["tagKey"] : <any>null;
            this.tag = _data["tag"] ? Tag.fromJS(_data["tag"]) : <any>null;
        }
    }

    static fromJS(data: any): AssetTag {
        data = typeof data === 'object' ? data : {};
        let result = new AssetTag();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["asset"] = this.asset ? this.asset.toJSON() : <any>null;
        data["tagKey"] = this.tagKey !== undefined ? this.tagKey : <any>null;
        data["tag"] = this.tag ? this.tag.toJSON() : <any>null;
        return data; 
    }
}

export interface IAssetTag {
    assetId: string;
    asset?: Asset | null;
    tagKey?: string | null;
    tag?: Tag | null;
}

export class Tag extends ChangeTrackingBaseEntity implements ITag {
    key?: string | null;
    value?: string | null;

    constructor(data?: ITag) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.key = _data["key"] !== undefined ? _data["key"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any): Tag {
        data = typeof data === 'object' ? data : {};
        let result = new Tag();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key !== undefined ? this.key : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface ITag extends IChangeTrackingBaseEntity {
    key?: string | null;
    value?: string | null;
}

export class AssetFile implements IAssetFile {
    assetId!: string;
    asset?: Asset | null;
    fileId!: string;
    file?: File | null;
    isPrimaryImage!: boolean;
    isQrCodeImage!: boolean;

    constructor(data?: IAssetFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.asset = _data["asset"] ? Asset.fromJS(_data["asset"]) : <any>null;
            this.fileId = _data["fileId"] !== undefined ? _data["fileId"] : <any>null;
            this.file = _data["file"] ? File.fromJS(_data["file"]) : <any>null;
            this.isPrimaryImage = _data["isPrimaryImage"] !== undefined ? _data["isPrimaryImage"] : <any>null;
            this.isQrCodeImage = _data["isQrCodeImage"] !== undefined ? _data["isQrCodeImage"] : <any>null;
        }
    }

    static fromJS(data: any): AssetFile {
        data = typeof data === 'object' ? data : {};
        let result = new AssetFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["asset"] = this.asset ? this.asset.toJSON() : <any>null;
        data["fileId"] = this.fileId !== undefined ? this.fileId : <any>null;
        data["file"] = this.file ? this.file.toJSON() : <any>null;
        data["isPrimaryImage"] = this.isPrimaryImage !== undefined ? this.isPrimaryImage : <any>null;
        data["isQrCodeImage"] = this.isQrCodeImage !== undefined ? this.isQrCodeImage : <any>null;
        return data; 
    }
}

export interface IAssetFile {
    assetId: string;
    asset?: Asset | null;
    fileId: string;
    file?: File | null;
    isPrimaryImage: boolean;
    isQrCodeImage: boolean;
}

export class File extends ChangeTrackingBaseEntity implements IFile {
    id!: string;
    fileTypeKey?: string | null;
    fileName?: string | null;
    fileData?: string | null;

    constructor(data?: IFile) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.fileTypeKey = _data["fileTypeKey"] !== undefined ? _data["fileTypeKey"] : <any>null;
            this.fileName = _data["fileName"] !== undefined ? _data["fileName"] : <any>null;
            this.fileData = _data["fileData"] !== undefined ? _data["fileData"] : <any>null;
        }
    }

    static fromJS(data: any): File {
        data = typeof data === 'object' ? data : {};
        let result = new File();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["fileTypeKey"] = this.fileTypeKey !== undefined ? this.fileTypeKey : <any>null;
        data["fileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        data["fileData"] = this.fileData !== undefined ? this.fileData : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IFile extends IChangeTrackingBaseEntity {
    id: string;
    fileTypeKey?: string | null;
    fileName?: string | null;
    fileData?: string | null;
}

export class RoomAssetUsage implements IRoomAssetUsage {
    id!: string;
    quantity!: number;
    roomId!: string;
    room?: Room2 | null;
    assetId!: string;
    asset?: Asset | null;
    xmin!: number;

    constructor(data?: IRoomAssetUsage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.quantity = _data["quantity"] !== undefined ? _data["quantity"] : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.room = _data["room"] ? Room2.fromJS(_data["room"]) : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.asset = _data["asset"] ? Asset.fromJS(_data["asset"]) : <any>null;
            this.xmin = _data["xmin"] !== undefined ? _data["xmin"] : <any>null;
        }
    }

    static fromJS(data: any): RoomAssetUsage {
        data = typeof data === 'object' ? data : {};
        let result = new RoomAssetUsage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["room"] = this.room ? this.room.toJSON() : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["asset"] = this.asset ? this.asset.toJSON() : <any>null;
        data["xmin"] = this.xmin !== undefined ? this.xmin : <any>null;
        return data; 
    }
}

export interface IRoomAssetUsage {
    id: string;
    quantity: number;
    roomId: string;
    room?: Room2 | null;
    assetId: string;
    asset?: Asset | null;
    xmin: number;
}

export class InventoryAssetStatus implements IInventoryAssetStatus {
    id!: string;
    quantity!: number;
    inventoryId!: string;
    inventory?: Inventory | null;
    assetId!: string;
    asset?: Asset | null;

    constructor(data?: IInventoryAssetStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.quantity = _data["quantity"] !== undefined ? _data["quantity"] : <any>null;
            this.inventoryId = _data["inventoryId"] !== undefined ? _data["inventoryId"] : <any>null;
            this.inventory = _data["inventory"] ? Inventory.fromJS(_data["inventory"]) : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.asset = _data["asset"] ? Asset.fromJS(_data["asset"]) : <any>null;
        }
    }

    static fromJS(data: any): InventoryAssetStatus {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryAssetStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["inventoryId"] = this.inventoryId !== undefined ? this.inventoryId : <any>null;
        data["inventory"] = this.inventory ? this.inventory.toJSON() : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["asset"] = this.asset ? this.asset.toJSON() : <any>null;
        return data; 
    }
}

export interface IInventoryAssetStatus {
    id: string;
    quantity: number;
    inventoryId: string;
    inventory?: Inventory | null;
    assetId: string;
    asset?: Asset | null;
}

export class Inventory extends ChangeTrackingBaseEntity implements IInventory {
    id!: string;
    assetStatuses?: InventoryAssetStatus[] | null;
    warehouseId!: string;
    warehouse?: Warehouse | null;
    date!: moment.Moment;

    constructor(data?: IInventory) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            if (Array.isArray(_data["assetStatuses"])) {
                this.assetStatuses = [] as any;
                for (let item of _data["assetStatuses"])
                    this.assetStatuses!.push(InventoryAssetStatus.fromJS(item));
            }
            this.warehouseId = _data["warehouseId"] !== undefined ? _data["warehouseId"] : <any>null;
            this.warehouse = _data["warehouse"] ? Warehouse.fromJS(_data["warehouse"]) : <any>null;
            this.date = _data["date"] ? moment(_data["date"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): Inventory {
        data = typeof data === 'object' ? data : {};
        let result = new Inventory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        if (Array.isArray(this.assetStatuses)) {
            data["assetStatuses"] = [];
            for (let item of this.assetStatuses)
                data["assetStatuses"].push(item.toJSON());
        }
        data["warehouseId"] = this.warehouseId !== undefined ? this.warehouseId : <any>null;
        data["warehouse"] = this.warehouse ? this.warehouse.toJSON() : <any>null;
        data["date"] = this.date ? this.date.toISOString() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IInventory extends IChangeTrackingBaseEntity {
    id: string;
    assetStatuses?: InventoryAssetStatus[] | null;
    warehouseId: string;
    warehouse?: Warehouse | null;
    date: moment.Moment;
}

export class WarehouseDocument extends ChangeTrackingBaseEntity implements IWarehouseDocument {
    id!: string;
    warehouseId!: string;
    warehouse?: Warehouse | null;
    typeKey?: string | null;
    note?: string | null;
    assetId!: string;
    asset?: Asset | null;
    availableQuantityChange!: number;
    availableQuantityBeforeChange!: number;
    reservedQuantityChange!: number;
    reservedQuantityBeforeChange!: number;

    constructor(data?: IWarehouseDocument) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.warehouseId = _data["warehouseId"] !== undefined ? _data["warehouseId"] : <any>null;
            this.warehouse = _data["warehouse"] ? Warehouse.fromJS(_data["warehouse"]) : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            this.note = _data["note"] !== undefined ? _data["note"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.asset = _data["asset"] ? Asset.fromJS(_data["asset"]) : <any>null;
            this.availableQuantityChange = _data["availableQuantityChange"] !== undefined ? _data["availableQuantityChange"] : <any>null;
            this.availableQuantityBeforeChange = _data["availableQuantityBeforeChange"] !== undefined ? _data["availableQuantityBeforeChange"] : <any>null;
            this.reservedQuantityChange = _data["reservedQuantityChange"] !== undefined ? _data["reservedQuantityChange"] : <any>null;
            this.reservedQuantityBeforeChange = _data["reservedQuantityBeforeChange"] !== undefined ? _data["reservedQuantityBeforeChange"] : <any>null;
        }
    }

    static fromJS(data: any): WarehouseDocument {
        data = typeof data === 'object' ? data : {};
        let result = new WarehouseDocument();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["warehouseId"] = this.warehouseId !== undefined ? this.warehouseId : <any>null;
        data["warehouse"] = this.warehouse ? this.warehouse.toJSON() : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        data["note"] = this.note !== undefined ? this.note : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["asset"] = this.asset ? this.asset.toJSON() : <any>null;
        data["availableQuantityChange"] = this.availableQuantityChange !== undefined ? this.availableQuantityChange : <any>null;
        data["availableQuantityBeforeChange"] = this.availableQuantityBeforeChange !== undefined ? this.availableQuantityBeforeChange : <any>null;
        data["reservedQuantityChange"] = this.reservedQuantityChange !== undefined ? this.reservedQuantityChange : <any>null;
        data["reservedQuantityBeforeChange"] = this.reservedQuantityBeforeChange !== undefined ? this.reservedQuantityBeforeChange : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IWarehouseDocument extends IChangeTrackingBaseEntity {
    id: string;
    warehouseId: string;
    warehouse?: Warehouse | null;
    typeKey?: string | null;
    note?: string | null;
    assetId: string;
    asset?: Asset | null;
    availableQuantityChange: number;
    availableQuantityBeforeChange: number;
    reservedQuantityChange: number;
    reservedQuantityBeforeChange: number;
}

export class WarehouseDocumentArchive extends ChangeTrackingBaseEntity implements IWarehouseDocumentArchive {
    id!: string;
    warehouseId!: string;
    warehouse?: Warehouse | null;
    typeKey?: string | null;
    note?: string | null;
    assetId!: string;
    asset?: Asset | null;
    availableQuantityChange!: number;
    availableQuantityBeforeChange!: number;
    reservedQuantityChange!: number;
    reservedQuantityBeforeChange!: number;

    constructor(data?: IWarehouseDocumentArchive) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.warehouseId = _data["warehouseId"] !== undefined ? _data["warehouseId"] : <any>null;
            this.warehouse = _data["warehouse"] ? Warehouse.fromJS(_data["warehouse"]) : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            this.note = _data["note"] !== undefined ? _data["note"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.asset = _data["asset"] ? Asset.fromJS(_data["asset"]) : <any>null;
            this.availableQuantityChange = _data["availableQuantityChange"] !== undefined ? _data["availableQuantityChange"] : <any>null;
            this.availableQuantityBeforeChange = _data["availableQuantityBeforeChange"] !== undefined ? _data["availableQuantityBeforeChange"] : <any>null;
            this.reservedQuantityChange = _data["reservedQuantityChange"] !== undefined ? _data["reservedQuantityChange"] : <any>null;
            this.reservedQuantityBeforeChange = _data["reservedQuantityBeforeChange"] !== undefined ? _data["reservedQuantityBeforeChange"] : <any>null;
        }
    }

    static fromJS(data: any): WarehouseDocumentArchive {
        data = typeof data === 'object' ? data : {};
        let result = new WarehouseDocumentArchive();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["warehouseId"] = this.warehouseId !== undefined ? this.warehouseId : <any>null;
        data["warehouse"] = this.warehouse ? this.warehouse.toJSON() : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        data["note"] = this.note !== undefined ? this.note : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["asset"] = this.asset ? this.asset.toJSON() : <any>null;
        data["availableQuantityChange"] = this.availableQuantityChange !== undefined ? this.availableQuantityChange : <any>null;
        data["availableQuantityBeforeChange"] = this.availableQuantityBeforeChange !== undefined ? this.availableQuantityBeforeChange : <any>null;
        data["reservedQuantityChange"] = this.reservedQuantityChange !== undefined ? this.reservedQuantityChange : <any>null;
        data["reservedQuantityBeforeChange"] = this.reservedQuantityBeforeChange !== undefined ? this.reservedQuantityBeforeChange : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IWarehouseDocumentArchive extends IChangeTrackingBaseEntity {
    id: string;
    warehouseId: string;
    warehouse?: Warehouse | null;
    typeKey?: string | null;
    note?: string | null;
    assetId: string;
    asset?: Asset | null;
    availableQuantityChange: number;
    availableQuantityBeforeChange: number;
    reservedQuantityChange: number;
    reservedQuantityBeforeChange: number;
}

export class RoomAssetModel implements IRoomAssetModel {
    roomId!: string;
    room?: Room2 | null;
    assetModelId!: string;
    assetModel?: AssetModel | null;
    quantity!: number;

    constructor(data?: IRoomAssetModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.room = _data["room"] ? Room2.fromJS(_data["room"]) : <any>null;
            this.assetModelId = _data["assetModelId"] !== undefined ? _data["assetModelId"] : <any>null;
            this.assetModel = _data["assetModel"] ? AssetModel.fromJS(_data["assetModel"]) : <any>null;
            this.quantity = _data["quantity"] !== undefined ? _data["quantity"] : <any>null;
        }
    }

    static fromJS(data: any): RoomAssetModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomAssetModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["room"] = this.room ? this.room.toJSON() : <any>null;
        data["assetModelId"] = this.assetModelId !== undefined ? this.assetModelId : <any>null;
        data["assetModel"] = this.assetModel ? this.assetModel.toJSON() : <any>null;
        data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        return data; 
    }
}

export interface IRoomAssetModel {
    roomId: string;
    room?: Room2 | null;
    assetModelId: string;
    assetModel?: AssetModel | null;
    quantity: number;
}

export class AssetModel extends ChangeTrackingBaseEntity implements IAssetModel {
    id!: string;
    assetId!: string;
    asset?: Asset | null;
    name?: string | null;
    availableQuantity!: number;
    roomAssetModels?: RoomAssetModel[] | null;

    constructor(data?: IAssetModel) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.asset = _data["asset"] ? Asset.fromJS(_data["asset"]) : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.availableQuantity = _data["availableQuantity"] !== undefined ? _data["availableQuantity"] : <any>null;
            if (Array.isArray(_data["roomAssetModels"])) {
                this.roomAssetModels = [] as any;
                for (let item of _data["roomAssetModels"])
                    this.roomAssetModels!.push(RoomAssetModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AssetModel {
        data = typeof data === 'object' ? data : {};
        let result = new AssetModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["asset"] = this.asset ? this.asset.toJSON() : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["availableQuantity"] = this.availableQuantity !== undefined ? this.availableQuantity : <any>null;
        if (Array.isArray(this.roomAssetModels)) {
            data["roomAssetModels"] = [];
            for (let item of this.roomAssetModels)
                data["roomAssetModels"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IAssetModel extends IChangeTrackingBaseEntity {
    id: string;
    assetId: string;
    asset?: Asset | null;
    name?: string | null;
    availableQuantity: number;
    roomAssetModels?: RoomAssetModel[] | null;
}

export class RoomCategory extends ChangeTrackingBaseEntity implements IRoomCategory {
    id!: string;
    name?: string | null;
    isPublic!: boolean;
    isPrivate!: boolean;
    isSystemDefaultForReservationSync!: boolean;
    isDefaultForReservationSync!: boolean;
    rooms?: Room2[] | null;

    constructor(data?: IRoomCategory) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isPublic = _data["isPublic"] !== undefined ? _data["isPublic"] : <any>null;
            this.isPrivate = _data["isPrivate"] !== undefined ? _data["isPrivate"] : <any>null;
            this.isSystemDefaultForReservationSync = _data["isSystemDefaultForReservationSync"] !== undefined ? _data["isSystemDefaultForReservationSync"] : <any>null;
            this.isDefaultForReservationSync = _data["isDefaultForReservationSync"] !== undefined ? _data["isDefaultForReservationSync"] : <any>null;
            if (Array.isArray(_data["rooms"])) {
                this.rooms = [] as any;
                for (let item of _data["rooms"])
                    this.rooms!.push(Room2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomCategory {
        data = typeof data === 'object' ? data : {};
        let result = new RoomCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isPublic"] = this.isPublic !== undefined ? this.isPublic : <any>null;
        data["isPrivate"] = this.isPrivate !== undefined ? this.isPrivate : <any>null;
        data["isSystemDefaultForReservationSync"] = this.isSystemDefaultForReservationSync !== undefined ? this.isSystemDefaultForReservationSync : <any>null;
        data["isDefaultForReservationSync"] = this.isDefaultForReservationSync !== undefined ? this.isDefaultForReservationSync : <any>null;
        if (Array.isArray(this.rooms)) {
            data["rooms"] = [];
            for (let item of this.rooms)
                data["rooms"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IRoomCategory extends IChangeTrackingBaseEntity {
    id: string;
    name?: string | null;
    isPublic: boolean;
    isPrivate: boolean;
    isSystemDefaultForReservationSync: boolean;
    isDefaultForReservationSync: boolean;
    rooms?: Room2[] | null;
}

export class RoomNote implements IRoomNote {
    id!: string;
    note?: string | null;
    createdAt!: moment.Moment;
    expiration?: moment.Moment | null;
    isArchived!: boolean;
    application?: string | null;
    roomId!: string;
    room?: Room2 | null;
    createdById!: string;
    createdBy?: User | null;
    taskId?: string | null;
    task?: SystemTask | null;

    constructor(data?: IRoomNote) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.note = _data["note"] !== undefined ? _data["note"] : <any>null;
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>null;
            this.expiration = _data["expiration"] ? moment(_data["expiration"].toString()) : <any>null;
            this.isArchived = _data["isArchived"] !== undefined ? _data["isArchived"] : <any>null;
            this.application = _data["application"] !== undefined ? _data["application"] : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.room = _data["room"] ? Room2.fromJS(_data["room"]) : <any>null;
            this.createdById = _data["createdById"] !== undefined ? _data["createdById"] : <any>null;
            this.createdBy = _data["createdBy"] ? User.fromJS(_data["createdBy"]) : <any>null;
            this.taskId = _data["taskId"] !== undefined ? _data["taskId"] : <any>null;
            this.task = _data["task"] ? SystemTask.fromJS(_data["task"]) : <any>null;
        }
    }

    static fromJS(data: any): RoomNote {
        data = typeof data === 'object' ? data : {};
        let result = new RoomNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["note"] = this.note !== undefined ? this.note : <any>null;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        data["expiration"] = this.expiration ? this.expiration.toISOString() : <any>null;
        data["isArchived"] = this.isArchived !== undefined ? this.isArchived : <any>null;
        data["application"] = this.application !== undefined ? this.application : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["room"] = this.room ? this.room.toJSON() : <any>null;
        data["createdById"] = this.createdById !== undefined ? this.createdById : <any>null;
        data["createdBy"] = this.createdBy ? this.createdBy.toJSON() : <any>null;
        data["taskId"] = this.taskId !== undefined ? this.taskId : <any>null;
        data["task"] = this.task ? this.task.toJSON() : <any>null;
        return data; 
    }
}

export interface IRoomNote {
    id: string;
    note?: string | null;
    createdAt: moment.Moment;
    expiration?: moment.Moment | null;
    isArchived: boolean;
    application?: string | null;
    roomId: string;
    room?: Room2 | null;
    createdById: string;
    createdBy?: User | null;
    taskId?: string | null;
    task?: SystemTask | null;
}

export class SystemTask extends ChangeTrackingBaseEntity implements ISystemTask {
    id!: string;
    actions?: SystemTaskAction[] | null;
    typeKey?: string | null;
    repeatsForKey?: string | null;
    recurringTypeKey?: string | null;
    mustBeFinishedByAllWhos!: boolean;
    credits!: number;
    price!: number;
    priorityKey?: string | null;
    isGuestRequest!: boolean;
    isShownInNewsFeed!: boolean;
    isRescheduledEveryDayUntilFinished!: boolean;
    isMajorNotificationRaisedWhenFinished!: boolean;
    isBlockingCleaningUntilFinished!: boolean;
    userId?: string | null;
    user?: User | null;
    isForPlannedAttendant!: boolean;
    fromReservationId?: string | null;
    fromReservation?: Reservation | null;
    fromWarehouseId?: string | null;
    fromWarehouse?: Warehouse | null;
    fromRoomId?: string | null;
    fromRoom?: Room2 | null;
    fromHotelId?: string | null;
    fromHotel?: Hotel | null;
    fromName?: string | null;
    toReservationId?: string | null;
    toReservation?: Reservation | null;
    toWarehouseId?: string | null;
    toWarehouse?: Warehouse | null;
    toRoomId?: string | null;
    toRoom?: Room2 | null;
    toHotelId?: string | null;
    toHotel?: Hotel | null;
    toName?: string | null;
    whereTypeKey?: string | null;
    eventModifierKey?: string | null;
    eventKey?: string | null;
    eventTimeKey?: string | null;
    statusKey?: string | null;
    startsAt!: moment.Moment;
    systemTaskConfigurationId!: string;
    systemTaskConfiguration?: SystemTaskConfiguration | null;
    isManuallyModified!: boolean;
    history?: SystemTaskHistory[] | null;
    messages?: SystemTaskMessage[] | null;
    comment?: string | null;

    constructor(data?: ISystemTask) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            if (Array.isArray(_data["actions"])) {
                this.actions = [] as any;
                for (let item of _data["actions"])
                    this.actions!.push(SystemTaskAction.fromJS(item));
            }
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            this.repeatsForKey = _data["repeatsForKey"] !== undefined ? _data["repeatsForKey"] : <any>null;
            this.recurringTypeKey = _data["recurringTypeKey"] !== undefined ? _data["recurringTypeKey"] : <any>null;
            this.mustBeFinishedByAllWhos = _data["mustBeFinishedByAllWhos"] !== undefined ? _data["mustBeFinishedByAllWhos"] : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
            this.priorityKey = _data["priorityKey"] !== undefined ? _data["priorityKey"] : <any>null;
            this.isGuestRequest = _data["isGuestRequest"] !== undefined ? _data["isGuestRequest"] : <any>null;
            this.isShownInNewsFeed = _data["isShownInNewsFeed"] !== undefined ? _data["isShownInNewsFeed"] : <any>null;
            this.isRescheduledEveryDayUntilFinished = _data["isRescheduledEveryDayUntilFinished"] !== undefined ? _data["isRescheduledEveryDayUntilFinished"] : <any>null;
            this.isMajorNotificationRaisedWhenFinished = _data["isMajorNotificationRaisedWhenFinished"] !== undefined ? _data["isMajorNotificationRaisedWhenFinished"] : <any>null;
            this.isBlockingCleaningUntilFinished = _data["isBlockingCleaningUntilFinished"] !== undefined ? _data["isBlockingCleaningUntilFinished"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>null;
            this.isForPlannedAttendant = _data["isForPlannedAttendant"] !== undefined ? _data["isForPlannedAttendant"] : <any>null;
            this.fromReservationId = _data["fromReservationId"] !== undefined ? _data["fromReservationId"] : <any>null;
            this.fromReservation = _data["fromReservation"] ? Reservation.fromJS(_data["fromReservation"]) : <any>null;
            this.fromWarehouseId = _data["fromWarehouseId"] !== undefined ? _data["fromWarehouseId"] : <any>null;
            this.fromWarehouse = _data["fromWarehouse"] ? Warehouse.fromJS(_data["fromWarehouse"]) : <any>null;
            this.fromRoomId = _data["fromRoomId"] !== undefined ? _data["fromRoomId"] : <any>null;
            this.fromRoom = _data["fromRoom"] ? Room2.fromJS(_data["fromRoom"]) : <any>null;
            this.fromHotelId = _data["fromHotelId"] !== undefined ? _data["fromHotelId"] : <any>null;
            this.fromHotel = _data["fromHotel"] ? Hotel.fromJS(_data["fromHotel"]) : <any>null;
            this.fromName = _data["fromName"] !== undefined ? _data["fromName"] : <any>null;
            this.toReservationId = _data["toReservationId"] !== undefined ? _data["toReservationId"] : <any>null;
            this.toReservation = _data["toReservation"] ? Reservation.fromJS(_data["toReservation"]) : <any>null;
            this.toWarehouseId = _data["toWarehouseId"] !== undefined ? _data["toWarehouseId"] : <any>null;
            this.toWarehouse = _data["toWarehouse"] ? Warehouse.fromJS(_data["toWarehouse"]) : <any>null;
            this.toRoomId = _data["toRoomId"] !== undefined ? _data["toRoomId"] : <any>null;
            this.toRoom = _data["toRoom"] ? Room2.fromJS(_data["toRoom"]) : <any>null;
            this.toHotelId = _data["toHotelId"] !== undefined ? _data["toHotelId"] : <any>null;
            this.toHotel = _data["toHotel"] ? Hotel.fromJS(_data["toHotel"]) : <any>null;
            this.toName = _data["toName"] !== undefined ? _data["toName"] : <any>null;
            this.whereTypeKey = _data["whereTypeKey"] !== undefined ? _data["whereTypeKey"] : <any>null;
            this.eventModifierKey = _data["eventModifierKey"] !== undefined ? _data["eventModifierKey"] : <any>null;
            this.eventKey = _data["eventKey"] !== undefined ? _data["eventKey"] : <any>null;
            this.eventTimeKey = _data["eventTimeKey"] !== undefined ? _data["eventTimeKey"] : <any>null;
            this.statusKey = _data["statusKey"] !== undefined ? _data["statusKey"] : <any>null;
            this.startsAt = _data["startsAt"] ? moment(_data["startsAt"].toString()) : <any>null;
            this.systemTaskConfigurationId = _data["systemTaskConfigurationId"] !== undefined ? _data["systemTaskConfigurationId"] : <any>null;
            this.systemTaskConfiguration = _data["systemTaskConfiguration"] ? SystemTaskConfiguration.fromJS(_data["systemTaskConfiguration"]) : <any>null;
            this.isManuallyModified = _data["isManuallyModified"] !== undefined ? _data["isManuallyModified"] : <any>null;
            if (Array.isArray(_data["history"])) {
                this.history = [] as any;
                for (let item of _data["history"])
                    this.history!.push(SystemTaskHistory.fromJS(item));
            }
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(SystemTaskMessage.fromJS(item));
            }
            this.comment = _data["comment"] !== undefined ? _data["comment"] : <any>null;
        }
    }

    static fromJS(data: any): SystemTask {
        data = typeof data === 'object' ? data : {};
        let result = new SystemTask();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        if (Array.isArray(this.actions)) {
            data["actions"] = [];
            for (let item of this.actions)
                data["actions"].push(item.toJSON());
        }
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        data["repeatsForKey"] = this.repeatsForKey !== undefined ? this.repeatsForKey : <any>null;
        data["recurringTypeKey"] = this.recurringTypeKey !== undefined ? this.recurringTypeKey : <any>null;
        data["mustBeFinishedByAllWhos"] = this.mustBeFinishedByAllWhos !== undefined ? this.mustBeFinishedByAllWhos : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["priorityKey"] = this.priorityKey !== undefined ? this.priorityKey : <any>null;
        data["isGuestRequest"] = this.isGuestRequest !== undefined ? this.isGuestRequest : <any>null;
        data["isShownInNewsFeed"] = this.isShownInNewsFeed !== undefined ? this.isShownInNewsFeed : <any>null;
        data["isRescheduledEveryDayUntilFinished"] = this.isRescheduledEveryDayUntilFinished !== undefined ? this.isRescheduledEveryDayUntilFinished : <any>null;
        data["isMajorNotificationRaisedWhenFinished"] = this.isMajorNotificationRaisedWhenFinished !== undefined ? this.isMajorNotificationRaisedWhenFinished : <any>null;
        data["isBlockingCleaningUntilFinished"] = this.isBlockingCleaningUntilFinished !== undefined ? this.isBlockingCleaningUntilFinished : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["user"] = this.user ? this.user.toJSON() : <any>null;
        data["isForPlannedAttendant"] = this.isForPlannedAttendant !== undefined ? this.isForPlannedAttendant : <any>null;
        data["fromReservationId"] = this.fromReservationId !== undefined ? this.fromReservationId : <any>null;
        data["fromReservation"] = this.fromReservation ? this.fromReservation.toJSON() : <any>null;
        data["fromWarehouseId"] = this.fromWarehouseId !== undefined ? this.fromWarehouseId : <any>null;
        data["fromWarehouse"] = this.fromWarehouse ? this.fromWarehouse.toJSON() : <any>null;
        data["fromRoomId"] = this.fromRoomId !== undefined ? this.fromRoomId : <any>null;
        data["fromRoom"] = this.fromRoom ? this.fromRoom.toJSON() : <any>null;
        data["fromHotelId"] = this.fromHotelId !== undefined ? this.fromHotelId : <any>null;
        data["fromHotel"] = this.fromHotel ? this.fromHotel.toJSON() : <any>null;
        data["fromName"] = this.fromName !== undefined ? this.fromName : <any>null;
        data["toReservationId"] = this.toReservationId !== undefined ? this.toReservationId : <any>null;
        data["toReservation"] = this.toReservation ? this.toReservation.toJSON() : <any>null;
        data["toWarehouseId"] = this.toWarehouseId !== undefined ? this.toWarehouseId : <any>null;
        data["toWarehouse"] = this.toWarehouse ? this.toWarehouse.toJSON() : <any>null;
        data["toRoomId"] = this.toRoomId !== undefined ? this.toRoomId : <any>null;
        data["toRoom"] = this.toRoom ? this.toRoom.toJSON() : <any>null;
        data["toHotelId"] = this.toHotelId !== undefined ? this.toHotelId : <any>null;
        data["toHotel"] = this.toHotel ? this.toHotel.toJSON() : <any>null;
        data["toName"] = this.toName !== undefined ? this.toName : <any>null;
        data["whereTypeKey"] = this.whereTypeKey !== undefined ? this.whereTypeKey : <any>null;
        data["eventModifierKey"] = this.eventModifierKey !== undefined ? this.eventModifierKey : <any>null;
        data["eventKey"] = this.eventKey !== undefined ? this.eventKey : <any>null;
        data["eventTimeKey"] = this.eventTimeKey !== undefined ? this.eventTimeKey : <any>null;
        data["statusKey"] = this.statusKey !== undefined ? this.statusKey : <any>null;
        data["startsAt"] = this.startsAt ? this.startsAt.toISOString() : <any>null;
        data["systemTaskConfigurationId"] = this.systemTaskConfigurationId !== undefined ? this.systemTaskConfigurationId : <any>null;
        data["systemTaskConfiguration"] = this.systemTaskConfiguration ? this.systemTaskConfiguration.toJSON() : <any>null;
        data["isManuallyModified"] = this.isManuallyModified !== undefined ? this.isManuallyModified : <any>null;
        if (Array.isArray(this.history)) {
            data["history"] = [];
            for (let item of this.history)
                data["history"].push(item.toJSON());
        }
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        data["comment"] = this.comment !== undefined ? this.comment : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface ISystemTask extends IChangeTrackingBaseEntity {
    id: string;
    actions?: SystemTaskAction[] | null;
    typeKey?: string | null;
    repeatsForKey?: string | null;
    recurringTypeKey?: string | null;
    mustBeFinishedByAllWhos: boolean;
    credits: number;
    price: number;
    priorityKey?: string | null;
    isGuestRequest: boolean;
    isShownInNewsFeed: boolean;
    isRescheduledEveryDayUntilFinished: boolean;
    isMajorNotificationRaisedWhenFinished: boolean;
    isBlockingCleaningUntilFinished: boolean;
    userId?: string | null;
    user?: User | null;
    isForPlannedAttendant: boolean;
    fromReservationId?: string | null;
    fromReservation?: Reservation | null;
    fromWarehouseId?: string | null;
    fromWarehouse?: Warehouse | null;
    fromRoomId?: string | null;
    fromRoom?: Room2 | null;
    fromHotelId?: string | null;
    fromHotel?: Hotel | null;
    fromName?: string | null;
    toReservationId?: string | null;
    toReservation?: Reservation | null;
    toWarehouseId?: string | null;
    toWarehouse?: Warehouse | null;
    toRoomId?: string | null;
    toRoom?: Room2 | null;
    toHotelId?: string | null;
    toHotel?: Hotel | null;
    toName?: string | null;
    whereTypeKey?: string | null;
    eventModifierKey?: string | null;
    eventKey?: string | null;
    eventTimeKey?: string | null;
    statusKey?: string | null;
    startsAt: moment.Moment;
    systemTaskConfigurationId: string;
    systemTaskConfiguration?: SystemTaskConfiguration | null;
    isManuallyModified: boolean;
    history?: SystemTaskHistory[] | null;
    messages?: SystemTaskMessage[] | null;
    comment?: string | null;
}

export class SystemTaskAction implements ISystemTaskAction {
    id!: string;
    actionName?: string | null;
    assetName?: string | null;
    assetGroupName?: string | null;
    assetId!: string;
    assetGroupId!: string;
    assetQuantity!: number;
    systemTaskId!: string;
    systemTask?: SystemTask | null;

    constructor(data?: ISystemTaskAction) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.actionName = _data["actionName"] !== undefined ? _data["actionName"] : <any>null;
            this.assetName = _data["assetName"] !== undefined ? _data["assetName"] : <any>null;
            this.assetGroupName = _data["assetGroupName"] !== undefined ? _data["assetGroupName"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            this.assetQuantity = _data["assetQuantity"] !== undefined ? _data["assetQuantity"] : <any>null;
            this.systemTaskId = _data["systemTaskId"] !== undefined ? _data["systemTaskId"] : <any>null;
            this.systemTask = _data["systemTask"] ? SystemTask.fromJS(_data["systemTask"]) : <any>null;
        }
    }

    static fromJS(data: any): SystemTaskAction {
        data = typeof data === 'object' ? data : {};
        let result = new SystemTaskAction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["actionName"] = this.actionName !== undefined ? this.actionName : <any>null;
        data["assetName"] = this.assetName !== undefined ? this.assetName : <any>null;
        data["assetGroupName"] = this.assetGroupName !== undefined ? this.assetGroupName : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        data["assetQuantity"] = this.assetQuantity !== undefined ? this.assetQuantity : <any>null;
        data["systemTaskId"] = this.systemTaskId !== undefined ? this.systemTaskId : <any>null;
        data["systemTask"] = this.systemTask ? this.systemTask.toJSON() : <any>null;
        return data; 
    }
}

export interface ISystemTaskAction {
    id: string;
    actionName?: string | null;
    assetName?: string | null;
    assetGroupName?: string | null;
    assetId: string;
    assetGroupId: string;
    assetQuantity: number;
    systemTaskId: string;
    systemTask?: SystemTask | null;
}

export class SystemTaskConfiguration extends ChangeTrackingBaseEntity implements ISystemTaskConfiguration {
    id!: string;
    data?: SystemTaskConfigurationData | null;
    tasks?: SystemTask[] | null;

    constructor(data?: ISystemTaskConfiguration) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.data = _data["data"] ? SystemTaskConfigurationData.fromJS(_data["data"]) : <any>null;
            if (Array.isArray(_data["tasks"])) {
                this.tasks = [] as any;
                for (let item of _data["tasks"])
                    this.tasks!.push(SystemTask.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SystemTaskConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new SystemTaskConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        if (Array.isArray(this.tasks)) {
            data["tasks"] = [];
            for (let item of this.tasks)
                data["tasks"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface ISystemTaskConfiguration extends IChangeTrackingBaseEntity {
    id: string;
    data?: SystemTaskConfigurationData | null;
    tasks?: SystemTask[] | null;
}

export class SystemTaskConfigurationData implements ISystemTaskConfigurationData {
    comment?: string | null;
    taskTypeKey?: string | null;
    recurringTaskTypeKey?: string | null;
    repeatsForKey?: string | null;
    mustBeFinishedByAllWhos!: boolean;
    recurringEveryNumberOfDays!: number;
    credits!: number;
    price!: number;
    priorityKey?: string | null;
    isGuestRequest!: boolean;
    isShownInNewsFeed!: boolean;
    isRescheduledEveryDayUntilFinished!: boolean;
    isMajorNotificationRaisedWhenFinished!: boolean;
    isBlockingCleaningUntilFinished!: boolean;
    whatsTypeKey?: string | null;
    whereFrom?: SystemTaskConfigurationWhere | null;
    whereTo?: SystemTaskConfigurationWhere | null;
    whats?: SystemTaskConfigurationWhat[] | null;
    whos?: SystemTaskConfigurationWho[] | null;
    wheres?: SystemTaskConfigurationWhere[] | null;
    files?: SystemTaskConfigurationFile[] | null;
    filestackImageUrls?: string[] | null;
    startsAtTimes?: moment.Moment[] | null;
    recurringTaskRepeatTimes?: SystemTaskRecurringTimeOptions[] | null;
    repeatsForNrOccurences?: number | null;
    repeatsForNrDays?: number | null;
    repeatsUntilTime?: moment.Moment | null;
    eventModifierKey?: string | null;
    eventKey?: string | null;
    eventTimeKey?: string | null;
    endsAtTime?: moment.Moment | null;
    excludeWeekends?: boolean | null;
    excludeHolidays?: boolean | null;
    postponeWhenRoomIsOccupied?: boolean | null;

    constructor(data?: ISystemTaskConfigurationData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.comment = _data["comment"] !== undefined ? _data["comment"] : <any>null;
            this.taskTypeKey = _data["taskTypeKey"] !== undefined ? _data["taskTypeKey"] : <any>null;
            this.recurringTaskTypeKey = _data["recurringTaskTypeKey"] !== undefined ? _data["recurringTaskTypeKey"] : <any>null;
            this.repeatsForKey = _data["repeatsForKey"] !== undefined ? _data["repeatsForKey"] : <any>null;
            this.mustBeFinishedByAllWhos = _data["mustBeFinishedByAllWhos"] !== undefined ? _data["mustBeFinishedByAllWhos"] : <any>null;
            this.recurringEveryNumberOfDays = _data["recurringEveryNumberOfDays"] !== undefined ? _data["recurringEveryNumberOfDays"] : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
            this.priorityKey = _data["priorityKey"] !== undefined ? _data["priorityKey"] : <any>null;
            this.isGuestRequest = _data["isGuestRequest"] !== undefined ? _data["isGuestRequest"] : <any>null;
            this.isShownInNewsFeed = _data["isShownInNewsFeed"] !== undefined ? _data["isShownInNewsFeed"] : <any>null;
            this.isRescheduledEveryDayUntilFinished = _data["isRescheduledEveryDayUntilFinished"] !== undefined ? _data["isRescheduledEveryDayUntilFinished"] : <any>null;
            this.isMajorNotificationRaisedWhenFinished = _data["isMajorNotificationRaisedWhenFinished"] !== undefined ? _data["isMajorNotificationRaisedWhenFinished"] : <any>null;
            this.isBlockingCleaningUntilFinished = _data["isBlockingCleaningUntilFinished"] !== undefined ? _data["isBlockingCleaningUntilFinished"] : <any>null;
            this.whatsTypeKey = _data["whatsTypeKey"] !== undefined ? _data["whatsTypeKey"] : <any>null;
            this.whereFrom = _data["whereFrom"] ? SystemTaskConfigurationWhere.fromJS(_data["whereFrom"]) : <any>null;
            this.whereTo = _data["whereTo"] ? SystemTaskConfigurationWhere.fromJS(_data["whereTo"]) : <any>null;
            if (Array.isArray(_data["whats"])) {
                this.whats = [] as any;
                for (let item of _data["whats"])
                    this.whats!.push(SystemTaskConfigurationWhat.fromJS(item));
            }
            if (Array.isArray(_data["whos"])) {
                this.whos = [] as any;
                for (let item of _data["whos"])
                    this.whos!.push(SystemTaskConfigurationWho.fromJS(item));
            }
            if (Array.isArray(_data["wheres"])) {
                this.wheres = [] as any;
                for (let item of _data["wheres"])
                    this.wheres!.push(SystemTaskConfigurationWhere.fromJS(item));
            }
            if (Array.isArray(_data["files"])) {
                this.files = [] as any;
                for (let item of _data["files"])
                    this.files!.push(SystemTaskConfigurationFile.fromJS(item));
            }
            if (Array.isArray(_data["filestackImageUrls"])) {
                this.filestackImageUrls = [] as any;
                for (let item of _data["filestackImageUrls"])
                    this.filestackImageUrls!.push(item);
            }
            if (Array.isArray(_data["startsAtTimes"])) {
                this.startsAtTimes = [] as any;
                for (let item of _data["startsAtTimes"])
                    this.startsAtTimes!.push(moment(item));
            }
            if (Array.isArray(_data["recurringTaskRepeatTimes"])) {
                this.recurringTaskRepeatTimes = [] as any;
                for (let item of _data["recurringTaskRepeatTimes"])
                    this.recurringTaskRepeatTimes!.push(SystemTaskRecurringTimeOptions.fromJS(item));
            }
            this.repeatsForNrOccurences = _data["repeatsForNrOccurences"] !== undefined ? _data["repeatsForNrOccurences"] : <any>null;
            this.repeatsForNrDays = _data["repeatsForNrDays"] !== undefined ? _data["repeatsForNrDays"] : <any>null;
            this.repeatsUntilTime = _data["repeatsUntilTime"] ? moment(_data["repeatsUntilTime"].toString()) : <any>null;
            this.eventModifierKey = _data["eventModifierKey"] !== undefined ? _data["eventModifierKey"] : <any>null;
            this.eventKey = _data["eventKey"] !== undefined ? _data["eventKey"] : <any>null;
            this.eventTimeKey = _data["eventTimeKey"] !== undefined ? _data["eventTimeKey"] : <any>null;
            this.endsAtTime = _data["endsAtTime"] ? moment(_data["endsAtTime"].toString()) : <any>null;
            this.excludeWeekends = _data["excludeWeekends"] !== undefined ? _data["excludeWeekends"] : <any>null;
            this.excludeHolidays = _data["excludeHolidays"] !== undefined ? _data["excludeHolidays"] : <any>null;
            this.postponeWhenRoomIsOccupied = _data["postponeWhenRoomIsOccupied"] !== undefined ? _data["postponeWhenRoomIsOccupied"] : <any>null;
        }
    }

    static fromJS(data: any): SystemTaskConfigurationData {
        data = typeof data === 'object' ? data : {};
        let result = new SystemTaskConfigurationData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["comment"] = this.comment !== undefined ? this.comment : <any>null;
        data["taskTypeKey"] = this.taskTypeKey !== undefined ? this.taskTypeKey : <any>null;
        data["recurringTaskTypeKey"] = this.recurringTaskTypeKey !== undefined ? this.recurringTaskTypeKey : <any>null;
        data["repeatsForKey"] = this.repeatsForKey !== undefined ? this.repeatsForKey : <any>null;
        data["mustBeFinishedByAllWhos"] = this.mustBeFinishedByAllWhos !== undefined ? this.mustBeFinishedByAllWhos : <any>null;
        data["recurringEveryNumberOfDays"] = this.recurringEveryNumberOfDays !== undefined ? this.recurringEveryNumberOfDays : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["priorityKey"] = this.priorityKey !== undefined ? this.priorityKey : <any>null;
        data["isGuestRequest"] = this.isGuestRequest !== undefined ? this.isGuestRequest : <any>null;
        data["isShownInNewsFeed"] = this.isShownInNewsFeed !== undefined ? this.isShownInNewsFeed : <any>null;
        data["isRescheduledEveryDayUntilFinished"] = this.isRescheduledEveryDayUntilFinished !== undefined ? this.isRescheduledEveryDayUntilFinished : <any>null;
        data["isMajorNotificationRaisedWhenFinished"] = this.isMajorNotificationRaisedWhenFinished !== undefined ? this.isMajorNotificationRaisedWhenFinished : <any>null;
        data["isBlockingCleaningUntilFinished"] = this.isBlockingCleaningUntilFinished !== undefined ? this.isBlockingCleaningUntilFinished : <any>null;
        data["whatsTypeKey"] = this.whatsTypeKey !== undefined ? this.whatsTypeKey : <any>null;
        data["whereFrom"] = this.whereFrom ? this.whereFrom.toJSON() : <any>null;
        data["whereTo"] = this.whereTo ? this.whereTo.toJSON() : <any>null;
        if (Array.isArray(this.whats)) {
            data["whats"] = [];
            for (let item of this.whats)
                data["whats"].push(item.toJSON());
        }
        if (Array.isArray(this.whos)) {
            data["whos"] = [];
            for (let item of this.whos)
                data["whos"].push(item.toJSON());
        }
        if (Array.isArray(this.wheres)) {
            data["wheres"] = [];
            for (let item of this.wheres)
                data["wheres"].push(item.toJSON());
        }
        if (Array.isArray(this.files)) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        if (Array.isArray(this.filestackImageUrls)) {
            data["filestackImageUrls"] = [];
            for (let item of this.filestackImageUrls)
                data["filestackImageUrls"].push(item);
        }
        if (Array.isArray(this.startsAtTimes)) {
            data["startsAtTimes"] = [];
            for (let item of this.startsAtTimes)
                data["startsAtTimes"].push(item.toISOString());
        }
        if (Array.isArray(this.recurringTaskRepeatTimes)) {
            data["recurringTaskRepeatTimes"] = [];
            for (let item of this.recurringTaskRepeatTimes)
                data["recurringTaskRepeatTimes"].push(item.toJSON());
        }
        data["repeatsForNrOccurences"] = this.repeatsForNrOccurences !== undefined ? this.repeatsForNrOccurences : <any>null;
        data["repeatsForNrDays"] = this.repeatsForNrDays !== undefined ? this.repeatsForNrDays : <any>null;
        data["repeatsUntilTime"] = this.repeatsUntilTime ? this.repeatsUntilTime.toISOString() : <any>null;
        data["eventModifierKey"] = this.eventModifierKey !== undefined ? this.eventModifierKey : <any>null;
        data["eventKey"] = this.eventKey !== undefined ? this.eventKey : <any>null;
        data["eventTimeKey"] = this.eventTimeKey !== undefined ? this.eventTimeKey : <any>null;
        data["endsAtTime"] = this.endsAtTime ? this.endsAtTime.toISOString() : <any>null;
        data["excludeWeekends"] = this.excludeWeekends !== undefined ? this.excludeWeekends : <any>null;
        data["excludeHolidays"] = this.excludeHolidays !== undefined ? this.excludeHolidays : <any>null;
        data["postponeWhenRoomIsOccupied"] = this.postponeWhenRoomIsOccupied !== undefined ? this.postponeWhenRoomIsOccupied : <any>null;
        return data; 
    }
}

export interface ISystemTaskConfigurationData {
    comment?: string | null;
    taskTypeKey?: string | null;
    recurringTaskTypeKey?: string | null;
    repeatsForKey?: string | null;
    mustBeFinishedByAllWhos: boolean;
    recurringEveryNumberOfDays: number;
    credits: number;
    price: number;
    priorityKey?: string | null;
    isGuestRequest: boolean;
    isShownInNewsFeed: boolean;
    isRescheduledEveryDayUntilFinished: boolean;
    isMajorNotificationRaisedWhenFinished: boolean;
    isBlockingCleaningUntilFinished: boolean;
    whatsTypeKey?: string | null;
    whereFrom?: SystemTaskConfigurationWhere | null;
    whereTo?: SystemTaskConfigurationWhere | null;
    whats?: SystemTaskConfigurationWhat[] | null;
    whos?: SystemTaskConfigurationWho[] | null;
    wheres?: SystemTaskConfigurationWhere[] | null;
    files?: SystemTaskConfigurationFile[] | null;
    filestackImageUrls?: string[] | null;
    startsAtTimes?: moment.Moment[] | null;
    recurringTaskRepeatTimes?: SystemTaskRecurringTimeOptions[] | null;
    repeatsForNrOccurences?: number | null;
    repeatsForNrDays?: number | null;
    repeatsUntilTime?: moment.Moment | null;
    eventModifierKey?: string | null;
    eventKey?: string | null;
    eventTimeKey?: string | null;
    endsAtTime?: moment.Moment | null;
    excludeWeekends?: boolean | null;
    excludeHolidays?: boolean | null;
    postponeWhenRoomIsOccupied?: boolean | null;
}

export class SystemTaskConfigurationWhere implements ISystemTaskConfigurationWhere {
    typeKey?: string | null;
    typeDescription?: string | null;
    referenceId?: string | null;
    referenceName?: string | null;

    constructor(data?: ISystemTaskConfigurationWhere) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            this.typeDescription = _data["typeDescription"] !== undefined ? _data["typeDescription"] : <any>null;
            this.referenceId = _data["referenceId"] !== undefined ? _data["referenceId"] : <any>null;
            this.referenceName = _data["referenceName"] !== undefined ? _data["referenceName"] : <any>null;
        }
    }

    static fromJS(data: any): SystemTaskConfigurationWhere {
        data = typeof data === 'object' ? data : {};
        let result = new SystemTaskConfigurationWhere();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        data["typeDescription"] = this.typeDescription !== undefined ? this.typeDescription : <any>null;
        data["referenceId"] = this.referenceId !== undefined ? this.referenceId : <any>null;
        data["referenceName"] = this.referenceName !== undefined ? this.referenceName : <any>null;
        return data; 
    }
}

export interface ISystemTaskConfigurationWhere {
    typeKey?: string | null;
    typeDescription?: string | null;
    referenceId?: string | null;
    referenceName?: string | null;
}

export class SystemTaskConfigurationWhat implements ISystemTaskConfigurationWhat {
    assetQuantity!: number;
    actionName?: string | null;
    assetName?: string | null;
    assetGroupName?: string | null;
    assetId!: string;
    assetGroupId!: string;
    isActionSystemDefined!: boolean;
    systemDefinedActionTypeKey?: string | null;
    systemDefinedActionIdentifierKey?: string | null;

    constructor(data?: ISystemTaskConfigurationWhat) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetQuantity = _data["assetQuantity"] !== undefined ? _data["assetQuantity"] : <any>null;
            this.actionName = _data["actionName"] !== undefined ? _data["actionName"] : <any>null;
            this.assetName = _data["assetName"] !== undefined ? _data["assetName"] : <any>null;
            this.assetGroupName = _data["assetGroupName"] !== undefined ? _data["assetGroupName"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            this.isActionSystemDefined = _data["isActionSystemDefined"] !== undefined ? _data["isActionSystemDefined"] : <any>null;
            this.systemDefinedActionTypeKey = _data["systemDefinedActionTypeKey"] !== undefined ? _data["systemDefinedActionTypeKey"] : <any>null;
            this.systemDefinedActionIdentifierKey = _data["systemDefinedActionIdentifierKey"] !== undefined ? _data["systemDefinedActionIdentifierKey"] : <any>null;
        }
    }

    static fromJS(data: any): SystemTaskConfigurationWhat {
        data = typeof data === 'object' ? data : {};
        let result = new SystemTaskConfigurationWhat();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetQuantity"] = this.assetQuantity !== undefined ? this.assetQuantity : <any>null;
        data["actionName"] = this.actionName !== undefined ? this.actionName : <any>null;
        data["assetName"] = this.assetName !== undefined ? this.assetName : <any>null;
        data["assetGroupName"] = this.assetGroupName !== undefined ? this.assetGroupName : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        data["isActionSystemDefined"] = this.isActionSystemDefined !== undefined ? this.isActionSystemDefined : <any>null;
        data["systemDefinedActionTypeKey"] = this.systemDefinedActionTypeKey !== undefined ? this.systemDefinedActionTypeKey : <any>null;
        data["systemDefinedActionIdentifierKey"] = this.systemDefinedActionIdentifierKey !== undefined ? this.systemDefinedActionIdentifierKey : <any>null;
        return data; 
    }
}

export interface ISystemTaskConfigurationWhat {
    assetQuantity: number;
    actionName?: string | null;
    assetName?: string | null;
    assetGroupName?: string | null;
    assetId: string;
    assetGroupId: string;
    isActionSystemDefined: boolean;
    systemDefinedActionTypeKey?: string | null;
    systemDefinedActionIdentifierKey?: string | null;
}

export class SystemTaskConfigurationWho implements ISystemTaskConfigurationWho {
    typeKey?: string | null;
    typeDescription?: string | null;
    referenceId?: string | null;
    referenceName?: string | null;

    constructor(data?: ISystemTaskConfigurationWho) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            this.typeDescription = _data["typeDescription"] !== undefined ? _data["typeDescription"] : <any>null;
            this.referenceId = _data["referenceId"] !== undefined ? _data["referenceId"] : <any>null;
            this.referenceName = _data["referenceName"] !== undefined ? _data["referenceName"] : <any>null;
        }
    }

    static fromJS(data: any): SystemTaskConfigurationWho {
        data = typeof data === 'object' ? data : {};
        let result = new SystemTaskConfigurationWho();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        data["typeDescription"] = this.typeDescription !== undefined ? this.typeDescription : <any>null;
        data["referenceId"] = this.referenceId !== undefined ? this.referenceId : <any>null;
        data["referenceName"] = this.referenceName !== undefined ? this.referenceName : <any>null;
        return data; 
    }
}

export interface ISystemTaskConfigurationWho {
    typeKey?: string | null;
    typeDescription?: string | null;
    referenceId?: string | null;
    referenceName?: string | null;
}

export class SystemTaskConfigurationFile implements ISystemTaskConfigurationFile {
    fileName?: string | null;
    fileUrl?: string | null;
    fileId!: string;

    constructor(data?: ISystemTaskConfigurationFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileName = _data["fileName"] !== undefined ? _data["fileName"] : <any>null;
            this.fileUrl = _data["fileUrl"] !== undefined ? _data["fileUrl"] : <any>null;
            this.fileId = _data["fileId"] !== undefined ? _data["fileId"] : <any>null;
        }
    }

    static fromJS(data: any): SystemTaskConfigurationFile {
        data = typeof data === 'object' ? data : {};
        let result = new SystemTaskConfigurationFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        data["fileUrl"] = this.fileUrl !== undefined ? this.fileUrl : <any>null;
        data["fileId"] = this.fileId !== undefined ? this.fileId : <any>null;
        return data; 
    }
}

export interface ISystemTaskConfigurationFile {
    fileName?: string | null;
    fileUrl?: string | null;
    fileId: string;
}

export class SystemTaskRecurringTimeOptions implements ISystemTaskRecurringTimeOptions {
    key?: string | null;
    repeatTimes?: string[] | null;

    constructor(data?: ISystemTaskRecurringTimeOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"] !== undefined ? _data["key"] : <any>null;
            if (Array.isArray(_data["repeatTimes"])) {
                this.repeatTimes = [] as any;
                for (let item of _data["repeatTimes"])
                    this.repeatTimes!.push(item);
            }
        }
    }

    static fromJS(data: any): SystemTaskRecurringTimeOptions {
        data = typeof data === 'object' ? data : {};
        let result = new SystemTaskRecurringTimeOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key !== undefined ? this.key : <any>null;
        if (Array.isArray(this.repeatTimes)) {
            data["repeatTimes"] = [];
            for (let item of this.repeatTimes)
                data["repeatTimes"].push(item);
        }
        return data; 
    }
}

export interface ISystemTaskRecurringTimeOptions {
    key?: string | null;
    repeatTimes?: string[] | null;
}

export class SystemTaskHistory implements ISystemTaskHistory {
    id!: string;
    systemTaskId!: string;
    systemTask?: SystemTask | null;
    createdById?: string | null;
    createdBy?: User | null;
    createdAt!: moment.Moment;
    changedByKey?: string | null;
    message?: string | null;
    oldData?: SystemTaskHistoryData | null;
    newData?: SystemTaskHistoryData | null;

    constructor(data?: ISystemTaskHistory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.systemTaskId = _data["systemTaskId"] !== undefined ? _data["systemTaskId"] : <any>null;
            this.systemTask = _data["systemTask"] ? SystemTask.fromJS(_data["systemTask"]) : <any>null;
            this.createdById = _data["createdById"] !== undefined ? _data["createdById"] : <any>null;
            this.createdBy = _data["createdBy"] ? User.fromJS(_data["createdBy"]) : <any>null;
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>null;
            this.changedByKey = _data["changedByKey"] !== undefined ? _data["changedByKey"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.oldData = _data["oldData"] ? SystemTaskHistoryData.fromJS(_data["oldData"]) : <any>null;
            this.newData = _data["newData"] ? SystemTaskHistoryData.fromJS(_data["newData"]) : <any>null;
        }
    }

    static fromJS(data: any): SystemTaskHistory {
        data = typeof data === 'object' ? data : {};
        let result = new SystemTaskHistory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["systemTaskId"] = this.systemTaskId !== undefined ? this.systemTaskId : <any>null;
        data["systemTask"] = this.systemTask ? this.systemTask.toJSON() : <any>null;
        data["createdById"] = this.createdById !== undefined ? this.createdById : <any>null;
        data["createdBy"] = this.createdBy ? this.createdBy.toJSON() : <any>null;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        data["changedByKey"] = this.changedByKey !== undefined ? this.changedByKey : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["oldData"] = this.oldData ? this.oldData.toJSON() : <any>null;
        data["newData"] = this.newData ? this.newData.toJSON() : <any>null;
        return data; 
    }
}

export interface ISystemTaskHistory {
    id: string;
    systemTaskId: string;
    systemTask?: SystemTask | null;
    createdById?: string | null;
    createdBy?: User | null;
    createdAt: moment.Moment;
    changedByKey?: string | null;
    message?: string | null;
    oldData?: SystemTaskHistoryData | null;
    newData?: SystemTaskHistoryData | null;
}

export class SystemTaskHistoryData implements ISystemTaskHistoryData {
    actions?: SystemTaskHistoryActionData[] | null;
    typeKey?: string | null;
    repeatsForKey?: string | null;
    recurringTypeKey?: string | null;
    mustBeFinishedByAllWhos!: boolean;
    credits!: number;
    price!: number;
    priorityKey?: string | null;
    isGuestRequest!: boolean;
    isShownInNewsFeed!: boolean;
    isRescheduledEveryDayUntilFinished!: boolean;
    isMajorNotificationRaisedWhenFinished!: boolean;
    isBlockingCleaningUntilFinished!: boolean;
    userId?: string | null;
    isForPlannedAttendant!: boolean;
    fromReservationId?: string | null;
    fromName?: string | null;
    fromHotelName?: string | null;
    fromHotelId?: string | null;
    fromWarehouseId?: string | null;
    fromRoomId?: string | null;
    toReservationId?: string | null;
    toWarehouseId?: string | null;
    toRoomId?: string | null;
    toName?: string | null;
    toHotelId?: string | null;
    toHotelName?: string | null;
    whereTypeKey?: string | null;
    eventModifierKey?: string | null;
    eventKey?: string | null;
    eventTimeKey?: string | null;
    statusKey?: string | null;
    startsAt!: moment.Moment;
    isManuallyModified!: boolean;
    comment?: string | null;

    constructor(data?: ISystemTaskHistoryData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["actions"])) {
                this.actions = [] as any;
                for (let item of _data["actions"])
                    this.actions!.push(SystemTaskHistoryActionData.fromJS(item));
            }
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            this.repeatsForKey = _data["repeatsForKey"] !== undefined ? _data["repeatsForKey"] : <any>null;
            this.recurringTypeKey = _data["recurringTypeKey"] !== undefined ? _data["recurringTypeKey"] : <any>null;
            this.mustBeFinishedByAllWhos = _data["mustBeFinishedByAllWhos"] !== undefined ? _data["mustBeFinishedByAllWhos"] : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
            this.priorityKey = _data["priorityKey"] !== undefined ? _data["priorityKey"] : <any>null;
            this.isGuestRequest = _data["isGuestRequest"] !== undefined ? _data["isGuestRequest"] : <any>null;
            this.isShownInNewsFeed = _data["isShownInNewsFeed"] !== undefined ? _data["isShownInNewsFeed"] : <any>null;
            this.isRescheduledEveryDayUntilFinished = _data["isRescheduledEveryDayUntilFinished"] !== undefined ? _data["isRescheduledEveryDayUntilFinished"] : <any>null;
            this.isMajorNotificationRaisedWhenFinished = _data["isMajorNotificationRaisedWhenFinished"] !== undefined ? _data["isMajorNotificationRaisedWhenFinished"] : <any>null;
            this.isBlockingCleaningUntilFinished = _data["isBlockingCleaningUntilFinished"] !== undefined ? _data["isBlockingCleaningUntilFinished"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.isForPlannedAttendant = _data["isForPlannedAttendant"] !== undefined ? _data["isForPlannedAttendant"] : <any>null;
            this.fromReservationId = _data["fromReservationId"] !== undefined ? _data["fromReservationId"] : <any>null;
            this.fromName = _data["fromName"] !== undefined ? _data["fromName"] : <any>null;
            this.fromHotelName = _data["fromHotelName"] !== undefined ? _data["fromHotelName"] : <any>null;
            this.fromHotelId = _data["fromHotelId"] !== undefined ? _data["fromHotelId"] : <any>null;
            this.fromWarehouseId = _data["fromWarehouseId"] !== undefined ? _data["fromWarehouseId"] : <any>null;
            this.fromRoomId = _data["fromRoomId"] !== undefined ? _data["fromRoomId"] : <any>null;
            this.toReservationId = _data["toReservationId"] !== undefined ? _data["toReservationId"] : <any>null;
            this.toWarehouseId = _data["toWarehouseId"] !== undefined ? _data["toWarehouseId"] : <any>null;
            this.toRoomId = _data["toRoomId"] !== undefined ? _data["toRoomId"] : <any>null;
            this.toName = _data["toName"] !== undefined ? _data["toName"] : <any>null;
            this.toHotelId = _data["toHotelId"] !== undefined ? _data["toHotelId"] : <any>null;
            this.toHotelName = _data["toHotelName"] !== undefined ? _data["toHotelName"] : <any>null;
            this.whereTypeKey = _data["whereTypeKey"] !== undefined ? _data["whereTypeKey"] : <any>null;
            this.eventModifierKey = _data["eventModifierKey"] !== undefined ? _data["eventModifierKey"] : <any>null;
            this.eventKey = _data["eventKey"] !== undefined ? _data["eventKey"] : <any>null;
            this.eventTimeKey = _data["eventTimeKey"] !== undefined ? _data["eventTimeKey"] : <any>null;
            this.statusKey = _data["statusKey"] !== undefined ? _data["statusKey"] : <any>null;
            this.startsAt = _data["startsAt"] ? moment(_data["startsAt"].toString()) : <any>null;
            this.isManuallyModified = _data["isManuallyModified"] !== undefined ? _data["isManuallyModified"] : <any>null;
            this.comment = _data["comment"] !== undefined ? _data["comment"] : <any>null;
        }
    }

    static fromJS(data: any): SystemTaskHistoryData {
        data = typeof data === 'object' ? data : {};
        let result = new SystemTaskHistoryData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.actions)) {
            data["actions"] = [];
            for (let item of this.actions)
                data["actions"].push(item.toJSON());
        }
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        data["repeatsForKey"] = this.repeatsForKey !== undefined ? this.repeatsForKey : <any>null;
        data["recurringTypeKey"] = this.recurringTypeKey !== undefined ? this.recurringTypeKey : <any>null;
        data["mustBeFinishedByAllWhos"] = this.mustBeFinishedByAllWhos !== undefined ? this.mustBeFinishedByAllWhos : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["priorityKey"] = this.priorityKey !== undefined ? this.priorityKey : <any>null;
        data["isGuestRequest"] = this.isGuestRequest !== undefined ? this.isGuestRequest : <any>null;
        data["isShownInNewsFeed"] = this.isShownInNewsFeed !== undefined ? this.isShownInNewsFeed : <any>null;
        data["isRescheduledEveryDayUntilFinished"] = this.isRescheduledEveryDayUntilFinished !== undefined ? this.isRescheduledEveryDayUntilFinished : <any>null;
        data["isMajorNotificationRaisedWhenFinished"] = this.isMajorNotificationRaisedWhenFinished !== undefined ? this.isMajorNotificationRaisedWhenFinished : <any>null;
        data["isBlockingCleaningUntilFinished"] = this.isBlockingCleaningUntilFinished !== undefined ? this.isBlockingCleaningUntilFinished : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["isForPlannedAttendant"] = this.isForPlannedAttendant !== undefined ? this.isForPlannedAttendant : <any>null;
        data["fromReservationId"] = this.fromReservationId !== undefined ? this.fromReservationId : <any>null;
        data["fromName"] = this.fromName !== undefined ? this.fromName : <any>null;
        data["fromHotelName"] = this.fromHotelName !== undefined ? this.fromHotelName : <any>null;
        data["fromHotelId"] = this.fromHotelId !== undefined ? this.fromHotelId : <any>null;
        data["fromWarehouseId"] = this.fromWarehouseId !== undefined ? this.fromWarehouseId : <any>null;
        data["fromRoomId"] = this.fromRoomId !== undefined ? this.fromRoomId : <any>null;
        data["toReservationId"] = this.toReservationId !== undefined ? this.toReservationId : <any>null;
        data["toWarehouseId"] = this.toWarehouseId !== undefined ? this.toWarehouseId : <any>null;
        data["toRoomId"] = this.toRoomId !== undefined ? this.toRoomId : <any>null;
        data["toName"] = this.toName !== undefined ? this.toName : <any>null;
        data["toHotelId"] = this.toHotelId !== undefined ? this.toHotelId : <any>null;
        data["toHotelName"] = this.toHotelName !== undefined ? this.toHotelName : <any>null;
        data["whereTypeKey"] = this.whereTypeKey !== undefined ? this.whereTypeKey : <any>null;
        data["eventModifierKey"] = this.eventModifierKey !== undefined ? this.eventModifierKey : <any>null;
        data["eventKey"] = this.eventKey !== undefined ? this.eventKey : <any>null;
        data["eventTimeKey"] = this.eventTimeKey !== undefined ? this.eventTimeKey : <any>null;
        data["statusKey"] = this.statusKey !== undefined ? this.statusKey : <any>null;
        data["startsAt"] = this.startsAt ? this.startsAt.toISOString() : <any>null;
        data["isManuallyModified"] = this.isManuallyModified !== undefined ? this.isManuallyModified : <any>null;
        data["comment"] = this.comment !== undefined ? this.comment : <any>null;
        return data; 
    }
}

export interface ISystemTaskHistoryData {
    actions?: SystemTaskHistoryActionData[] | null;
    typeKey?: string | null;
    repeatsForKey?: string | null;
    recurringTypeKey?: string | null;
    mustBeFinishedByAllWhos: boolean;
    credits: number;
    price: number;
    priorityKey?: string | null;
    isGuestRequest: boolean;
    isShownInNewsFeed: boolean;
    isRescheduledEveryDayUntilFinished: boolean;
    isMajorNotificationRaisedWhenFinished: boolean;
    isBlockingCleaningUntilFinished: boolean;
    userId?: string | null;
    isForPlannedAttendant: boolean;
    fromReservationId?: string | null;
    fromName?: string | null;
    fromHotelName?: string | null;
    fromHotelId?: string | null;
    fromWarehouseId?: string | null;
    fromRoomId?: string | null;
    toReservationId?: string | null;
    toWarehouseId?: string | null;
    toRoomId?: string | null;
    toName?: string | null;
    toHotelId?: string | null;
    toHotelName?: string | null;
    whereTypeKey?: string | null;
    eventModifierKey?: string | null;
    eventKey?: string | null;
    eventTimeKey?: string | null;
    statusKey?: string | null;
    startsAt: moment.Moment;
    isManuallyModified: boolean;
    comment?: string | null;
}

export class SystemTaskHistoryActionData implements ISystemTaskHistoryActionData {
    id!: string;
    actionName?: string | null;
    assetName?: string | null;
    assetGroupName?: string | null;
    assetId!: string;
    assetGroupId!: string;
    assetQuantity!: number;

    constructor(data?: ISystemTaskHistoryActionData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.actionName = _data["actionName"] !== undefined ? _data["actionName"] : <any>null;
            this.assetName = _data["assetName"] !== undefined ? _data["assetName"] : <any>null;
            this.assetGroupName = _data["assetGroupName"] !== undefined ? _data["assetGroupName"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            this.assetQuantity = _data["assetQuantity"] !== undefined ? _data["assetQuantity"] : <any>null;
        }
    }

    static fromJS(data: any): SystemTaskHistoryActionData {
        data = typeof data === 'object' ? data : {};
        let result = new SystemTaskHistoryActionData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["actionName"] = this.actionName !== undefined ? this.actionName : <any>null;
        data["assetName"] = this.assetName !== undefined ? this.assetName : <any>null;
        data["assetGroupName"] = this.assetGroupName !== undefined ? this.assetGroupName : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        data["assetQuantity"] = this.assetQuantity !== undefined ? this.assetQuantity : <any>null;
        return data; 
    }
}

export interface ISystemTaskHistoryActionData {
    id: string;
    actionName?: string | null;
    assetName?: string | null;
    assetGroupName?: string | null;
    assetId: string;
    assetGroupId: string;
    assetQuantity: number;
}

export class SystemTaskMessage extends ChangeTrackingBaseEntity implements ISystemTaskMessage {
    id!: string;
    systemTaskId!: string;
    systemTask?: SystemTask | null;
    message?: string | null;

    constructor(data?: ISystemTaskMessage) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.systemTaskId = _data["systemTaskId"] !== undefined ? _data["systemTaskId"] : <any>null;
            this.systemTask = _data["systemTask"] ? SystemTask.fromJS(_data["systemTask"]) : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
        }
    }

    static fromJS(data: any): SystemTaskMessage {
        data = typeof data === 'object' ? data : {};
        let result = new SystemTaskMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["systemTaskId"] = this.systemTaskId !== undefined ? this.systemTaskId : <any>null;
        data["systemTask"] = this.systemTask ? this.systemTask.toJSON() : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface ISystemTaskMessage extends IChangeTrackingBaseEntity {
    id: string;
    systemTaskId: string;
    systemTask?: SystemTask | null;
    message?: string | null;
}

export class LostAndFoundFileModel implements ILostAndFoundFileModel {
    id!: string;
    name?: string | null;
    url?: string | null;
    isImage!: boolean;
    extension?: string | null;

    constructor(data?: ILostAndFoundFileModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.url = _data["url"] !== undefined ? _data["url"] : <any>null;
            this.isImage = _data["isImage"] !== undefined ? _data["isImage"] : <any>null;
            this.extension = _data["extension"] !== undefined ? _data["extension"] : <any>null;
        }
    }

    static fromJS(data: any): LostAndFoundFileModel {
        data = typeof data === 'object' ? data : {};
        let result = new LostAndFoundFileModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["url"] = this.url !== undefined ? this.url : <any>null;
        data["isImage"] = this.isImage !== undefined ? this.isImage : <any>null;
        data["extension"] = this.extension !== undefined ? this.extension : <any>null;
        return data; 
    }
}

export interface ILostAndFoundFileModel {
    id: string;
    name?: string | null;
    url?: string | null;
    isImage: boolean;
    extension?: string | null;
}

export class InsertLostAndFoundCommand implements IInsertLostAndFoundCommand {
    hotelId?: string | null;
    isLostItem!: boolean;
    description?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    address?: string | null;
    city?: string | null;
    postalCode?: string | null;
    country?: string | null;
    phoneNumber?: string | null;
    email?: string | null;
    referenceNumber?: string | null;
    notes?: string | null;
    roomId?: string | null;
    reservationId?: string | null;
    lostOn?: moment.Moment | null;
    status!: LostAndFoundStatus;
    typeOfLoss!: TypeOfLoss;
    placeOfStorage?: string | null;
    trackingNumber?: string | null;
    whereData?: SaveLostAndFoundWhereData | null;
    files?: LostAndFoundFilesUploadedData[] | null;

    constructor(data?: IInsertLostAndFoundCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.isLostItem = _data["isLostItem"] !== undefined ? _data["isLostItem"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.address = _data["address"] !== undefined ? _data["address"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.postalCode = _data["postalCode"] !== undefined ? _data["postalCode"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.referenceNumber = _data["referenceNumber"] !== undefined ? _data["referenceNumber"] : <any>null;
            this.notes = _data["notes"] !== undefined ? _data["notes"] : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.reservationId = _data["reservationId"] !== undefined ? _data["reservationId"] : <any>null;
            this.lostOn = _data["lostOn"] ? moment(_data["lostOn"].toString()) : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.typeOfLoss = _data["typeOfLoss"] !== undefined ? _data["typeOfLoss"] : <any>null;
            this.placeOfStorage = _data["placeOfStorage"] !== undefined ? _data["placeOfStorage"] : <any>null;
            this.trackingNumber = _data["trackingNumber"] !== undefined ? _data["trackingNumber"] : <any>null;
            this.whereData = _data["whereData"] ? SaveLostAndFoundWhereData.fromJS(_data["whereData"]) : <any>null;
            if (Array.isArray(_data["files"])) {
                this.files = [] as any;
                for (let item of _data["files"])
                    this.files!.push(LostAndFoundFilesUploadedData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InsertLostAndFoundCommand {
        data = typeof data === 'object' ? data : {};
        let result = new InsertLostAndFoundCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["isLostItem"] = this.isLostItem !== undefined ? this.isLostItem : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["postalCode"] = this.postalCode !== undefined ? this.postalCode : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["referenceNumber"] = this.referenceNumber !== undefined ? this.referenceNumber : <any>null;
        data["notes"] = this.notes !== undefined ? this.notes : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["reservationId"] = this.reservationId !== undefined ? this.reservationId : <any>null;
        data["lostOn"] = this.lostOn ? this.lostOn.toISOString() : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["typeOfLoss"] = this.typeOfLoss !== undefined ? this.typeOfLoss : <any>null;
        data["placeOfStorage"] = this.placeOfStorage !== undefined ? this.placeOfStorage : <any>null;
        data["trackingNumber"] = this.trackingNumber !== undefined ? this.trackingNumber : <any>null;
        data["whereData"] = this.whereData ? this.whereData.toJSON() : <any>null;
        if (Array.isArray(this.files)) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IInsertLostAndFoundCommand {
    hotelId?: string | null;
    isLostItem: boolean;
    description?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    address?: string | null;
    city?: string | null;
    postalCode?: string | null;
    country?: string | null;
    phoneNumber?: string | null;
    email?: string | null;
    referenceNumber?: string | null;
    notes?: string | null;
    roomId?: string | null;
    reservationId?: string | null;
    lostOn?: moment.Moment | null;
    status: LostAndFoundStatus;
    typeOfLoss: TypeOfLoss;
    placeOfStorage?: string | null;
    trackingNumber?: string | null;
    whereData?: SaveLostAndFoundWhereData | null;
    files?: LostAndFoundFilesUploadedData[] | null;
}

export class SaveLostAndFoundWhereData extends TaskWhereData implements ISaveLostAndFoundWhereData {

    constructor(data?: ISaveLostAndFoundWhereData) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): SaveLostAndFoundWhereData {
        data = typeof data === 'object' ? data : {};
        let result = new SaveLostAndFoundWhereData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ISaveLostAndFoundWhereData extends ITaskWhereData {
}

export class LostAndFoundFilesUploadedData implements ILostAndFoundFilesUploadedData {
    id?: string | null;
    fileName?: string | null;

    constructor(data?: ILostAndFoundFilesUploadedData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.fileName = _data["fileName"] !== undefined ? _data["fileName"] : <any>null;
        }
    }

    static fromJS(data: any): LostAndFoundFilesUploadedData {
        data = typeof data === 'object' ? data : {};
        let result = new LostAndFoundFilesUploadedData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["fileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        return data; 
    }
}

export interface ILostAndFoundFilesUploadedData {
    id?: string | null;
    fileName?: string | null;
}

export class UpdateLostAndFoundCommand implements IUpdateLostAndFoundCommand {
    hotelId?: string | null;
    id!: string;
    description?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    address?: string | null;
    city?: string | null;
    postalCode?: string | null;
    country?: string | null;
    phoneNumber?: string | null;
    email?: string | null;
    referenceNumber?: string | null;
    notes?: string | null;
    roomId?: string | null;
    reservationId?: string | null;
    lostOn?: moment.Moment | null;
    status!: LostAndFoundStatus;
    typeOfLoss!: TypeOfLoss;
    whereData?: SaveLostAndFoundWhereData2 | null;
    files?: LostAndFoundFilesUploadedData[] | null;
    isLostItem!: boolean;
    placeOfStorage?: string | null;
    trackingNumber?: string | null;

    constructor(data?: IUpdateLostAndFoundCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.address = _data["address"] !== undefined ? _data["address"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.postalCode = _data["postalCode"] !== undefined ? _data["postalCode"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.referenceNumber = _data["referenceNumber"] !== undefined ? _data["referenceNumber"] : <any>null;
            this.notes = _data["notes"] !== undefined ? _data["notes"] : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.reservationId = _data["reservationId"] !== undefined ? _data["reservationId"] : <any>null;
            this.lostOn = _data["lostOn"] ? moment(_data["lostOn"].toString()) : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.typeOfLoss = _data["typeOfLoss"] !== undefined ? _data["typeOfLoss"] : <any>null;
            this.whereData = _data["whereData"] ? SaveLostAndFoundWhereData2.fromJS(_data["whereData"]) : <any>null;
            if (Array.isArray(_data["files"])) {
                this.files = [] as any;
                for (let item of _data["files"])
                    this.files!.push(LostAndFoundFilesUploadedData.fromJS(item));
            }
            this.isLostItem = _data["isLostItem"] !== undefined ? _data["isLostItem"] : <any>null;
            this.placeOfStorage = _data["placeOfStorage"] !== undefined ? _data["placeOfStorage"] : <any>null;
            this.trackingNumber = _data["trackingNumber"] !== undefined ? _data["trackingNumber"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateLostAndFoundCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateLostAndFoundCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["postalCode"] = this.postalCode !== undefined ? this.postalCode : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["referenceNumber"] = this.referenceNumber !== undefined ? this.referenceNumber : <any>null;
        data["notes"] = this.notes !== undefined ? this.notes : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["reservationId"] = this.reservationId !== undefined ? this.reservationId : <any>null;
        data["lostOn"] = this.lostOn ? this.lostOn.toISOString() : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["typeOfLoss"] = this.typeOfLoss !== undefined ? this.typeOfLoss : <any>null;
        data["whereData"] = this.whereData ? this.whereData.toJSON() : <any>null;
        if (Array.isArray(this.files)) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        data["isLostItem"] = this.isLostItem !== undefined ? this.isLostItem : <any>null;
        data["placeOfStorage"] = this.placeOfStorage !== undefined ? this.placeOfStorage : <any>null;
        data["trackingNumber"] = this.trackingNumber !== undefined ? this.trackingNumber : <any>null;
        return data; 
    }
}

export interface IUpdateLostAndFoundCommand {
    hotelId?: string | null;
    id: string;
    description?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    address?: string | null;
    city?: string | null;
    postalCode?: string | null;
    country?: string | null;
    phoneNumber?: string | null;
    email?: string | null;
    referenceNumber?: string | null;
    notes?: string | null;
    roomId?: string | null;
    reservationId?: string | null;
    lostOn?: moment.Moment | null;
    status: LostAndFoundStatus;
    typeOfLoss: TypeOfLoss;
    whereData?: SaveLostAndFoundWhereData2 | null;
    files?: LostAndFoundFilesUploadedData[] | null;
    isLostItem: boolean;
    placeOfStorage?: string | null;
    trackingNumber?: string | null;
}

export class SaveLostAndFoundWhereData2 extends TaskWhereData implements ISaveLostAndFoundWhereData2 {

    constructor(data?: ISaveLostAndFoundWhereData2) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): SaveLostAndFoundWhereData2 {
        data = typeof data === 'object' ? data : {};
        let result = new SaveLostAndFoundWhereData2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ISaveLostAndFoundWhereData2 extends ITaskWhereData {
}

export class ProcessResponseOfPageOfOfOnGuardListItem extends ProcessResponse implements IProcessResponseOfPageOfOfOnGuardListItem {
    data?: PageOfOfOnGuardListItem | null;

    constructor(data?: IProcessResponseOfPageOfOfOnGuardListItem) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? PageOfOfOnGuardListItem.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfPageOfOfOnGuardListItem {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfPageOfOfOnGuardListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfPageOfOfOnGuardListItem extends IProcessResponse {
    data?: PageOfOfOnGuardListItem | null;
}

export class PageOfOfOnGuardListItem implements IPageOfOfOnGuardListItem {
    items?: OnGuardListItem[] | null;
    totalNumberOfItems!: number;

    constructor(data?: IPageOfOfOnGuardListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(OnGuardListItem.fromJS(item));
            }
            this.totalNumberOfItems = _data["totalNumberOfItems"] !== undefined ? _data["totalNumberOfItems"] : <any>null;
        }
    }

    static fromJS(data: any): PageOfOfOnGuardListItem {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfOfOnGuardListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalNumberOfItems"] = this.totalNumberOfItems !== undefined ? this.totalNumberOfItems : <any>null;
        return data; 
    }
}

export interface IPageOfOfOnGuardListItem {
    items?: OnGuardListItem[] | null;
    totalNumberOfItems: number;
}

export class OnGuardListItem implements IOnGuardListItem {
    id!: string;
    firstName?: string | null;
    lastName?: string | null;
    address?: string | null;
    phoneNumber?: string | null;
    identification?: string | null;
    referenceNumber?: string | null;
    description?: string | null;
    createdAt!: moment.Moment;
    status!: OnGuardStatus;

    constructor(data?: IOnGuardListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.address = _data["address"] !== undefined ? _data["address"] : <any>null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
            this.identification = _data["identification"] !== undefined ? _data["identification"] : <any>null;
            this.referenceNumber = _data["referenceNumber"] !== undefined ? _data["referenceNumber"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
        }
    }

    static fromJS(data: any): OnGuardListItem {
        data = typeof data === 'object' ? data : {};
        let result = new OnGuardListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
        data["identification"] = this.identification !== undefined ? this.identification : <any>null;
        data["referenceNumber"] = this.referenceNumber !== undefined ? this.referenceNumber : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        return data; 
    }
}

export interface IOnGuardListItem {
    id: string;
    firstName?: string | null;
    lastName?: string | null;
    address?: string | null;
    phoneNumber?: string | null;
    identification?: string | null;
    referenceNumber?: string | null;
    description?: string | null;
    createdAt: moment.Moment;
    status: OnGuardStatus;
}

export enum OnGuardStatus {
    OnGuard = 0,
    ObjectLost = 1,
    ToBePutBackInRoom = 2,
    PutBackInRoom = 3,
    OnGuardTakenByClient = 4,
    BadReferencing = 5,
}

export class GetOnGuardListQuery extends GetPageRequest implements IGetOnGuardListQuery {
    keyword?: string | null;
    dateFrom?: moment.Moment | null;
    dateTo?: moment.Moment | null;

    constructor(data?: IGetOnGuardListQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.keyword = _data["keyword"] !== undefined ? _data["keyword"] : <any>null;
            this.dateFrom = _data["dateFrom"] ? moment(_data["dateFrom"].toString()) : <any>null;
            this.dateTo = _data["dateTo"] ? moment(_data["dateTo"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): GetOnGuardListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetOnGuardListQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["keyword"] = this.keyword !== undefined ? this.keyword : <any>null;
        data["dateFrom"] = this.dateFrom ? this.dateFrom.toISOString() : <any>null;
        data["dateTo"] = this.dateTo ? this.dateTo.toISOString() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetOnGuardListQuery extends IGetPageRequest {
    keyword?: string | null;
    dateFrom?: moment.Moment | null;
    dateTo?: moment.Moment | null;
}

export class ProcessResponseOfOnGuardModel extends ProcessResponse implements IProcessResponseOfOnGuardModel {
    data?: OnGuardModel | null;

    constructor(data?: IProcessResponseOfOnGuardModel) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? OnGuardModel.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfOnGuardModel {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfOnGuardModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfOnGuardModel extends IProcessResponse {
    data?: OnGuardModel | null;
}

export class OnGuardModel implements IOnGuardModel {
    id!: string;
    firstName?: string | null;
    lastName?: string | null;
    address?: string | null;
    phoneNumber?: string | null;
    identification?: string | null;
    referenceNumber?: string | null;
    description?: string | null;
    status!: OnGuardStatus;
    createdAt!: moment.Moment;
    files?: OnGuardFileModel[] | null;

    constructor(data?: IOnGuardModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.address = _data["address"] !== undefined ? _data["address"] : <any>null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
            this.identification = _data["identification"] !== undefined ? _data["identification"] : <any>null;
            this.referenceNumber = _data["referenceNumber"] !== undefined ? _data["referenceNumber"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>null;
            if (Array.isArray(_data["files"])) {
                this.files = [] as any;
                for (let item of _data["files"])
                    this.files!.push(OnGuardFileModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OnGuardModel {
        data = typeof data === 'object' ? data : {};
        let result = new OnGuardModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
        data["identification"] = this.identification !== undefined ? this.identification : <any>null;
        data["referenceNumber"] = this.referenceNumber !== undefined ? this.referenceNumber : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        if (Array.isArray(this.files)) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IOnGuardModel {
    id: string;
    firstName?: string | null;
    lastName?: string | null;
    address?: string | null;
    phoneNumber?: string | null;
    identification?: string | null;
    referenceNumber?: string | null;
    description?: string | null;
    status: OnGuardStatus;
    createdAt: moment.Moment;
    files?: OnGuardFileModel[] | null;
}

export class OnGuardFileModel implements IOnGuardFileModel {
    id!: string;
    name?: string | null;
    url?: string | null;
    isImage!: boolean;
    extension?: string | null;

    constructor(data?: IOnGuardFileModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.url = _data["url"] !== undefined ? _data["url"] : <any>null;
            this.isImage = _data["isImage"] !== undefined ? _data["isImage"] : <any>null;
            this.extension = _data["extension"] !== undefined ? _data["extension"] : <any>null;
        }
    }

    static fromJS(data: any): OnGuardFileModel {
        data = typeof data === 'object' ? data : {};
        let result = new OnGuardFileModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["url"] = this.url !== undefined ? this.url : <any>null;
        data["isImage"] = this.isImage !== undefined ? this.isImage : <any>null;
        data["extension"] = this.extension !== undefined ? this.extension : <any>null;
        return data; 
    }
}

export interface IOnGuardFileModel {
    id: string;
    name?: string | null;
    url?: string | null;
    isImage: boolean;
    extension?: string | null;
}

export class InsertOnGuardCommand implements IInsertOnGuardCommand {
    firstName?: string | null;
    lastName?: string | null;
    address?: string | null;
    phoneNumber?: string | null;
    identification?: string | null;
    referenceNumber?: string | null;
    description?: string | null;
    status!: OnGuardStatus;
    files?: OnGuardFilesUploadedData[] | null;

    constructor(data?: IInsertOnGuardCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.address = _data["address"] !== undefined ? _data["address"] : <any>null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
            this.identification = _data["identification"] !== undefined ? _data["identification"] : <any>null;
            this.referenceNumber = _data["referenceNumber"] !== undefined ? _data["referenceNumber"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            if (Array.isArray(_data["files"])) {
                this.files = [] as any;
                for (let item of _data["files"])
                    this.files!.push(OnGuardFilesUploadedData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InsertOnGuardCommand {
        data = typeof data === 'object' ? data : {};
        let result = new InsertOnGuardCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
        data["identification"] = this.identification !== undefined ? this.identification : <any>null;
        data["referenceNumber"] = this.referenceNumber !== undefined ? this.referenceNumber : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        if (Array.isArray(this.files)) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IInsertOnGuardCommand {
    firstName?: string | null;
    lastName?: string | null;
    address?: string | null;
    phoneNumber?: string | null;
    identification?: string | null;
    referenceNumber?: string | null;
    description?: string | null;
    status: OnGuardStatus;
    files?: OnGuardFilesUploadedData[] | null;
}

export class OnGuardFilesUploadedData implements IOnGuardFilesUploadedData {
    id?: string | null;
    fileName?: string | null;

    constructor(data?: IOnGuardFilesUploadedData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.fileName = _data["fileName"] !== undefined ? _data["fileName"] : <any>null;
        }
    }

    static fromJS(data: any): OnGuardFilesUploadedData {
        data = typeof data === 'object' ? data : {};
        let result = new OnGuardFilesUploadedData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["fileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        return data; 
    }
}

export interface IOnGuardFilesUploadedData {
    id?: string | null;
    fileName?: string | null;
}

export class UpdateOnGuardCommand implements IUpdateOnGuardCommand {
    id!: string;
    firstName?: string | null;
    lastName?: string | null;
    address?: string | null;
    phoneNumber?: string | null;
    identification?: string | null;
    referenceNumber?: string | null;
    description?: string | null;
    status!: OnGuardStatus;
    files?: OnGuardFilesUploadedData[] | null;

    constructor(data?: IUpdateOnGuardCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.address = _data["address"] !== undefined ? _data["address"] : <any>null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
            this.identification = _data["identification"] !== undefined ? _data["identification"] : <any>null;
            this.referenceNumber = _data["referenceNumber"] !== undefined ? _data["referenceNumber"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            if (Array.isArray(_data["files"])) {
                this.files = [] as any;
                for (let item of _data["files"])
                    this.files!.push(OnGuardFilesUploadedData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateOnGuardCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateOnGuardCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
        data["identification"] = this.identification !== undefined ? this.identification : <any>null;
        data["referenceNumber"] = this.referenceNumber !== undefined ? this.referenceNumber : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        if (Array.isArray(this.files)) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUpdateOnGuardCommand {
    id: string;
    firstName?: string | null;
    lastName?: string | null;
    address?: string | null;
    phoneNumber?: string | null;
    identification?: string | null;
    referenceNumber?: string | null;
    description?: string | null;
    status: OnGuardStatus;
    files?: OnGuardFilesUploadedData[] | null;
}

export class ProcessResponseOfSynchronizeReservationsResult extends ProcessResponse implements IProcessResponseOfSynchronizeReservationsResult {
    data?: SynchronizeReservationsResult | null;

    constructor(data?: IProcessResponseOfSynchronizeReservationsResult) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? SynchronizeReservationsResult.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfSynchronizeReservationsResult {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfSynchronizeReservationsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfSynchronizeReservationsResult extends IProcessResponse {
    data?: SynchronizeReservationsResult | null;
}

export class SynchronizeReservationsResult implements ISynchronizeReservationsResult {
    hotelReservations?: ReservationsSynchronizationResult[] | null;

    constructor(data?: ISynchronizeReservationsResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["hotelReservations"])) {
                this.hotelReservations = [] as any;
                for (let item of _data["hotelReservations"])
                    this.hotelReservations!.push(ReservationsSynchronizationResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SynchronizeReservationsResult {
        data = typeof data === 'object' ? data : {};
        let result = new SynchronizeReservationsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.hotelReservations)) {
            data["hotelReservations"] = [];
            for (let item of this.hotelReservations)
                data["hotelReservations"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISynchronizeReservationsResult {
    hotelReservations?: ReservationsSynchronizationResult[] | null;
}

export class ReservationsSynchronizationResult implements IReservationsSynchronizationResult {
    hotelId?: string | null;
    hotelName?: string | null;
    newReservations?: ReservationData[] | null;
    updatedReservations?: ReservationData[] | null;
    deactivatedReservations?: ReservationData[] | null;
    autogeneratedRooms?: ReservationRoomData[] | null;
    autogeneratedBeds?: ReservationBedData[] | null;
    roomsWithNewExternalId?: ReservationRoomData[] | null;
    bedsWithNewExternalId?: ReservationBedData[] | null;
    newProducts?: SyncProductData[] | null;

    constructor(data?: IReservationsSynchronizationResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.hotelName = _data["hotelName"] !== undefined ? _data["hotelName"] : <any>null;
            if (Array.isArray(_data["newReservations"])) {
                this.newReservations = [] as any;
                for (let item of _data["newReservations"])
                    this.newReservations!.push(ReservationData.fromJS(item));
            }
            if (Array.isArray(_data["updatedReservations"])) {
                this.updatedReservations = [] as any;
                for (let item of _data["updatedReservations"])
                    this.updatedReservations!.push(ReservationData.fromJS(item));
            }
            if (Array.isArray(_data["deactivatedReservations"])) {
                this.deactivatedReservations = [] as any;
                for (let item of _data["deactivatedReservations"])
                    this.deactivatedReservations!.push(ReservationData.fromJS(item));
            }
            if (Array.isArray(_data["autogeneratedRooms"])) {
                this.autogeneratedRooms = [] as any;
                for (let item of _data["autogeneratedRooms"])
                    this.autogeneratedRooms!.push(ReservationRoomData.fromJS(item));
            }
            if (Array.isArray(_data["autogeneratedBeds"])) {
                this.autogeneratedBeds = [] as any;
                for (let item of _data["autogeneratedBeds"])
                    this.autogeneratedBeds!.push(ReservationBedData.fromJS(item));
            }
            if (Array.isArray(_data["roomsWithNewExternalId"])) {
                this.roomsWithNewExternalId = [] as any;
                for (let item of _data["roomsWithNewExternalId"])
                    this.roomsWithNewExternalId!.push(ReservationRoomData.fromJS(item));
            }
            if (Array.isArray(_data["bedsWithNewExternalId"])) {
                this.bedsWithNewExternalId = [] as any;
                for (let item of _data["bedsWithNewExternalId"])
                    this.bedsWithNewExternalId!.push(ReservationBedData.fromJS(item));
            }
            if (Array.isArray(_data["newProducts"])) {
                this.newProducts = [] as any;
                for (let item of _data["newProducts"])
                    this.newProducts!.push(SyncProductData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ReservationsSynchronizationResult {
        data = typeof data === 'object' ? data : {};
        let result = new ReservationsSynchronizationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["hotelName"] = this.hotelName !== undefined ? this.hotelName : <any>null;
        if (Array.isArray(this.newReservations)) {
            data["newReservations"] = [];
            for (let item of this.newReservations)
                data["newReservations"].push(item.toJSON());
        }
        if (Array.isArray(this.updatedReservations)) {
            data["updatedReservations"] = [];
            for (let item of this.updatedReservations)
                data["updatedReservations"].push(item.toJSON());
        }
        if (Array.isArray(this.deactivatedReservations)) {
            data["deactivatedReservations"] = [];
            for (let item of this.deactivatedReservations)
                data["deactivatedReservations"].push(item.toJSON());
        }
        if (Array.isArray(this.autogeneratedRooms)) {
            data["autogeneratedRooms"] = [];
            for (let item of this.autogeneratedRooms)
                data["autogeneratedRooms"].push(item.toJSON());
        }
        if (Array.isArray(this.autogeneratedBeds)) {
            data["autogeneratedBeds"] = [];
            for (let item of this.autogeneratedBeds)
                data["autogeneratedBeds"].push(item.toJSON());
        }
        if (Array.isArray(this.roomsWithNewExternalId)) {
            data["roomsWithNewExternalId"] = [];
            for (let item of this.roomsWithNewExternalId)
                data["roomsWithNewExternalId"].push(item.toJSON());
        }
        if (Array.isArray(this.bedsWithNewExternalId)) {
            data["bedsWithNewExternalId"] = [];
            for (let item of this.bedsWithNewExternalId)
                data["bedsWithNewExternalId"].push(item.toJSON());
        }
        if (Array.isArray(this.newProducts)) {
            data["newProducts"] = [];
            for (let item of this.newProducts)
                data["newProducts"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IReservationsSynchronizationResult {
    hotelId?: string | null;
    hotelName?: string | null;
    newReservations?: ReservationData[] | null;
    updatedReservations?: ReservationData[] | null;
    deactivatedReservations?: ReservationData[] | null;
    autogeneratedRooms?: ReservationRoomData[] | null;
    autogeneratedBeds?: ReservationBedData[] | null;
    roomsWithNewExternalId?: ReservationRoomData[] | null;
    bedsWithNewExternalId?: ReservationBedData[] | null;
    newProducts?: SyncProductData[] | null;
}

export class ReservationData implements IReservationData {
    id?: string | null;
    roomName?: string | null;
    roomIsClean!: boolean;
    roomIsDoNotDisturb!: boolean;
    roomIsOccupied!: boolean;
    roomIsOutOfOrder!: boolean;
    pmsRoomName?: string | null;
    guestName?: string | null;
    checkIn?: moment.Moment | null;
    actualCheckIn?: moment.Moment | null;
    checkOut?: moment.Moment | null;
    actualCheckOut?: moment.Moment | null;
    rccReservationStatusKey?: string | null;
    numberOfAdults!: number;
    numberOfChildren!: number;
    numberOfInfants!: number;
    pmsNote?: string | null;
    vip?: string | null;
    group?: string | null;
    otherProperties?: ReservationOtherPropertyData[] | null;
    hotelId?: string | null;
    isActive!: boolean;
    isSynchronizedFromRcc!: boolean;
    lastTimeModifiedBySynchronization?: moment.Moment | null;
    synchronizedAt?: moment.Moment | null;

    constructor(data?: IReservationData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.roomName = _data["roomName"] !== undefined ? _data["roomName"] : <any>null;
            this.roomIsClean = _data["roomIsClean"] !== undefined ? _data["roomIsClean"] : <any>null;
            this.roomIsDoNotDisturb = _data["roomIsDoNotDisturb"] !== undefined ? _data["roomIsDoNotDisturb"] : <any>null;
            this.roomIsOccupied = _data["roomIsOccupied"] !== undefined ? _data["roomIsOccupied"] : <any>null;
            this.roomIsOutOfOrder = _data["roomIsOutOfOrder"] !== undefined ? _data["roomIsOutOfOrder"] : <any>null;
            this.pmsRoomName = _data["pmsRoomName"] !== undefined ? _data["pmsRoomName"] : <any>null;
            this.guestName = _data["guestName"] !== undefined ? _data["guestName"] : <any>null;
            this.checkIn = _data["checkIn"] ? moment(_data["checkIn"].toString()) : <any>null;
            this.actualCheckIn = _data["actualCheckIn"] ? moment(_data["actualCheckIn"].toString()) : <any>null;
            this.checkOut = _data["checkOut"] ? moment(_data["checkOut"].toString()) : <any>null;
            this.actualCheckOut = _data["actualCheckOut"] ? moment(_data["actualCheckOut"].toString()) : <any>null;
            this.rccReservationStatusKey = _data["rccReservationStatusKey"] !== undefined ? _data["rccReservationStatusKey"] : <any>null;
            this.numberOfAdults = _data["numberOfAdults"] !== undefined ? _data["numberOfAdults"] : <any>null;
            this.numberOfChildren = _data["numberOfChildren"] !== undefined ? _data["numberOfChildren"] : <any>null;
            this.numberOfInfants = _data["numberOfInfants"] !== undefined ? _data["numberOfInfants"] : <any>null;
            this.pmsNote = _data["pmsNote"] !== undefined ? _data["pmsNote"] : <any>null;
            this.vip = _data["vip"] !== undefined ? _data["vip"] : <any>null;
            this.group = _data["group"] !== undefined ? _data["group"] : <any>null;
            if (Array.isArray(_data["otherProperties"])) {
                this.otherProperties = [] as any;
                for (let item of _data["otherProperties"])
                    this.otherProperties!.push(ReservationOtherPropertyData.fromJS(item));
            }
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.isSynchronizedFromRcc = _data["isSynchronizedFromRcc"] !== undefined ? _data["isSynchronizedFromRcc"] : <any>null;
            this.lastTimeModifiedBySynchronization = _data["lastTimeModifiedBySynchronization"] ? moment(_data["lastTimeModifiedBySynchronization"].toString()) : <any>null;
            this.synchronizedAt = _data["synchronizedAt"] ? moment(_data["synchronizedAt"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): ReservationData {
        data = typeof data === 'object' ? data : {};
        let result = new ReservationData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["roomName"] = this.roomName !== undefined ? this.roomName : <any>null;
        data["roomIsClean"] = this.roomIsClean !== undefined ? this.roomIsClean : <any>null;
        data["roomIsDoNotDisturb"] = this.roomIsDoNotDisturb !== undefined ? this.roomIsDoNotDisturb : <any>null;
        data["roomIsOccupied"] = this.roomIsOccupied !== undefined ? this.roomIsOccupied : <any>null;
        data["roomIsOutOfOrder"] = this.roomIsOutOfOrder !== undefined ? this.roomIsOutOfOrder : <any>null;
        data["pmsRoomName"] = this.pmsRoomName !== undefined ? this.pmsRoomName : <any>null;
        data["guestName"] = this.guestName !== undefined ? this.guestName : <any>null;
        data["checkIn"] = this.checkIn ? this.checkIn.toISOString() : <any>null;
        data["actualCheckIn"] = this.actualCheckIn ? this.actualCheckIn.toISOString() : <any>null;
        data["checkOut"] = this.checkOut ? this.checkOut.toISOString() : <any>null;
        data["actualCheckOut"] = this.actualCheckOut ? this.actualCheckOut.toISOString() : <any>null;
        data["rccReservationStatusKey"] = this.rccReservationStatusKey !== undefined ? this.rccReservationStatusKey : <any>null;
        data["numberOfAdults"] = this.numberOfAdults !== undefined ? this.numberOfAdults : <any>null;
        data["numberOfChildren"] = this.numberOfChildren !== undefined ? this.numberOfChildren : <any>null;
        data["numberOfInfants"] = this.numberOfInfants !== undefined ? this.numberOfInfants : <any>null;
        data["pmsNote"] = this.pmsNote !== undefined ? this.pmsNote : <any>null;
        data["vip"] = this.vip !== undefined ? this.vip : <any>null;
        data["group"] = this.group !== undefined ? this.group : <any>null;
        if (Array.isArray(this.otherProperties)) {
            data["otherProperties"] = [];
            for (let item of this.otherProperties)
                data["otherProperties"].push(item.toJSON());
        }
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["isSynchronizedFromRcc"] = this.isSynchronizedFromRcc !== undefined ? this.isSynchronizedFromRcc : <any>null;
        data["lastTimeModifiedBySynchronization"] = this.lastTimeModifiedBySynchronization ? this.lastTimeModifiedBySynchronization.toISOString() : <any>null;
        data["synchronizedAt"] = this.synchronizedAt ? this.synchronizedAt.toISOString() : <any>null;
        return data; 
    }
}

export interface IReservationData {
    id?: string | null;
    roomName?: string | null;
    roomIsClean: boolean;
    roomIsDoNotDisturb: boolean;
    roomIsOccupied: boolean;
    roomIsOutOfOrder: boolean;
    pmsRoomName?: string | null;
    guestName?: string | null;
    checkIn?: moment.Moment | null;
    actualCheckIn?: moment.Moment | null;
    checkOut?: moment.Moment | null;
    actualCheckOut?: moment.Moment | null;
    rccReservationStatusKey?: string | null;
    numberOfAdults: number;
    numberOfChildren: number;
    numberOfInfants: number;
    pmsNote?: string | null;
    vip?: string | null;
    group?: string | null;
    otherProperties?: ReservationOtherPropertyData[] | null;
    hotelId?: string | null;
    isActive: boolean;
    isSynchronizedFromRcc: boolean;
    lastTimeModifiedBySynchronization?: moment.Moment | null;
    synchronizedAt?: moment.Moment | null;
}

export class ReservationOtherPropertyData implements IReservationOtherPropertyData {
    key?: string | null;
    value?: string | null;

    constructor(data?: IReservationOtherPropertyData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"] !== undefined ? _data["key"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any): ReservationOtherPropertyData {
        data = typeof data === 'object' ? data : {};
        let result = new ReservationOtherPropertyData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key !== undefined ? this.key : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data; 
    }
}

export interface IReservationOtherPropertyData {
    key?: string | null;
    value?: string | null;
}

export class ReservationRoomData implements IReservationRoomData {
    id!: string;
    externalId?: string | null;
    name?: string | null;

    constructor(data?: IReservationRoomData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.externalId = _data["externalId"] !== undefined ? _data["externalId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): ReservationRoomData {
        data = typeof data === 'object' ? data : {};
        let result = new ReservationRoomData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["externalId"] = this.externalId !== undefined ? this.externalId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data; 
    }
}

export interface IReservationRoomData {
    id: string;
    externalId?: string | null;
    name?: string | null;
}

export class ReservationBedData implements IReservationBedData {
    id!: string;
    externalId?: string | null;
    name?: string | null;
    roomId!: string;
    roomName?: string | null;

    constructor(data?: IReservationBedData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.externalId = _data["externalId"] !== undefined ? _data["externalId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.roomName = _data["roomName"] !== undefined ? _data["roomName"] : <any>null;
        }
    }

    static fromJS(data: any): ReservationBedData {
        data = typeof data === 'object' ? data : {};
        let result = new ReservationBedData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["externalId"] = this.externalId !== undefined ? this.externalId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["roomName"] = this.roomName !== undefined ? this.roomName : <any>null;
        return data; 
    }
}

export interface IReservationBedData {
    id: string;
    externalId?: string | null;
    name?: string | null;
    roomId: string;
    roomName?: string | null;
}

export class SyncProductData implements ISyncProductData {
    id?: string | null;
    name?: string | null;

    constructor(data?: ISyncProductData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): SyncProductData {
        data = typeof data === 'object' ? data : {};
        let result = new SyncProductData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data; 
    }
}

export interface ISyncProductData {
    id?: string | null;
    name?: string | null;
}

export class SynchronizeReservationsCommand implements ISynchronizeReservationsCommand {

    constructor(data?: ISynchronizeReservationsCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): SynchronizeReservationsCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SynchronizeReservationsCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface ISynchronizeReservationsCommand {
}

export class PageOfOfReservationGridData implements IPageOfOfReservationGridData {
    items?: ReservationGridData[] | null;
    totalNumberOfItems!: number;

    constructor(data?: IPageOfOfReservationGridData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ReservationGridData.fromJS(item));
            }
            this.totalNumberOfItems = _data["totalNumberOfItems"] !== undefined ? _data["totalNumberOfItems"] : <any>null;
        }
    }

    static fromJS(data: any): PageOfOfReservationGridData {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfOfReservationGridData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalNumberOfItems"] = this.totalNumberOfItems !== undefined ? this.totalNumberOfItems : <any>null;
        return data; 
    }
}

export interface IPageOfOfReservationGridData {
    items?: ReservationGridData[] | null;
    totalNumberOfItems: number;
}

export class ReservationGridData extends ReservationData implements IReservationGridData {
    hotelName?: string | null;

    constructor(data?: IReservationGridData) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.hotelName = _data["hotelName"] !== undefined ? _data["hotelName"] : <any>null;
        }
    }

    static fromJS(data: any): ReservationGridData {
        data = typeof data === 'object' ? data : {};
        let result = new ReservationGridData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelName"] = this.hotelName !== undefined ? this.hotelName : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IReservationGridData extends IReservationData {
    hotelName?: string | null;
}

export class GetPageOfReservationsQuery extends GetPageRequest implements IGetPageOfReservationsQuery {
    hotelId?: string | null;
    keywords?: string | null;
    sortKey?: string | null;

    constructor(data?: IGetPageOfReservationsQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.keywords = _data["keywords"] !== undefined ? _data["keywords"] : <any>null;
            this.sortKey = _data["sortKey"] !== undefined ? _data["sortKey"] : <any>null;
        }
    }

    static fromJS(data: any): GetPageOfReservationsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetPageOfReservationsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["keywords"] = this.keywords !== undefined ? this.keywords : <any>null;
        data["sortKey"] = this.sortKey !== undefined ? this.sortKey : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetPageOfReservationsQuery extends IGetPageRequest {
    hotelId?: string | null;
    keywords?: string | null;
    sortKey?: string | null;
}

export class ProcessResponseOfIEnumerableOfRoleListModel extends ProcessResponse implements IProcessResponseOfIEnumerableOfRoleListModel {
    data?: RoleListModel[] | null;

    constructor(data?: IProcessResponseOfIEnumerableOfRoleListModel) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoleListModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProcessResponseOfIEnumerableOfRoleListModel {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfIEnumerableOfRoleListModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfIEnumerableOfRoleListModel extends IProcessResponse {
    data?: RoleListModel[] | null;
}

export class RoleListModel implements IRoleListModel {
    id?: string | null;
    name?: string | null;
    isSystemRole!: boolean;
    hotelAccessTypeKey?: string | null;
    hotelAccessTypeDescription?: string | null;

    constructor(data?: IRoleListModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isSystemRole = _data["isSystemRole"] !== undefined ? _data["isSystemRole"] : <any>null;
            this.hotelAccessTypeKey = _data["hotelAccessTypeKey"] !== undefined ? _data["hotelAccessTypeKey"] : <any>null;
            this.hotelAccessTypeDescription = _data["hotelAccessTypeDescription"] !== undefined ? _data["hotelAccessTypeDescription"] : <any>null;
        }
    }

    static fromJS(data: any): RoleListModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoleListModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isSystemRole"] = this.isSystemRole !== undefined ? this.isSystemRole : <any>null;
        data["hotelAccessTypeKey"] = this.hotelAccessTypeKey !== undefined ? this.hotelAccessTypeKey : <any>null;
        data["hotelAccessTypeDescription"] = this.hotelAccessTypeDescription !== undefined ? this.hotelAccessTypeDescription : <any>null;
        return data; 
    }
}

export interface IRoleListModel {
    id?: string | null;
    name?: string | null;
    isSystemRole: boolean;
    hotelAccessTypeKey?: string | null;
    hotelAccessTypeDescription?: string | null;
}

export class ProcessResponseOfRoleModel extends ProcessResponse implements IProcessResponseOfRoleModel {
    data?: RoleModel | null;

    constructor(data?: IProcessResponseOfRoleModel) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? RoleModel.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfRoleModel {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfRoleModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfRoleModel extends IProcessResponse {
    data?: RoleModel | null;
}

export class RoleModel implements IRoleModel {
    id!: string;
    name?: string | null;
    isSystemRole!: boolean;
    hotelAccessTypeKey?: string | null;
    hotelAccessTypeDescription?: string | null;
    roomsClaim!: boolean;
    assetsClaim!: boolean;
    usersClaim!: boolean;
    roleManagementClaim!: boolean;
    roomCategoriesClaim!: boolean;
    hotelSettingClaim!: boolean;
    roomInsightsClaim!: boolean;
    userInsightsClaim!: boolean;
    tasksClaim!: boolean;
    reservationClaim!: boolean;
    cleaningPlannerClaim!: boolean;
    cleaningCalendarClaim!: boolean;
    reservationCalendarClaim!: boolean;
    lostAndFoundClaim!: boolean;
    onGuardClaim!: boolean;

    constructor(data?: IRoleModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isSystemRole = _data["isSystemRole"] !== undefined ? _data["isSystemRole"] : <any>null;
            this.hotelAccessTypeKey = _data["hotelAccessTypeKey"] !== undefined ? _data["hotelAccessTypeKey"] : <any>null;
            this.hotelAccessTypeDescription = _data["hotelAccessTypeDescription"] !== undefined ? _data["hotelAccessTypeDescription"] : <any>null;
            this.roomsClaim = _data["roomsClaim"] !== undefined ? _data["roomsClaim"] : <any>null;
            this.assetsClaim = _data["assetsClaim"] !== undefined ? _data["assetsClaim"] : <any>null;
            this.usersClaim = _data["usersClaim"] !== undefined ? _data["usersClaim"] : <any>null;
            this.roleManagementClaim = _data["roleManagementClaim"] !== undefined ? _data["roleManagementClaim"] : <any>null;
            this.roomCategoriesClaim = _data["roomCategoriesClaim"] !== undefined ? _data["roomCategoriesClaim"] : <any>null;
            this.hotelSettingClaim = _data["hotelSettingClaim"] !== undefined ? _data["hotelSettingClaim"] : <any>null;
            this.roomInsightsClaim = _data["roomInsightsClaim"] !== undefined ? _data["roomInsightsClaim"] : <any>null;
            this.userInsightsClaim = _data["userInsightsClaim"] !== undefined ? _data["userInsightsClaim"] : <any>null;
            this.tasksClaim = _data["tasksClaim"] !== undefined ? _data["tasksClaim"] : <any>null;
            this.reservationClaim = _data["reservationClaim"] !== undefined ? _data["reservationClaim"] : <any>null;
            this.cleaningPlannerClaim = _data["cleaningPlannerClaim"] !== undefined ? _data["cleaningPlannerClaim"] : <any>null;
            this.cleaningCalendarClaim = _data["cleaningCalendarClaim"] !== undefined ? _data["cleaningCalendarClaim"] : <any>null;
            this.reservationCalendarClaim = _data["reservationCalendarClaim"] !== undefined ? _data["reservationCalendarClaim"] : <any>null;
            this.lostAndFoundClaim = _data["lostAndFoundClaim"] !== undefined ? _data["lostAndFoundClaim"] : <any>null;
            this.onGuardClaim = _data["onGuardClaim"] !== undefined ? _data["onGuardClaim"] : <any>null;
        }
    }

    static fromJS(data: any): RoleModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoleModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isSystemRole"] = this.isSystemRole !== undefined ? this.isSystemRole : <any>null;
        data["hotelAccessTypeKey"] = this.hotelAccessTypeKey !== undefined ? this.hotelAccessTypeKey : <any>null;
        data["hotelAccessTypeDescription"] = this.hotelAccessTypeDescription !== undefined ? this.hotelAccessTypeDescription : <any>null;
        data["roomsClaim"] = this.roomsClaim !== undefined ? this.roomsClaim : <any>null;
        data["assetsClaim"] = this.assetsClaim !== undefined ? this.assetsClaim : <any>null;
        data["usersClaim"] = this.usersClaim !== undefined ? this.usersClaim : <any>null;
        data["roleManagementClaim"] = this.roleManagementClaim !== undefined ? this.roleManagementClaim : <any>null;
        data["roomCategoriesClaim"] = this.roomCategoriesClaim !== undefined ? this.roomCategoriesClaim : <any>null;
        data["hotelSettingClaim"] = this.hotelSettingClaim !== undefined ? this.hotelSettingClaim : <any>null;
        data["roomInsightsClaim"] = this.roomInsightsClaim !== undefined ? this.roomInsightsClaim : <any>null;
        data["userInsightsClaim"] = this.userInsightsClaim !== undefined ? this.userInsightsClaim : <any>null;
        data["tasksClaim"] = this.tasksClaim !== undefined ? this.tasksClaim : <any>null;
        data["reservationClaim"] = this.reservationClaim !== undefined ? this.reservationClaim : <any>null;
        data["cleaningPlannerClaim"] = this.cleaningPlannerClaim !== undefined ? this.cleaningPlannerClaim : <any>null;
        data["cleaningCalendarClaim"] = this.cleaningCalendarClaim !== undefined ? this.cleaningCalendarClaim : <any>null;
        data["reservationCalendarClaim"] = this.reservationCalendarClaim !== undefined ? this.reservationCalendarClaim : <any>null;
        data["lostAndFoundClaim"] = this.lostAndFoundClaim !== undefined ? this.lostAndFoundClaim : <any>null;
        data["onGuardClaim"] = this.onGuardClaim !== undefined ? this.onGuardClaim : <any>null;
        return data; 
    }
}

export interface IRoleModel {
    id: string;
    name?: string | null;
    isSystemRole: boolean;
    hotelAccessTypeKey?: string | null;
    hotelAccessTypeDescription?: string | null;
    roomsClaim: boolean;
    assetsClaim: boolean;
    usersClaim: boolean;
    roleManagementClaim: boolean;
    roomCategoriesClaim: boolean;
    hotelSettingClaim: boolean;
    roomInsightsClaim: boolean;
    userInsightsClaim: boolean;
    tasksClaim: boolean;
    reservationClaim: boolean;
    cleaningPlannerClaim: boolean;
    cleaningCalendarClaim: boolean;
    reservationCalendarClaim: boolean;
    lostAndFoundClaim: boolean;
    onGuardClaim: boolean;
}

export class InsertRoleCommand implements IInsertRoleCommand {
    name?: string | null;
    hotelAccessTypeKey?: string | null;
    roomsClaim!: boolean;
    assetsClaim!: boolean;
    usersClaim!: boolean;
    roleManagementClaim!: boolean;
    roomCategoriesClaim!: boolean;
    hotelSettingClaim!: boolean;
    roomInsightsClaim!: boolean;
    userInsightsClaim!: boolean;
    tasksClaim!: boolean;
    reservationClaim!: boolean;
    cleaningPlannerClaim!: boolean;
    cleaningCalendarClaim!: boolean;
    reservationCalendarClaim!: boolean;
    lostAndFoundClaim!: boolean;
    onGuardClaim!: boolean;

    constructor(data?: IInsertRoleCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.hotelAccessTypeKey = _data["hotelAccessTypeKey"] !== undefined ? _data["hotelAccessTypeKey"] : <any>null;
            this.roomsClaim = _data["roomsClaim"] !== undefined ? _data["roomsClaim"] : <any>null;
            this.assetsClaim = _data["assetsClaim"] !== undefined ? _data["assetsClaim"] : <any>null;
            this.usersClaim = _data["usersClaim"] !== undefined ? _data["usersClaim"] : <any>null;
            this.roleManagementClaim = _data["roleManagementClaim"] !== undefined ? _data["roleManagementClaim"] : <any>null;
            this.roomCategoriesClaim = _data["roomCategoriesClaim"] !== undefined ? _data["roomCategoriesClaim"] : <any>null;
            this.hotelSettingClaim = _data["hotelSettingClaim"] !== undefined ? _data["hotelSettingClaim"] : <any>null;
            this.roomInsightsClaim = _data["roomInsightsClaim"] !== undefined ? _data["roomInsightsClaim"] : <any>null;
            this.userInsightsClaim = _data["userInsightsClaim"] !== undefined ? _data["userInsightsClaim"] : <any>null;
            this.tasksClaim = _data["tasksClaim"] !== undefined ? _data["tasksClaim"] : <any>null;
            this.reservationClaim = _data["reservationClaim"] !== undefined ? _data["reservationClaim"] : <any>null;
            this.cleaningPlannerClaim = _data["cleaningPlannerClaim"] !== undefined ? _data["cleaningPlannerClaim"] : <any>null;
            this.cleaningCalendarClaim = _data["cleaningCalendarClaim"] !== undefined ? _data["cleaningCalendarClaim"] : <any>null;
            this.reservationCalendarClaim = _data["reservationCalendarClaim"] !== undefined ? _data["reservationCalendarClaim"] : <any>null;
            this.lostAndFoundClaim = _data["lostAndFoundClaim"] !== undefined ? _data["lostAndFoundClaim"] : <any>null;
            this.onGuardClaim = _data["onGuardClaim"] !== undefined ? _data["onGuardClaim"] : <any>null;
        }
    }

    static fromJS(data: any): InsertRoleCommand {
        data = typeof data === 'object' ? data : {};
        let result = new InsertRoleCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["hotelAccessTypeKey"] = this.hotelAccessTypeKey !== undefined ? this.hotelAccessTypeKey : <any>null;
        data["roomsClaim"] = this.roomsClaim !== undefined ? this.roomsClaim : <any>null;
        data["assetsClaim"] = this.assetsClaim !== undefined ? this.assetsClaim : <any>null;
        data["usersClaim"] = this.usersClaim !== undefined ? this.usersClaim : <any>null;
        data["roleManagementClaim"] = this.roleManagementClaim !== undefined ? this.roleManagementClaim : <any>null;
        data["roomCategoriesClaim"] = this.roomCategoriesClaim !== undefined ? this.roomCategoriesClaim : <any>null;
        data["hotelSettingClaim"] = this.hotelSettingClaim !== undefined ? this.hotelSettingClaim : <any>null;
        data["roomInsightsClaim"] = this.roomInsightsClaim !== undefined ? this.roomInsightsClaim : <any>null;
        data["userInsightsClaim"] = this.userInsightsClaim !== undefined ? this.userInsightsClaim : <any>null;
        data["tasksClaim"] = this.tasksClaim !== undefined ? this.tasksClaim : <any>null;
        data["reservationClaim"] = this.reservationClaim !== undefined ? this.reservationClaim : <any>null;
        data["cleaningPlannerClaim"] = this.cleaningPlannerClaim !== undefined ? this.cleaningPlannerClaim : <any>null;
        data["cleaningCalendarClaim"] = this.cleaningCalendarClaim !== undefined ? this.cleaningCalendarClaim : <any>null;
        data["reservationCalendarClaim"] = this.reservationCalendarClaim !== undefined ? this.reservationCalendarClaim : <any>null;
        data["lostAndFoundClaim"] = this.lostAndFoundClaim !== undefined ? this.lostAndFoundClaim : <any>null;
        data["onGuardClaim"] = this.onGuardClaim !== undefined ? this.onGuardClaim : <any>null;
        return data; 
    }
}

export interface IInsertRoleCommand {
    name?: string | null;
    hotelAccessTypeKey?: string | null;
    roomsClaim: boolean;
    assetsClaim: boolean;
    usersClaim: boolean;
    roleManagementClaim: boolean;
    roomCategoriesClaim: boolean;
    hotelSettingClaim: boolean;
    roomInsightsClaim: boolean;
    userInsightsClaim: boolean;
    tasksClaim: boolean;
    reservationClaim: boolean;
    cleaningPlannerClaim: boolean;
    cleaningCalendarClaim: boolean;
    reservationCalendarClaim: boolean;
    lostAndFoundClaim: boolean;
    onGuardClaim: boolean;
}

export class UpdateRoleCommand implements IUpdateRoleCommand {
    id?: string | null;
    name?: string | null;
    hotelAccessTypeKey?: string | null;
    roomsClaim!: boolean;
    assetsClaim!: boolean;
    usersClaim!: boolean;
    roleManagementClaim!: boolean;
    roomCategoriesClaim!: boolean;
    hotelSettingClaim!: boolean;
    roomInsightsClaim!: boolean;
    userInsightsClaim!: boolean;
    tasksClaim!: boolean;
    reservationClaim!: boolean;
    cleaningPlannerClaim!: boolean;
    cleaningCalendarClaim!: boolean;
    reservationCalendarClaim!: boolean;
    lostAndFoundClaim!: boolean;
    onGuardClaim!: boolean;

    constructor(data?: IUpdateRoleCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.hotelAccessTypeKey = _data["hotelAccessTypeKey"] !== undefined ? _data["hotelAccessTypeKey"] : <any>null;
            this.roomsClaim = _data["roomsClaim"] !== undefined ? _data["roomsClaim"] : <any>null;
            this.assetsClaim = _data["assetsClaim"] !== undefined ? _data["assetsClaim"] : <any>null;
            this.usersClaim = _data["usersClaim"] !== undefined ? _data["usersClaim"] : <any>null;
            this.roleManagementClaim = _data["roleManagementClaim"] !== undefined ? _data["roleManagementClaim"] : <any>null;
            this.roomCategoriesClaim = _data["roomCategoriesClaim"] !== undefined ? _data["roomCategoriesClaim"] : <any>null;
            this.hotelSettingClaim = _data["hotelSettingClaim"] !== undefined ? _data["hotelSettingClaim"] : <any>null;
            this.roomInsightsClaim = _data["roomInsightsClaim"] !== undefined ? _data["roomInsightsClaim"] : <any>null;
            this.userInsightsClaim = _data["userInsightsClaim"] !== undefined ? _data["userInsightsClaim"] : <any>null;
            this.tasksClaim = _data["tasksClaim"] !== undefined ? _data["tasksClaim"] : <any>null;
            this.reservationClaim = _data["reservationClaim"] !== undefined ? _data["reservationClaim"] : <any>null;
            this.cleaningPlannerClaim = _data["cleaningPlannerClaim"] !== undefined ? _data["cleaningPlannerClaim"] : <any>null;
            this.cleaningCalendarClaim = _data["cleaningCalendarClaim"] !== undefined ? _data["cleaningCalendarClaim"] : <any>null;
            this.reservationCalendarClaim = _data["reservationCalendarClaim"] !== undefined ? _data["reservationCalendarClaim"] : <any>null;
            this.lostAndFoundClaim = _data["lostAndFoundClaim"] !== undefined ? _data["lostAndFoundClaim"] : <any>null;
            this.onGuardClaim = _data["onGuardClaim"] !== undefined ? _data["onGuardClaim"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateRoleCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRoleCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["hotelAccessTypeKey"] = this.hotelAccessTypeKey !== undefined ? this.hotelAccessTypeKey : <any>null;
        data["roomsClaim"] = this.roomsClaim !== undefined ? this.roomsClaim : <any>null;
        data["assetsClaim"] = this.assetsClaim !== undefined ? this.assetsClaim : <any>null;
        data["usersClaim"] = this.usersClaim !== undefined ? this.usersClaim : <any>null;
        data["roleManagementClaim"] = this.roleManagementClaim !== undefined ? this.roleManagementClaim : <any>null;
        data["roomCategoriesClaim"] = this.roomCategoriesClaim !== undefined ? this.roomCategoriesClaim : <any>null;
        data["hotelSettingClaim"] = this.hotelSettingClaim !== undefined ? this.hotelSettingClaim : <any>null;
        data["roomInsightsClaim"] = this.roomInsightsClaim !== undefined ? this.roomInsightsClaim : <any>null;
        data["userInsightsClaim"] = this.userInsightsClaim !== undefined ? this.userInsightsClaim : <any>null;
        data["tasksClaim"] = this.tasksClaim !== undefined ? this.tasksClaim : <any>null;
        data["reservationClaim"] = this.reservationClaim !== undefined ? this.reservationClaim : <any>null;
        data["cleaningPlannerClaim"] = this.cleaningPlannerClaim !== undefined ? this.cleaningPlannerClaim : <any>null;
        data["cleaningCalendarClaim"] = this.cleaningCalendarClaim !== undefined ? this.cleaningCalendarClaim : <any>null;
        data["reservationCalendarClaim"] = this.reservationCalendarClaim !== undefined ? this.reservationCalendarClaim : <any>null;
        data["lostAndFoundClaim"] = this.lostAndFoundClaim !== undefined ? this.lostAndFoundClaim : <any>null;
        data["onGuardClaim"] = this.onGuardClaim !== undefined ? this.onGuardClaim : <any>null;
        return data; 
    }
}

export interface IUpdateRoleCommand {
    id?: string | null;
    name?: string | null;
    hotelAccessTypeKey?: string | null;
    roomsClaim: boolean;
    assetsClaim: boolean;
    usersClaim: boolean;
    roleManagementClaim: boolean;
    roomCategoriesClaim: boolean;
    hotelSettingClaim: boolean;
    roomInsightsClaim: boolean;
    userInsightsClaim: boolean;
    tasksClaim: boolean;
    reservationClaim: boolean;
    cleaningPlannerClaim: boolean;
    cleaningCalendarClaim: boolean;
    reservationCalendarClaim: boolean;
    lostAndFoundClaim: boolean;
    onGuardClaim: boolean;
}

export class PageOfOfRoomCategoryGridItemViewModel implements IPageOfOfRoomCategoryGridItemViewModel {
    items?: RoomCategoryGridItemViewModel[] | null;
    totalNumberOfItems!: number;

    constructor(data?: IPageOfOfRoomCategoryGridItemViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RoomCategoryGridItemViewModel.fromJS(item));
            }
            this.totalNumberOfItems = _data["totalNumberOfItems"] !== undefined ? _data["totalNumberOfItems"] : <any>null;
        }
    }

    static fromJS(data: any): PageOfOfRoomCategoryGridItemViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfOfRoomCategoryGridItemViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalNumberOfItems"] = this.totalNumberOfItems !== undefined ? this.totalNumberOfItems : <any>null;
        return data; 
    }
}

export interface IPageOfOfRoomCategoryGridItemViewModel {
    items?: RoomCategoryGridItemViewModel[] | null;
    totalNumberOfItems: number;
}

export class RoomCategoryGridItemViewModel implements IRoomCategoryGridItemViewModel {
    id!: string;
    name?: string | null;
    isPrivate!: boolean;

    constructor(data?: IRoomCategoryGridItemViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isPrivate = _data["isPrivate"] !== undefined ? _data["isPrivate"] : <any>null;
        }
    }

    static fromJS(data: any): RoomCategoryGridItemViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomCategoryGridItemViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isPrivate"] = this.isPrivate !== undefined ? this.isPrivate : <any>null;
        return data; 
    }
}

export interface IRoomCategoryGridItemViewModel {
    id: string;
    name?: string | null;
    isPrivate: boolean;
}

export class GetPageOfRoomCategoriesQuery extends GetPageRequest implements IGetPageOfRoomCategoriesQuery {
    keywords?: string | null;
    sortKey?: string | null;

    constructor(data?: IGetPageOfRoomCategoriesQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.keywords = _data["keywords"] !== undefined ? _data["keywords"] : <any>null;
            this.sortKey = _data["sortKey"] !== undefined ? _data["sortKey"] : <any>null;
        }
    }

    static fromJS(data: any): GetPageOfRoomCategoriesQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetPageOfRoomCategoriesQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["keywords"] = this.keywords !== undefined ? this.keywords : <any>null;
        data["sortKey"] = this.sortKey !== undefined ? this.sortKey : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetPageOfRoomCategoriesQuery extends IGetPageRequest {
    keywords?: string | null;
    sortKey?: string | null;
}

export class RoomCategoryDetailsViewModel implements IRoomCategoryDetailsViewModel {
    id!: string;
    name?: string | null;
    isPrivate!: boolean;
    isDefaultForReservationSync!: boolean;
    isSystemDefaultForReservationSync!: boolean;

    constructor(data?: IRoomCategoryDetailsViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isPrivate = _data["isPrivate"] !== undefined ? _data["isPrivate"] : <any>null;
            this.isDefaultForReservationSync = _data["isDefaultForReservationSync"] !== undefined ? _data["isDefaultForReservationSync"] : <any>null;
            this.isSystemDefaultForReservationSync = _data["isSystemDefaultForReservationSync"] !== undefined ? _data["isSystemDefaultForReservationSync"] : <any>null;
        }
    }

    static fromJS(data: any): RoomCategoryDetailsViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomCategoryDetailsViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isPrivate"] = this.isPrivate !== undefined ? this.isPrivate : <any>null;
        data["isDefaultForReservationSync"] = this.isDefaultForReservationSync !== undefined ? this.isDefaultForReservationSync : <any>null;
        data["isSystemDefaultForReservationSync"] = this.isSystemDefaultForReservationSync !== undefined ? this.isSystemDefaultForReservationSync : <any>null;
        return data; 
    }
}

export interface IRoomCategoryDetailsViewModel {
    id: string;
    name?: string | null;
    isPrivate: boolean;
    isDefaultForReservationSync: boolean;
    isSystemDefaultForReservationSync: boolean;
}

export class GetRoomCategoryDetailsQuery implements IGetRoomCategoryDetailsQuery {
    id!: string;

    constructor(data?: IGetRoomCategoryDetailsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): GetRoomCategoryDetailsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoomCategoryDetailsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IGetRoomCategoryDetailsQuery {
    id: string;
}

export class InsertRoomCategoryCommand implements IInsertRoomCategoryCommand {
    name?: string | null;
    isPrivate!: boolean;
    isDefaultForReservationSync!: boolean;

    constructor(data?: IInsertRoomCategoryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isPrivate = _data["isPrivate"] !== undefined ? _data["isPrivate"] : <any>null;
            this.isDefaultForReservationSync = _data["isDefaultForReservationSync"] !== undefined ? _data["isDefaultForReservationSync"] : <any>null;
        }
    }

    static fromJS(data: any): InsertRoomCategoryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new InsertRoomCategoryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isPrivate"] = this.isPrivate !== undefined ? this.isPrivate : <any>null;
        data["isDefaultForReservationSync"] = this.isDefaultForReservationSync !== undefined ? this.isDefaultForReservationSync : <any>null;
        return data; 
    }
}

export interface IInsertRoomCategoryCommand {
    name?: string | null;
    isPrivate: boolean;
    isDefaultForReservationSync: boolean;
}

export class UpdateRoomCategoryCommand implements IUpdateRoomCategoryCommand {
    id!: string;
    name?: string | null;
    isPrivate!: boolean;
    isDefaultForReservationSync!: boolean;

    constructor(data?: IUpdateRoomCategoryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isPrivate = _data["isPrivate"] !== undefined ? _data["isPrivate"] : <any>null;
            this.isDefaultForReservationSync = _data["isDefaultForReservationSync"] !== undefined ? _data["isDefaultForReservationSync"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateRoomCategoryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRoomCategoryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isPrivate"] = this.isPrivate !== undefined ? this.isPrivate : <any>null;
        data["isDefaultForReservationSync"] = this.isDefaultForReservationSync !== undefined ? this.isDefaultForReservationSync : <any>null;
        return data; 
    }
}

export interface IUpdateRoomCategoryCommand {
    id: string;
    name?: string | null;
    isPrivate: boolean;
    isDefaultForReservationSync: boolean;
}

export class DeleteRoomCategoryCommand implements IDeleteRoomCategoryCommand {
    id!: string;

    constructor(data?: IDeleteRoomCategoryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteRoomCategoryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteRoomCategoryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IDeleteRoomCategoryCommand {
    id: string;
}

export class BuildingSimpleData implements IBuildingSimpleData {
    id!: string;
    typeKey?: string | null;

    constructor(data?: IBuildingSimpleData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
        }
    }

    static fromJS(data: any): BuildingSimpleData {
        data = typeof data === 'object' ? data : {};
        let result = new BuildingSimpleData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        return data; 
    }
}

export interface IBuildingSimpleData {
    id: string;
    typeKey?: string | null;
}

export class GetBuildingSimpleQuery implements IGetBuildingSimpleQuery {
    id!: string;

    constructor(data?: IGetBuildingSimpleQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): GetBuildingSimpleQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetBuildingSimpleQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IGetBuildingSimpleQuery {
    id: string;
}

export class RoomDetailsData implements IRoomDetailsData {
    id!: string;
    buildingId?: string | null;
    floorId?: string | null;
    externalId?: string | null;
    name?: string | null;
    typeKey?: string | null;
    ordinalNumber!: number;
    floorSectionName?: string | null;
    floorSubSectionName?: string | null;
    categoryId?: string | null;
    categoryName?: string | null;
    beds?: RoomDetailsBed[] | null;

    constructor(data?: IRoomDetailsData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.buildingId = _data["buildingId"] !== undefined ? _data["buildingId"] : <any>null;
            this.floorId = _data["floorId"] !== undefined ? _data["floorId"] : <any>null;
            this.externalId = _data["externalId"] !== undefined ? _data["externalId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            this.ordinalNumber = _data["ordinalNumber"] !== undefined ? _data["ordinalNumber"] : <any>null;
            this.floorSectionName = _data["floorSectionName"] !== undefined ? _data["floorSectionName"] : <any>null;
            this.floorSubSectionName = _data["floorSubSectionName"] !== undefined ? _data["floorSubSectionName"] : <any>null;
            this.categoryId = _data["categoryId"] !== undefined ? _data["categoryId"] : <any>null;
            this.categoryName = _data["categoryName"] !== undefined ? _data["categoryName"] : <any>null;
            if (Array.isArray(_data["beds"])) {
                this.beds = [] as any;
                for (let item of _data["beds"])
                    this.beds!.push(RoomDetailsBed.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomDetailsData {
        data = typeof data === 'object' ? data : {};
        let result = new RoomDetailsData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["buildingId"] = this.buildingId !== undefined ? this.buildingId : <any>null;
        data["floorId"] = this.floorId !== undefined ? this.floorId : <any>null;
        data["externalId"] = this.externalId !== undefined ? this.externalId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        data["ordinalNumber"] = this.ordinalNumber !== undefined ? this.ordinalNumber : <any>null;
        data["floorSectionName"] = this.floorSectionName !== undefined ? this.floorSectionName : <any>null;
        data["floorSubSectionName"] = this.floorSubSectionName !== undefined ? this.floorSubSectionName : <any>null;
        data["categoryId"] = this.categoryId !== undefined ? this.categoryId : <any>null;
        data["categoryName"] = this.categoryName !== undefined ? this.categoryName : <any>null;
        if (Array.isArray(this.beds)) {
            data["beds"] = [];
            for (let item of this.beds)
                data["beds"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRoomDetailsData {
    id: string;
    buildingId?: string | null;
    floorId?: string | null;
    externalId?: string | null;
    name?: string | null;
    typeKey?: string | null;
    ordinalNumber: number;
    floorSectionName?: string | null;
    floorSubSectionName?: string | null;
    categoryId?: string | null;
    categoryName?: string | null;
    beds?: RoomDetailsBed[] | null;
}

export class RoomDetailsBed implements IRoomDetailsBed {
    id!: string;
    name?: string | null;
    externalId?: string | null;

    constructor(data?: IRoomDetailsBed) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.externalId = _data["externalId"] !== undefined ? _data["externalId"] : <any>null;
        }
    }

    static fromJS(data: any): RoomDetailsBed {
        data = typeof data === 'object' ? data : {};
        let result = new RoomDetailsBed();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["externalId"] = this.externalId !== undefined ? this.externalId : <any>null;
        return data; 
    }
}

export interface IRoomDetailsBed {
    id: string;
    name?: string | null;
    externalId?: string | null;
}

export class GetRoomDetailsQuery implements IGetRoomDetailsQuery {
    id!: string;

    constructor(data?: IGetRoomDetailsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): GetRoomDetailsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoomDetailsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IGetRoomDetailsQuery {
    id: string;
}

export class RoomHistoryItem implements IRoomHistoryItem {
    id!: string;
    roomId!: string;
    bedId?: string | null;
    at!: moment.Moment;
    atDateString?: string | null;
    atTimeString?: string | null;
    userName?: string | null;
    description?: string | null;
    type!: RoomEventType;

    constructor(data?: IRoomHistoryItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.bedId = _data["bedId"] !== undefined ? _data["bedId"] : <any>null;
            this.at = _data["at"] ? moment(_data["at"].toString()) : <any>null;
            this.atDateString = _data["atDateString"] !== undefined ? _data["atDateString"] : <any>null;
            this.atTimeString = _data["atTimeString"] !== undefined ? _data["atTimeString"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
        }
    }

    static fromJS(data: any): RoomHistoryItem {
        data = typeof data === 'object' ? data : {};
        let result = new RoomHistoryItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["bedId"] = this.bedId !== undefined ? this.bedId : <any>null;
        data["at"] = this.at ? this.at.toISOString() : <any>null;
        data["atDateString"] = this.atDateString !== undefined ? this.atDateString : <any>null;
        data["atTimeString"] = this.atTimeString !== undefined ? this.atTimeString : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        return data; 
    }
}

export interface IRoomHistoryItem {
    id: string;
    roomId: string;
    bedId?: string | null;
    at: moment.Moment;
    atDateString?: string | null;
    atTimeString?: string | null;
    userName?: string | null;
    description?: string | null;
    type: RoomEventType;
}

export class GetRoomHistoryQuery implements IGetRoomHistoryQuery {
    roomId!: string;
    bedId?: string | null;

    constructor(data?: IGetRoomHistoryQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.bedId = _data["bedId"] !== undefined ? _data["bedId"] : <any>null;
        }
    }

    static fromJS(data: any): GetRoomHistoryQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoomHistoryQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["bedId"] = this.bedId !== undefined ? this.bedId : <any>null;
        return data; 
    }
}

export interface IGetRoomHistoryQuery {
    roomId: string;
    bedId?: string | null;
}

export class FullRoomHierarchyData implements IFullRoomHierarchyData {
    allAreas?: FullRoomHierarchyAreaData[] | null;
    buildings?: FullRoomHierarchyBuildingData[] | null;
    centralWarehouses?: HierarchyWarehouseData[] | null;

    constructor(data?: IFullRoomHierarchyData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["allAreas"])) {
                this.allAreas = [] as any;
                for (let item of _data["allAreas"])
                    this.allAreas!.push(FullRoomHierarchyAreaData.fromJS(item));
            }
            if (Array.isArray(_data["buildings"])) {
                this.buildings = [] as any;
                for (let item of _data["buildings"])
                    this.buildings!.push(FullRoomHierarchyBuildingData.fromJS(item));
            }
            if (Array.isArray(_data["centralWarehouses"])) {
                this.centralWarehouses = [] as any;
                for (let item of _data["centralWarehouses"])
                    this.centralWarehouses!.push(HierarchyWarehouseData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FullRoomHierarchyData {
        data = typeof data === 'object' ? data : {};
        let result = new FullRoomHierarchyData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.allAreas)) {
            data["allAreas"] = [];
            for (let item of this.allAreas)
                data["allAreas"].push(item.toJSON());
        }
        if (Array.isArray(this.buildings)) {
            data["buildings"] = [];
            for (let item of this.buildings)
                data["buildings"].push(item.toJSON());
        }
        if (Array.isArray(this.centralWarehouses)) {
            data["centralWarehouses"] = [];
            for (let item of this.centralWarehouses)
                data["centralWarehouses"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IFullRoomHierarchyData {
    allAreas?: FullRoomHierarchyAreaData[] | null;
    buildings?: FullRoomHierarchyBuildingData[] | null;
    centralWarehouses?: HierarchyWarehouseData[] | null;
}

export class FullRoomHierarchyAreaData implements IFullRoomHierarchyAreaData {
    id!: string;
    name?: string | null;
    createdAt!: moment.Moment;

    constructor(data?: IFullRoomHierarchyAreaData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): FullRoomHierarchyAreaData {
        data = typeof data === 'object' ? data : {};
        let result = new FullRoomHierarchyAreaData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        return data; 
    }
}

export interface IFullRoomHierarchyAreaData {
    id: string;
    name?: string | null;
    createdAt: moment.Moment;
}

export class FullRoomHierarchyBuildingData implements IFullRoomHierarchyBuildingData {
    id!: string;
    name?: string | null;
    areaId?: string | null;
    areaName?: string | null;
    address?: string | null;
    latitude?: number | null;
    longitude?: number | null;
    createdAt!: moment.Moment;
    ordinalNumber!: number;
    typeKey?: string | null;
    floors?: FullRoomHierarchyFloorData[] | null;

    constructor(data?: IFullRoomHierarchyBuildingData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.areaId = _data["areaId"] !== undefined ? _data["areaId"] : <any>null;
            this.areaName = _data["areaName"] !== undefined ? _data["areaName"] : <any>null;
            this.address = _data["address"] !== undefined ? _data["address"] : <any>null;
            this.latitude = _data["latitude"] !== undefined ? _data["latitude"] : <any>null;
            this.longitude = _data["longitude"] !== undefined ? _data["longitude"] : <any>null;
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>null;
            this.ordinalNumber = _data["ordinalNumber"] !== undefined ? _data["ordinalNumber"] : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            if (Array.isArray(_data["floors"])) {
                this.floors = [] as any;
                for (let item of _data["floors"])
                    this.floors!.push(FullRoomHierarchyFloorData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FullRoomHierarchyBuildingData {
        data = typeof data === 'object' ? data : {};
        let result = new FullRoomHierarchyBuildingData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["areaId"] = this.areaId !== undefined ? this.areaId : <any>null;
        data["areaName"] = this.areaName !== undefined ? this.areaName : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["latitude"] = this.latitude !== undefined ? this.latitude : <any>null;
        data["longitude"] = this.longitude !== undefined ? this.longitude : <any>null;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        data["ordinalNumber"] = this.ordinalNumber !== undefined ? this.ordinalNumber : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        if (Array.isArray(this.floors)) {
            data["floors"] = [];
            for (let item of this.floors)
                data["floors"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IFullRoomHierarchyBuildingData {
    id: string;
    name?: string | null;
    areaId?: string | null;
    areaName?: string | null;
    address?: string | null;
    latitude?: number | null;
    longitude?: number | null;
    createdAt: moment.Moment;
    ordinalNumber: number;
    typeKey?: string | null;
    floors?: FullRoomHierarchyFloorData[] | null;
}

export class FullRoomHierarchyFloorData implements IFullRoomHierarchyFloorData {
    id!: string;
    name?: string | null;
    number!: number;
    createdAt!: moment.Moment;
    ordinalNumber!: number;
    rooms?: FullRoomHierarchyRoomData[] | null;
    warehouses?: HierarchyWarehouseData[] | null;

    constructor(data?: IFullRoomHierarchyFloorData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.number = _data["number"] !== undefined ? _data["number"] : <any>null;
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>null;
            this.ordinalNumber = _data["ordinalNumber"] !== undefined ? _data["ordinalNumber"] : <any>null;
            if (Array.isArray(_data["rooms"])) {
                this.rooms = [] as any;
                for (let item of _data["rooms"])
                    this.rooms!.push(FullRoomHierarchyRoomData.fromJS(item));
            }
            if (Array.isArray(_data["warehouses"])) {
                this.warehouses = [] as any;
                for (let item of _data["warehouses"])
                    this.warehouses!.push(HierarchyWarehouseData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FullRoomHierarchyFloorData {
        data = typeof data === 'object' ? data : {};
        let result = new FullRoomHierarchyFloorData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["number"] = this.number !== undefined ? this.number : <any>null;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        data["ordinalNumber"] = this.ordinalNumber !== undefined ? this.ordinalNumber : <any>null;
        if (Array.isArray(this.rooms)) {
            data["rooms"] = [];
            for (let item of this.rooms)
                data["rooms"].push(item.toJSON());
        }
        if (Array.isArray(this.warehouses)) {
            data["warehouses"] = [];
            for (let item of this.warehouses)
                data["warehouses"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IFullRoomHierarchyFloorData {
    id: string;
    name?: string | null;
    number: number;
    createdAt: moment.Moment;
    ordinalNumber: number;
    rooms?: FullRoomHierarchyRoomData[] | null;
    warehouses?: HierarchyWarehouseData[] | null;
}

export class FullRoomHierarchyRoomData implements IFullRoomHierarchyRoomData {
    id!: string;
    externalId?: string | null;
    label?: string | null;
    name?: string | null;
    typeKey?: string | null;
    description?: string | null;
    createdAt!: moment.Moment;
    ordinalNumber!: number;
    floorSectionName?: string | null;
    floorSubSectionName?: string | null;
    categoryId?: string | null;
    categoryName?: string | null;
    beds?: FullRoomHierarchyBedData[] | null;

    constructor(data?: IFullRoomHierarchyRoomData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.externalId = _data["externalId"] !== undefined ? _data["externalId"] : <any>null;
            this.label = _data["label"] !== undefined ? _data["label"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>null;
            this.ordinalNumber = _data["ordinalNumber"] !== undefined ? _data["ordinalNumber"] : <any>null;
            this.floorSectionName = _data["floorSectionName"] !== undefined ? _data["floorSectionName"] : <any>null;
            this.floorSubSectionName = _data["floorSubSectionName"] !== undefined ? _data["floorSubSectionName"] : <any>null;
            this.categoryId = _data["categoryId"] !== undefined ? _data["categoryId"] : <any>null;
            this.categoryName = _data["categoryName"] !== undefined ? _data["categoryName"] : <any>null;
            if (Array.isArray(_data["beds"])) {
                this.beds = [] as any;
                for (let item of _data["beds"])
                    this.beds!.push(FullRoomHierarchyBedData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FullRoomHierarchyRoomData {
        data = typeof data === 'object' ? data : {};
        let result = new FullRoomHierarchyRoomData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["externalId"] = this.externalId !== undefined ? this.externalId : <any>null;
        data["label"] = this.label !== undefined ? this.label : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        data["ordinalNumber"] = this.ordinalNumber !== undefined ? this.ordinalNumber : <any>null;
        data["floorSectionName"] = this.floorSectionName !== undefined ? this.floorSectionName : <any>null;
        data["floorSubSectionName"] = this.floorSubSectionName !== undefined ? this.floorSubSectionName : <any>null;
        data["categoryId"] = this.categoryId !== undefined ? this.categoryId : <any>null;
        data["categoryName"] = this.categoryName !== undefined ? this.categoryName : <any>null;
        if (Array.isArray(this.beds)) {
            data["beds"] = [];
            for (let item of this.beds)
                data["beds"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IFullRoomHierarchyRoomData {
    id: string;
    externalId?: string | null;
    label?: string | null;
    name?: string | null;
    typeKey?: string | null;
    description?: string | null;
    createdAt: moment.Moment;
    ordinalNumber: number;
    floorSectionName?: string | null;
    floorSubSectionName?: string | null;
    categoryId?: string | null;
    categoryName?: string | null;
    beds?: FullRoomHierarchyBedData[] | null;
}

export class FullRoomHierarchyBedData implements IFullRoomHierarchyBedData {
    id!: string;
    externalId?: string | null;
    name?: string | null;

    constructor(data?: IFullRoomHierarchyBedData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.externalId = _data["externalId"] !== undefined ? _data["externalId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): FullRoomHierarchyBedData {
        data = typeof data === 'object' ? data : {};
        let result = new FullRoomHierarchyBedData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["externalId"] = this.externalId !== undefined ? this.externalId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data; 
    }
}

export interface IFullRoomHierarchyBedData {
    id: string;
    externalId?: string | null;
    name?: string | null;
}

export class HierarchyWarehouseData implements IHierarchyWarehouseData {
    id!: string;
    name?: string | null;
    isCentralWarehouse!: boolean;
    floorId?: string | null;
    hotelId?: string | null;

    constructor(data?: IHierarchyWarehouseData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isCentralWarehouse = _data["isCentralWarehouse"] !== undefined ? _data["isCentralWarehouse"] : <any>null;
            this.floorId = _data["floorId"] !== undefined ? _data["floorId"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): HierarchyWarehouseData {
        data = typeof data === 'object' ? data : {};
        let result = new HierarchyWarehouseData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isCentralWarehouse"] = this.isCentralWarehouse !== undefined ? this.isCentralWarehouse : <any>null;
        data["floorId"] = this.floorId !== undefined ? this.floorId : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IHierarchyWarehouseData {
    id: string;
    name?: string | null;
    isCentralWarehouse: boolean;
    floorId?: string | null;
    hotelId?: string | null;
}

export class GetFullRoomHierarchyQuery implements IGetFullRoomHierarchyQuery {
    hotelId?: string | null;
    keywords?: string | null;
    includeHotelWarehouses!: boolean;
    includeCentralWarehouses!: boolean;

    constructor(data?: IGetFullRoomHierarchyQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.keywords = _data["keywords"] !== undefined ? _data["keywords"] : <any>null;
            this.includeHotelWarehouses = _data["includeHotelWarehouses"] !== undefined ? _data["includeHotelWarehouses"] : <any>null;
            this.includeCentralWarehouses = _data["includeCentralWarehouses"] !== undefined ? _data["includeCentralWarehouses"] : <any>null;
        }
    }

    static fromJS(data: any): GetFullRoomHierarchyQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetFullRoomHierarchyQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["keywords"] = this.keywords !== undefined ? this.keywords : <any>null;
        data["includeHotelWarehouses"] = this.includeHotelWarehouses !== undefined ? this.includeHotelWarehouses : <any>null;
        data["includeCentralWarehouses"] = this.includeCentralWarehouses !== undefined ? this.includeCentralWarehouses : <any>null;
        return data; 
    }
}

export interface IGetFullRoomHierarchyQuery {
    hotelId?: string | null;
    keywords?: string | null;
    includeHotelWarehouses: boolean;
    includeCentralWarehouses: boolean;
}

export class ProcessResponseOfInsertBuildingResponse extends ProcessResponse implements IProcessResponseOfInsertBuildingResponse {
    data?: InsertBuildingResponse | null;

    constructor(data?: IProcessResponseOfInsertBuildingResponse) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? InsertBuildingResponse.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfInsertBuildingResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfInsertBuildingResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfInsertBuildingResponse extends IProcessResponse {
    data?: InsertBuildingResponse | null;
}

export class InsertBuildingResponse implements IInsertBuildingResponse {
    id!: string;
    wasAreaInserted!: boolean;
    area?: InsertBuildingAreaResponse | null;

    constructor(data?: IInsertBuildingResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.wasAreaInserted = _data["wasAreaInserted"] !== undefined ? _data["wasAreaInserted"] : <any>null;
            this.area = _data["area"] ? InsertBuildingAreaResponse.fromJS(_data["area"]) : <any>null;
        }
    }

    static fromJS(data: any): InsertBuildingResponse {
        data = typeof data === 'object' ? data : {};
        let result = new InsertBuildingResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["wasAreaInserted"] = this.wasAreaInserted !== undefined ? this.wasAreaInserted : <any>null;
        data["area"] = this.area ? this.area.toJSON() : <any>null;
        return data; 
    }
}

export interface IInsertBuildingResponse {
    id: string;
    wasAreaInserted: boolean;
    area?: InsertBuildingAreaResponse | null;
}

export class InsertBuildingAreaResponse implements IInsertBuildingAreaResponse {
    id!: string;
    name?: string | null;
    createdAt!: moment.Moment;

    constructor(data?: IInsertBuildingAreaResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): InsertBuildingAreaResponse {
        data = typeof data === 'object' ? data : {};
        let result = new InsertBuildingAreaResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        return data; 
    }
}

export interface IInsertBuildingAreaResponse {
    id: string;
    name?: string | null;
    createdAt: moment.Moment;
}

export class InsertBuildingCommand implements IInsertBuildingCommand {
    name?: string | null;
    address?: string | null;
    latitude?: number | null;
    longitude?: number | null;
    areaId?: string | null;
    areaName?: string | null;
    ordinalNumber!: number;
    typeKey?: string | null;
    hotelId?: string | null;

    constructor(data?: IInsertBuildingCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.address = _data["address"] !== undefined ? _data["address"] : <any>null;
            this.latitude = _data["latitude"] !== undefined ? _data["latitude"] : <any>null;
            this.longitude = _data["longitude"] !== undefined ? _data["longitude"] : <any>null;
            this.areaId = _data["areaId"] !== undefined ? _data["areaId"] : <any>null;
            this.areaName = _data["areaName"] !== undefined ? _data["areaName"] : <any>null;
            this.ordinalNumber = _data["ordinalNumber"] !== undefined ? _data["ordinalNumber"] : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): InsertBuildingCommand {
        data = typeof data === 'object' ? data : {};
        let result = new InsertBuildingCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["latitude"] = this.latitude !== undefined ? this.latitude : <any>null;
        data["longitude"] = this.longitude !== undefined ? this.longitude : <any>null;
        data["areaId"] = this.areaId !== undefined ? this.areaId : <any>null;
        data["areaName"] = this.areaName !== undefined ? this.areaName : <any>null;
        data["ordinalNumber"] = this.ordinalNumber !== undefined ? this.ordinalNumber : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IInsertBuildingCommand {
    name?: string | null;
    address?: string | null;
    latitude?: number | null;
    longitude?: number | null;
    areaId?: string | null;
    areaName?: string | null;
    ordinalNumber: number;
    typeKey?: string | null;
    hotelId?: string | null;
}

export class ProcessResponseOfUpdateBuildingResponse extends ProcessResponse implements IProcessResponseOfUpdateBuildingResponse {
    data?: UpdateBuildingResponse | null;

    constructor(data?: IProcessResponseOfUpdateBuildingResponse) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? UpdateBuildingResponse.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfUpdateBuildingResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfUpdateBuildingResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfUpdateBuildingResponse extends IProcessResponse {
    data?: UpdateBuildingResponse | null;
}

export class UpdateBuildingResponse implements IUpdateBuildingResponse {
    wasAreaInserted!: boolean;
    area?: UpdateBuildingAreaResponse | null;

    constructor(data?: IUpdateBuildingResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.wasAreaInserted = _data["wasAreaInserted"] !== undefined ? _data["wasAreaInserted"] : <any>null;
            this.area = _data["area"] ? UpdateBuildingAreaResponse.fromJS(_data["area"]) : <any>null;
        }
    }

    static fromJS(data: any): UpdateBuildingResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBuildingResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["wasAreaInserted"] = this.wasAreaInserted !== undefined ? this.wasAreaInserted : <any>null;
        data["area"] = this.area ? this.area.toJSON() : <any>null;
        return data; 
    }
}

export interface IUpdateBuildingResponse {
    wasAreaInserted: boolean;
    area?: UpdateBuildingAreaResponse | null;
}

export class UpdateBuildingAreaResponse implements IUpdateBuildingAreaResponse {
    id!: string;
    name?: string | null;
    createdAt!: moment.Moment;

    constructor(data?: IUpdateBuildingAreaResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): UpdateBuildingAreaResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBuildingAreaResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        return data; 
    }
}

export interface IUpdateBuildingAreaResponse {
    id: string;
    name?: string | null;
    createdAt: moment.Moment;
}

export class UpdateBuildingCommand implements IUpdateBuildingCommand {
    id!: string;
    name?: string | null;
    address?: string | null;
    latitude?: number | null;
    longitude?: number | null;
    areaId?: string | null;
    areaName?: string | null;
    ordinalNumber!: number;
    typeKey?: string | null;
    hotelId?: string | null;

    constructor(data?: IUpdateBuildingCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.address = _data["address"] !== undefined ? _data["address"] : <any>null;
            this.latitude = _data["latitude"] !== undefined ? _data["latitude"] : <any>null;
            this.longitude = _data["longitude"] !== undefined ? _data["longitude"] : <any>null;
            this.areaId = _data["areaId"] !== undefined ? _data["areaId"] : <any>null;
            this.areaName = _data["areaName"] !== undefined ? _data["areaName"] : <any>null;
            this.ordinalNumber = _data["ordinalNumber"] !== undefined ? _data["ordinalNumber"] : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateBuildingCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBuildingCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["latitude"] = this.latitude !== undefined ? this.latitude : <any>null;
        data["longitude"] = this.longitude !== undefined ? this.longitude : <any>null;
        data["areaId"] = this.areaId !== undefined ? this.areaId : <any>null;
        data["areaName"] = this.areaName !== undefined ? this.areaName : <any>null;
        data["ordinalNumber"] = this.ordinalNumber !== undefined ? this.ordinalNumber : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IUpdateBuildingCommand {
    id: string;
    name?: string | null;
    address?: string | null;
    latitude?: number | null;
    longitude?: number | null;
    areaId?: string | null;
    areaName?: string | null;
    ordinalNumber: number;
    typeKey?: string | null;
    hotelId?: string | null;
}

export class DeleteBuildingCommand implements IDeleteBuildingCommand {
    id!: string;

    constructor(data?: IDeleteBuildingCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteBuildingCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteBuildingCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IDeleteBuildingCommand {
    id: string;
}

export class ProcessResponseOfInsertFloorResponse extends ProcessResponse implements IProcessResponseOfInsertFloorResponse {
    data?: InsertFloorResponse | null;

    constructor(data?: IProcessResponseOfInsertFloorResponse) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? InsertFloorResponse.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfInsertFloorResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfInsertFloorResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfInsertFloorResponse extends IProcessResponse {
    data?: InsertFloorResponse | null;
}

export class InsertFloorResponse implements IInsertFloorResponse {
    id!: string;

    constructor(data?: IInsertFloorResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): InsertFloorResponse {
        data = typeof data === 'object' ? data : {};
        let result = new InsertFloorResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IInsertFloorResponse {
    id: string;
}

export class InsertFloorCommand implements IInsertFloorCommand {
    name?: string | null;
    number!: number;
    ordinalNumber!: number;
    buildingId!: string;
    hotelId?: string | null;

    constructor(data?: IInsertFloorCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.number = _data["number"] !== undefined ? _data["number"] : <any>null;
            this.ordinalNumber = _data["ordinalNumber"] !== undefined ? _data["ordinalNumber"] : <any>null;
            this.buildingId = _data["buildingId"] !== undefined ? _data["buildingId"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): InsertFloorCommand {
        data = typeof data === 'object' ? data : {};
        let result = new InsertFloorCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["number"] = this.number !== undefined ? this.number : <any>null;
        data["ordinalNumber"] = this.ordinalNumber !== undefined ? this.ordinalNumber : <any>null;
        data["buildingId"] = this.buildingId !== undefined ? this.buildingId : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IInsertFloorCommand {
    name?: string | null;
    number: number;
    ordinalNumber: number;
    buildingId: string;
    hotelId?: string | null;
}

export class ProcessResponseOfUpdateFloorResponse extends ProcessResponse implements IProcessResponseOfUpdateFloorResponse {
    data?: UpdateFloorResponse | null;

    constructor(data?: IProcessResponseOfUpdateFloorResponse) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? UpdateFloorResponse.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfUpdateFloorResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfUpdateFloorResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfUpdateFloorResponse extends IProcessResponse {
    data?: UpdateFloorResponse | null;
}

export class UpdateFloorResponse implements IUpdateFloorResponse {

    constructor(data?: IUpdateFloorResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): UpdateFloorResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateFloorResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IUpdateFloorResponse {
}

export class UpdateFloorCommand implements IUpdateFloorCommand {
    id!: string;
    name?: string | null;
    number!: number;
    ordinalNumber!: number;
    buildingId!: string;
    hotelId?: string | null;

    constructor(data?: IUpdateFloorCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.number = _data["number"] !== undefined ? _data["number"] : <any>null;
            this.ordinalNumber = _data["ordinalNumber"] !== undefined ? _data["ordinalNumber"] : <any>null;
            this.buildingId = _data["buildingId"] !== undefined ? _data["buildingId"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateFloorCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateFloorCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["number"] = this.number !== undefined ? this.number : <any>null;
        data["ordinalNumber"] = this.ordinalNumber !== undefined ? this.ordinalNumber : <any>null;
        data["buildingId"] = this.buildingId !== undefined ? this.buildingId : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IUpdateFloorCommand {
    id: string;
    name?: string | null;
    number: number;
    ordinalNumber: number;
    buildingId: string;
    hotelId?: string | null;
}

export class DeleteFloorCommand implements IDeleteFloorCommand {
    id!: string;

    constructor(data?: IDeleteFloorCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteFloorCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteFloorCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IDeleteFloorCommand {
    id: string;
}

export class ProcessResponseOfInsertRoomResponse extends ProcessResponse implements IProcessResponseOfInsertRoomResponse {
    data?: InsertRoomResponse | null;

    constructor(data?: IProcessResponseOfInsertRoomResponse) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? InsertRoomResponse.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfInsertRoomResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfInsertRoomResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfInsertRoomResponse extends IProcessResponse {
    data?: InsertRoomResponse | null;
}

export class InsertRoomResponse implements IInsertRoomResponse {
    id!: string;
    ordinalNumber!: number;

    constructor(data?: IInsertRoomResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.ordinalNumber = _data["ordinalNumber"] !== undefined ? _data["ordinalNumber"] : <any>null;
        }
    }

    static fromJS(data: any): InsertRoomResponse {
        data = typeof data === 'object' ? data : {};
        let result = new InsertRoomResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["ordinalNumber"] = this.ordinalNumber !== undefined ? this.ordinalNumber : <any>null;
        return data; 
    }
}

export interface IInsertRoomResponse {
    id: string;
    ordinalNumber: number;
}

export class InsertRoomCommand implements IInsertRoomCommand {
    buildingId!: string;
    floorId!: string;
    name?: string | null;
    typeKey?: string | null;
    hotelId?: string | null;
    floorSectionName?: string | null;
    floorSubSectionName?: string | null;
    categoryId!: string;
    beds?: SaveRoomBed[] | null;

    constructor(data?: IInsertRoomCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.buildingId = _data["buildingId"] !== undefined ? _data["buildingId"] : <any>null;
            this.floorId = _data["floorId"] !== undefined ? _data["floorId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.floorSectionName = _data["floorSectionName"] !== undefined ? _data["floorSectionName"] : <any>null;
            this.floorSubSectionName = _data["floorSubSectionName"] !== undefined ? _data["floorSubSectionName"] : <any>null;
            this.categoryId = _data["categoryId"] !== undefined ? _data["categoryId"] : <any>null;
            if (Array.isArray(_data["beds"])) {
                this.beds = [] as any;
                for (let item of _data["beds"])
                    this.beds!.push(SaveRoomBed.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InsertRoomCommand {
        data = typeof data === 'object' ? data : {};
        let result = new InsertRoomCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["buildingId"] = this.buildingId !== undefined ? this.buildingId : <any>null;
        data["floorId"] = this.floorId !== undefined ? this.floorId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["floorSectionName"] = this.floorSectionName !== undefined ? this.floorSectionName : <any>null;
        data["floorSubSectionName"] = this.floorSubSectionName !== undefined ? this.floorSubSectionName : <any>null;
        data["categoryId"] = this.categoryId !== undefined ? this.categoryId : <any>null;
        if (Array.isArray(this.beds)) {
            data["beds"] = [];
            for (let item of this.beds)
                data["beds"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IInsertRoomCommand {
    buildingId: string;
    floorId: string;
    name?: string | null;
    typeKey?: string | null;
    hotelId?: string | null;
    floorSectionName?: string | null;
    floorSubSectionName?: string | null;
    categoryId: string;
    beds?: SaveRoomBed[] | null;
}

export class SaveRoomBed implements ISaveRoomBed {
    id?: string | null;
    name?: string | null;

    constructor(data?: ISaveRoomBed) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): SaveRoomBed {
        data = typeof data === 'object' ? data : {};
        let result = new SaveRoomBed();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data; 
    }
}

export interface ISaveRoomBed {
    id?: string | null;
    name?: string | null;
}

export class ProcessResponseOfUpdateRoomResponse extends ProcessResponse implements IProcessResponseOfUpdateRoomResponse {
    data?: UpdateRoomResponse | null;

    constructor(data?: IProcessResponseOfUpdateRoomResponse) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? UpdateRoomResponse.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfUpdateRoomResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfUpdateRoomResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfUpdateRoomResponse extends IProcessResponse {
    data?: UpdateRoomResponse | null;
}

export class UpdateRoomResponse implements IUpdateRoomResponse {

    constructor(data?: IUpdateRoomResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): UpdateRoomResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRoomResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IUpdateRoomResponse {
}

export class UpdateRoomCommand implements IUpdateRoomCommand {
    id!: string;
    buildingId!: string;
    floorId!: string;
    name?: string | null;
    typeKey?: string | null;
    hotelId?: string | null;
    floorSectionName?: string | null;
    floorSubSectionName?: string | null;
    categoryId!: string;
    beds?: SaveRoomBed[] | null;

    constructor(data?: IUpdateRoomCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.buildingId = _data["buildingId"] !== undefined ? _data["buildingId"] : <any>null;
            this.floorId = _data["floorId"] !== undefined ? _data["floorId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.floorSectionName = _data["floorSectionName"] !== undefined ? _data["floorSectionName"] : <any>null;
            this.floorSubSectionName = _data["floorSubSectionName"] !== undefined ? _data["floorSubSectionName"] : <any>null;
            this.categoryId = _data["categoryId"] !== undefined ? _data["categoryId"] : <any>null;
            if (Array.isArray(_data["beds"])) {
                this.beds = [] as any;
                for (let item of _data["beds"])
                    this.beds!.push(SaveRoomBed.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateRoomCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRoomCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["buildingId"] = this.buildingId !== undefined ? this.buildingId : <any>null;
        data["floorId"] = this.floorId !== undefined ? this.floorId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["floorSectionName"] = this.floorSectionName !== undefined ? this.floorSectionName : <any>null;
        data["floorSubSectionName"] = this.floorSubSectionName !== undefined ? this.floorSubSectionName : <any>null;
        data["categoryId"] = this.categoryId !== undefined ? this.categoryId : <any>null;
        if (Array.isArray(this.beds)) {
            data["beds"] = [];
            for (let item of this.beds)
                data["beds"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUpdateRoomCommand {
    id: string;
    buildingId: string;
    floorId: string;
    name?: string | null;
    typeKey?: string | null;
    hotelId?: string | null;
    floorSectionName?: string | null;
    floorSubSectionName?: string | null;
    categoryId: string;
    beds?: SaveRoomBed[] | null;
}

export class DeleteRoomCommand implements IDeleteRoomCommand {
    id!: string;

    constructor(data?: IDeleteRoomCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteRoomCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteRoomCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IDeleteRoomCommand {
    id: string;
}

export class PageOfOfUnassignedRoomData implements IPageOfOfUnassignedRoomData {
    items?: UnassignedRoomData[] | null;
    totalNumberOfItems!: number;

    constructor(data?: IPageOfOfUnassignedRoomData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(UnassignedRoomData.fromJS(item));
            }
            this.totalNumberOfItems = _data["totalNumberOfItems"] !== undefined ? _data["totalNumberOfItems"] : <any>null;
        }
    }

    static fromJS(data: any): PageOfOfUnassignedRoomData {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfOfUnassignedRoomData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalNumberOfItems"] = this.totalNumberOfItems !== undefined ? this.totalNumberOfItems : <any>null;
        return data; 
    }
}

export interface IPageOfOfUnassignedRoomData {
    items?: UnassignedRoomData[] | null;
    totalNumberOfItems: number;
}

export class UnassignedRoomData implements IUnassignedRoomData {
    id!: string;
    externalId?: string | null;
    name?: string | null;
    typeKey?: string | null;
    beds?: FullRoomHierarchyBedData[] | null;

    constructor(data?: IUnassignedRoomData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.externalId = _data["externalId"] !== undefined ? _data["externalId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            if (Array.isArray(_data["beds"])) {
                this.beds = [] as any;
                for (let item of _data["beds"])
                    this.beds!.push(FullRoomHierarchyBedData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UnassignedRoomData {
        data = typeof data === 'object' ? data : {};
        let result = new UnassignedRoomData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["externalId"] = this.externalId !== undefined ? this.externalId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        if (Array.isArray(this.beds)) {
            data["beds"] = [];
            for (let item of this.beds)
                data["beds"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUnassignedRoomData {
    id: string;
    externalId?: string | null;
    name?: string | null;
    typeKey?: string | null;
    beds?: FullRoomHierarchyBedData[] | null;
}

export class GetUnassignedRoomsQuery extends GetPageRequest implements IGetUnassignedRoomsQuery {
    hotelId?: string | null;
    sortKey?: string | null;

    constructor(data?: IGetUnassignedRoomsQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.sortKey = _data["sortKey"] !== undefined ? _data["sortKey"] : <any>null;
        }
    }

    static fromJS(data: any): GetUnassignedRoomsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetUnassignedRoomsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["sortKey"] = this.sortKey !== undefined ? this.sortKey : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetUnassignedRoomsQuery extends IGetPageRequest {
    hotelId?: string | null;
    sortKey?: string | null;
}

export class ProcessResponseOfRoomAssignmentResultOf extends ProcessResponse implements IProcessResponseOfRoomAssignmentResultOf {
    data?: RoomAssignmentResult[] | null;

    constructor(data?: IProcessResponseOfRoomAssignmentResultOf) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomAssignmentResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProcessResponseOfRoomAssignmentResultOf {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfRoomAssignmentResultOf();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfRoomAssignmentResultOf extends IProcessResponse {
    data?: RoomAssignmentResult[] | null;
}

export class RoomAssignmentResult implements IRoomAssignmentResult {
    roomId!: string;
    isSuccess!: boolean;
    message?: string | null;

    constructor(data?: IRoomAssignmentResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.isSuccess = _data["isSuccess"] !== undefined ? _data["isSuccess"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
        }
    }

    static fromJS(data: any): RoomAssignmentResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomAssignmentResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["isSuccess"] = this.isSuccess !== undefined ? this.isSuccess : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        return data; 
    }
}

export interface IRoomAssignmentResult {
    roomId: string;
    isSuccess: boolean;
    message?: string | null;
}

export class AssignRoomsToFloorCommand implements IAssignRoomsToFloorCommand {
    floorId!: string;
    buildingId!: string;
    categoryId!: string;
    roomIds?: string[] | null;
    roomTypeKey?: string | null;

    constructor(data?: IAssignRoomsToFloorCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.floorId = _data["floorId"] !== undefined ? _data["floorId"] : <any>null;
            this.buildingId = _data["buildingId"] !== undefined ? _data["buildingId"] : <any>null;
            this.categoryId = _data["categoryId"] !== undefined ? _data["categoryId"] : <any>null;
            if (Array.isArray(_data["roomIds"])) {
                this.roomIds = [] as any;
                for (let item of _data["roomIds"])
                    this.roomIds!.push(item);
            }
            this.roomTypeKey = _data["roomTypeKey"] !== undefined ? _data["roomTypeKey"] : <any>null;
        }
    }

    static fromJS(data: any): AssignRoomsToFloorCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AssignRoomsToFloorCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["floorId"] = this.floorId !== undefined ? this.floorId : <any>null;
        data["buildingId"] = this.buildingId !== undefined ? this.buildingId : <any>null;
        data["categoryId"] = this.categoryId !== undefined ? this.categoryId : <any>null;
        if (Array.isArray(this.roomIds)) {
            data["roomIds"] = [];
            for (let item of this.roomIds)
                data["roomIds"].push(item);
        }
        data["roomTypeKey"] = this.roomTypeKey !== undefined ? this.roomTypeKey : <any>null;
        return data; 
    }
}

export interface IAssignRoomsToFloorCommand {
    floorId: string;
    buildingId: string;
    categoryId: string;
    roomIds?: string[] | null;
    roomTypeKey?: string | null;
}

export class UpdateIsGuestCurrentlyInCommand implements IUpdateIsGuestCurrentlyInCommand {
    roomId?: string | null;
    bedId?: string | null;
    isGuestCurrentlyIn!: boolean;

    constructor(data?: IUpdateIsGuestCurrentlyInCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.bedId = _data["bedId"] !== undefined ? _data["bedId"] : <any>null;
            this.isGuestCurrentlyIn = _data["isGuestCurrentlyIn"] !== undefined ? _data["isGuestCurrentlyIn"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateIsGuestCurrentlyInCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateIsGuestCurrentlyInCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["bedId"] = this.bedId !== undefined ? this.bedId : <any>null;
        data["isGuestCurrentlyIn"] = this.isGuestCurrentlyIn !== undefined ? this.isGuestCurrentlyIn : <any>null;
        return data; 
    }
}

export interface IUpdateIsGuestCurrentlyInCommand {
    roomId?: string | null;
    bedId?: string | null;
    isGuestCurrentlyIn: boolean;
}

export class UpdateIsCleaningPriorityCommand implements IUpdateIsCleaningPriorityCommand {
    roomId?: string | null;
    bedId?: string | null;
    isPriority!: boolean;

    constructor(data?: IUpdateIsCleaningPriorityCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.bedId = _data["bedId"] !== undefined ? _data["bedId"] : <any>null;
            this.isPriority = _data["isPriority"] !== undefined ? _data["isPriority"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateIsCleaningPriorityCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateIsCleaningPriorityCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["bedId"] = this.bedId !== undefined ? this.bedId : <any>null;
        data["isPriority"] = this.isPriority !== undefined ? this.isPriority : <any>null;
        return data; 
    }
}

export interface IUpdateIsCleaningPriorityCommand {
    roomId?: string | null;
    bedId?: string | null;
    isPriority: boolean;
}

export class PageOfOfRoomMessageListItem implements IPageOfOfRoomMessageListItem {
    items?: RoomMessageListItem[] | null;
    totalNumberOfItems!: number;

    constructor(data?: IPageOfOfRoomMessageListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RoomMessageListItem.fromJS(item));
            }
            this.totalNumberOfItems = _data["totalNumberOfItems"] !== undefined ? _data["totalNumberOfItems"] : <any>null;
        }
    }

    static fromJS(data: any): PageOfOfRoomMessageListItem {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfOfRoomMessageListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalNumberOfItems"] = this.totalNumberOfItems !== undefined ? this.totalNumberOfItems : <any>null;
        return data; 
    }
}

export interface IPageOfOfRoomMessageListItem {
    items?: RoomMessageListItem[] | null;
    totalNumberOfItems: number;
}

export class RoomMessageListItem implements IRoomMessageListItem {
    id!: string;
    message?: string | null;
    description?: string | null;
    createdByName?: string | null;
    createdAtString?: string | null;

    constructor(data?: IRoomMessageListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.createdByName = _data["createdByName"] !== undefined ? _data["createdByName"] : <any>null;
            this.createdAtString = _data["createdAtString"] !== undefined ? _data["createdAtString"] : <any>null;
        }
    }

    static fromJS(data: any): RoomMessageListItem {
        data = typeof data === 'object' ? data : {};
        let result = new RoomMessageListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["createdByName"] = this.createdByName !== undefined ? this.createdByName : <any>null;
        data["createdAtString"] = this.createdAtString !== undefined ? this.createdAtString : <any>null;
        return data; 
    }
}

export interface IRoomMessageListItem {
    id: string;
    message?: string | null;
    description?: string | null;
    createdByName?: string | null;
    createdAtString?: string | null;
}

export class GetPageOfRoomMessagesQuery extends GetPageRequest implements IGetPageOfRoomMessagesQuery {
    isToday!: boolean;
    dateString?: string | null;
    hotelId?: string | null;
    roomId!: string;
    roomBedId?: string | null;

    constructor(data?: IGetPageOfRoomMessagesQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.isToday = _data["isToday"] !== undefined ? _data["isToday"] : <any>null;
            this.dateString = _data["dateString"] !== undefined ? _data["dateString"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.roomBedId = _data["roomBedId"] !== undefined ? _data["roomBedId"] : <any>null;
        }
    }

    static fromJS(data: any): GetPageOfRoomMessagesQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetPageOfRoomMessagesQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isToday"] = this.isToday !== undefined ? this.isToday : <any>null;
        data["dateString"] = this.dateString !== undefined ? this.dateString : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["roomBedId"] = this.roomBedId !== undefined ? this.roomBedId : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetPageOfRoomMessagesQuery extends IGetPageRequest {
    isToday: boolean;
    dateString?: string | null;
    hotelId?: string | null;
    roomId: string;
    roomBedId?: string | null;
}

export class RoomMessageFilterValues implements IRoomMessageFilterValues {
    todayFilterValues?: RoomMessageFilterGroup[] | null;
    placesFilterValues?: RoomMessageFilterGroup[] | null;
    reservationsFilterValues?: RoomMessageFilterGroup[] | null;

    constructor(data?: IRoomMessageFilterValues) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["todayFilterValues"])) {
                this.todayFilterValues = [] as any;
                for (let item of _data["todayFilterValues"])
                    this.todayFilterValues!.push(RoomMessageFilterGroup.fromJS(item));
            }
            if (Array.isArray(_data["placesFilterValues"])) {
                this.placesFilterValues = [] as any;
                for (let item of _data["placesFilterValues"])
                    this.placesFilterValues!.push(RoomMessageFilterGroup.fromJS(item));
            }
            if (Array.isArray(_data["reservationsFilterValues"])) {
                this.reservationsFilterValues = [] as any;
                for (let item of _data["reservationsFilterValues"])
                    this.reservationsFilterValues!.push(RoomMessageFilterGroup.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomMessageFilterValues {
        data = typeof data === 'object' ? data : {};
        let result = new RoomMessageFilterValues();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.todayFilterValues)) {
            data["todayFilterValues"] = [];
            for (let item of this.todayFilterValues)
                data["todayFilterValues"].push(item.toJSON());
        }
        if (Array.isArray(this.placesFilterValues)) {
            data["placesFilterValues"] = [];
            for (let item of this.placesFilterValues)
                data["placesFilterValues"].push(item.toJSON());
        }
        if (Array.isArray(this.reservationsFilterValues)) {
            data["reservationsFilterValues"] = [];
            for (let item of this.reservationsFilterValues)
                data["reservationsFilterValues"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRoomMessageFilterValues {
    todayFilterValues?: RoomMessageFilterGroup[] | null;
    placesFilterValues?: RoomMessageFilterGroup[] | null;
    reservationsFilterValues?: RoomMessageFilterGroup[] | null;
}

export class RoomMessageFilterGroup implements IRoomMessageFilterGroup {
    referenceType!: RoomMessageFilterReferenceType;
    name?: string | null;
    items?: RoomMessageFilterGroupItem[] | null;

    constructor(data?: IRoomMessageFilterGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.referenceType = _data["referenceType"] !== undefined ? _data["referenceType"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RoomMessageFilterGroupItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomMessageFilterGroup {
        data = typeof data === 'object' ? data : {};
        let result = new RoomMessageFilterGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["referenceType"] = this.referenceType !== undefined ? this.referenceType : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRoomMessageFilterGroup {
    referenceType: RoomMessageFilterReferenceType;
    name?: string | null;
    items?: RoomMessageFilterGroupItem[] | null;
}

export enum RoomMessageFilterReferenceType {
    OTHERS = 0,
    GUEST_STATUSES = 1,
    CLENLINESS = 2,
    HOUSEKEEPING_STATUSES = 3,
    PMS = 4,
    RESERVATIONS = 5,
    ROOM_CATEGORIES = 6,
    BUILDINGS = 7,
    FLOORS = 8,
    ROOMS = 9,
    FLOOR_SECTIONS = 10,
    FLOOR_SUB_SECTIONS = 11,
}

export class RoomMessageFilterGroupItem implements IRoomMessageFilterGroupItem {
    id?: string | null;
    name?: string | null;
    description?: string | null;

    constructor(data?: IRoomMessageFilterGroupItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): RoomMessageFilterGroupItem {
        data = typeof data === 'object' ? data : {};
        let result = new RoomMessageFilterGroupItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data; 
    }
}

export interface IRoomMessageFilterGroupItem {
    id?: string | null;
    name?: string | null;
    description?: string | null;
}

export class GetRoomMessagesFilterValuesQuery implements IGetRoomMessagesFilterValuesQuery {
    hotelId?: string | null;

    constructor(data?: IGetRoomMessagesFilterValuesQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): GetRoomMessagesFilterValuesQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoomMessagesFilterValuesQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IGetRoomMessagesFilterValuesQuery {
    hotelId?: string | null;
}

export class RoomMessageDetails implements IRoomMessageDetails {
    id!: string;
    message?: string | null;
    isDeleted!: boolean;
    type!: RoomMessageType;
    forType!: RoomMessageForType;
    dateType!: RoomMessageDateType;
    intervalStartDate?: moment.Moment | null;
    intervalEndDate?: moment.Moment | null;
    intervalNumberOfDays?: number | null;
    reservationOnArrivalDate?: boolean | null;
    reservationOnDepartureDate?: boolean | null;
    reservationOnStayDates?: boolean | null;
    roomMessageFilters?: RoomMessageDetailsFilter[] | null;
    dates?: moment.Moment[] | null;

    constructor(data?: IRoomMessageDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.isDeleted = _data["isDeleted"] !== undefined ? _data["isDeleted"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.forType = _data["forType"] !== undefined ? _data["forType"] : <any>null;
            this.dateType = _data["dateType"] !== undefined ? _data["dateType"] : <any>null;
            this.intervalStartDate = _data["intervalStartDate"] ? moment(_data["intervalStartDate"].toString()) : <any>null;
            this.intervalEndDate = _data["intervalEndDate"] ? moment(_data["intervalEndDate"].toString()) : <any>null;
            this.intervalNumberOfDays = _data["intervalNumberOfDays"] !== undefined ? _data["intervalNumberOfDays"] : <any>null;
            this.reservationOnArrivalDate = _data["reservationOnArrivalDate"] !== undefined ? _data["reservationOnArrivalDate"] : <any>null;
            this.reservationOnDepartureDate = _data["reservationOnDepartureDate"] !== undefined ? _data["reservationOnDepartureDate"] : <any>null;
            this.reservationOnStayDates = _data["reservationOnStayDates"] !== undefined ? _data["reservationOnStayDates"] : <any>null;
            if (Array.isArray(_data["roomMessageFilters"])) {
                this.roomMessageFilters = [] as any;
                for (let item of _data["roomMessageFilters"])
                    this.roomMessageFilters!.push(RoomMessageDetailsFilter.fromJS(item));
            }
            if (Array.isArray(_data["dates"])) {
                this.dates = [] as any;
                for (let item of _data["dates"])
                    this.dates!.push(moment(item));
            }
        }
    }

    static fromJS(data: any): RoomMessageDetails {
        data = typeof data === 'object' ? data : {};
        let result = new RoomMessageDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["forType"] = this.forType !== undefined ? this.forType : <any>null;
        data["dateType"] = this.dateType !== undefined ? this.dateType : <any>null;
        data["intervalStartDate"] = this.intervalStartDate ? this.intervalStartDate.toISOString() : <any>null;
        data["intervalEndDate"] = this.intervalEndDate ? this.intervalEndDate.toISOString() : <any>null;
        data["intervalNumberOfDays"] = this.intervalNumberOfDays !== undefined ? this.intervalNumberOfDays : <any>null;
        data["reservationOnArrivalDate"] = this.reservationOnArrivalDate !== undefined ? this.reservationOnArrivalDate : <any>null;
        data["reservationOnDepartureDate"] = this.reservationOnDepartureDate !== undefined ? this.reservationOnDepartureDate : <any>null;
        data["reservationOnStayDates"] = this.reservationOnStayDates !== undefined ? this.reservationOnStayDates : <any>null;
        if (Array.isArray(this.roomMessageFilters)) {
            data["roomMessageFilters"] = [];
            for (let item of this.roomMessageFilters)
                data["roomMessageFilters"].push(item.toJSON());
        }
        if (Array.isArray(this.dates)) {
            data["dates"] = [];
            for (let item of this.dates)
                data["dates"].push(item.toISOString());
        }
        return data; 
    }
}

export interface IRoomMessageDetails {
    id: string;
    message?: string | null;
    isDeleted: boolean;
    type: RoomMessageType;
    forType: RoomMessageForType;
    dateType: RoomMessageDateType;
    intervalStartDate?: moment.Moment | null;
    intervalEndDate?: moment.Moment | null;
    intervalNumberOfDays?: number | null;
    reservationOnArrivalDate?: boolean | null;
    reservationOnDepartureDate?: boolean | null;
    reservationOnStayDates?: boolean | null;
    roomMessageFilters?: RoomMessageDetailsFilter[] | null;
    dates?: moment.Moment[] | null;
}

export enum RoomMessageType {
    SIMPLE = 0,
    COMPLEX = 1,
}

export enum RoomMessageForType {
    PLACES = 0,
    RESERVATIONS = 1,
    TODAY = 2,
}

export enum RoomMessageDateType {
    SPECIFIC_DATES = 0,
    INTERVAL = 1,
}

export class RoomMessageDetailsFilter implements IRoomMessageDetailsFilter {
    id!: string;
    referenceId?: string | null;
    referenceType!: RoomMessageFilterReferenceType;
    referenceName?: string | null;
    referenceDescription?: string | null;

    constructor(data?: IRoomMessageDetailsFilter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.referenceId = _data["referenceId"] !== undefined ? _data["referenceId"] : <any>null;
            this.referenceType = _data["referenceType"] !== undefined ? _data["referenceType"] : <any>null;
            this.referenceName = _data["referenceName"] !== undefined ? _data["referenceName"] : <any>null;
            this.referenceDescription = _data["referenceDescription"] !== undefined ? _data["referenceDescription"] : <any>null;
        }
    }

    static fromJS(data: any): RoomMessageDetailsFilter {
        data = typeof data === 'object' ? data : {};
        let result = new RoomMessageDetailsFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["referenceId"] = this.referenceId !== undefined ? this.referenceId : <any>null;
        data["referenceType"] = this.referenceType !== undefined ? this.referenceType : <any>null;
        data["referenceName"] = this.referenceName !== undefined ? this.referenceName : <any>null;
        data["referenceDescription"] = this.referenceDescription !== undefined ? this.referenceDescription : <any>null;
        return data; 
    }
}

export interface IRoomMessageDetailsFilter {
    id: string;
    referenceId?: string | null;
    referenceType: RoomMessageFilterReferenceType;
    referenceName?: string | null;
    referenceDescription?: string | null;
}

export class GetComplexRoomMessageDetailsQuery implements IGetComplexRoomMessageDetailsQuery {
    hotelId?: string | null;
    id!: string;

    constructor(data?: IGetComplexRoomMessageDetailsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): GetComplexRoomMessageDetailsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetComplexRoomMessageDetailsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IGetComplexRoomMessageDetailsQuery {
    hotelId?: string | null;
    id: string;
}

export class SaveSimpleRoomMessage implements ISaveSimpleRoomMessage {
    hotelId?: string | null;
    forType!: RoomMessageForType;
    reservationIds?: string[] | null;
    roomId?: string | null;
    message?: string | null;

    constructor(data?: ISaveSimpleRoomMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.forType = _data["forType"] !== undefined ? _data["forType"] : <any>null;
            if (Array.isArray(_data["reservationIds"])) {
                this.reservationIds = [] as any;
                for (let item of _data["reservationIds"])
                    this.reservationIds!.push(item);
            }
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
        }
    }

    static fromJS(data: any): SaveSimpleRoomMessage {
        data = typeof data === 'object' ? data : {};
        let result = new SaveSimpleRoomMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["forType"] = this.forType !== undefined ? this.forType : <any>null;
        if (Array.isArray(this.reservationIds)) {
            data["reservationIds"] = [];
            for (let item of this.reservationIds)
                data["reservationIds"].push(item);
        }
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        return data; 
    }
}

export interface ISaveSimpleRoomMessage {
    hotelId?: string | null;
    forType: RoomMessageForType;
    reservationIds?: string[] | null;
    roomId?: string | null;
    message?: string | null;
}

export class InsertSimpleMessageCommand extends SaveSimpleRoomMessage implements IInsertSimpleMessageCommand {

    constructor(data?: IInsertSimpleMessageCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): InsertSimpleMessageCommand {
        data = typeof data === 'object' ? data : {};
        let result = new InsertSimpleMessageCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IInsertSimpleMessageCommand extends ISaveSimpleRoomMessage {
}

export class SaveComplexRoomMessage implements ISaveComplexRoomMessage {
    hotelId?: string | null;
    message?: string | null;
    type!: RoomMessageType;
    forType!: RoomMessageForType;
    dateType!: RoomMessageDateType;
    intervalStartDate?: string | null;
    intervalEndDate?: string | null;
    intervalEveryNumberOfDays?: number | null;
    reservationOnArrivalDate?: boolean | null;
    reservationOnDepartureDate?: boolean | null;
    reservationOnStayDates?: boolean | null;
    filters?: SaveRoomMessageFilter[] | null;
    dates?: string[] | null;

    constructor(data?: ISaveComplexRoomMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.forType = _data["forType"] !== undefined ? _data["forType"] : <any>null;
            this.dateType = _data["dateType"] !== undefined ? _data["dateType"] : <any>null;
            this.intervalStartDate = _data["intervalStartDate"] !== undefined ? _data["intervalStartDate"] : <any>null;
            this.intervalEndDate = _data["intervalEndDate"] !== undefined ? _data["intervalEndDate"] : <any>null;
            this.intervalEveryNumberOfDays = _data["intervalEveryNumberOfDays"] !== undefined ? _data["intervalEveryNumberOfDays"] : <any>null;
            this.reservationOnArrivalDate = _data["reservationOnArrivalDate"] !== undefined ? _data["reservationOnArrivalDate"] : <any>null;
            this.reservationOnDepartureDate = _data["reservationOnDepartureDate"] !== undefined ? _data["reservationOnDepartureDate"] : <any>null;
            this.reservationOnStayDates = _data["reservationOnStayDates"] !== undefined ? _data["reservationOnStayDates"] : <any>null;
            if (Array.isArray(_data["filters"])) {
                this.filters = [] as any;
                for (let item of _data["filters"])
                    this.filters!.push(SaveRoomMessageFilter.fromJS(item));
            }
            if (Array.isArray(_data["dates"])) {
                this.dates = [] as any;
                for (let item of _data["dates"])
                    this.dates!.push(item);
            }
        }
    }

    static fromJS(data: any): SaveComplexRoomMessage {
        data = typeof data === 'object' ? data : {};
        let result = new SaveComplexRoomMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["forType"] = this.forType !== undefined ? this.forType : <any>null;
        data["dateType"] = this.dateType !== undefined ? this.dateType : <any>null;
        data["intervalStartDate"] = this.intervalStartDate !== undefined ? this.intervalStartDate : <any>null;
        data["intervalEndDate"] = this.intervalEndDate !== undefined ? this.intervalEndDate : <any>null;
        data["intervalEveryNumberOfDays"] = this.intervalEveryNumberOfDays !== undefined ? this.intervalEveryNumberOfDays : <any>null;
        data["reservationOnArrivalDate"] = this.reservationOnArrivalDate !== undefined ? this.reservationOnArrivalDate : <any>null;
        data["reservationOnDepartureDate"] = this.reservationOnDepartureDate !== undefined ? this.reservationOnDepartureDate : <any>null;
        data["reservationOnStayDates"] = this.reservationOnStayDates !== undefined ? this.reservationOnStayDates : <any>null;
        if (Array.isArray(this.filters)) {
            data["filters"] = [];
            for (let item of this.filters)
                data["filters"].push(item.toJSON());
        }
        if (Array.isArray(this.dates)) {
            data["dates"] = [];
            for (let item of this.dates)
                data["dates"].push(item);
        }
        return data; 
    }
}

export interface ISaveComplexRoomMessage {
    hotelId?: string | null;
    message?: string | null;
    type: RoomMessageType;
    forType: RoomMessageForType;
    dateType: RoomMessageDateType;
    intervalStartDate?: string | null;
    intervalEndDate?: string | null;
    intervalEveryNumberOfDays?: number | null;
    reservationOnArrivalDate?: boolean | null;
    reservationOnDepartureDate?: boolean | null;
    reservationOnStayDates?: boolean | null;
    filters?: SaveRoomMessageFilter[] | null;
    dates?: string[] | null;
}

export class InsertComplexMessageCommand extends SaveComplexRoomMessage implements IInsertComplexMessageCommand {

    constructor(data?: IInsertComplexMessageCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): InsertComplexMessageCommand {
        data = typeof data === 'object' ? data : {};
        let result = new InsertComplexMessageCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IInsertComplexMessageCommand extends ISaveComplexRoomMessage {
}

export class SaveRoomMessageFilter implements ISaveRoomMessageFilter {
    referenceId?: string | null;
    referenceType!: RoomMessageFilterReferenceType;
    referenceName?: string | null;
    referenceDescription?: string | null;

    constructor(data?: ISaveRoomMessageFilter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.referenceId = _data["referenceId"] !== undefined ? _data["referenceId"] : <any>null;
            this.referenceType = _data["referenceType"] !== undefined ? _data["referenceType"] : <any>null;
            this.referenceName = _data["referenceName"] !== undefined ? _data["referenceName"] : <any>null;
            this.referenceDescription = _data["referenceDescription"] !== undefined ? _data["referenceDescription"] : <any>null;
        }
    }

    static fromJS(data: any): SaveRoomMessageFilter {
        data = typeof data === 'object' ? data : {};
        let result = new SaveRoomMessageFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["referenceId"] = this.referenceId !== undefined ? this.referenceId : <any>null;
        data["referenceType"] = this.referenceType !== undefined ? this.referenceType : <any>null;
        data["referenceName"] = this.referenceName !== undefined ? this.referenceName : <any>null;
        data["referenceDescription"] = this.referenceDescription !== undefined ? this.referenceDescription : <any>null;
        return data; 
    }
}

export interface ISaveRoomMessageFilter {
    referenceId?: string | null;
    referenceType: RoomMessageFilterReferenceType;
    referenceName?: string | null;
    referenceDescription?: string | null;
}

export class UpdateComplexMessageCommand extends SaveComplexRoomMessage implements IUpdateComplexMessageCommand {
    id!: string;

    constructor(data?: IUpdateComplexMessageCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateComplexMessageCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateComplexMessageCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IUpdateComplexMessageCommand extends ISaveComplexRoomMessage {
    id: string;
}

export class UpdateSimpleMessageCommand extends SaveSimpleRoomMessage implements IUpdateSimpleMessageCommand {
    id!: string;

    constructor(data?: IUpdateSimpleMessageCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateSimpleMessageCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateSimpleMessageCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IUpdateSimpleMessageCommand extends ISaveSimpleRoomMessage {
    id: string;
}

export class DeleteMessageCommand implements IDeleteMessageCommand {
    id!: string;

    constructor(data?: IDeleteMessageCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteMessageCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteMessageCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IDeleteMessageCommand {
    id: string;
}

export class TasksData implements ITasksData {
    allTaskActions?: ExtendedTaskActionData[] | null;
    allWhos?: TaskWhoData[] | null;
    allWheres?: TaskWhereData[] | null;
    allTaskTypes?: EnumData[] | null;
    allRecurringTaskTypes?: EnumData[] | null;
    allEventTaskTypes?: EnumData[] | null;
    allEventTaskModifierTypes?: EnumData[] | null;

    constructor(data?: ITasksData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["allTaskActions"])) {
                this.allTaskActions = [] as any;
                for (let item of _data["allTaskActions"])
                    this.allTaskActions!.push(ExtendedTaskActionData.fromJS(item));
            }
            if (Array.isArray(_data["allWhos"])) {
                this.allWhos = [] as any;
                for (let item of _data["allWhos"])
                    this.allWhos!.push(TaskWhoData.fromJS(item));
            }
            if (Array.isArray(_data["allWheres"])) {
                this.allWheres = [] as any;
                for (let item of _data["allWheres"])
                    this.allWheres!.push(TaskWhereData.fromJS(item));
            }
            if (Array.isArray(_data["allTaskTypes"])) {
                this.allTaskTypes = [] as any;
                for (let item of _data["allTaskTypes"])
                    this.allTaskTypes!.push(EnumData.fromJS(item));
            }
            if (Array.isArray(_data["allRecurringTaskTypes"])) {
                this.allRecurringTaskTypes = [] as any;
                for (let item of _data["allRecurringTaskTypes"])
                    this.allRecurringTaskTypes!.push(EnumData.fromJS(item));
            }
            if (Array.isArray(_data["allEventTaskTypes"])) {
                this.allEventTaskTypes = [] as any;
                for (let item of _data["allEventTaskTypes"])
                    this.allEventTaskTypes!.push(EnumData.fromJS(item));
            }
            if (Array.isArray(_data["allEventTaskModifierTypes"])) {
                this.allEventTaskModifierTypes = [] as any;
                for (let item of _data["allEventTaskModifierTypes"])
                    this.allEventTaskModifierTypes!.push(EnumData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TasksData {
        data = typeof data === 'object' ? data : {};
        let result = new TasksData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.allTaskActions)) {
            data["allTaskActions"] = [];
            for (let item of this.allTaskActions)
                data["allTaskActions"].push(item.toJSON());
        }
        if (Array.isArray(this.allWhos)) {
            data["allWhos"] = [];
            for (let item of this.allWhos)
                data["allWhos"].push(item.toJSON());
        }
        if (Array.isArray(this.allWheres)) {
            data["allWheres"] = [];
            for (let item of this.allWheres)
                data["allWheres"].push(item.toJSON());
        }
        if (Array.isArray(this.allTaskTypes)) {
            data["allTaskTypes"] = [];
            for (let item of this.allTaskTypes)
                data["allTaskTypes"].push(item.toJSON());
        }
        if (Array.isArray(this.allRecurringTaskTypes)) {
            data["allRecurringTaskTypes"] = [];
            for (let item of this.allRecurringTaskTypes)
                data["allRecurringTaskTypes"].push(item.toJSON());
        }
        if (Array.isArray(this.allEventTaskTypes)) {
            data["allEventTaskTypes"] = [];
            for (let item of this.allEventTaskTypes)
                data["allEventTaskTypes"].push(item.toJSON());
        }
        if (Array.isArray(this.allEventTaskModifierTypes)) {
            data["allEventTaskModifierTypes"] = [];
            for (let item of this.allEventTaskModifierTypes)
                data["allEventTaskModifierTypes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITasksData {
    allTaskActions?: ExtendedTaskActionData[] | null;
    allWhos?: TaskWhoData[] | null;
    allWheres?: TaskWhereData[] | null;
    allTaskTypes?: EnumData[] | null;
    allRecurringTaskTypes?: EnumData[] | null;
    allEventTaskTypes?: EnumData[] | null;
    allEventTaskModifierTypes?: EnumData[] | null;
}

export class TaskActionData implements ITaskActionData {
    availableQuantity!: number;
    actionName?: string | null;
    assetName?: string | null;
    assetGroupName?: string | null;
    assetGroupId!: string;
    assetId!: string;
    isActionSystemDefined!: boolean;
    systemDefinedActionTypeKey?: string | null;
    systemDefinedActionIdentifierKey?: string | null;
    defaultAssingedUserId?: string | null;
    defaultAssingedUserGroupId?: string | null;
    defaultAssingedUserSubGroupId?: string | null;

    constructor(data?: ITaskActionData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.availableQuantity = _data["availableQuantity"] !== undefined ? _data["availableQuantity"] : <any>null;
            this.actionName = _data["actionName"] !== undefined ? _data["actionName"] : <any>null;
            this.assetName = _data["assetName"] !== undefined ? _data["assetName"] : <any>null;
            this.assetGroupName = _data["assetGroupName"] !== undefined ? _data["assetGroupName"] : <any>null;
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.isActionSystemDefined = _data["isActionSystemDefined"] !== undefined ? _data["isActionSystemDefined"] : <any>null;
            this.systemDefinedActionTypeKey = _data["systemDefinedActionTypeKey"] !== undefined ? _data["systemDefinedActionTypeKey"] : <any>null;
            this.systemDefinedActionIdentifierKey = _data["systemDefinedActionIdentifierKey"] !== undefined ? _data["systemDefinedActionIdentifierKey"] : <any>null;
            this.defaultAssingedUserId = _data["defaultAssingedUserId"] !== undefined ? _data["defaultAssingedUserId"] : <any>null;
            this.defaultAssingedUserGroupId = _data["defaultAssingedUserGroupId"] !== undefined ? _data["defaultAssingedUserGroupId"] : <any>null;
            this.defaultAssingedUserSubGroupId = _data["defaultAssingedUserSubGroupId"] !== undefined ? _data["defaultAssingedUserSubGroupId"] : <any>null;
        }
    }

    static fromJS(data: any): TaskActionData {
        data = typeof data === 'object' ? data : {};
        let result = new TaskActionData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["availableQuantity"] = this.availableQuantity !== undefined ? this.availableQuantity : <any>null;
        data["actionName"] = this.actionName !== undefined ? this.actionName : <any>null;
        data["assetName"] = this.assetName !== undefined ? this.assetName : <any>null;
        data["assetGroupName"] = this.assetGroupName !== undefined ? this.assetGroupName : <any>null;
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["isActionSystemDefined"] = this.isActionSystemDefined !== undefined ? this.isActionSystemDefined : <any>null;
        data["systemDefinedActionTypeKey"] = this.systemDefinedActionTypeKey !== undefined ? this.systemDefinedActionTypeKey : <any>null;
        data["systemDefinedActionIdentifierKey"] = this.systemDefinedActionIdentifierKey !== undefined ? this.systemDefinedActionIdentifierKey : <any>null;
        data["defaultAssingedUserId"] = this.defaultAssingedUserId !== undefined ? this.defaultAssingedUserId : <any>null;
        data["defaultAssingedUserGroupId"] = this.defaultAssingedUserGroupId !== undefined ? this.defaultAssingedUserGroupId : <any>null;
        data["defaultAssingedUserSubGroupId"] = this.defaultAssingedUserSubGroupId !== undefined ? this.defaultAssingedUserSubGroupId : <any>null;
        return data; 
    }
}

export interface ITaskActionData {
    availableQuantity: number;
    actionName?: string | null;
    assetName?: string | null;
    assetGroupName?: string | null;
    assetGroupId: string;
    assetId: string;
    isActionSystemDefined: boolean;
    systemDefinedActionTypeKey?: string | null;
    systemDefinedActionIdentifierKey?: string | null;
    defaultAssingedUserId?: string | null;
    defaultAssingedUserGroupId?: string | null;
    defaultAssingedUserSubGroupId?: string | null;
}

export class ExtendedTaskActionData extends TaskActionData implements IExtendedTaskActionData {
    altAssetName?: string | null;
    defaultCredits?: number | null;
    defaultPrice?: number | null;
    defaultPriorityKey?: string | null;
    description?: string | null;

    constructor(data?: IExtendedTaskActionData) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.altAssetName = _data["altAssetName"] !== undefined ? _data["altAssetName"] : <any>null;
            this.defaultCredits = _data["defaultCredits"] !== undefined ? _data["defaultCredits"] : <any>null;
            this.defaultPrice = _data["defaultPrice"] !== undefined ? _data["defaultPrice"] : <any>null;
            this.defaultPriorityKey = _data["defaultPriorityKey"] !== undefined ? _data["defaultPriorityKey"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): ExtendedTaskActionData {
        data = typeof data === 'object' ? data : {};
        let result = new ExtendedTaskActionData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["altAssetName"] = this.altAssetName !== undefined ? this.altAssetName : <any>null;
        data["defaultCredits"] = this.defaultCredits !== undefined ? this.defaultCredits : <any>null;
        data["defaultPrice"] = this.defaultPrice !== undefined ? this.defaultPrice : <any>null;
        data["defaultPriorityKey"] = this.defaultPriorityKey !== undefined ? this.defaultPriorityKey : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IExtendedTaskActionData extends ITaskActionData {
    altAssetName?: string | null;
    defaultCredits?: number | null;
    defaultPrice?: number | null;
    defaultPriorityKey?: string | null;
    description?: string | null;
}

export class TaskWhoData implements ITaskWhoData {
    typeKey?: string | null;
    typeDescription?: string | null;
    referenceId?: string | null;
    referenceName?: string | null;
    imageUrl?: string | null;

    constructor(data?: ITaskWhoData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            this.typeDescription = _data["typeDescription"] !== undefined ? _data["typeDescription"] : <any>null;
            this.referenceId = _data["referenceId"] !== undefined ? _data["referenceId"] : <any>null;
            this.referenceName = _data["referenceName"] !== undefined ? _data["referenceName"] : <any>null;
            this.imageUrl = _data["imageUrl"] !== undefined ? _data["imageUrl"] : <any>null;
        }
    }

    static fromJS(data: any): TaskWhoData {
        data = typeof data === 'object' ? data : {};
        let result = new TaskWhoData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        data["typeDescription"] = this.typeDescription !== undefined ? this.typeDescription : <any>null;
        data["referenceId"] = this.referenceId !== undefined ? this.referenceId : <any>null;
        data["referenceName"] = this.referenceName !== undefined ? this.referenceName : <any>null;
        data["imageUrl"] = this.imageUrl !== undefined ? this.imageUrl : <any>null;
        return data; 
    }
}

export interface ITaskWhoData {
    typeKey?: string | null;
    typeDescription?: string | null;
    referenceId?: string | null;
    referenceName?: string | null;
    imageUrl?: string | null;
}

export class EnumData implements IEnumData {
    key?: string | null;
    name?: string | null;

    constructor(data?: IEnumData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"] !== undefined ? _data["key"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): EnumData {
        data = typeof data === 'object' ? data : {};
        let result = new EnumData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key !== undefined ? this.key : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data; 
    }
}

export interface IEnumData {
    key?: string | null;
    name?: string | null;
}

export class GetTasksDataQuery implements IGetTasksDataQuery {

    constructor(data?: IGetTasksDataQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): GetTasksDataQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetTasksDataQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IGetTasksDataQuery {
}

export class TaskConfigurationDetailsData implements ITaskConfigurationDetailsData {
    id!: string;
    comment?: string | null;
    taskTypeKey?: string | null;
    recurringTaskTypeKey?: string | null;
    mustBeFinishedByAllWhos!: boolean;
    credits!: number;
    price!: number;
    priorityKey?: string | null;
    isGuestRequest!: boolean;
    isShownInNewsFeed!: boolean;
    isRescheduledEveryDayUntilFinished!: boolean;
    isMajorNotificationRaisedWhenFinished!: boolean;
    isBlockingCleaningUntilFinished!: boolean;
    whatsTypeKey?: string | null;
    fromReferenceId?: string | null;
    fromReferenceName?: string | null;
    fromReferenceTypeKey?: string | null;
    toReferenceId?: string | null;
    toReferenceName?: string | null;
    toReferenceTypeKey?: string | null;
    whats?: TaskWhatData[] | null;
    whos?: TaskWhoData[] | null;
    wheres?: TaskWhereData[] | null;
    files?: TaskFileDetailsData[] | null;
    filestackImageUrls?: string[] | null;
    singleTaskOptions?: SingleTaskOptions | null;
    dailyRecurringTaskOptions?: DailyRecurringTaskOptions | null;
    weeklyRecurringTaskOptions?: WeeklyRecurringTaskOptions | null;
    monthlyRecurringTaskOptions?: MonthlyRecurringTaskOptions | null;
    specificTimesRecurringTaskOptions?: SpecificTimesRecurringTaskOptions | null;
    eventTaskOptions?: EventTaskOptions | null;
    balancedTaskOptions?: BalancedTaskOptions | null;
    recurringEveryTaskOptions?: RecurringEveryTaskOptions | null;
    summary?: TaskConfigurationDetailsSummaryData | null;

    constructor(data?: ITaskConfigurationDetailsData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.comment = _data["comment"] !== undefined ? _data["comment"] : <any>null;
            this.taskTypeKey = _data["taskTypeKey"] !== undefined ? _data["taskTypeKey"] : <any>null;
            this.recurringTaskTypeKey = _data["recurringTaskTypeKey"] !== undefined ? _data["recurringTaskTypeKey"] : <any>null;
            this.mustBeFinishedByAllWhos = _data["mustBeFinishedByAllWhos"] !== undefined ? _data["mustBeFinishedByAllWhos"] : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
            this.priorityKey = _data["priorityKey"] !== undefined ? _data["priorityKey"] : <any>null;
            this.isGuestRequest = _data["isGuestRequest"] !== undefined ? _data["isGuestRequest"] : <any>null;
            this.isShownInNewsFeed = _data["isShownInNewsFeed"] !== undefined ? _data["isShownInNewsFeed"] : <any>null;
            this.isRescheduledEveryDayUntilFinished = _data["isRescheduledEveryDayUntilFinished"] !== undefined ? _data["isRescheduledEveryDayUntilFinished"] : <any>null;
            this.isMajorNotificationRaisedWhenFinished = _data["isMajorNotificationRaisedWhenFinished"] !== undefined ? _data["isMajorNotificationRaisedWhenFinished"] : <any>null;
            this.isBlockingCleaningUntilFinished = _data["isBlockingCleaningUntilFinished"] !== undefined ? _data["isBlockingCleaningUntilFinished"] : <any>null;
            this.whatsTypeKey = _data["whatsTypeKey"] !== undefined ? _data["whatsTypeKey"] : <any>null;
            this.fromReferenceId = _data["fromReferenceId"] !== undefined ? _data["fromReferenceId"] : <any>null;
            this.fromReferenceName = _data["fromReferenceName"] !== undefined ? _data["fromReferenceName"] : <any>null;
            this.fromReferenceTypeKey = _data["fromReferenceTypeKey"] !== undefined ? _data["fromReferenceTypeKey"] : <any>null;
            this.toReferenceId = _data["toReferenceId"] !== undefined ? _data["toReferenceId"] : <any>null;
            this.toReferenceName = _data["toReferenceName"] !== undefined ? _data["toReferenceName"] : <any>null;
            this.toReferenceTypeKey = _data["toReferenceTypeKey"] !== undefined ? _data["toReferenceTypeKey"] : <any>null;
            if (Array.isArray(_data["whats"])) {
                this.whats = [] as any;
                for (let item of _data["whats"])
                    this.whats!.push(TaskWhatData.fromJS(item));
            }
            if (Array.isArray(_data["whos"])) {
                this.whos = [] as any;
                for (let item of _data["whos"])
                    this.whos!.push(TaskWhoData.fromJS(item));
            }
            if (Array.isArray(_data["wheres"])) {
                this.wheres = [] as any;
                for (let item of _data["wheres"])
                    this.wheres!.push(TaskWhereData.fromJS(item));
            }
            if (Array.isArray(_data["files"])) {
                this.files = [] as any;
                for (let item of _data["files"])
                    this.files!.push(TaskFileDetailsData.fromJS(item));
            }
            if (Array.isArray(_data["filestackImageUrls"])) {
                this.filestackImageUrls = [] as any;
                for (let item of _data["filestackImageUrls"])
                    this.filestackImageUrls!.push(item);
            }
            this.singleTaskOptions = _data["singleTaskOptions"] ? SingleTaskOptions.fromJS(_data["singleTaskOptions"]) : <any>null;
            this.dailyRecurringTaskOptions = _data["dailyRecurringTaskOptions"] ? DailyRecurringTaskOptions.fromJS(_data["dailyRecurringTaskOptions"]) : <any>null;
            this.weeklyRecurringTaskOptions = _data["weeklyRecurringTaskOptions"] ? WeeklyRecurringTaskOptions.fromJS(_data["weeklyRecurringTaskOptions"]) : <any>null;
            this.monthlyRecurringTaskOptions = _data["monthlyRecurringTaskOptions"] ? MonthlyRecurringTaskOptions.fromJS(_data["monthlyRecurringTaskOptions"]) : <any>null;
            this.specificTimesRecurringTaskOptions = _data["specificTimesRecurringTaskOptions"] ? SpecificTimesRecurringTaskOptions.fromJS(_data["specificTimesRecurringTaskOptions"]) : <any>null;
            this.eventTaskOptions = _data["eventTaskOptions"] ? EventTaskOptions.fromJS(_data["eventTaskOptions"]) : <any>null;
            this.balancedTaskOptions = _data["balancedTaskOptions"] ? BalancedTaskOptions.fromJS(_data["balancedTaskOptions"]) : <any>null;
            this.recurringEveryTaskOptions = _data["recurringEveryTaskOptions"] ? RecurringEveryTaskOptions.fromJS(_data["recurringEveryTaskOptions"]) : <any>null;
            this.summary = _data["summary"] ? TaskConfigurationDetailsSummaryData.fromJS(_data["summary"]) : <any>null;
        }
    }

    static fromJS(data: any): TaskConfigurationDetailsData {
        data = typeof data === 'object' ? data : {};
        let result = new TaskConfigurationDetailsData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["comment"] = this.comment !== undefined ? this.comment : <any>null;
        data["taskTypeKey"] = this.taskTypeKey !== undefined ? this.taskTypeKey : <any>null;
        data["recurringTaskTypeKey"] = this.recurringTaskTypeKey !== undefined ? this.recurringTaskTypeKey : <any>null;
        data["mustBeFinishedByAllWhos"] = this.mustBeFinishedByAllWhos !== undefined ? this.mustBeFinishedByAllWhos : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["priorityKey"] = this.priorityKey !== undefined ? this.priorityKey : <any>null;
        data["isGuestRequest"] = this.isGuestRequest !== undefined ? this.isGuestRequest : <any>null;
        data["isShownInNewsFeed"] = this.isShownInNewsFeed !== undefined ? this.isShownInNewsFeed : <any>null;
        data["isRescheduledEveryDayUntilFinished"] = this.isRescheduledEveryDayUntilFinished !== undefined ? this.isRescheduledEveryDayUntilFinished : <any>null;
        data["isMajorNotificationRaisedWhenFinished"] = this.isMajorNotificationRaisedWhenFinished !== undefined ? this.isMajorNotificationRaisedWhenFinished : <any>null;
        data["isBlockingCleaningUntilFinished"] = this.isBlockingCleaningUntilFinished !== undefined ? this.isBlockingCleaningUntilFinished : <any>null;
        data["whatsTypeKey"] = this.whatsTypeKey !== undefined ? this.whatsTypeKey : <any>null;
        data["fromReferenceId"] = this.fromReferenceId !== undefined ? this.fromReferenceId : <any>null;
        data["fromReferenceName"] = this.fromReferenceName !== undefined ? this.fromReferenceName : <any>null;
        data["fromReferenceTypeKey"] = this.fromReferenceTypeKey !== undefined ? this.fromReferenceTypeKey : <any>null;
        data["toReferenceId"] = this.toReferenceId !== undefined ? this.toReferenceId : <any>null;
        data["toReferenceName"] = this.toReferenceName !== undefined ? this.toReferenceName : <any>null;
        data["toReferenceTypeKey"] = this.toReferenceTypeKey !== undefined ? this.toReferenceTypeKey : <any>null;
        if (Array.isArray(this.whats)) {
            data["whats"] = [];
            for (let item of this.whats)
                data["whats"].push(item.toJSON());
        }
        if (Array.isArray(this.whos)) {
            data["whos"] = [];
            for (let item of this.whos)
                data["whos"].push(item.toJSON());
        }
        if (Array.isArray(this.wheres)) {
            data["wheres"] = [];
            for (let item of this.wheres)
                data["wheres"].push(item.toJSON());
        }
        if (Array.isArray(this.files)) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        if (Array.isArray(this.filestackImageUrls)) {
            data["filestackImageUrls"] = [];
            for (let item of this.filestackImageUrls)
                data["filestackImageUrls"].push(item);
        }
        data["singleTaskOptions"] = this.singleTaskOptions ? this.singleTaskOptions.toJSON() : <any>null;
        data["dailyRecurringTaskOptions"] = this.dailyRecurringTaskOptions ? this.dailyRecurringTaskOptions.toJSON() : <any>null;
        data["weeklyRecurringTaskOptions"] = this.weeklyRecurringTaskOptions ? this.weeklyRecurringTaskOptions.toJSON() : <any>null;
        data["monthlyRecurringTaskOptions"] = this.monthlyRecurringTaskOptions ? this.monthlyRecurringTaskOptions.toJSON() : <any>null;
        data["specificTimesRecurringTaskOptions"] = this.specificTimesRecurringTaskOptions ? this.specificTimesRecurringTaskOptions.toJSON() : <any>null;
        data["eventTaskOptions"] = this.eventTaskOptions ? this.eventTaskOptions.toJSON() : <any>null;
        data["balancedTaskOptions"] = this.balancedTaskOptions ? this.balancedTaskOptions.toJSON() : <any>null;
        data["recurringEveryTaskOptions"] = this.recurringEveryTaskOptions ? this.recurringEveryTaskOptions.toJSON() : <any>null;
        data["summary"] = this.summary ? this.summary.toJSON() : <any>null;
        return data; 
    }
}

export interface ITaskConfigurationDetailsData {
    id: string;
    comment?: string | null;
    taskTypeKey?: string | null;
    recurringTaskTypeKey?: string | null;
    mustBeFinishedByAllWhos: boolean;
    credits: number;
    price: number;
    priorityKey?: string | null;
    isGuestRequest: boolean;
    isShownInNewsFeed: boolean;
    isRescheduledEveryDayUntilFinished: boolean;
    isMajorNotificationRaisedWhenFinished: boolean;
    isBlockingCleaningUntilFinished: boolean;
    whatsTypeKey?: string | null;
    fromReferenceId?: string | null;
    fromReferenceName?: string | null;
    fromReferenceTypeKey?: string | null;
    toReferenceId?: string | null;
    toReferenceName?: string | null;
    toReferenceTypeKey?: string | null;
    whats?: TaskWhatData[] | null;
    whos?: TaskWhoData[] | null;
    wheres?: TaskWhereData[] | null;
    files?: TaskFileDetailsData[] | null;
    filestackImageUrls?: string[] | null;
    singleTaskOptions?: SingleTaskOptions | null;
    dailyRecurringTaskOptions?: DailyRecurringTaskOptions | null;
    weeklyRecurringTaskOptions?: WeeklyRecurringTaskOptions | null;
    monthlyRecurringTaskOptions?: MonthlyRecurringTaskOptions | null;
    specificTimesRecurringTaskOptions?: SpecificTimesRecurringTaskOptions | null;
    eventTaskOptions?: EventTaskOptions | null;
    balancedTaskOptions?: BalancedTaskOptions | null;
    recurringEveryTaskOptions?: RecurringEveryTaskOptions | null;
    summary?: TaskConfigurationDetailsSummaryData | null;
}

export class TaskWhatData implements ITaskWhatData {
    assetQuantity!: number;
    actionName?: string | null;
    assetName?: string | null;
    assetGroupName?: string | null;
    assetId!: string;
    assetGroupId!: string;
    isActionSystemDefined!: boolean;
    systemDefinedActionTypeKey?: string | null;
    systemDefinedActionIdentifierKey?: string | null;
    defaultAssignedUserId?: string | null;

    constructor(data?: ITaskWhatData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetQuantity = _data["assetQuantity"] !== undefined ? _data["assetQuantity"] : <any>null;
            this.actionName = _data["actionName"] !== undefined ? _data["actionName"] : <any>null;
            this.assetName = _data["assetName"] !== undefined ? _data["assetName"] : <any>null;
            this.assetGroupName = _data["assetGroupName"] !== undefined ? _data["assetGroupName"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            this.isActionSystemDefined = _data["isActionSystemDefined"] !== undefined ? _data["isActionSystemDefined"] : <any>null;
            this.systemDefinedActionTypeKey = _data["systemDefinedActionTypeKey"] !== undefined ? _data["systemDefinedActionTypeKey"] : <any>null;
            this.systemDefinedActionIdentifierKey = _data["systemDefinedActionIdentifierKey"] !== undefined ? _data["systemDefinedActionIdentifierKey"] : <any>null;
            this.defaultAssignedUserId = _data["defaultAssignedUserId"] !== undefined ? _data["defaultAssignedUserId"] : <any>null;
        }
    }

    static fromJS(data: any): TaskWhatData {
        data = typeof data === 'object' ? data : {};
        let result = new TaskWhatData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetQuantity"] = this.assetQuantity !== undefined ? this.assetQuantity : <any>null;
        data["actionName"] = this.actionName !== undefined ? this.actionName : <any>null;
        data["assetName"] = this.assetName !== undefined ? this.assetName : <any>null;
        data["assetGroupName"] = this.assetGroupName !== undefined ? this.assetGroupName : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        data["isActionSystemDefined"] = this.isActionSystemDefined !== undefined ? this.isActionSystemDefined : <any>null;
        data["systemDefinedActionTypeKey"] = this.systemDefinedActionTypeKey !== undefined ? this.systemDefinedActionTypeKey : <any>null;
        data["systemDefinedActionIdentifierKey"] = this.systemDefinedActionIdentifierKey !== undefined ? this.systemDefinedActionIdentifierKey : <any>null;
        data["defaultAssignedUserId"] = this.defaultAssignedUserId !== undefined ? this.defaultAssignedUserId : <any>null;
        return data; 
    }
}

export interface ITaskWhatData {
    assetQuantity: number;
    actionName?: string | null;
    assetName?: string | null;
    assetGroupName?: string | null;
    assetId: string;
    assetGroupId: string;
    isActionSystemDefined: boolean;
    systemDefinedActionTypeKey?: string | null;
    systemDefinedActionIdentifierKey?: string | null;
    defaultAssignedUserId?: string | null;
}

export class TaskFileDetailsData implements ITaskFileDetailsData {
    fileName?: string | null;
    isNew!: boolean;
    fileUrl?: string | null;

    constructor(data?: ITaskFileDetailsData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileName = _data["fileName"] !== undefined ? _data["fileName"] : <any>null;
            this.isNew = _data["isNew"] !== undefined ? _data["isNew"] : <any>null;
            this.fileUrl = _data["fileUrl"] !== undefined ? _data["fileUrl"] : <any>null;
        }
    }

    static fromJS(data: any): TaskFileDetailsData {
        data = typeof data === 'object' ? data : {};
        let result = new TaskFileDetailsData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        data["isNew"] = this.isNew !== undefined ? this.isNew : <any>null;
        data["fileUrl"] = this.fileUrl !== undefined ? this.fileUrl : <any>null;
        return data; 
    }
}

export interface ITaskFileDetailsData {
    fileName?: string | null;
    isNew: boolean;
    fileUrl?: string | null;
}

export class SingleTaskOptions implements ISingleTaskOptions {
    id!: string;
    startsAt!: moment.Moment;

    constructor(data?: ISingleTaskOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.startsAt = _data["startsAt"] ? moment(_data["startsAt"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): SingleTaskOptions {
        data = typeof data === 'object' ? data : {};
        let result = new SingleTaskOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["startsAt"] = this.startsAt ? this.startsAt.toISOString() : <any>null;
        return data; 
    }
}

export interface ISingleTaskOptions {
    id: string;
    startsAt: moment.Moment;
}

export class DailyRecurringTaskOptions implements IDailyRecurringTaskOptions {
    id!: string;
    startsAt!: moment.Moment;
    repeatTimes?: string[] | null;
    repeatsForKey?: string | null;
    repeatsForNrOccurences?: number | null;
    repeatsForNrDays?: number | null;
    repeatsUntilTime?: moment.Moment | null;

    constructor(data?: IDailyRecurringTaskOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.startsAt = _data["startsAt"] ? moment(_data["startsAt"].toString()) : <any>null;
            if (Array.isArray(_data["repeatTimes"])) {
                this.repeatTimes = [] as any;
                for (let item of _data["repeatTimes"])
                    this.repeatTimes!.push(item);
            }
            this.repeatsForKey = _data["repeatsForKey"] !== undefined ? _data["repeatsForKey"] : <any>null;
            this.repeatsForNrOccurences = _data["repeatsForNrOccurences"] !== undefined ? _data["repeatsForNrOccurences"] : <any>null;
            this.repeatsForNrDays = _data["repeatsForNrDays"] !== undefined ? _data["repeatsForNrDays"] : <any>null;
            this.repeatsUntilTime = _data["repeatsUntilTime"] ? moment(_data["repeatsUntilTime"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): DailyRecurringTaskOptions {
        data = typeof data === 'object' ? data : {};
        let result = new DailyRecurringTaskOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["startsAt"] = this.startsAt ? this.startsAt.toISOString() : <any>null;
        if (Array.isArray(this.repeatTimes)) {
            data["repeatTimes"] = [];
            for (let item of this.repeatTimes)
                data["repeatTimes"].push(item);
        }
        data["repeatsForKey"] = this.repeatsForKey !== undefined ? this.repeatsForKey : <any>null;
        data["repeatsForNrOccurences"] = this.repeatsForNrOccurences !== undefined ? this.repeatsForNrOccurences : <any>null;
        data["repeatsForNrDays"] = this.repeatsForNrDays !== undefined ? this.repeatsForNrDays : <any>null;
        data["repeatsUntilTime"] = this.repeatsUntilTime ? this.repeatsUntilTime.toISOString() : <any>null;
        return data; 
    }
}

export interface IDailyRecurringTaskOptions {
    id: string;
    startsAt: moment.Moment;
    repeatTimes?: string[] | null;
    repeatsForKey?: string | null;
    repeatsForNrOccurences?: number | null;
    repeatsForNrDays?: number | null;
    repeatsUntilTime?: moment.Moment | null;
}

export class WeeklyRecurringTaskOptions implements IWeeklyRecurringTaskOptions {
    id!: string;
    startsAt!: moment.Moment;
    weeklyRecurrences?: WeeklyRecurringTaskItemOptions[] | null;
    repeatsForKey?: string | null;
    repeatsForNrOccurences?: number | null;
    repeatsForNrDays?: number | null;
    repeatsUntilTime?: moment.Moment | null;

    constructor(data?: IWeeklyRecurringTaskOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.startsAt = _data["startsAt"] ? moment(_data["startsAt"].toString()) : <any>null;
            if (Array.isArray(_data["weeklyRecurrences"])) {
                this.weeklyRecurrences = [] as any;
                for (let item of _data["weeklyRecurrences"])
                    this.weeklyRecurrences!.push(WeeklyRecurringTaskItemOptions.fromJS(item));
            }
            this.repeatsForKey = _data["repeatsForKey"] !== undefined ? _data["repeatsForKey"] : <any>null;
            this.repeatsForNrOccurences = _data["repeatsForNrOccurences"] !== undefined ? _data["repeatsForNrOccurences"] : <any>null;
            this.repeatsForNrDays = _data["repeatsForNrDays"] !== undefined ? _data["repeatsForNrDays"] : <any>null;
            this.repeatsUntilTime = _data["repeatsUntilTime"] ? moment(_data["repeatsUntilTime"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): WeeklyRecurringTaskOptions {
        data = typeof data === 'object' ? data : {};
        let result = new WeeklyRecurringTaskOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["startsAt"] = this.startsAt ? this.startsAt.toISOString() : <any>null;
        if (Array.isArray(this.weeklyRecurrences)) {
            data["weeklyRecurrences"] = [];
            for (let item of this.weeklyRecurrences)
                data["weeklyRecurrences"].push(item.toJSON());
        }
        data["repeatsForKey"] = this.repeatsForKey !== undefined ? this.repeatsForKey : <any>null;
        data["repeatsForNrOccurences"] = this.repeatsForNrOccurences !== undefined ? this.repeatsForNrOccurences : <any>null;
        data["repeatsForNrDays"] = this.repeatsForNrDays !== undefined ? this.repeatsForNrDays : <any>null;
        data["repeatsUntilTime"] = this.repeatsUntilTime ? this.repeatsUntilTime.toISOString() : <any>null;
        return data; 
    }
}

export interface IWeeklyRecurringTaskOptions {
    id: string;
    startsAt: moment.Moment;
    weeklyRecurrences?: WeeklyRecurringTaskItemOptions[] | null;
    repeatsForKey?: string | null;
    repeatsForNrOccurences?: number | null;
    repeatsForNrDays?: number | null;
    repeatsUntilTime?: moment.Moment | null;
}

export class WeeklyRecurringTaskItemOptions implements IWeeklyRecurringTaskItemOptions {
    id!: string;
    dayKey?: string | null;
    repeatTimes?: string[] | null;

    constructor(data?: IWeeklyRecurringTaskItemOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.dayKey = _data["dayKey"] !== undefined ? _data["dayKey"] : <any>null;
            if (Array.isArray(_data["repeatTimes"])) {
                this.repeatTimes = [] as any;
                for (let item of _data["repeatTimes"])
                    this.repeatTimes!.push(item);
            }
        }
    }

    static fromJS(data: any): WeeklyRecurringTaskItemOptions {
        data = typeof data === 'object' ? data : {};
        let result = new WeeklyRecurringTaskItemOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["dayKey"] = this.dayKey !== undefined ? this.dayKey : <any>null;
        if (Array.isArray(this.repeatTimes)) {
            data["repeatTimes"] = [];
            for (let item of this.repeatTimes)
                data["repeatTimes"].push(item);
        }
        return data; 
    }
}

export interface IWeeklyRecurringTaskItemOptions {
    id: string;
    dayKey?: string | null;
    repeatTimes?: string[] | null;
}

export class MonthlyRecurringTaskOptions implements IMonthlyRecurringTaskOptions {
    id!: string;
    startsAt!: moment.Moment;
    monthlyRecurrences?: MonthlyRecurringTaskItemOptions[] | null;
    repeatsForKey?: string | null;
    repeatsForNrOccurences?: number | null;
    repeatsForNrDays?: number | null;
    repeatsUntilTime?: moment.Moment | null;

    constructor(data?: IMonthlyRecurringTaskOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.startsAt = _data["startsAt"] ? moment(_data["startsAt"].toString()) : <any>null;
            if (Array.isArray(_data["monthlyRecurrences"])) {
                this.monthlyRecurrences = [] as any;
                for (let item of _data["monthlyRecurrences"])
                    this.monthlyRecurrences!.push(MonthlyRecurringTaskItemOptions.fromJS(item));
            }
            this.repeatsForKey = _data["repeatsForKey"] !== undefined ? _data["repeatsForKey"] : <any>null;
            this.repeatsForNrOccurences = _data["repeatsForNrOccurences"] !== undefined ? _data["repeatsForNrOccurences"] : <any>null;
            this.repeatsForNrDays = _data["repeatsForNrDays"] !== undefined ? _data["repeatsForNrDays"] : <any>null;
            this.repeatsUntilTime = _data["repeatsUntilTime"] ? moment(_data["repeatsUntilTime"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): MonthlyRecurringTaskOptions {
        data = typeof data === 'object' ? data : {};
        let result = new MonthlyRecurringTaskOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["startsAt"] = this.startsAt ? this.startsAt.toISOString() : <any>null;
        if (Array.isArray(this.monthlyRecurrences)) {
            data["monthlyRecurrences"] = [];
            for (let item of this.monthlyRecurrences)
                data["monthlyRecurrences"].push(item.toJSON());
        }
        data["repeatsForKey"] = this.repeatsForKey !== undefined ? this.repeatsForKey : <any>null;
        data["repeatsForNrOccurences"] = this.repeatsForNrOccurences !== undefined ? this.repeatsForNrOccurences : <any>null;
        data["repeatsForNrDays"] = this.repeatsForNrDays !== undefined ? this.repeatsForNrDays : <any>null;
        data["repeatsUntilTime"] = this.repeatsUntilTime ? this.repeatsUntilTime.toISOString() : <any>null;
        return data; 
    }
}

export interface IMonthlyRecurringTaskOptions {
    id: string;
    startsAt: moment.Moment;
    monthlyRecurrences?: MonthlyRecurringTaskItemOptions[] | null;
    repeatsForKey?: string | null;
    repeatsForNrOccurences?: number | null;
    repeatsForNrDays?: number | null;
    repeatsUntilTime?: moment.Moment | null;
}

export class MonthlyRecurringTaskItemOptions implements IMonthlyRecurringTaskItemOptions {
    id!: string;
    nthOfMonth!: number;
    repeatTimes?: string[] | null;

    constructor(data?: IMonthlyRecurringTaskItemOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.nthOfMonth = _data["nthOfMonth"] !== undefined ? _data["nthOfMonth"] : <any>null;
            if (Array.isArray(_data["repeatTimes"])) {
                this.repeatTimes = [] as any;
                for (let item of _data["repeatTimes"])
                    this.repeatTimes!.push(item);
            }
        }
    }

    static fromJS(data: any): MonthlyRecurringTaskItemOptions {
        data = typeof data === 'object' ? data : {};
        let result = new MonthlyRecurringTaskItemOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["nthOfMonth"] = this.nthOfMonth !== undefined ? this.nthOfMonth : <any>null;
        if (Array.isArray(this.repeatTimes)) {
            data["repeatTimes"] = [];
            for (let item of this.repeatTimes)
                data["repeatTimes"].push(item);
        }
        return data; 
    }
}

export interface IMonthlyRecurringTaskItemOptions {
    id: string;
    nthOfMonth: number;
    repeatTimes?: string[] | null;
}

export class SpecificTimesRecurringTaskOptions implements ISpecificTimesRecurringTaskOptions {
    id!: string;
    startsAt?: moment.Moment[] | null;

    constructor(data?: ISpecificTimesRecurringTaskOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            if (Array.isArray(_data["startsAt"])) {
                this.startsAt = [] as any;
                for (let item of _data["startsAt"])
                    this.startsAt!.push(moment(item));
            }
        }
    }

    static fromJS(data: any): SpecificTimesRecurringTaskOptions {
        data = typeof data === 'object' ? data : {};
        let result = new SpecificTimesRecurringTaskOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        if (Array.isArray(this.startsAt)) {
            data["startsAt"] = [];
            for (let item of this.startsAt)
                data["startsAt"].push(item.toISOString());
        }
        return data; 
    }
}

export interface ISpecificTimesRecurringTaskOptions {
    id: string;
    startsAt?: moment.Moment[] | null;
}

export class EventTaskOptions implements IEventTaskOptions {
    id!: string;
    startsAt!: moment.Moment;
    eventModifierKey?: string | null;
    eventKey?: string | null;
    eventTimeKey?: string | null;
    repeatsForKey?: string | null;
    repeatsForNrOccurences?: number | null;
    repeatsForNrDays?: number | null;
    repeatsUntilTime?: moment.Moment | null;

    constructor(data?: IEventTaskOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.startsAt = _data["startsAt"] ? moment(_data["startsAt"].toString()) : <any>null;
            this.eventModifierKey = _data["eventModifierKey"] !== undefined ? _data["eventModifierKey"] : <any>null;
            this.eventKey = _data["eventKey"] !== undefined ? _data["eventKey"] : <any>null;
            this.eventTimeKey = _data["eventTimeKey"] !== undefined ? _data["eventTimeKey"] : <any>null;
            this.repeatsForKey = _data["repeatsForKey"] !== undefined ? _data["repeatsForKey"] : <any>null;
            this.repeatsForNrOccurences = _data["repeatsForNrOccurences"] !== undefined ? _data["repeatsForNrOccurences"] : <any>null;
            this.repeatsForNrDays = _data["repeatsForNrDays"] !== undefined ? _data["repeatsForNrDays"] : <any>null;
            this.repeatsUntilTime = _data["repeatsUntilTime"] ? moment(_data["repeatsUntilTime"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): EventTaskOptions {
        data = typeof data === 'object' ? data : {};
        let result = new EventTaskOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["startsAt"] = this.startsAt ? this.startsAt.toISOString() : <any>null;
        data["eventModifierKey"] = this.eventModifierKey !== undefined ? this.eventModifierKey : <any>null;
        data["eventKey"] = this.eventKey !== undefined ? this.eventKey : <any>null;
        data["eventTimeKey"] = this.eventTimeKey !== undefined ? this.eventTimeKey : <any>null;
        data["repeatsForKey"] = this.repeatsForKey !== undefined ? this.repeatsForKey : <any>null;
        data["repeatsForNrOccurences"] = this.repeatsForNrOccurences !== undefined ? this.repeatsForNrOccurences : <any>null;
        data["repeatsForNrDays"] = this.repeatsForNrDays !== undefined ? this.repeatsForNrDays : <any>null;
        data["repeatsUntilTime"] = this.repeatsUntilTime ? this.repeatsUntilTime.toISOString() : <any>null;
        return data; 
    }
}

export interface IEventTaskOptions {
    id: string;
    startsAt: moment.Moment;
    eventModifierKey?: string | null;
    eventKey?: string | null;
    eventTimeKey?: string | null;
    repeatsForKey?: string | null;
    repeatsForNrOccurences?: number | null;
    repeatsForNrDays?: number | null;
    repeatsUntilTime?: moment.Moment | null;
}

export class BalancedTaskOptions implements IBalancedTaskOptions {
    id!: string;
    startsAt!: moment.Moment;
    endsAt!: moment.Moment;
    excludeWeekends!: boolean;
    excludeHolidays!: boolean;
    postponeWhenRoomIsOccupied!: boolean;

    constructor(data?: IBalancedTaskOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.startsAt = _data["startsAt"] ? moment(_data["startsAt"].toString()) : <any>null;
            this.endsAt = _data["endsAt"] ? moment(_data["endsAt"].toString()) : <any>null;
            this.excludeWeekends = _data["excludeWeekends"] !== undefined ? _data["excludeWeekends"] : <any>null;
            this.excludeHolidays = _data["excludeHolidays"] !== undefined ? _data["excludeHolidays"] : <any>null;
            this.postponeWhenRoomIsOccupied = _data["postponeWhenRoomIsOccupied"] !== undefined ? _data["postponeWhenRoomIsOccupied"] : <any>null;
        }
    }

    static fromJS(data: any): BalancedTaskOptions {
        data = typeof data === 'object' ? data : {};
        let result = new BalancedTaskOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["startsAt"] = this.startsAt ? this.startsAt.toISOString() : <any>null;
        data["endsAt"] = this.endsAt ? this.endsAt.toISOString() : <any>null;
        data["excludeWeekends"] = this.excludeWeekends !== undefined ? this.excludeWeekends : <any>null;
        data["excludeHolidays"] = this.excludeHolidays !== undefined ? this.excludeHolidays : <any>null;
        data["postponeWhenRoomIsOccupied"] = this.postponeWhenRoomIsOccupied !== undefined ? this.postponeWhenRoomIsOccupied : <any>null;
        return data; 
    }
}

export interface IBalancedTaskOptions {
    id: string;
    startsAt: moment.Moment;
    endsAt: moment.Moment;
    excludeWeekends: boolean;
    excludeHolidays: boolean;
    postponeWhenRoomIsOccupied: boolean;
}

export class RecurringEveryTaskOptions implements IRecurringEveryTaskOptions {
    id!: string;
    startsAt!: moment.Moment;
    everyNumberOfDays!: number;
    repeatsForKey?: string | null;
    repeatsForNrOccurences?: number | null;
    repeatsForNrDays?: number | null;
    repeatsUntilTime?: moment.Moment | null;

    constructor(data?: IRecurringEveryTaskOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.startsAt = _data["startsAt"] ? moment(_data["startsAt"].toString()) : <any>null;
            this.everyNumberOfDays = _data["everyNumberOfDays"] !== undefined ? _data["everyNumberOfDays"] : <any>null;
            this.repeatsForKey = _data["repeatsForKey"] !== undefined ? _data["repeatsForKey"] : <any>null;
            this.repeatsForNrOccurences = _data["repeatsForNrOccurences"] !== undefined ? _data["repeatsForNrOccurences"] : <any>null;
            this.repeatsForNrDays = _data["repeatsForNrDays"] !== undefined ? _data["repeatsForNrDays"] : <any>null;
            this.repeatsUntilTime = _data["repeatsUntilTime"] ? moment(_data["repeatsUntilTime"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): RecurringEveryTaskOptions {
        data = typeof data === 'object' ? data : {};
        let result = new RecurringEveryTaskOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["startsAt"] = this.startsAt ? this.startsAt.toISOString() : <any>null;
        data["everyNumberOfDays"] = this.everyNumberOfDays !== undefined ? this.everyNumberOfDays : <any>null;
        data["repeatsForKey"] = this.repeatsForKey !== undefined ? this.repeatsForKey : <any>null;
        data["repeatsForNrOccurences"] = this.repeatsForNrOccurences !== undefined ? this.repeatsForNrOccurences : <any>null;
        data["repeatsForNrDays"] = this.repeatsForNrDays !== undefined ? this.repeatsForNrDays : <any>null;
        data["repeatsUntilTime"] = this.repeatsUntilTime ? this.repeatsUntilTime.toISOString() : <any>null;
        return data; 
    }
}

export interface IRecurringEveryTaskOptions {
    id: string;
    startsAt: moment.Moment;
    everyNumberOfDays: number;
    repeatsForKey?: string | null;
    repeatsForNrOccurences?: number | null;
    repeatsForNrDays?: number | null;
    repeatsUntilTime?: moment.Moment | null;
}

export class TaskConfigurationDetailsSummaryData implements ITaskConfigurationDetailsSummaryData {
    taskDescription?: string | null;
    numberOfTasks!: number;
    completionFactor!: number;
    completionPercentString?: string | null;
    completionStatus?: string | null;
    verificationFactor!: number;
    verificationPercentString?: string | null;
    verificationStatus?: string | null;
    numberOfPendingTasks!: number;
    numberOfWaitingTasks!: number;
    numberOfStartedTasks!: number;
    numberOfPausedTasks!: number;
    numberOfFinishedTasks!: number;
    numberOfVerifiedTasks!: number;
    numberOfCancelledTasks!: number;
    isCompleted!: boolean;

    constructor(data?: ITaskConfigurationDetailsSummaryData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.taskDescription = _data["taskDescription"] !== undefined ? _data["taskDescription"] : <any>null;
            this.numberOfTasks = _data["numberOfTasks"] !== undefined ? _data["numberOfTasks"] : <any>null;
            this.completionFactor = _data["completionFactor"] !== undefined ? _data["completionFactor"] : <any>null;
            this.completionPercentString = _data["completionPercentString"] !== undefined ? _data["completionPercentString"] : <any>null;
            this.completionStatus = _data["completionStatus"] !== undefined ? _data["completionStatus"] : <any>null;
            this.verificationFactor = _data["verificationFactor"] !== undefined ? _data["verificationFactor"] : <any>null;
            this.verificationPercentString = _data["verificationPercentString"] !== undefined ? _data["verificationPercentString"] : <any>null;
            this.verificationStatus = _data["verificationStatus"] !== undefined ? _data["verificationStatus"] : <any>null;
            this.numberOfPendingTasks = _data["numberOfPendingTasks"] !== undefined ? _data["numberOfPendingTasks"] : <any>null;
            this.numberOfWaitingTasks = _data["numberOfWaitingTasks"] !== undefined ? _data["numberOfWaitingTasks"] : <any>null;
            this.numberOfStartedTasks = _data["numberOfStartedTasks"] !== undefined ? _data["numberOfStartedTasks"] : <any>null;
            this.numberOfPausedTasks = _data["numberOfPausedTasks"] !== undefined ? _data["numberOfPausedTasks"] : <any>null;
            this.numberOfFinishedTasks = _data["numberOfFinishedTasks"] !== undefined ? _data["numberOfFinishedTasks"] : <any>null;
            this.numberOfVerifiedTasks = _data["numberOfVerifiedTasks"] !== undefined ? _data["numberOfVerifiedTasks"] : <any>null;
            this.numberOfCancelledTasks = _data["numberOfCancelledTasks"] !== undefined ? _data["numberOfCancelledTasks"] : <any>null;
            this.isCompleted = _data["isCompleted"] !== undefined ? _data["isCompleted"] : <any>null;
        }
    }

    static fromJS(data: any): TaskConfigurationDetailsSummaryData {
        data = typeof data === 'object' ? data : {};
        let result = new TaskConfigurationDetailsSummaryData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["taskDescription"] = this.taskDescription !== undefined ? this.taskDescription : <any>null;
        data["numberOfTasks"] = this.numberOfTasks !== undefined ? this.numberOfTasks : <any>null;
        data["completionFactor"] = this.completionFactor !== undefined ? this.completionFactor : <any>null;
        data["completionPercentString"] = this.completionPercentString !== undefined ? this.completionPercentString : <any>null;
        data["completionStatus"] = this.completionStatus !== undefined ? this.completionStatus : <any>null;
        data["verificationFactor"] = this.verificationFactor !== undefined ? this.verificationFactor : <any>null;
        data["verificationPercentString"] = this.verificationPercentString !== undefined ? this.verificationPercentString : <any>null;
        data["verificationStatus"] = this.verificationStatus !== undefined ? this.verificationStatus : <any>null;
        data["numberOfPendingTasks"] = this.numberOfPendingTasks !== undefined ? this.numberOfPendingTasks : <any>null;
        data["numberOfWaitingTasks"] = this.numberOfWaitingTasks !== undefined ? this.numberOfWaitingTasks : <any>null;
        data["numberOfStartedTasks"] = this.numberOfStartedTasks !== undefined ? this.numberOfStartedTasks : <any>null;
        data["numberOfPausedTasks"] = this.numberOfPausedTasks !== undefined ? this.numberOfPausedTasks : <any>null;
        data["numberOfFinishedTasks"] = this.numberOfFinishedTasks !== undefined ? this.numberOfFinishedTasks : <any>null;
        data["numberOfVerifiedTasks"] = this.numberOfVerifiedTasks !== undefined ? this.numberOfVerifiedTasks : <any>null;
        data["numberOfCancelledTasks"] = this.numberOfCancelledTasks !== undefined ? this.numberOfCancelledTasks : <any>null;
        data["isCompleted"] = this.isCompleted !== undefined ? this.isCompleted : <any>null;
        return data; 
    }
}

export interface ITaskConfigurationDetailsSummaryData {
    taskDescription?: string | null;
    numberOfTasks: number;
    completionFactor: number;
    completionPercentString?: string | null;
    completionStatus?: string | null;
    verificationFactor: number;
    verificationPercentString?: string | null;
    verificationStatus?: string | null;
    numberOfPendingTasks: number;
    numberOfWaitingTasks: number;
    numberOfStartedTasks: number;
    numberOfPausedTasks: number;
    numberOfFinishedTasks: number;
    numberOfVerifiedTasks: number;
    numberOfCancelledTasks: number;
    isCompleted: boolean;
}

export class GetTaskConfigurationDetailsQuery implements IGetTaskConfigurationDetailsQuery {
    id!: string;
    loadSummary!: boolean;

    constructor(data?: IGetTaskConfigurationDetailsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.loadSummary = _data["loadSummary"] !== undefined ? _data["loadSummary"] : <any>null;
        }
    }

    static fromJS(data: any): GetTaskConfigurationDetailsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetTaskConfigurationDetailsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["loadSummary"] = this.loadSummary !== undefined ? this.loadSummary : <any>null;
        return data; 
    }
}

export interface IGetTaskConfigurationDetailsQuery {
    id: string;
    loadSummary: boolean;
}

export class TaskDetailsData implements ITaskDetailsData {
    id!: string;
    actions?: TaskDetailsActionData[] | null;
    typeKey?: string | null;
    typeDescription?: string | null;
    repeatsForKey?: string | null;
    recurringTypeKey?: string | null;
    mustBeFinishedByAllWhos!: boolean;
    credits!: number;
    price!: number;
    priorityKey?: string | null;
    isGuestRequest!: boolean;
    isShownInNewsFeed!: boolean;
    isRescheduledEveryDayUntilFinished!: boolean;
    isMajorNotificationRaisedWhenFinished!: boolean;
    isBlockingCleaningUntilFinished!: boolean;
    isForPlannedAttendant!: boolean;
    userId?: string | null;
    userFullName?: string | null;
    userUsername?: string | null;
    userInitials?: string | null;
    userAvatarImageUrl?: string | null;
    fromReservationId?: string | null;
    fromReservationGuestName?: string | null;
    fromWarehouseId?: string | null;
    fromWarehouseName?: string | null;
    fromRoomId?: string | null;
    fromRoomName?: string | null;
    fromHotelId?: string | null;
    fromHotelName?: string | null;
    toReservationId?: string | null;
    toReservationGuestName?: string | null;
    toWarehouseId?: string | null;
    toWarehouseName?: string | null;
    toRoomId?: string | null;
    toRoomName?: string | null;
    toHotelId?: string | null;
    toHotelName?: string | null;
    whereTypeKey?: string | null;
    comment?: string | null;
    userAvatarUrl?: string | null;
    assetMainImageUrl?: string | null;
    eventModifierKey?: string | null;
    eventKey?: string | null;
    eventTimeKey?: string | null;
    statusKey?: string | null;
    statusDescription?: string | null;
    startsAt!: moment.Moment;
    when?: string | null;
    systemTaskConfigurationId!: string;
    isManuallyModified!: boolean;
    createdByUserFullName?: string | null;
    createdAt!: moment.Moment;
    images?: TaskImageData[] | null;
    filestackImageUrls?: string[] | null;
    briefHistory?: TaskDetailsBriefHistoryItem[] | null;

    constructor(data?: ITaskDetailsData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            if (Array.isArray(_data["actions"])) {
                this.actions = [] as any;
                for (let item of _data["actions"])
                    this.actions!.push(TaskDetailsActionData.fromJS(item));
            }
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            this.typeDescription = _data["typeDescription"] !== undefined ? _data["typeDescription"] : <any>null;
            this.repeatsForKey = _data["repeatsForKey"] !== undefined ? _data["repeatsForKey"] : <any>null;
            this.recurringTypeKey = _data["recurringTypeKey"] !== undefined ? _data["recurringTypeKey"] : <any>null;
            this.mustBeFinishedByAllWhos = _data["mustBeFinishedByAllWhos"] !== undefined ? _data["mustBeFinishedByAllWhos"] : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
            this.priorityKey = _data["priorityKey"] !== undefined ? _data["priorityKey"] : <any>null;
            this.isGuestRequest = _data["isGuestRequest"] !== undefined ? _data["isGuestRequest"] : <any>null;
            this.isShownInNewsFeed = _data["isShownInNewsFeed"] !== undefined ? _data["isShownInNewsFeed"] : <any>null;
            this.isRescheduledEveryDayUntilFinished = _data["isRescheduledEveryDayUntilFinished"] !== undefined ? _data["isRescheduledEveryDayUntilFinished"] : <any>null;
            this.isMajorNotificationRaisedWhenFinished = _data["isMajorNotificationRaisedWhenFinished"] !== undefined ? _data["isMajorNotificationRaisedWhenFinished"] : <any>null;
            this.isBlockingCleaningUntilFinished = _data["isBlockingCleaningUntilFinished"] !== undefined ? _data["isBlockingCleaningUntilFinished"] : <any>null;
            this.isForPlannedAttendant = _data["isForPlannedAttendant"] !== undefined ? _data["isForPlannedAttendant"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.userFullName = _data["userFullName"] !== undefined ? _data["userFullName"] : <any>null;
            this.userUsername = _data["userUsername"] !== undefined ? _data["userUsername"] : <any>null;
            this.userInitials = _data["userInitials"] !== undefined ? _data["userInitials"] : <any>null;
            this.userAvatarImageUrl = _data["userAvatarImageUrl"] !== undefined ? _data["userAvatarImageUrl"] : <any>null;
            this.fromReservationId = _data["fromReservationId"] !== undefined ? _data["fromReservationId"] : <any>null;
            this.fromReservationGuestName = _data["fromReservationGuestName"] !== undefined ? _data["fromReservationGuestName"] : <any>null;
            this.fromWarehouseId = _data["fromWarehouseId"] !== undefined ? _data["fromWarehouseId"] : <any>null;
            this.fromWarehouseName = _data["fromWarehouseName"] !== undefined ? _data["fromWarehouseName"] : <any>null;
            this.fromRoomId = _data["fromRoomId"] !== undefined ? _data["fromRoomId"] : <any>null;
            this.fromRoomName = _data["fromRoomName"] !== undefined ? _data["fromRoomName"] : <any>null;
            this.fromHotelId = _data["fromHotelId"] !== undefined ? _data["fromHotelId"] : <any>null;
            this.fromHotelName = _data["fromHotelName"] !== undefined ? _data["fromHotelName"] : <any>null;
            this.toReservationId = _data["toReservationId"] !== undefined ? _data["toReservationId"] : <any>null;
            this.toReservationGuestName = _data["toReservationGuestName"] !== undefined ? _data["toReservationGuestName"] : <any>null;
            this.toWarehouseId = _data["toWarehouseId"] !== undefined ? _data["toWarehouseId"] : <any>null;
            this.toWarehouseName = _data["toWarehouseName"] !== undefined ? _data["toWarehouseName"] : <any>null;
            this.toRoomId = _data["toRoomId"] !== undefined ? _data["toRoomId"] : <any>null;
            this.toRoomName = _data["toRoomName"] !== undefined ? _data["toRoomName"] : <any>null;
            this.toHotelId = _data["toHotelId"] !== undefined ? _data["toHotelId"] : <any>null;
            this.toHotelName = _data["toHotelName"] !== undefined ? _data["toHotelName"] : <any>null;
            this.whereTypeKey = _data["whereTypeKey"] !== undefined ? _data["whereTypeKey"] : <any>null;
            this.comment = _data["comment"] !== undefined ? _data["comment"] : <any>null;
            this.userAvatarUrl = _data["userAvatarUrl"] !== undefined ? _data["userAvatarUrl"] : <any>null;
            this.assetMainImageUrl = _data["assetMainImageUrl"] !== undefined ? _data["assetMainImageUrl"] : <any>null;
            this.eventModifierKey = _data["eventModifierKey"] !== undefined ? _data["eventModifierKey"] : <any>null;
            this.eventKey = _data["eventKey"] !== undefined ? _data["eventKey"] : <any>null;
            this.eventTimeKey = _data["eventTimeKey"] !== undefined ? _data["eventTimeKey"] : <any>null;
            this.statusKey = _data["statusKey"] !== undefined ? _data["statusKey"] : <any>null;
            this.statusDescription = _data["statusDescription"] !== undefined ? _data["statusDescription"] : <any>null;
            this.startsAt = _data["startsAt"] ? moment(_data["startsAt"].toString()) : <any>null;
            this.when = _data["when"] !== undefined ? _data["when"] : <any>null;
            this.systemTaskConfigurationId = _data["systemTaskConfigurationId"] !== undefined ? _data["systemTaskConfigurationId"] : <any>null;
            this.isManuallyModified = _data["isManuallyModified"] !== undefined ? _data["isManuallyModified"] : <any>null;
            this.createdByUserFullName = _data["createdByUserFullName"] !== undefined ? _data["createdByUserFullName"] : <any>null;
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>null;
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(TaskImageData.fromJS(item));
            }
            if (Array.isArray(_data["filestackImageUrls"])) {
                this.filestackImageUrls = [] as any;
                for (let item of _data["filestackImageUrls"])
                    this.filestackImageUrls!.push(item);
            }
            if (Array.isArray(_data["briefHistory"])) {
                this.briefHistory = [] as any;
                for (let item of _data["briefHistory"])
                    this.briefHistory!.push(TaskDetailsBriefHistoryItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TaskDetailsData {
        data = typeof data === 'object' ? data : {};
        let result = new TaskDetailsData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        if (Array.isArray(this.actions)) {
            data["actions"] = [];
            for (let item of this.actions)
                data["actions"].push(item.toJSON());
        }
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        data["typeDescription"] = this.typeDescription !== undefined ? this.typeDescription : <any>null;
        data["repeatsForKey"] = this.repeatsForKey !== undefined ? this.repeatsForKey : <any>null;
        data["recurringTypeKey"] = this.recurringTypeKey !== undefined ? this.recurringTypeKey : <any>null;
        data["mustBeFinishedByAllWhos"] = this.mustBeFinishedByAllWhos !== undefined ? this.mustBeFinishedByAllWhos : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["priorityKey"] = this.priorityKey !== undefined ? this.priorityKey : <any>null;
        data["isGuestRequest"] = this.isGuestRequest !== undefined ? this.isGuestRequest : <any>null;
        data["isShownInNewsFeed"] = this.isShownInNewsFeed !== undefined ? this.isShownInNewsFeed : <any>null;
        data["isRescheduledEveryDayUntilFinished"] = this.isRescheduledEveryDayUntilFinished !== undefined ? this.isRescheduledEveryDayUntilFinished : <any>null;
        data["isMajorNotificationRaisedWhenFinished"] = this.isMajorNotificationRaisedWhenFinished !== undefined ? this.isMajorNotificationRaisedWhenFinished : <any>null;
        data["isBlockingCleaningUntilFinished"] = this.isBlockingCleaningUntilFinished !== undefined ? this.isBlockingCleaningUntilFinished : <any>null;
        data["isForPlannedAttendant"] = this.isForPlannedAttendant !== undefined ? this.isForPlannedAttendant : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["userFullName"] = this.userFullName !== undefined ? this.userFullName : <any>null;
        data["userUsername"] = this.userUsername !== undefined ? this.userUsername : <any>null;
        data["userInitials"] = this.userInitials !== undefined ? this.userInitials : <any>null;
        data["userAvatarImageUrl"] = this.userAvatarImageUrl !== undefined ? this.userAvatarImageUrl : <any>null;
        data["fromReservationId"] = this.fromReservationId !== undefined ? this.fromReservationId : <any>null;
        data["fromReservationGuestName"] = this.fromReservationGuestName !== undefined ? this.fromReservationGuestName : <any>null;
        data["fromWarehouseId"] = this.fromWarehouseId !== undefined ? this.fromWarehouseId : <any>null;
        data["fromWarehouseName"] = this.fromWarehouseName !== undefined ? this.fromWarehouseName : <any>null;
        data["fromRoomId"] = this.fromRoomId !== undefined ? this.fromRoomId : <any>null;
        data["fromRoomName"] = this.fromRoomName !== undefined ? this.fromRoomName : <any>null;
        data["fromHotelId"] = this.fromHotelId !== undefined ? this.fromHotelId : <any>null;
        data["fromHotelName"] = this.fromHotelName !== undefined ? this.fromHotelName : <any>null;
        data["toReservationId"] = this.toReservationId !== undefined ? this.toReservationId : <any>null;
        data["toReservationGuestName"] = this.toReservationGuestName !== undefined ? this.toReservationGuestName : <any>null;
        data["toWarehouseId"] = this.toWarehouseId !== undefined ? this.toWarehouseId : <any>null;
        data["toWarehouseName"] = this.toWarehouseName !== undefined ? this.toWarehouseName : <any>null;
        data["toRoomId"] = this.toRoomId !== undefined ? this.toRoomId : <any>null;
        data["toRoomName"] = this.toRoomName !== undefined ? this.toRoomName : <any>null;
        data["toHotelId"] = this.toHotelId !== undefined ? this.toHotelId : <any>null;
        data["toHotelName"] = this.toHotelName !== undefined ? this.toHotelName : <any>null;
        data["whereTypeKey"] = this.whereTypeKey !== undefined ? this.whereTypeKey : <any>null;
        data["comment"] = this.comment !== undefined ? this.comment : <any>null;
        data["userAvatarUrl"] = this.userAvatarUrl !== undefined ? this.userAvatarUrl : <any>null;
        data["assetMainImageUrl"] = this.assetMainImageUrl !== undefined ? this.assetMainImageUrl : <any>null;
        data["eventModifierKey"] = this.eventModifierKey !== undefined ? this.eventModifierKey : <any>null;
        data["eventKey"] = this.eventKey !== undefined ? this.eventKey : <any>null;
        data["eventTimeKey"] = this.eventTimeKey !== undefined ? this.eventTimeKey : <any>null;
        data["statusKey"] = this.statusKey !== undefined ? this.statusKey : <any>null;
        data["statusDescription"] = this.statusDescription !== undefined ? this.statusDescription : <any>null;
        data["startsAt"] = this.startsAt ? this.startsAt.toISOString() : <any>null;
        data["when"] = this.when !== undefined ? this.when : <any>null;
        data["systemTaskConfigurationId"] = this.systemTaskConfigurationId !== undefined ? this.systemTaskConfigurationId : <any>null;
        data["isManuallyModified"] = this.isManuallyModified !== undefined ? this.isManuallyModified : <any>null;
        data["createdByUserFullName"] = this.createdByUserFullName !== undefined ? this.createdByUserFullName : <any>null;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item.toJSON());
        }
        if (Array.isArray(this.filestackImageUrls)) {
            data["filestackImageUrls"] = [];
            for (let item of this.filestackImageUrls)
                data["filestackImageUrls"].push(item);
        }
        if (Array.isArray(this.briefHistory)) {
            data["briefHistory"] = [];
            for (let item of this.briefHistory)
                data["briefHistory"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITaskDetailsData {
    id: string;
    actions?: TaskDetailsActionData[] | null;
    typeKey?: string | null;
    typeDescription?: string | null;
    repeatsForKey?: string | null;
    recurringTypeKey?: string | null;
    mustBeFinishedByAllWhos: boolean;
    credits: number;
    price: number;
    priorityKey?: string | null;
    isGuestRequest: boolean;
    isShownInNewsFeed: boolean;
    isRescheduledEveryDayUntilFinished: boolean;
    isMajorNotificationRaisedWhenFinished: boolean;
    isBlockingCleaningUntilFinished: boolean;
    isForPlannedAttendant: boolean;
    userId?: string | null;
    userFullName?: string | null;
    userUsername?: string | null;
    userInitials?: string | null;
    userAvatarImageUrl?: string | null;
    fromReservationId?: string | null;
    fromReservationGuestName?: string | null;
    fromWarehouseId?: string | null;
    fromWarehouseName?: string | null;
    fromRoomId?: string | null;
    fromRoomName?: string | null;
    fromHotelId?: string | null;
    fromHotelName?: string | null;
    toReservationId?: string | null;
    toReservationGuestName?: string | null;
    toWarehouseId?: string | null;
    toWarehouseName?: string | null;
    toRoomId?: string | null;
    toRoomName?: string | null;
    toHotelId?: string | null;
    toHotelName?: string | null;
    whereTypeKey?: string | null;
    comment?: string | null;
    userAvatarUrl?: string | null;
    assetMainImageUrl?: string | null;
    eventModifierKey?: string | null;
    eventKey?: string | null;
    eventTimeKey?: string | null;
    statusKey?: string | null;
    statusDescription?: string | null;
    startsAt: moment.Moment;
    when?: string | null;
    systemTaskConfigurationId: string;
    isManuallyModified: boolean;
    createdByUserFullName?: string | null;
    createdAt: moment.Moment;
    images?: TaskImageData[] | null;
    filestackImageUrls?: string[] | null;
    briefHistory?: TaskDetailsBriefHistoryItem[] | null;
}

export class TaskDetailsActionData implements ITaskDetailsActionData {
    actionName?: string | null;
    assetName?: string | null;
    assetGroupName?: string | null;
    assetId!: string;
    assetGroupId!: string;
    assetQuantity!: number;
    assetImageUrl?: string | null;

    constructor(data?: ITaskDetailsActionData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.actionName = _data["actionName"] !== undefined ? _data["actionName"] : <any>null;
            this.assetName = _data["assetName"] !== undefined ? _data["assetName"] : <any>null;
            this.assetGroupName = _data["assetGroupName"] !== undefined ? _data["assetGroupName"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            this.assetQuantity = _data["assetQuantity"] !== undefined ? _data["assetQuantity"] : <any>null;
            this.assetImageUrl = _data["assetImageUrl"] !== undefined ? _data["assetImageUrl"] : <any>null;
        }
    }

    static fromJS(data: any): TaskDetailsActionData {
        data = typeof data === 'object' ? data : {};
        let result = new TaskDetailsActionData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["actionName"] = this.actionName !== undefined ? this.actionName : <any>null;
        data["assetName"] = this.assetName !== undefined ? this.assetName : <any>null;
        data["assetGroupName"] = this.assetGroupName !== undefined ? this.assetGroupName : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        data["assetQuantity"] = this.assetQuantity !== undefined ? this.assetQuantity : <any>null;
        data["assetImageUrl"] = this.assetImageUrl !== undefined ? this.assetImageUrl : <any>null;
        return data; 
    }
}

export interface ITaskDetailsActionData {
    actionName?: string | null;
    assetName?: string | null;
    assetGroupName?: string | null;
    assetId: string;
    assetGroupId: string;
    assetQuantity: number;
    assetImageUrl?: string | null;
}

export class TaskImageData implements ITaskImageData {
    imageUrl?: string | null;
    fileName?: string | null;
    fileId!: string;

    constructor(data?: ITaskImageData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.imageUrl = _data["imageUrl"] !== undefined ? _data["imageUrl"] : <any>null;
            this.fileName = _data["fileName"] !== undefined ? _data["fileName"] : <any>null;
            this.fileId = _data["fileId"] !== undefined ? _data["fileId"] : <any>null;
        }
    }

    static fromJS(data: any): TaskImageData {
        data = typeof data === 'object' ? data : {};
        let result = new TaskImageData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["imageUrl"] = this.imageUrl !== undefined ? this.imageUrl : <any>null;
        data["fileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        data["fileId"] = this.fileId !== undefined ? this.fileId : <any>null;
        return data; 
    }
}

export interface ITaskImageData {
    imageUrl?: string | null;
    fileName?: string | null;
    fileId: string;
}

export class TaskDetailsBriefHistoryItem implements ITaskDetailsBriefHistoryItem {
    userName?: string | null;
    userId?: string | null;
    message?: string | null;
    createdAt!: moment.Moment;

    constructor(data?: ITaskDetailsBriefHistoryItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): TaskDetailsBriefHistoryItem {
        data = typeof data === 'object' ? data : {};
        let result = new TaskDetailsBriefHistoryItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        return data; 
    }
}

export interface ITaskDetailsBriefHistoryItem {
    userName?: string | null;
    userId?: string | null;
    message?: string | null;
    createdAt: moment.Moment;
}

export class GetTaskDetailsQuery implements IGetTaskDetailsQuery {
    id!: string;

    constructor(data?: IGetTaskDetailsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): GetTaskDetailsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetTaskDetailsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IGetTaskDetailsQuery {
    id: string;
}

export class ProcessResponseOfInsertTaskConfigurationResult extends ProcessResponse implements IProcessResponseOfInsertTaskConfigurationResult {
    data?: InsertTaskConfigurationResult | null;

    constructor(data?: IProcessResponseOfInsertTaskConfigurationResult) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? InsertTaskConfigurationResult.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfInsertTaskConfigurationResult {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfInsertTaskConfigurationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfInsertTaskConfigurationResult extends IProcessResponse {
    data?: InsertTaskConfigurationResult | null;
}

export class InsertTaskConfigurationResult implements IInsertTaskConfigurationResult {
    id!: string;
    files?: InsertTaskConfigurationFileResult[] | null;

    constructor(data?: IInsertTaskConfigurationResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            if (Array.isArray(_data["files"])) {
                this.files = [] as any;
                for (let item of _data["files"])
                    this.files!.push(InsertTaskConfigurationFileResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InsertTaskConfigurationResult {
        data = typeof data === 'object' ? data : {};
        let result = new InsertTaskConfigurationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        if (Array.isArray(this.files)) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IInsertTaskConfigurationResult {
    id: string;
    files?: InsertTaskConfigurationFileResult[] | null;
}

export class InsertTaskConfigurationFileResult implements IInsertTaskConfigurationFileResult {
    fileId!: string;
    fileName?: string | null;
    fileUrl?: string | null;

    constructor(data?: IInsertTaskConfigurationFileResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileId = _data["fileId"] !== undefined ? _data["fileId"] : <any>null;
            this.fileName = _data["fileName"] !== undefined ? _data["fileName"] : <any>null;
            this.fileUrl = _data["fileUrl"] !== undefined ? _data["fileUrl"] : <any>null;
        }
    }

    static fromJS(data: any): InsertTaskConfigurationFileResult {
        data = typeof data === 'object' ? data : {};
        let result = new InsertTaskConfigurationFileResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileId"] = this.fileId !== undefined ? this.fileId : <any>null;
        data["fileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        data["fileUrl"] = this.fileUrl !== undefined ? this.fileUrl : <any>null;
        return data; 
    }
}

export interface IInsertTaskConfigurationFileResult {
    fileId: string;
    fileName?: string | null;
    fileUrl?: string | null;
}

export class SaveTaskConfigurationRequest implements ISaveTaskConfigurationRequest {
    comment?: string | null;
    taskTypeKey?: string | null;
    recurringTaskTypeKey?: string | null;
    mustBeFinishedByAllWhos!: boolean;
    credits!: number;
    price!: number;
    priorityKey?: string | null;
    isGuestRequest!: boolean;
    isShownInNewsFeed!: boolean;
    isRescheduledEveryDayUntilFinished!: boolean;
    isMajorNotificationRaisedWhenFinished!: boolean;
    isBlockingCleaningUntilFinished!: boolean;
    whatsTypeKey?: string | null;
    fromReferenceId?: string | null;
    fromReferenceName?: string | null;
    fromReferenceTypeKey?: string | null;
    toReferenceId?: string | null;
    toReferenceName?: string | null;
    toReferenceTypeKey?: string | null;
    whats?: SaveTaskWhatData[] | null;
    whos?: SaveTaskWhoData[] | null;
    wheres?: SaveTaskWhereData[] | null;
    files?: SaveTaskFileData[] | null;
    filestackImageUrls?: string[] | null;
    singleTaskOptions?: SaveSingleTaskOptions | null;
    balancedTaskOptions?: SaveBalancedTaskOptions | null;
    dailyRecurringTaskOptions?: SaveDailyRecurringTaskOptions | null;
    weeklyRecurringTaskOptions?: SaveWeeklyRecurringTaskOptions | null;
    monthlyRecurringTaskOptions?: SaveMonthlyRecurringTaskOptions | null;
    specificTimesRecurringTaskOptions?: SaveSpecificTimesRecurringTaskOptions | null;
    eventTaskOptions?: SaveEventTaskOptions | null;
    recurringEveryTaskOptions?: SaveRecurringEveryTaskOptions | null;

    constructor(data?: ISaveTaskConfigurationRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.comment = _data["comment"] !== undefined ? _data["comment"] : <any>null;
            this.taskTypeKey = _data["taskTypeKey"] !== undefined ? _data["taskTypeKey"] : <any>null;
            this.recurringTaskTypeKey = _data["recurringTaskTypeKey"] !== undefined ? _data["recurringTaskTypeKey"] : <any>null;
            this.mustBeFinishedByAllWhos = _data["mustBeFinishedByAllWhos"] !== undefined ? _data["mustBeFinishedByAllWhos"] : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
            this.priorityKey = _data["priorityKey"] !== undefined ? _data["priorityKey"] : <any>null;
            this.isGuestRequest = _data["isGuestRequest"] !== undefined ? _data["isGuestRequest"] : <any>null;
            this.isShownInNewsFeed = _data["isShownInNewsFeed"] !== undefined ? _data["isShownInNewsFeed"] : <any>null;
            this.isRescheduledEveryDayUntilFinished = _data["isRescheduledEveryDayUntilFinished"] !== undefined ? _data["isRescheduledEveryDayUntilFinished"] : <any>null;
            this.isMajorNotificationRaisedWhenFinished = _data["isMajorNotificationRaisedWhenFinished"] !== undefined ? _data["isMajorNotificationRaisedWhenFinished"] : <any>null;
            this.isBlockingCleaningUntilFinished = _data["isBlockingCleaningUntilFinished"] !== undefined ? _data["isBlockingCleaningUntilFinished"] : <any>null;
            this.whatsTypeKey = _data["whatsTypeKey"] !== undefined ? _data["whatsTypeKey"] : <any>null;
            this.fromReferenceId = _data["fromReferenceId"] !== undefined ? _data["fromReferenceId"] : <any>null;
            this.fromReferenceName = _data["fromReferenceName"] !== undefined ? _data["fromReferenceName"] : <any>null;
            this.fromReferenceTypeKey = _data["fromReferenceTypeKey"] !== undefined ? _data["fromReferenceTypeKey"] : <any>null;
            this.toReferenceId = _data["toReferenceId"] !== undefined ? _data["toReferenceId"] : <any>null;
            this.toReferenceName = _data["toReferenceName"] !== undefined ? _data["toReferenceName"] : <any>null;
            this.toReferenceTypeKey = _data["toReferenceTypeKey"] !== undefined ? _data["toReferenceTypeKey"] : <any>null;
            if (Array.isArray(_data["whats"])) {
                this.whats = [] as any;
                for (let item of _data["whats"])
                    this.whats!.push(SaveTaskWhatData.fromJS(item));
            }
            if (Array.isArray(_data["whos"])) {
                this.whos = [] as any;
                for (let item of _data["whos"])
                    this.whos!.push(SaveTaskWhoData.fromJS(item));
            }
            if (Array.isArray(_data["wheres"])) {
                this.wheres = [] as any;
                for (let item of _data["wheres"])
                    this.wheres!.push(SaveTaskWhereData.fromJS(item));
            }
            if (Array.isArray(_data["files"])) {
                this.files = [] as any;
                for (let item of _data["files"])
                    this.files!.push(SaveTaskFileData.fromJS(item));
            }
            if (Array.isArray(_data["filestackImageUrls"])) {
                this.filestackImageUrls = [] as any;
                for (let item of _data["filestackImageUrls"])
                    this.filestackImageUrls!.push(item);
            }
            this.singleTaskOptions = _data["singleTaskOptions"] ? SaveSingleTaskOptions.fromJS(_data["singleTaskOptions"]) : <any>null;
            this.balancedTaskOptions = _data["balancedTaskOptions"] ? SaveBalancedTaskOptions.fromJS(_data["balancedTaskOptions"]) : <any>null;
            this.dailyRecurringTaskOptions = _data["dailyRecurringTaskOptions"] ? SaveDailyRecurringTaskOptions.fromJS(_data["dailyRecurringTaskOptions"]) : <any>null;
            this.weeklyRecurringTaskOptions = _data["weeklyRecurringTaskOptions"] ? SaveWeeklyRecurringTaskOptions.fromJS(_data["weeklyRecurringTaskOptions"]) : <any>null;
            this.monthlyRecurringTaskOptions = _data["monthlyRecurringTaskOptions"] ? SaveMonthlyRecurringTaskOptions.fromJS(_data["monthlyRecurringTaskOptions"]) : <any>null;
            this.specificTimesRecurringTaskOptions = _data["specificTimesRecurringTaskOptions"] ? SaveSpecificTimesRecurringTaskOptions.fromJS(_data["specificTimesRecurringTaskOptions"]) : <any>null;
            this.eventTaskOptions = _data["eventTaskOptions"] ? SaveEventTaskOptions.fromJS(_data["eventTaskOptions"]) : <any>null;
            this.recurringEveryTaskOptions = _data["recurringEveryTaskOptions"] ? SaveRecurringEveryTaskOptions.fromJS(_data["recurringEveryTaskOptions"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveTaskConfigurationRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SaveTaskConfigurationRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["comment"] = this.comment !== undefined ? this.comment : <any>null;
        data["taskTypeKey"] = this.taskTypeKey !== undefined ? this.taskTypeKey : <any>null;
        data["recurringTaskTypeKey"] = this.recurringTaskTypeKey !== undefined ? this.recurringTaskTypeKey : <any>null;
        data["mustBeFinishedByAllWhos"] = this.mustBeFinishedByAllWhos !== undefined ? this.mustBeFinishedByAllWhos : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["priorityKey"] = this.priorityKey !== undefined ? this.priorityKey : <any>null;
        data["isGuestRequest"] = this.isGuestRequest !== undefined ? this.isGuestRequest : <any>null;
        data["isShownInNewsFeed"] = this.isShownInNewsFeed !== undefined ? this.isShownInNewsFeed : <any>null;
        data["isRescheduledEveryDayUntilFinished"] = this.isRescheduledEveryDayUntilFinished !== undefined ? this.isRescheduledEveryDayUntilFinished : <any>null;
        data["isMajorNotificationRaisedWhenFinished"] = this.isMajorNotificationRaisedWhenFinished !== undefined ? this.isMajorNotificationRaisedWhenFinished : <any>null;
        data["isBlockingCleaningUntilFinished"] = this.isBlockingCleaningUntilFinished !== undefined ? this.isBlockingCleaningUntilFinished : <any>null;
        data["whatsTypeKey"] = this.whatsTypeKey !== undefined ? this.whatsTypeKey : <any>null;
        data["fromReferenceId"] = this.fromReferenceId !== undefined ? this.fromReferenceId : <any>null;
        data["fromReferenceName"] = this.fromReferenceName !== undefined ? this.fromReferenceName : <any>null;
        data["fromReferenceTypeKey"] = this.fromReferenceTypeKey !== undefined ? this.fromReferenceTypeKey : <any>null;
        data["toReferenceId"] = this.toReferenceId !== undefined ? this.toReferenceId : <any>null;
        data["toReferenceName"] = this.toReferenceName !== undefined ? this.toReferenceName : <any>null;
        data["toReferenceTypeKey"] = this.toReferenceTypeKey !== undefined ? this.toReferenceTypeKey : <any>null;
        if (Array.isArray(this.whats)) {
            data["whats"] = [];
            for (let item of this.whats)
                data["whats"].push(item.toJSON());
        }
        if (Array.isArray(this.whos)) {
            data["whos"] = [];
            for (let item of this.whos)
                data["whos"].push(item.toJSON());
        }
        if (Array.isArray(this.wheres)) {
            data["wheres"] = [];
            for (let item of this.wheres)
                data["wheres"].push(item.toJSON());
        }
        if (Array.isArray(this.files)) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        if (Array.isArray(this.filestackImageUrls)) {
            data["filestackImageUrls"] = [];
            for (let item of this.filestackImageUrls)
                data["filestackImageUrls"].push(item);
        }
        data["singleTaskOptions"] = this.singleTaskOptions ? this.singleTaskOptions.toJSON() : <any>null;
        data["balancedTaskOptions"] = this.balancedTaskOptions ? this.balancedTaskOptions.toJSON() : <any>null;
        data["dailyRecurringTaskOptions"] = this.dailyRecurringTaskOptions ? this.dailyRecurringTaskOptions.toJSON() : <any>null;
        data["weeklyRecurringTaskOptions"] = this.weeklyRecurringTaskOptions ? this.weeklyRecurringTaskOptions.toJSON() : <any>null;
        data["monthlyRecurringTaskOptions"] = this.monthlyRecurringTaskOptions ? this.monthlyRecurringTaskOptions.toJSON() : <any>null;
        data["specificTimesRecurringTaskOptions"] = this.specificTimesRecurringTaskOptions ? this.specificTimesRecurringTaskOptions.toJSON() : <any>null;
        data["eventTaskOptions"] = this.eventTaskOptions ? this.eventTaskOptions.toJSON() : <any>null;
        data["recurringEveryTaskOptions"] = this.recurringEveryTaskOptions ? this.recurringEveryTaskOptions.toJSON() : <any>null;
        return data; 
    }
}

export interface ISaveTaskConfigurationRequest {
    comment?: string | null;
    taskTypeKey?: string | null;
    recurringTaskTypeKey?: string | null;
    mustBeFinishedByAllWhos: boolean;
    credits: number;
    price: number;
    priorityKey?: string | null;
    isGuestRequest: boolean;
    isShownInNewsFeed: boolean;
    isRescheduledEveryDayUntilFinished: boolean;
    isMajorNotificationRaisedWhenFinished: boolean;
    isBlockingCleaningUntilFinished: boolean;
    whatsTypeKey?: string | null;
    fromReferenceId?: string | null;
    fromReferenceName?: string | null;
    fromReferenceTypeKey?: string | null;
    toReferenceId?: string | null;
    toReferenceName?: string | null;
    toReferenceTypeKey?: string | null;
    whats?: SaveTaskWhatData[] | null;
    whos?: SaveTaskWhoData[] | null;
    wheres?: SaveTaskWhereData[] | null;
    files?: SaveTaskFileData[] | null;
    filestackImageUrls?: string[] | null;
    singleTaskOptions?: SaveSingleTaskOptions | null;
    balancedTaskOptions?: SaveBalancedTaskOptions | null;
    dailyRecurringTaskOptions?: SaveDailyRecurringTaskOptions | null;
    weeklyRecurringTaskOptions?: SaveWeeklyRecurringTaskOptions | null;
    monthlyRecurringTaskOptions?: SaveMonthlyRecurringTaskOptions | null;
    specificTimesRecurringTaskOptions?: SaveSpecificTimesRecurringTaskOptions | null;
    eventTaskOptions?: SaveEventTaskOptions | null;
    recurringEveryTaskOptions?: SaveRecurringEveryTaskOptions | null;
}

export class InsertTaskConfigurationCommand extends SaveTaskConfigurationRequest implements IInsertTaskConfigurationCommand {

    constructor(data?: IInsertTaskConfigurationCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): InsertTaskConfigurationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new InsertTaskConfigurationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IInsertTaskConfigurationCommand extends ISaveTaskConfigurationRequest {
}

export class SaveTaskWhatData extends TaskWhatData implements ISaveTaskWhatData {

    constructor(data?: ISaveTaskWhatData) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): SaveTaskWhatData {
        data = typeof data === 'object' ? data : {};
        let result = new SaveTaskWhatData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ISaveTaskWhatData extends ITaskWhatData {
}

export class SaveTaskWhoData extends TaskWhoData implements ISaveTaskWhoData {

    constructor(data?: ISaveTaskWhoData) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): SaveTaskWhoData {
        data = typeof data === 'object' ? data : {};
        let result = new SaveTaskWhoData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ISaveTaskWhoData extends ITaskWhoData {
}

export class SaveTaskWhereData extends TaskWhereData implements ISaveTaskWhereData {

    constructor(data?: ISaveTaskWhereData) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): SaveTaskWhereData {
        data = typeof data === 'object' ? data : {};
        let result = new SaveTaskWhereData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ISaveTaskWhereData extends ITaskWhereData {
}

export class TaskFileData implements ITaskFileData {
    fileName?: string | null;
    isNew!: boolean;

    constructor(data?: ITaskFileData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileName = _data["fileName"] !== undefined ? _data["fileName"] : <any>null;
            this.isNew = _data["isNew"] !== undefined ? _data["isNew"] : <any>null;
        }
    }

    static fromJS(data: any): TaskFileData {
        data = typeof data === 'object' ? data : {};
        let result = new TaskFileData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        data["isNew"] = this.isNew !== undefined ? this.isNew : <any>null;
        return data; 
    }
}

export interface ITaskFileData {
    fileName?: string | null;
    isNew: boolean;
}

export class SaveTaskFileData extends TaskFileData implements ISaveTaskFileData {

    constructor(data?: ISaveTaskFileData) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): SaveTaskFileData {
        data = typeof data === 'object' ? data : {};
        let result = new SaveTaskFileData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ISaveTaskFileData extends ITaskFileData {
}

export class SaveSingleTaskOptions implements ISaveSingleTaskOptions {
    id!: string;
    startsAtString?: string | null;

    constructor(data?: ISaveSingleTaskOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.startsAtString = _data["startsAtString"] !== undefined ? _data["startsAtString"] : <any>null;
        }
    }

    static fromJS(data: any): SaveSingleTaskOptions {
        data = typeof data === 'object' ? data : {};
        let result = new SaveSingleTaskOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["startsAtString"] = this.startsAtString !== undefined ? this.startsAtString : <any>null;
        return data; 
    }
}

export interface ISaveSingleTaskOptions {
    id: string;
    startsAtString?: string | null;
}

export class SaveBalancedTaskOptions implements ISaveBalancedTaskOptions {
    id!: string;
    startsAtString?: string | null;
    endsAtString?: string | null;
    excludeWeekends!: boolean;
    excludeHolidays!: boolean;
    postponeWhenRoomIsOccupied!: boolean;

    constructor(data?: ISaveBalancedTaskOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.startsAtString = _data["startsAtString"] !== undefined ? _data["startsAtString"] : <any>null;
            this.endsAtString = _data["endsAtString"] !== undefined ? _data["endsAtString"] : <any>null;
            this.excludeWeekends = _data["excludeWeekends"] !== undefined ? _data["excludeWeekends"] : <any>null;
            this.excludeHolidays = _data["excludeHolidays"] !== undefined ? _data["excludeHolidays"] : <any>null;
            this.postponeWhenRoomIsOccupied = _data["postponeWhenRoomIsOccupied"] !== undefined ? _data["postponeWhenRoomIsOccupied"] : <any>null;
        }
    }

    static fromJS(data: any): SaveBalancedTaskOptions {
        data = typeof data === 'object' ? data : {};
        let result = new SaveBalancedTaskOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["startsAtString"] = this.startsAtString !== undefined ? this.startsAtString : <any>null;
        data["endsAtString"] = this.endsAtString !== undefined ? this.endsAtString : <any>null;
        data["excludeWeekends"] = this.excludeWeekends !== undefined ? this.excludeWeekends : <any>null;
        data["excludeHolidays"] = this.excludeHolidays !== undefined ? this.excludeHolidays : <any>null;
        data["postponeWhenRoomIsOccupied"] = this.postponeWhenRoomIsOccupied !== undefined ? this.postponeWhenRoomIsOccupied : <any>null;
        return data; 
    }
}

export interface ISaveBalancedTaskOptions {
    id: string;
    startsAtString?: string | null;
    endsAtString?: string | null;
    excludeWeekends: boolean;
    excludeHolidays: boolean;
    postponeWhenRoomIsOccupied: boolean;
}

export class SaveDailyRecurringTaskOptions implements ISaveDailyRecurringTaskOptions {
    id!: string;
    startsAtString?: string | null;
    repeatTimes?: string[] | null;
    repeatsForKey?: string | null;
    repeatsForNrOccurences?: number | null;
    repeatsForNrDays?: number | null;
    repeatsUntilTimeString?: string | null;

    constructor(data?: ISaveDailyRecurringTaskOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.startsAtString = _data["startsAtString"] !== undefined ? _data["startsAtString"] : <any>null;
            if (Array.isArray(_data["repeatTimes"])) {
                this.repeatTimes = [] as any;
                for (let item of _data["repeatTimes"])
                    this.repeatTimes!.push(item);
            }
            this.repeatsForKey = _data["repeatsForKey"] !== undefined ? _data["repeatsForKey"] : <any>null;
            this.repeatsForNrOccurences = _data["repeatsForNrOccurences"] !== undefined ? _data["repeatsForNrOccurences"] : <any>null;
            this.repeatsForNrDays = _data["repeatsForNrDays"] !== undefined ? _data["repeatsForNrDays"] : <any>null;
            this.repeatsUntilTimeString = _data["repeatsUntilTimeString"] !== undefined ? _data["repeatsUntilTimeString"] : <any>null;
        }
    }

    static fromJS(data: any): SaveDailyRecurringTaskOptions {
        data = typeof data === 'object' ? data : {};
        let result = new SaveDailyRecurringTaskOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["startsAtString"] = this.startsAtString !== undefined ? this.startsAtString : <any>null;
        if (Array.isArray(this.repeatTimes)) {
            data["repeatTimes"] = [];
            for (let item of this.repeatTimes)
                data["repeatTimes"].push(item);
        }
        data["repeatsForKey"] = this.repeatsForKey !== undefined ? this.repeatsForKey : <any>null;
        data["repeatsForNrOccurences"] = this.repeatsForNrOccurences !== undefined ? this.repeatsForNrOccurences : <any>null;
        data["repeatsForNrDays"] = this.repeatsForNrDays !== undefined ? this.repeatsForNrDays : <any>null;
        data["repeatsUntilTimeString"] = this.repeatsUntilTimeString !== undefined ? this.repeatsUntilTimeString : <any>null;
        return data; 
    }
}

export interface ISaveDailyRecurringTaskOptions {
    id: string;
    startsAtString?: string | null;
    repeatTimes?: string[] | null;
    repeatsForKey?: string | null;
    repeatsForNrOccurences?: number | null;
    repeatsForNrDays?: number | null;
    repeatsUntilTimeString?: string | null;
}

export class SaveWeeklyRecurringTaskOptions implements ISaveWeeklyRecurringTaskOptions {
    id!: string;
    startsAtString?: string | null;
    weeklyRecurrences?: SaveWeeklyRecurringTaskItemOptions[] | null;
    repeatsForKey?: string | null;
    repeatsForNrOccurences?: number | null;
    repeatsForNrDays?: number | null;
    repeatsUntilTimeString?: string | null;

    constructor(data?: ISaveWeeklyRecurringTaskOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.startsAtString = _data["startsAtString"] !== undefined ? _data["startsAtString"] : <any>null;
            if (Array.isArray(_data["weeklyRecurrences"])) {
                this.weeklyRecurrences = [] as any;
                for (let item of _data["weeklyRecurrences"])
                    this.weeklyRecurrences!.push(SaveWeeklyRecurringTaskItemOptions.fromJS(item));
            }
            this.repeatsForKey = _data["repeatsForKey"] !== undefined ? _data["repeatsForKey"] : <any>null;
            this.repeatsForNrOccurences = _data["repeatsForNrOccurences"] !== undefined ? _data["repeatsForNrOccurences"] : <any>null;
            this.repeatsForNrDays = _data["repeatsForNrDays"] !== undefined ? _data["repeatsForNrDays"] : <any>null;
            this.repeatsUntilTimeString = _data["repeatsUntilTimeString"] !== undefined ? _data["repeatsUntilTimeString"] : <any>null;
        }
    }

    static fromJS(data: any): SaveWeeklyRecurringTaskOptions {
        data = typeof data === 'object' ? data : {};
        let result = new SaveWeeklyRecurringTaskOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["startsAtString"] = this.startsAtString !== undefined ? this.startsAtString : <any>null;
        if (Array.isArray(this.weeklyRecurrences)) {
            data["weeklyRecurrences"] = [];
            for (let item of this.weeklyRecurrences)
                data["weeklyRecurrences"].push(item.toJSON());
        }
        data["repeatsForKey"] = this.repeatsForKey !== undefined ? this.repeatsForKey : <any>null;
        data["repeatsForNrOccurences"] = this.repeatsForNrOccurences !== undefined ? this.repeatsForNrOccurences : <any>null;
        data["repeatsForNrDays"] = this.repeatsForNrDays !== undefined ? this.repeatsForNrDays : <any>null;
        data["repeatsUntilTimeString"] = this.repeatsUntilTimeString !== undefined ? this.repeatsUntilTimeString : <any>null;
        return data; 
    }
}

export interface ISaveWeeklyRecurringTaskOptions {
    id: string;
    startsAtString?: string | null;
    weeklyRecurrences?: SaveWeeklyRecurringTaskItemOptions[] | null;
    repeatsForKey?: string | null;
    repeatsForNrOccurences?: number | null;
    repeatsForNrDays?: number | null;
    repeatsUntilTimeString?: string | null;
}

export class SaveWeeklyRecurringTaskItemOptions extends WeeklyRecurringTaskItemOptions implements ISaveWeeklyRecurringTaskItemOptions {

    constructor(data?: ISaveWeeklyRecurringTaskItemOptions) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): SaveWeeklyRecurringTaskItemOptions {
        data = typeof data === 'object' ? data : {};
        let result = new SaveWeeklyRecurringTaskItemOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ISaveWeeklyRecurringTaskItemOptions extends IWeeklyRecurringTaskItemOptions {
}

export class SaveMonthlyRecurringTaskOptions implements ISaveMonthlyRecurringTaskOptions {
    id!: string;
    startsAtString?: string | null;
    monthlyRecurrences?: SaveMonthlyRecurringTaskItemOptions[] | null;
    repeatsForKey?: string | null;
    repeatsForNrOccurences?: number | null;
    repeatsForNrDays?: number | null;
    repeatsUntilTimeString?: string | null;

    constructor(data?: ISaveMonthlyRecurringTaskOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.startsAtString = _data["startsAtString"] !== undefined ? _data["startsAtString"] : <any>null;
            if (Array.isArray(_data["monthlyRecurrences"])) {
                this.monthlyRecurrences = [] as any;
                for (let item of _data["monthlyRecurrences"])
                    this.monthlyRecurrences!.push(SaveMonthlyRecurringTaskItemOptions.fromJS(item));
            }
            this.repeatsForKey = _data["repeatsForKey"] !== undefined ? _data["repeatsForKey"] : <any>null;
            this.repeatsForNrOccurences = _data["repeatsForNrOccurences"] !== undefined ? _data["repeatsForNrOccurences"] : <any>null;
            this.repeatsForNrDays = _data["repeatsForNrDays"] !== undefined ? _data["repeatsForNrDays"] : <any>null;
            this.repeatsUntilTimeString = _data["repeatsUntilTimeString"] !== undefined ? _data["repeatsUntilTimeString"] : <any>null;
        }
    }

    static fromJS(data: any): SaveMonthlyRecurringTaskOptions {
        data = typeof data === 'object' ? data : {};
        let result = new SaveMonthlyRecurringTaskOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["startsAtString"] = this.startsAtString !== undefined ? this.startsAtString : <any>null;
        if (Array.isArray(this.monthlyRecurrences)) {
            data["monthlyRecurrences"] = [];
            for (let item of this.monthlyRecurrences)
                data["monthlyRecurrences"].push(item.toJSON());
        }
        data["repeatsForKey"] = this.repeatsForKey !== undefined ? this.repeatsForKey : <any>null;
        data["repeatsForNrOccurences"] = this.repeatsForNrOccurences !== undefined ? this.repeatsForNrOccurences : <any>null;
        data["repeatsForNrDays"] = this.repeatsForNrDays !== undefined ? this.repeatsForNrDays : <any>null;
        data["repeatsUntilTimeString"] = this.repeatsUntilTimeString !== undefined ? this.repeatsUntilTimeString : <any>null;
        return data; 
    }
}

export interface ISaveMonthlyRecurringTaskOptions {
    id: string;
    startsAtString?: string | null;
    monthlyRecurrences?: SaveMonthlyRecurringTaskItemOptions[] | null;
    repeatsForKey?: string | null;
    repeatsForNrOccurences?: number | null;
    repeatsForNrDays?: number | null;
    repeatsUntilTimeString?: string | null;
}

export class SaveMonthlyRecurringTaskItemOptions extends MonthlyRecurringTaskItemOptions implements ISaveMonthlyRecurringTaskItemOptions {

    constructor(data?: ISaveMonthlyRecurringTaskItemOptions) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): SaveMonthlyRecurringTaskItemOptions {
        data = typeof data === 'object' ? data : {};
        let result = new SaveMonthlyRecurringTaskItemOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ISaveMonthlyRecurringTaskItemOptions extends IMonthlyRecurringTaskItemOptions {
}

export class SaveSpecificTimesRecurringTaskOptions implements ISaveSpecificTimesRecurringTaskOptions {
    id!: string;
    startsAtStrings?: string[] | null;

    constructor(data?: ISaveSpecificTimesRecurringTaskOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            if (Array.isArray(_data["startsAtStrings"])) {
                this.startsAtStrings = [] as any;
                for (let item of _data["startsAtStrings"])
                    this.startsAtStrings!.push(item);
            }
        }
    }

    static fromJS(data: any): SaveSpecificTimesRecurringTaskOptions {
        data = typeof data === 'object' ? data : {};
        let result = new SaveSpecificTimesRecurringTaskOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        if (Array.isArray(this.startsAtStrings)) {
            data["startsAtStrings"] = [];
            for (let item of this.startsAtStrings)
                data["startsAtStrings"].push(item);
        }
        return data; 
    }
}

export interface ISaveSpecificTimesRecurringTaskOptions {
    id: string;
    startsAtStrings?: string[] | null;
}

export class SaveEventTaskOptions implements ISaveEventTaskOptions {
    id!: string;
    startsAtString?: string | null;
    eventModifierKey?: string | null;
    eventKey?: string | null;
    eventTimeKey?: string | null;
    repeatsForKey?: string | null;
    repeatsForNrOccurences?: number | null;
    repeatsForNrDays?: number | null;
    repeatsUntilTimeString?: string | null;

    constructor(data?: ISaveEventTaskOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.startsAtString = _data["startsAtString"] !== undefined ? _data["startsAtString"] : <any>null;
            this.eventModifierKey = _data["eventModifierKey"] !== undefined ? _data["eventModifierKey"] : <any>null;
            this.eventKey = _data["eventKey"] !== undefined ? _data["eventKey"] : <any>null;
            this.eventTimeKey = _data["eventTimeKey"] !== undefined ? _data["eventTimeKey"] : <any>null;
            this.repeatsForKey = _data["repeatsForKey"] !== undefined ? _data["repeatsForKey"] : <any>null;
            this.repeatsForNrOccurences = _data["repeatsForNrOccurences"] !== undefined ? _data["repeatsForNrOccurences"] : <any>null;
            this.repeatsForNrDays = _data["repeatsForNrDays"] !== undefined ? _data["repeatsForNrDays"] : <any>null;
            this.repeatsUntilTimeString = _data["repeatsUntilTimeString"] !== undefined ? _data["repeatsUntilTimeString"] : <any>null;
        }
    }

    static fromJS(data: any): SaveEventTaskOptions {
        data = typeof data === 'object' ? data : {};
        let result = new SaveEventTaskOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["startsAtString"] = this.startsAtString !== undefined ? this.startsAtString : <any>null;
        data["eventModifierKey"] = this.eventModifierKey !== undefined ? this.eventModifierKey : <any>null;
        data["eventKey"] = this.eventKey !== undefined ? this.eventKey : <any>null;
        data["eventTimeKey"] = this.eventTimeKey !== undefined ? this.eventTimeKey : <any>null;
        data["repeatsForKey"] = this.repeatsForKey !== undefined ? this.repeatsForKey : <any>null;
        data["repeatsForNrOccurences"] = this.repeatsForNrOccurences !== undefined ? this.repeatsForNrOccurences : <any>null;
        data["repeatsForNrDays"] = this.repeatsForNrDays !== undefined ? this.repeatsForNrDays : <any>null;
        data["repeatsUntilTimeString"] = this.repeatsUntilTimeString !== undefined ? this.repeatsUntilTimeString : <any>null;
        return data; 
    }
}

export interface ISaveEventTaskOptions {
    id: string;
    startsAtString?: string | null;
    eventModifierKey?: string | null;
    eventKey?: string | null;
    eventTimeKey?: string | null;
    repeatsForKey?: string | null;
    repeatsForNrOccurences?: number | null;
    repeatsForNrDays?: number | null;
    repeatsUntilTimeString?: string | null;
}

export class SaveRecurringEveryTaskOptions implements ISaveRecurringEveryTaskOptions {
    startsAtString?: string | null;
    everyNumberOfDays!: number;
    repeatsForKey?: string | null;
    repeatsForNrOccurences?: number | null;
    repeatsForNrDays?: number | null;
    repeatsUntilTimeString?: string | null;

    constructor(data?: ISaveRecurringEveryTaskOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startsAtString = _data["startsAtString"] !== undefined ? _data["startsAtString"] : <any>null;
            this.everyNumberOfDays = _data["everyNumberOfDays"] !== undefined ? _data["everyNumberOfDays"] : <any>null;
            this.repeatsForKey = _data["repeatsForKey"] !== undefined ? _data["repeatsForKey"] : <any>null;
            this.repeatsForNrOccurences = _data["repeatsForNrOccurences"] !== undefined ? _data["repeatsForNrOccurences"] : <any>null;
            this.repeatsForNrDays = _data["repeatsForNrDays"] !== undefined ? _data["repeatsForNrDays"] : <any>null;
            this.repeatsUntilTimeString = _data["repeatsUntilTimeString"] !== undefined ? _data["repeatsUntilTimeString"] : <any>null;
        }
    }

    static fromJS(data: any): SaveRecurringEveryTaskOptions {
        data = typeof data === 'object' ? data : {};
        let result = new SaveRecurringEveryTaskOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startsAtString"] = this.startsAtString !== undefined ? this.startsAtString : <any>null;
        data["everyNumberOfDays"] = this.everyNumberOfDays !== undefined ? this.everyNumberOfDays : <any>null;
        data["repeatsForKey"] = this.repeatsForKey !== undefined ? this.repeatsForKey : <any>null;
        data["repeatsForNrOccurences"] = this.repeatsForNrOccurences !== undefined ? this.repeatsForNrOccurences : <any>null;
        data["repeatsForNrDays"] = this.repeatsForNrDays !== undefined ? this.repeatsForNrDays : <any>null;
        data["repeatsUntilTimeString"] = this.repeatsUntilTimeString !== undefined ? this.repeatsUntilTimeString : <any>null;
        return data; 
    }
}

export interface ISaveRecurringEveryTaskOptions {
    startsAtString?: string | null;
    everyNumberOfDays: number;
    repeatsForKey?: string | null;
    repeatsForNrOccurences?: number | null;
    repeatsForNrDays?: number | null;
    repeatsUntilTimeString?: string | null;
}

export class ProcessResponseOfUpdateTaskConfigurationResult extends ProcessResponse implements IProcessResponseOfUpdateTaskConfigurationResult {
    data?: UpdateTaskConfigurationResult | null;

    constructor(data?: IProcessResponseOfUpdateTaskConfigurationResult) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? UpdateTaskConfigurationResult.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfUpdateTaskConfigurationResult {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfUpdateTaskConfigurationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfUpdateTaskConfigurationResult extends IProcessResponse {
    data?: UpdateTaskConfigurationResult | null;
}

export class UpdateTaskConfigurationResult implements IUpdateTaskConfigurationResult {

    constructor(data?: IUpdateTaskConfigurationResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): UpdateTaskConfigurationResult {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTaskConfigurationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IUpdateTaskConfigurationResult {
}

export class UpdateTaskConfigurationCommand extends SaveTaskConfigurationRequest implements IUpdateTaskConfigurationCommand {
    id!: string;

    constructor(data?: IUpdateTaskConfigurationCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateTaskConfigurationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTaskConfigurationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IUpdateTaskConfigurationCommand extends ISaveTaskConfigurationRequest {
    id: string;
}

export class PageOfOfTaskGridItemData implements IPageOfOfTaskGridItemData {
    items?: TaskGridItemData[] | null;
    totalNumberOfItems!: number;

    constructor(data?: IPageOfOfTaskGridItemData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TaskGridItemData.fromJS(item));
            }
            this.totalNumberOfItems = _data["totalNumberOfItems"] !== undefined ? _data["totalNumberOfItems"] : <any>null;
        }
    }

    static fromJS(data: any): PageOfOfTaskGridItemData {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfOfTaskGridItemData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalNumberOfItems"] = this.totalNumberOfItems !== undefined ? this.totalNumberOfItems : <any>null;
        return data; 
    }
}

export interface IPageOfOfTaskGridItemData {
    items?: TaskGridItemData[] | null;
    totalNumberOfItems: number;
}

export class TaskGridItemData implements ITaskGridItemData {
    id!: string;
    userId?: string | null;
    isForPlannedAttendant!: boolean;
    userFullName?: string | null;
    userUsername?: string | null;
    userInitials?: string | null;
    userAvatarImageUrl?: string | null;
    defaultUserAvatarColorHex?: string | null;
    actions?: TaskGridItemActionData[] | null;
    statusKey?: string | null;
    statusDescription?: string | null;
    where?: string | null;
    whereDescription?: string | null;
    when?: string | null;
    whenDescription?: string | null;
    startsAt!: moment.Moment;
    typeKey?: string | null;
    recurringTypeKey?: string | null;
    typeDescription?: string | null;
    isRoomOccupied!: boolean;
    isGuestRequest!: boolean;
    priorityKey?: string | null;

    constructor(data?: ITaskGridItemData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.isForPlannedAttendant = _data["isForPlannedAttendant"] !== undefined ? _data["isForPlannedAttendant"] : <any>null;
            this.userFullName = _data["userFullName"] !== undefined ? _data["userFullName"] : <any>null;
            this.userUsername = _data["userUsername"] !== undefined ? _data["userUsername"] : <any>null;
            this.userInitials = _data["userInitials"] !== undefined ? _data["userInitials"] : <any>null;
            this.userAvatarImageUrl = _data["userAvatarImageUrl"] !== undefined ? _data["userAvatarImageUrl"] : <any>null;
            this.defaultUserAvatarColorHex = _data["defaultUserAvatarColorHex"] !== undefined ? _data["defaultUserAvatarColorHex"] : <any>null;
            if (Array.isArray(_data["actions"])) {
                this.actions = [] as any;
                for (let item of _data["actions"])
                    this.actions!.push(TaskGridItemActionData.fromJS(item));
            }
            this.statusKey = _data["statusKey"] !== undefined ? _data["statusKey"] : <any>null;
            this.statusDescription = _data["statusDescription"] !== undefined ? _data["statusDescription"] : <any>null;
            this.where = _data["where"] !== undefined ? _data["where"] : <any>null;
            this.whereDescription = _data["whereDescription"] !== undefined ? _data["whereDescription"] : <any>null;
            this.when = _data["when"] !== undefined ? _data["when"] : <any>null;
            this.whenDescription = _data["whenDescription"] !== undefined ? _data["whenDescription"] : <any>null;
            this.startsAt = _data["startsAt"] ? moment(_data["startsAt"].toString()) : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            this.recurringTypeKey = _data["recurringTypeKey"] !== undefined ? _data["recurringTypeKey"] : <any>null;
            this.typeDescription = _data["typeDescription"] !== undefined ? _data["typeDescription"] : <any>null;
            this.isRoomOccupied = _data["isRoomOccupied"] !== undefined ? _data["isRoomOccupied"] : <any>null;
            this.isGuestRequest = _data["isGuestRequest"] !== undefined ? _data["isGuestRequest"] : <any>null;
            this.priorityKey = _data["priorityKey"] !== undefined ? _data["priorityKey"] : <any>null;
        }
    }

    static fromJS(data: any): TaskGridItemData {
        data = typeof data === 'object' ? data : {};
        let result = new TaskGridItemData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["isForPlannedAttendant"] = this.isForPlannedAttendant !== undefined ? this.isForPlannedAttendant : <any>null;
        data["userFullName"] = this.userFullName !== undefined ? this.userFullName : <any>null;
        data["userUsername"] = this.userUsername !== undefined ? this.userUsername : <any>null;
        data["userInitials"] = this.userInitials !== undefined ? this.userInitials : <any>null;
        data["userAvatarImageUrl"] = this.userAvatarImageUrl !== undefined ? this.userAvatarImageUrl : <any>null;
        data["defaultUserAvatarColorHex"] = this.defaultUserAvatarColorHex !== undefined ? this.defaultUserAvatarColorHex : <any>null;
        if (Array.isArray(this.actions)) {
            data["actions"] = [];
            for (let item of this.actions)
                data["actions"].push(item.toJSON());
        }
        data["statusKey"] = this.statusKey !== undefined ? this.statusKey : <any>null;
        data["statusDescription"] = this.statusDescription !== undefined ? this.statusDescription : <any>null;
        data["where"] = this.where !== undefined ? this.where : <any>null;
        data["whereDescription"] = this.whereDescription !== undefined ? this.whereDescription : <any>null;
        data["when"] = this.when !== undefined ? this.when : <any>null;
        data["whenDescription"] = this.whenDescription !== undefined ? this.whenDescription : <any>null;
        data["startsAt"] = this.startsAt ? this.startsAt.toISOString() : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        data["recurringTypeKey"] = this.recurringTypeKey !== undefined ? this.recurringTypeKey : <any>null;
        data["typeDescription"] = this.typeDescription !== undefined ? this.typeDescription : <any>null;
        data["isRoomOccupied"] = this.isRoomOccupied !== undefined ? this.isRoomOccupied : <any>null;
        data["isGuestRequest"] = this.isGuestRequest !== undefined ? this.isGuestRequest : <any>null;
        data["priorityKey"] = this.priorityKey !== undefined ? this.priorityKey : <any>null;
        return data; 
    }
}

export interface ITaskGridItemData {
    id: string;
    userId?: string | null;
    isForPlannedAttendant: boolean;
    userFullName?: string | null;
    userUsername?: string | null;
    userInitials?: string | null;
    userAvatarImageUrl?: string | null;
    defaultUserAvatarColorHex?: string | null;
    actions?: TaskGridItemActionData[] | null;
    statusKey?: string | null;
    statusDescription?: string | null;
    where?: string | null;
    whereDescription?: string | null;
    when?: string | null;
    whenDescription?: string | null;
    startsAt: moment.Moment;
    typeKey?: string | null;
    recurringTypeKey?: string | null;
    typeDescription?: string | null;
    isRoomOccupied: boolean;
    isGuestRequest: boolean;
    priorityKey?: string | null;
}

export class TaskGridItemActionData implements ITaskGridItemActionData {
    assetQuantity!: number;
    actionName?: string | null;
    assetName?: string | null;

    constructor(data?: ITaskGridItemActionData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetQuantity = _data["assetQuantity"] !== undefined ? _data["assetQuantity"] : <any>null;
            this.actionName = _data["actionName"] !== undefined ? _data["actionName"] : <any>null;
            this.assetName = _data["assetName"] !== undefined ? _data["assetName"] : <any>null;
        }
    }

    static fromJS(data: any): TaskGridItemActionData {
        data = typeof data === 'object' ? data : {};
        let result = new TaskGridItemActionData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetQuantity"] = this.assetQuantity !== undefined ? this.assetQuantity : <any>null;
        data["actionName"] = this.actionName !== undefined ? this.actionName : <any>null;
        data["assetName"] = this.assetName !== undefined ? this.assetName : <any>null;
        return data; 
    }
}

export interface ITaskGridItemActionData {
    assetQuantity: number;
    actionName?: string | null;
    assetName?: string | null;
}

export class GetPageOfTasksQuery extends GetPageRequest implements IGetPageOfTasksQuery {
    keywords?: string | null;
    fromDateString?: string | null;
    toDateString?: string | null;
    sortKey?: string | null;
    statusKey?: string | null;
    actionName?: string | null;
    assetId?: string | null;
    assetGroupId?: string | null;
    whos?: TaskWhoData[] | null;
    wheres?: TaskWhereData[] | null;
    onlyMyTasks!: boolean;
    taskConfigurationId?: string | null;

    constructor(data?: IGetPageOfTasksQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.keywords = _data["keywords"] !== undefined ? _data["keywords"] : <any>null;
            this.fromDateString = _data["fromDateString"] !== undefined ? _data["fromDateString"] : <any>null;
            this.toDateString = _data["toDateString"] !== undefined ? _data["toDateString"] : <any>null;
            this.sortKey = _data["sortKey"] !== undefined ? _data["sortKey"] : <any>null;
            this.statusKey = _data["statusKey"] !== undefined ? _data["statusKey"] : <any>null;
            this.actionName = _data["actionName"] !== undefined ? _data["actionName"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            if (Array.isArray(_data["whos"])) {
                this.whos = [] as any;
                for (let item of _data["whos"])
                    this.whos!.push(TaskWhoData.fromJS(item));
            }
            if (Array.isArray(_data["wheres"])) {
                this.wheres = [] as any;
                for (let item of _data["wheres"])
                    this.wheres!.push(TaskWhereData.fromJS(item));
            }
            this.onlyMyTasks = _data["onlyMyTasks"] !== undefined ? _data["onlyMyTasks"] : <any>null;
            this.taskConfigurationId = _data["taskConfigurationId"] !== undefined ? _data["taskConfigurationId"] : <any>null;
        }
    }

    static fromJS(data: any): GetPageOfTasksQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetPageOfTasksQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["keywords"] = this.keywords !== undefined ? this.keywords : <any>null;
        data["fromDateString"] = this.fromDateString !== undefined ? this.fromDateString : <any>null;
        data["toDateString"] = this.toDateString !== undefined ? this.toDateString : <any>null;
        data["sortKey"] = this.sortKey !== undefined ? this.sortKey : <any>null;
        data["statusKey"] = this.statusKey !== undefined ? this.statusKey : <any>null;
        data["actionName"] = this.actionName !== undefined ? this.actionName : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        if (Array.isArray(this.whos)) {
            data["whos"] = [];
            for (let item of this.whos)
                data["whos"].push(item.toJSON());
        }
        if (Array.isArray(this.wheres)) {
            data["wheres"] = [];
            for (let item of this.wheres)
                data["wheres"].push(item.toJSON());
        }
        data["onlyMyTasks"] = this.onlyMyTasks !== undefined ? this.onlyMyTasks : <any>null;
        data["taskConfigurationId"] = this.taskConfigurationId !== undefined ? this.taskConfigurationId : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetPageOfTasksQuery extends IGetPageRequest {
    keywords?: string | null;
    fromDateString?: string | null;
    toDateString?: string | null;
    sortKey?: string | null;
    statusKey?: string | null;
    actionName?: string | null;
    assetId?: string | null;
    assetGroupId?: string | null;
    whos?: TaskWhoData[] | null;
    wheres?: TaskWhereData[] | null;
    onlyMyTasks: boolean;
    taskConfigurationId?: string | null;
}

export class PageOfOfTaskConfigurationGridItemData implements IPageOfOfTaskConfigurationGridItemData {
    items?: TaskConfigurationGridItemData[] | null;
    totalNumberOfItems!: number;

    constructor(data?: IPageOfOfTaskConfigurationGridItemData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TaskConfigurationGridItemData.fromJS(item));
            }
            this.totalNumberOfItems = _data["totalNumberOfItems"] !== undefined ? _data["totalNumberOfItems"] : <any>null;
        }
    }

    static fromJS(data: any): PageOfOfTaskConfigurationGridItemData {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfOfTaskConfigurationGridItemData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalNumberOfItems"] = this.totalNumberOfItems !== undefined ? this.totalNumberOfItems : <any>null;
        return data; 
    }
}

export interface IPageOfOfTaskConfigurationGridItemData {
    items?: TaskConfigurationGridItemData[] | null;
    totalNumberOfItems: number;
}

export class TaskConfigurationGridItemData implements ITaskConfigurationGridItemData {
    id!: string;
    taskDescription?: string | null;
    numberOfTasks!: number;
    completionFactor!: number;
    completionPercentString?: string | null;
    completionStatus?: string | null;
    verificationFactor!: number;
    verificationPercentString?: string | null;
    verificationStatus?: string | null;
    numberOfPendingTasks!: number;
    numberOfWaitingTasks!: number;
    numberOfStartedTasks!: number;
    numberOfPausedTasks!: number;
    numberOfFinishedTasks!: number;
    numberOfVerifiedTasks!: number;
    numberOfCancelledTasks!: number;
    isCompleted!: boolean;
    actions?: TaskConfigurationGridItemActionData[] | null;

    constructor(data?: ITaskConfigurationGridItemData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.taskDescription = _data["taskDescription"] !== undefined ? _data["taskDescription"] : <any>null;
            this.numberOfTasks = _data["numberOfTasks"] !== undefined ? _data["numberOfTasks"] : <any>null;
            this.completionFactor = _data["completionFactor"] !== undefined ? _data["completionFactor"] : <any>null;
            this.completionPercentString = _data["completionPercentString"] !== undefined ? _data["completionPercentString"] : <any>null;
            this.completionStatus = _data["completionStatus"] !== undefined ? _data["completionStatus"] : <any>null;
            this.verificationFactor = _data["verificationFactor"] !== undefined ? _data["verificationFactor"] : <any>null;
            this.verificationPercentString = _data["verificationPercentString"] !== undefined ? _data["verificationPercentString"] : <any>null;
            this.verificationStatus = _data["verificationStatus"] !== undefined ? _data["verificationStatus"] : <any>null;
            this.numberOfPendingTasks = _data["numberOfPendingTasks"] !== undefined ? _data["numberOfPendingTasks"] : <any>null;
            this.numberOfWaitingTasks = _data["numberOfWaitingTasks"] !== undefined ? _data["numberOfWaitingTasks"] : <any>null;
            this.numberOfStartedTasks = _data["numberOfStartedTasks"] !== undefined ? _data["numberOfStartedTasks"] : <any>null;
            this.numberOfPausedTasks = _data["numberOfPausedTasks"] !== undefined ? _data["numberOfPausedTasks"] : <any>null;
            this.numberOfFinishedTasks = _data["numberOfFinishedTasks"] !== undefined ? _data["numberOfFinishedTasks"] : <any>null;
            this.numberOfVerifiedTasks = _data["numberOfVerifiedTasks"] !== undefined ? _data["numberOfVerifiedTasks"] : <any>null;
            this.numberOfCancelledTasks = _data["numberOfCancelledTasks"] !== undefined ? _data["numberOfCancelledTasks"] : <any>null;
            this.isCompleted = _data["isCompleted"] !== undefined ? _data["isCompleted"] : <any>null;
            if (Array.isArray(_data["actions"])) {
                this.actions = [] as any;
                for (let item of _data["actions"])
                    this.actions!.push(TaskConfigurationGridItemActionData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TaskConfigurationGridItemData {
        data = typeof data === 'object' ? data : {};
        let result = new TaskConfigurationGridItemData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["taskDescription"] = this.taskDescription !== undefined ? this.taskDescription : <any>null;
        data["numberOfTasks"] = this.numberOfTasks !== undefined ? this.numberOfTasks : <any>null;
        data["completionFactor"] = this.completionFactor !== undefined ? this.completionFactor : <any>null;
        data["completionPercentString"] = this.completionPercentString !== undefined ? this.completionPercentString : <any>null;
        data["completionStatus"] = this.completionStatus !== undefined ? this.completionStatus : <any>null;
        data["verificationFactor"] = this.verificationFactor !== undefined ? this.verificationFactor : <any>null;
        data["verificationPercentString"] = this.verificationPercentString !== undefined ? this.verificationPercentString : <any>null;
        data["verificationStatus"] = this.verificationStatus !== undefined ? this.verificationStatus : <any>null;
        data["numberOfPendingTasks"] = this.numberOfPendingTasks !== undefined ? this.numberOfPendingTasks : <any>null;
        data["numberOfWaitingTasks"] = this.numberOfWaitingTasks !== undefined ? this.numberOfWaitingTasks : <any>null;
        data["numberOfStartedTasks"] = this.numberOfStartedTasks !== undefined ? this.numberOfStartedTasks : <any>null;
        data["numberOfPausedTasks"] = this.numberOfPausedTasks !== undefined ? this.numberOfPausedTasks : <any>null;
        data["numberOfFinishedTasks"] = this.numberOfFinishedTasks !== undefined ? this.numberOfFinishedTasks : <any>null;
        data["numberOfVerifiedTasks"] = this.numberOfVerifiedTasks !== undefined ? this.numberOfVerifiedTasks : <any>null;
        data["numberOfCancelledTasks"] = this.numberOfCancelledTasks !== undefined ? this.numberOfCancelledTasks : <any>null;
        data["isCompleted"] = this.isCompleted !== undefined ? this.isCompleted : <any>null;
        if (Array.isArray(this.actions)) {
            data["actions"] = [];
            for (let item of this.actions)
                data["actions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITaskConfigurationGridItemData {
    id: string;
    taskDescription?: string | null;
    numberOfTasks: number;
    completionFactor: number;
    completionPercentString?: string | null;
    completionStatus?: string | null;
    verificationFactor: number;
    verificationPercentString?: string | null;
    verificationStatus?: string | null;
    numberOfPendingTasks: number;
    numberOfWaitingTasks: number;
    numberOfStartedTasks: number;
    numberOfPausedTasks: number;
    numberOfFinishedTasks: number;
    numberOfVerifiedTasks: number;
    numberOfCancelledTasks: number;
    isCompleted: boolean;
    actions?: TaskConfigurationGridItemActionData[] | null;
}

export class TaskConfigurationGridItemActionData implements ITaskConfigurationGridItemActionData {
    assetName?: string | null;
    actionName?: string | null;
    assetQuantity!: number;

    constructor(data?: ITaskConfigurationGridItemActionData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetName = _data["assetName"] !== undefined ? _data["assetName"] : <any>null;
            this.actionName = _data["actionName"] !== undefined ? _data["actionName"] : <any>null;
            this.assetQuantity = _data["assetQuantity"] !== undefined ? _data["assetQuantity"] : <any>null;
        }
    }

    static fromJS(data: any): TaskConfigurationGridItemActionData {
        data = typeof data === 'object' ? data : {};
        let result = new TaskConfigurationGridItemActionData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetName"] = this.assetName !== undefined ? this.assetName : <any>null;
        data["actionName"] = this.actionName !== undefined ? this.actionName : <any>null;
        data["assetQuantity"] = this.assetQuantity !== undefined ? this.assetQuantity : <any>null;
        return data; 
    }
}

export interface ITaskConfigurationGridItemActionData {
    assetName?: string | null;
    actionName?: string | null;
    assetQuantity: number;
}

export class GetPageOfTaskConfigurationsQuery extends GetPageRequest implements IGetPageOfTaskConfigurationsQuery {
    keywords?: string | null;
    sortKey?: string | null;

    constructor(data?: IGetPageOfTaskConfigurationsQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.keywords = _data["keywords"] !== undefined ? _data["keywords"] : <any>null;
            this.sortKey = _data["sortKey"] !== undefined ? _data["sortKey"] : <any>null;
        }
    }

    static fromJS(data: any): GetPageOfTaskConfigurationsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetPageOfTaskConfigurationsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["keywords"] = this.keywords !== undefined ? this.keywords : <any>null;
        data["sortKey"] = this.sortKey !== undefined ? this.sortKey : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetPageOfTaskConfigurationsQuery extends IGetPageRequest {
    keywords?: string | null;
    sortKey?: string | null;
}

export class WeeklyTasksViewModel implements IWeeklyTasksViewModel {
    userGroups?: WeeklyUserTaskGroupViewModel[] | null;
    totalNumberOfUserGroups!: number;
    weekDays?: WeekDayViewModel[] | null;

    constructor(data?: IWeeklyTasksViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["userGroups"])) {
                this.userGroups = [] as any;
                for (let item of _data["userGroups"])
                    this.userGroups!.push(WeeklyUserTaskGroupViewModel.fromJS(item));
            }
            this.totalNumberOfUserGroups = _data["totalNumberOfUserGroups"] !== undefined ? _data["totalNumberOfUserGroups"] : <any>null;
            if (Array.isArray(_data["weekDays"])) {
                this.weekDays = [] as any;
                for (let item of _data["weekDays"])
                    this.weekDays!.push(WeekDayViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WeeklyTasksViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new WeeklyTasksViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.userGroups)) {
            data["userGroups"] = [];
            for (let item of this.userGroups)
                data["userGroups"].push(item.toJSON());
        }
        data["totalNumberOfUserGroups"] = this.totalNumberOfUserGroups !== undefined ? this.totalNumberOfUserGroups : <any>null;
        if (Array.isArray(this.weekDays)) {
            data["weekDays"] = [];
            for (let item of this.weekDays)
                data["weekDays"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IWeeklyTasksViewModel {
    userGroups?: WeeklyUserTaskGroupViewModel[] | null;
    totalNumberOfUserGroups: number;
    weekDays?: WeekDayViewModel[] | null;
}

export class WeeklyUserTaskGroupViewModel implements IWeeklyUserTaskGroupViewModel {
    userId!: string;
    userFullName?: string | null;
    userAvatarUrl?: string | null;
    hasAvatarImage!: boolean;
    defaultUserAvatarColorHex?: string | null;
    userFullNameInitials?: string | null;
    userGroupName?: string | null;
    userSubGroupName?: string | null;
    dayGroups?: WeeklyUserDayTaskGroupViewModel[] | null;

    constructor(data?: IWeeklyUserTaskGroupViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.userFullName = _data["userFullName"] !== undefined ? _data["userFullName"] : <any>null;
            this.userAvatarUrl = _data["userAvatarUrl"] !== undefined ? _data["userAvatarUrl"] : <any>null;
            this.hasAvatarImage = _data["hasAvatarImage"] !== undefined ? _data["hasAvatarImage"] : <any>null;
            this.defaultUserAvatarColorHex = _data["defaultUserAvatarColorHex"] !== undefined ? _data["defaultUserAvatarColorHex"] : <any>null;
            this.userFullNameInitials = _data["userFullNameInitials"] !== undefined ? _data["userFullNameInitials"] : <any>null;
            this.userGroupName = _data["userGroupName"] !== undefined ? _data["userGroupName"] : <any>null;
            this.userSubGroupName = _data["userSubGroupName"] !== undefined ? _data["userSubGroupName"] : <any>null;
            if (Array.isArray(_data["dayGroups"])) {
                this.dayGroups = [] as any;
                for (let item of _data["dayGroups"])
                    this.dayGroups!.push(WeeklyUserDayTaskGroupViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WeeklyUserTaskGroupViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new WeeklyUserTaskGroupViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["userFullName"] = this.userFullName !== undefined ? this.userFullName : <any>null;
        data["userAvatarUrl"] = this.userAvatarUrl !== undefined ? this.userAvatarUrl : <any>null;
        data["hasAvatarImage"] = this.hasAvatarImage !== undefined ? this.hasAvatarImage : <any>null;
        data["defaultUserAvatarColorHex"] = this.defaultUserAvatarColorHex !== undefined ? this.defaultUserAvatarColorHex : <any>null;
        data["userFullNameInitials"] = this.userFullNameInitials !== undefined ? this.userFullNameInitials : <any>null;
        data["userGroupName"] = this.userGroupName !== undefined ? this.userGroupName : <any>null;
        data["userSubGroupName"] = this.userSubGroupName !== undefined ? this.userSubGroupName : <any>null;
        if (Array.isArray(this.dayGroups)) {
            data["dayGroups"] = [];
            for (let item of this.dayGroups)
                data["dayGroups"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IWeeklyUserTaskGroupViewModel {
    userId: string;
    userFullName?: string | null;
    userAvatarUrl?: string | null;
    hasAvatarImage: boolean;
    defaultUserAvatarColorHex?: string | null;
    userFullNameInitials?: string | null;
    userGroupName?: string | null;
    userSubGroupName?: string | null;
    dayGroups?: WeeklyUserDayTaskGroupViewModel[] | null;
}

export class WeeklyUserDayTaskGroupViewModel implements IWeeklyUserDayTaskGroupViewModel {
    dateString?: string | null;
    dateKey?: string | null;
    dayName?: string | null;
    tasks?: WeeklyTaskViewModel[] | null;
    showMoreTasks!: boolean;
    numberOfHiddenTasks!: number;

    constructor(data?: IWeeklyUserDayTaskGroupViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dateString = _data["dateString"] !== undefined ? _data["dateString"] : <any>null;
            this.dateKey = _data["dateKey"] !== undefined ? _data["dateKey"] : <any>null;
            this.dayName = _data["dayName"] !== undefined ? _data["dayName"] : <any>null;
            if (Array.isArray(_data["tasks"])) {
                this.tasks = [] as any;
                for (let item of _data["tasks"])
                    this.tasks!.push(WeeklyTaskViewModel.fromJS(item));
            }
            this.showMoreTasks = _data["showMoreTasks"] !== undefined ? _data["showMoreTasks"] : <any>null;
            this.numberOfHiddenTasks = _data["numberOfHiddenTasks"] !== undefined ? _data["numberOfHiddenTasks"] : <any>null;
        }
    }

    static fromJS(data: any): WeeklyUserDayTaskGroupViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new WeeklyUserDayTaskGroupViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateString"] = this.dateString !== undefined ? this.dateString : <any>null;
        data["dateKey"] = this.dateKey !== undefined ? this.dateKey : <any>null;
        data["dayName"] = this.dayName !== undefined ? this.dayName : <any>null;
        if (Array.isArray(this.tasks)) {
            data["tasks"] = [];
            for (let item of this.tasks)
                data["tasks"].push(item.toJSON());
        }
        data["showMoreTasks"] = this.showMoreTasks !== undefined ? this.showMoreTasks : <any>null;
        data["numberOfHiddenTasks"] = this.numberOfHiddenTasks !== undefined ? this.numberOfHiddenTasks : <any>null;
        return data; 
    }
}

export interface IWeeklyUserDayTaskGroupViewModel {
    dateString?: string | null;
    dateKey?: string | null;
    dayName?: string | null;
    tasks?: WeeklyTaskViewModel[] | null;
    showMoreTasks: boolean;
    numberOfHiddenTasks: number;
}

export class WeeklyTaskViewModel implements IWeeklyTaskViewModel {
    id!: string;
    actions?: WeeklyTaskActionViewModel[] | null;
    statusKey?: string | null;
    statusDescription?: string | null;
    whereDescription?: string | null;
    isGuestRequest!: boolean;
    isBelowTreshold!: boolean;

    constructor(data?: IWeeklyTaskViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            if (Array.isArray(_data["actions"])) {
                this.actions = [] as any;
                for (let item of _data["actions"])
                    this.actions!.push(WeeklyTaskActionViewModel.fromJS(item));
            }
            this.statusKey = _data["statusKey"] !== undefined ? _data["statusKey"] : <any>null;
            this.statusDescription = _data["statusDescription"] !== undefined ? _data["statusDescription"] : <any>null;
            this.whereDescription = _data["whereDescription"] !== undefined ? _data["whereDescription"] : <any>null;
            this.isGuestRequest = _data["isGuestRequest"] !== undefined ? _data["isGuestRequest"] : <any>null;
            this.isBelowTreshold = _data["isBelowTreshold"] !== undefined ? _data["isBelowTreshold"] : <any>null;
        }
    }

    static fromJS(data: any): WeeklyTaskViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new WeeklyTaskViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        if (Array.isArray(this.actions)) {
            data["actions"] = [];
            for (let item of this.actions)
                data["actions"].push(item.toJSON());
        }
        data["statusKey"] = this.statusKey !== undefined ? this.statusKey : <any>null;
        data["statusDescription"] = this.statusDescription !== undefined ? this.statusDescription : <any>null;
        data["whereDescription"] = this.whereDescription !== undefined ? this.whereDescription : <any>null;
        data["isGuestRequest"] = this.isGuestRequest !== undefined ? this.isGuestRequest : <any>null;
        data["isBelowTreshold"] = this.isBelowTreshold !== undefined ? this.isBelowTreshold : <any>null;
        return data; 
    }
}

export interface IWeeklyTaskViewModel {
    id: string;
    actions?: WeeklyTaskActionViewModel[] | null;
    statusKey?: string | null;
    statusDescription?: string | null;
    whereDescription?: string | null;
    isGuestRequest: boolean;
    isBelowTreshold: boolean;
}

export class WeeklyTaskActionViewModel implements IWeeklyTaskActionViewModel {
    actionName?: string | null;
    assetName?: string | null;
    assetQuantity!: number;

    constructor(data?: IWeeklyTaskActionViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.actionName = _data["actionName"] !== undefined ? _data["actionName"] : <any>null;
            this.assetName = _data["assetName"] !== undefined ? _data["assetName"] : <any>null;
            this.assetQuantity = _data["assetQuantity"] !== undefined ? _data["assetQuantity"] : <any>null;
        }
    }

    static fromJS(data: any): WeeklyTaskActionViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new WeeklyTaskActionViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["actionName"] = this.actionName !== undefined ? this.actionName : <any>null;
        data["assetName"] = this.assetName !== undefined ? this.assetName : <any>null;
        data["assetQuantity"] = this.assetQuantity !== undefined ? this.assetQuantity : <any>null;
        return data; 
    }
}

export interface IWeeklyTaskActionViewModel {
    actionName?: string | null;
    assetName?: string | null;
    assetQuantity: number;
}

export class WeekDayViewModel implements IWeekDayViewModel {
    dateString?: string | null;
    dateKey?: string | null;
    dayName?: string | null;

    constructor(data?: IWeekDayViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dateString = _data["dateString"] !== undefined ? _data["dateString"] : <any>null;
            this.dateKey = _data["dateKey"] !== undefined ? _data["dateKey"] : <any>null;
            this.dayName = _data["dayName"] !== undefined ? _data["dayName"] : <any>null;
        }
    }

    static fromJS(data: any): WeekDayViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new WeekDayViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateString"] = this.dateString !== undefined ? this.dateString : <any>null;
        data["dateKey"] = this.dateKey !== undefined ? this.dateKey : <any>null;
        data["dayName"] = this.dayName !== undefined ? this.dayName : <any>null;
        return data; 
    }
}

export interface IWeekDayViewModel {
    dateString?: string | null;
    dateKey?: string | null;
    dayName?: string | null;
}

export class GetPageOfWeeklyTasksQuery implements IGetPageOfWeeklyTasksQuery {
    keywords?: string | null;
    fromDateString?: string | null;
    toDateString?: string | null;
    sortKey?: string | null;
    statusKey?: string | null;
    actionName?: string | null;
    assetId?: string | null;
    assetGroupId?: string | null;
    whos?: TaskWhoData[] | null;
    wheres?: TaskWhereData[] | null;
    onlyMyTasks!: boolean;
    skip!: number;
    take?: number | null;

    constructor(data?: IGetPageOfWeeklyTasksQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.keywords = _data["keywords"] !== undefined ? _data["keywords"] : <any>null;
            this.fromDateString = _data["fromDateString"] !== undefined ? _data["fromDateString"] : <any>null;
            this.toDateString = _data["toDateString"] !== undefined ? _data["toDateString"] : <any>null;
            this.sortKey = _data["sortKey"] !== undefined ? _data["sortKey"] : <any>null;
            this.statusKey = _data["statusKey"] !== undefined ? _data["statusKey"] : <any>null;
            this.actionName = _data["actionName"] !== undefined ? _data["actionName"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            if (Array.isArray(_data["whos"])) {
                this.whos = [] as any;
                for (let item of _data["whos"])
                    this.whos!.push(TaskWhoData.fromJS(item));
            }
            if (Array.isArray(_data["wheres"])) {
                this.wheres = [] as any;
                for (let item of _data["wheres"])
                    this.wheres!.push(TaskWhereData.fromJS(item));
            }
            this.onlyMyTasks = _data["onlyMyTasks"] !== undefined ? _data["onlyMyTasks"] : <any>null;
            this.skip = _data["skip"] !== undefined ? _data["skip"] : <any>null;
            this.take = _data["take"] !== undefined ? _data["take"] : <any>null;
        }
    }

    static fromJS(data: any): GetPageOfWeeklyTasksQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetPageOfWeeklyTasksQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["keywords"] = this.keywords !== undefined ? this.keywords : <any>null;
        data["fromDateString"] = this.fromDateString !== undefined ? this.fromDateString : <any>null;
        data["toDateString"] = this.toDateString !== undefined ? this.toDateString : <any>null;
        data["sortKey"] = this.sortKey !== undefined ? this.sortKey : <any>null;
        data["statusKey"] = this.statusKey !== undefined ? this.statusKey : <any>null;
        data["actionName"] = this.actionName !== undefined ? this.actionName : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        if (Array.isArray(this.whos)) {
            data["whos"] = [];
            for (let item of this.whos)
                data["whos"].push(item.toJSON());
        }
        if (Array.isArray(this.wheres)) {
            data["wheres"] = [];
            for (let item of this.wheres)
                data["wheres"].push(item.toJSON());
        }
        data["onlyMyTasks"] = this.onlyMyTasks !== undefined ? this.onlyMyTasks : <any>null;
        data["skip"] = this.skip !== undefined ? this.skip : <any>null;
        data["take"] = this.take !== undefined ? this.take : <any>null;
        return data; 
    }
}

export interface IGetPageOfWeeklyTasksQuery {
    keywords?: string | null;
    fromDateString?: string | null;
    toDateString?: string | null;
    sortKey?: string | null;
    statusKey?: string | null;
    actionName?: string | null;
    assetId?: string | null;
    assetGroupId?: string | null;
    whos?: TaskWhoData[] | null;
    wheres?: TaskWhereData[] | null;
    onlyMyTasks: boolean;
    skip: number;
    take?: number | null;
}

export class TaskConfigurationSavePreview implements ITaskConfigurationSavePreview {
    passedTasks?: TaskPreviewData[] | null;
    manuallyConfiguredTasks?: TaskPreviewData[] | null;
    startedTasks?: TaskPreviewData[] | null;
    tasksToCancel?: TaskPreviewData[] | null;
    passedTasksToCreate?: TaskPreviewData[] | null;
    tasksToCreate?: TaskPreviewData[] | null;
    alreadyCancelledTasks?: TaskPreviewData[] | null;
    alreadyFinishedTasks?: TaskPreviewData[] | null;

    constructor(data?: ITaskConfigurationSavePreview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["passedTasks"])) {
                this.passedTasks = [] as any;
                for (let item of _data["passedTasks"])
                    this.passedTasks!.push(TaskPreviewData.fromJS(item));
            }
            if (Array.isArray(_data["manuallyConfiguredTasks"])) {
                this.manuallyConfiguredTasks = [] as any;
                for (let item of _data["manuallyConfiguredTasks"])
                    this.manuallyConfiguredTasks!.push(TaskPreviewData.fromJS(item));
            }
            if (Array.isArray(_data["startedTasks"])) {
                this.startedTasks = [] as any;
                for (let item of _data["startedTasks"])
                    this.startedTasks!.push(TaskPreviewData.fromJS(item));
            }
            if (Array.isArray(_data["tasksToCancel"])) {
                this.tasksToCancel = [] as any;
                for (let item of _data["tasksToCancel"])
                    this.tasksToCancel!.push(TaskPreviewData.fromJS(item));
            }
            if (Array.isArray(_data["passedTasksToCreate"])) {
                this.passedTasksToCreate = [] as any;
                for (let item of _data["passedTasksToCreate"])
                    this.passedTasksToCreate!.push(TaskPreviewData.fromJS(item));
            }
            if (Array.isArray(_data["tasksToCreate"])) {
                this.tasksToCreate = [] as any;
                for (let item of _data["tasksToCreate"])
                    this.tasksToCreate!.push(TaskPreviewData.fromJS(item));
            }
            if (Array.isArray(_data["alreadyCancelledTasks"])) {
                this.alreadyCancelledTasks = [] as any;
                for (let item of _data["alreadyCancelledTasks"])
                    this.alreadyCancelledTasks!.push(TaskPreviewData.fromJS(item));
            }
            if (Array.isArray(_data["alreadyFinishedTasks"])) {
                this.alreadyFinishedTasks = [] as any;
                for (let item of _data["alreadyFinishedTasks"])
                    this.alreadyFinishedTasks!.push(TaskPreviewData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TaskConfigurationSavePreview {
        data = typeof data === 'object' ? data : {};
        let result = new TaskConfigurationSavePreview();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.passedTasks)) {
            data["passedTasks"] = [];
            for (let item of this.passedTasks)
                data["passedTasks"].push(item.toJSON());
        }
        if (Array.isArray(this.manuallyConfiguredTasks)) {
            data["manuallyConfiguredTasks"] = [];
            for (let item of this.manuallyConfiguredTasks)
                data["manuallyConfiguredTasks"].push(item.toJSON());
        }
        if (Array.isArray(this.startedTasks)) {
            data["startedTasks"] = [];
            for (let item of this.startedTasks)
                data["startedTasks"].push(item.toJSON());
        }
        if (Array.isArray(this.tasksToCancel)) {
            data["tasksToCancel"] = [];
            for (let item of this.tasksToCancel)
                data["tasksToCancel"].push(item.toJSON());
        }
        if (Array.isArray(this.passedTasksToCreate)) {
            data["passedTasksToCreate"] = [];
            for (let item of this.passedTasksToCreate)
                data["passedTasksToCreate"].push(item.toJSON());
        }
        if (Array.isArray(this.tasksToCreate)) {
            data["tasksToCreate"] = [];
            for (let item of this.tasksToCreate)
                data["tasksToCreate"].push(item.toJSON());
        }
        if (Array.isArray(this.alreadyCancelledTasks)) {
            data["alreadyCancelledTasks"] = [];
            for (let item of this.alreadyCancelledTasks)
                data["alreadyCancelledTasks"].push(item.toJSON());
        }
        if (Array.isArray(this.alreadyFinishedTasks)) {
            data["alreadyFinishedTasks"] = [];
            for (let item of this.alreadyFinishedTasks)
                data["alreadyFinishedTasks"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITaskConfigurationSavePreview {
    passedTasks?: TaskPreviewData[] | null;
    manuallyConfiguredTasks?: TaskPreviewData[] | null;
    startedTasks?: TaskPreviewData[] | null;
    tasksToCancel?: TaskPreviewData[] | null;
    passedTasksToCreate?: TaskPreviewData[] | null;
    tasksToCreate?: TaskPreviewData[] | null;
    alreadyCancelledTasks?: TaskPreviewData[] | null;
    alreadyFinishedTasks?: TaskPreviewData[] | null;
}

export class TaskPreviewData implements ITaskPreviewData {
    userFullName?: string | null;
    userUsername?: string | null;
    actions?: TaskPreviewActionData[] | null;
    where?: string | null;
    whereDescription?: string | null;
    when?: string | null;
    whenDescription?: string | null;
    startsAt!: moment.Moment;

    constructor(data?: ITaskPreviewData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userFullName = _data["userFullName"] !== undefined ? _data["userFullName"] : <any>null;
            this.userUsername = _data["userUsername"] !== undefined ? _data["userUsername"] : <any>null;
            if (Array.isArray(_data["actions"])) {
                this.actions = [] as any;
                for (let item of _data["actions"])
                    this.actions!.push(TaskPreviewActionData.fromJS(item));
            }
            this.where = _data["where"] !== undefined ? _data["where"] : <any>null;
            this.whereDescription = _data["whereDescription"] !== undefined ? _data["whereDescription"] : <any>null;
            this.when = _data["when"] !== undefined ? _data["when"] : <any>null;
            this.whenDescription = _data["whenDescription"] !== undefined ? _data["whenDescription"] : <any>null;
            this.startsAt = _data["startsAt"] ? moment(_data["startsAt"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): TaskPreviewData {
        data = typeof data === 'object' ? data : {};
        let result = new TaskPreviewData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userFullName"] = this.userFullName !== undefined ? this.userFullName : <any>null;
        data["userUsername"] = this.userUsername !== undefined ? this.userUsername : <any>null;
        if (Array.isArray(this.actions)) {
            data["actions"] = [];
            for (let item of this.actions)
                data["actions"].push(item.toJSON());
        }
        data["where"] = this.where !== undefined ? this.where : <any>null;
        data["whereDescription"] = this.whereDescription !== undefined ? this.whereDescription : <any>null;
        data["when"] = this.when !== undefined ? this.when : <any>null;
        data["whenDescription"] = this.whenDescription !== undefined ? this.whenDescription : <any>null;
        data["startsAt"] = this.startsAt ? this.startsAt.toISOString() : <any>null;
        return data; 
    }
}

export interface ITaskPreviewData {
    userFullName?: string | null;
    userUsername?: string | null;
    actions?: TaskPreviewActionData[] | null;
    where?: string | null;
    whereDescription?: string | null;
    when?: string | null;
    whenDescription?: string | null;
    startsAt: moment.Moment;
}

export class TaskPreviewActionData implements ITaskPreviewActionData {
    assetQuantity!: number;
    actionName?: string | null;
    assetName?: string | null;

    constructor(data?: ITaskPreviewActionData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetQuantity = _data["assetQuantity"] !== undefined ? _data["assetQuantity"] : <any>null;
            this.actionName = _data["actionName"] !== undefined ? _data["actionName"] : <any>null;
            this.assetName = _data["assetName"] !== undefined ? _data["assetName"] : <any>null;
        }
    }

    static fromJS(data: any): TaskPreviewActionData {
        data = typeof data === 'object' ? data : {};
        let result = new TaskPreviewActionData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetQuantity"] = this.assetQuantity !== undefined ? this.assetQuantity : <any>null;
        data["actionName"] = this.actionName !== undefined ? this.actionName : <any>null;
        data["assetName"] = this.assetName !== undefined ? this.assetName : <any>null;
        return data; 
    }
}

export interface ITaskPreviewActionData {
    assetQuantity: number;
    actionName?: string | null;
    assetName?: string | null;
}

export class GetTaskConfigurationSavePreviewQuery extends SaveTaskConfigurationRequest implements IGetTaskConfigurationSavePreviewQuery {
    taskConfigurationId?: string | null;
    isConfigurationInsert!: boolean;

    constructor(data?: IGetTaskConfigurationSavePreviewQuery) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.taskConfigurationId = _data["taskConfigurationId"] !== undefined ? _data["taskConfigurationId"] : <any>null;
            this.isConfigurationInsert = _data["isConfigurationInsert"] !== undefined ? _data["isConfigurationInsert"] : <any>null;
        }
    }

    static fromJS(data: any): GetTaskConfigurationSavePreviewQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetTaskConfigurationSavePreviewQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["taskConfigurationId"] = this.taskConfigurationId !== undefined ? this.taskConfigurationId : <any>null;
        data["isConfigurationInsert"] = this.isConfigurationInsert !== undefined ? this.isConfigurationInsert : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IGetTaskConfigurationSavePreviewQuery extends ISaveTaskConfigurationRequest {
    taskConfigurationId?: string | null;
    isConfigurationInsert: boolean;
}

export class TaskConfigurationCancelPreview implements ITaskConfigurationCancelPreview {
    tasksToCancel?: TaskPreviewData[] | null;
    alreadyCancelledTasks?: TaskPreviewData[] | null;
    alreadyFinishedTasks?: TaskPreviewData[] | null;

    constructor(data?: ITaskConfigurationCancelPreview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["tasksToCancel"])) {
                this.tasksToCancel = [] as any;
                for (let item of _data["tasksToCancel"])
                    this.tasksToCancel!.push(TaskPreviewData.fromJS(item));
            }
            if (Array.isArray(_data["alreadyCancelledTasks"])) {
                this.alreadyCancelledTasks = [] as any;
                for (let item of _data["alreadyCancelledTasks"])
                    this.alreadyCancelledTasks!.push(TaskPreviewData.fromJS(item));
            }
            if (Array.isArray(_data["alreadyFinishedTasks"])) {
                this.alreadyFinishedTasks = [] as any;
                for (let item of _data["alreadyFinishedTasks"])
                    this.alreadyFinishedTasks!.push(TaskPreviewData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TaskConfigurationCancelPreview {
        data = typeof data === 'object' ? data : {};
        let result = new TaskConfigurationCancelPreview();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.tasksToCancel)) {
            data["tasksToCancel"] = [];
            for (let item of this.tasksToCancel)
                data["tasksToCancel"].push(item.toJSON());
        }
        if (Array.isArray(this.alreadyCancelledTasks)) {
            data["alreadyCancelledTasks"] = [];
            for (let item of this.alreadyCancelledTasks)
                data["alreadyCancelledTasks"].push(item.toJSON());
        }
        if (Array.isArray(this.alreadyFinishedTasks)) {
            data["alreadyFinishedTasks"] = [];
            for (let item of this.alreadyFinishedTasks)
                data["alreadyFinishedTasks"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITaskConfigurationCancelPreview {
    tasksToCancel?: TaskPreviewData[] | null;
    alreadyCancelledTasks?: TaskPreviewData[] | null;
    alreadyFinishedTasks?: TaskPreviewData[] | null;
}

export class GetTaskConfigurationCancelPreviewQuery implements IGetTaskConfigurationCancelPreviewQuery {
    taskConfigurationId!: string;

    constructor(data?: IGetTaskConfigurationCancelPreviewQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.taskConfigurationId = _data["taskConfigurationId"] !== undefined ? _data["taskConfigurationId"] : <any>null;
        }
    }

    static fromJS(data: any): GetTaskConfigurationCancelPreviewQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetTaskConfigurationCancelPreviewQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["taskConfigurationId"] = this.taskConfigurationId !== undefined ? this.taskConfigurationId : <any>null;
        return data; 
    }
}

export interface IGetTaskConfigurationCancelPreviewQuery {
    taskConfigurationId: string;
}

export class CancelTasksByConfigurationCommand implements ICancelTasksByConfigurationCommand {
    taskConfigurationId!: string;

    constructor(data?: ICancelTasksByConfigurationCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.taskConfigurationId = _data["taskConfigurationId"] !== undefined ? _data["taskConfigurationId"] : <any>null;
        }
    }

    static fromJS(data: any): CancelTasksByConfigurationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CancelTasksByConfigurationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["taskConfigurationId"] = this.taskConfigurationId !== undefined ? this.taskConfigurationId : <any>null;
        return data; 
    }
}

export interface ICancelTasksByConfigurationCommand {
    taskConfigurationId: string;
}

export class PageOfOfTaskHistoryItemViewModel implements IPageOfOfTaskHistoryItemViewModel {
    items?: TaskHistoryItemViewModel[] | null;
    totalNumberOfItems!: number;

    constructor(data?: IPageOfOfTaskHistoryItemViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TaskHistoryItemViewModel.fromJS(item));
            }
            this.totalNumberOfItems = _data["totalNumberOfItems"] !== undefined ? _data["totalNumberOfItems"] : <any>null;
        }
    }

    static fromJS(data: any): PageOfOfTaskHistoryItemViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfOfTaskHistoryItemViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalNumberOfItems"] = this.totalNumberOfItems !== undefined ? this.totalNumberOfItems : <any>null;
        return data; 
    }
}

export interface IPageOfOfTaskHistoryItemViewModel {
    items?: TaskHistoryItemViewModel[] | null;
    totalNumberOfItems: number;
}

export class TaskHistoryItemViewModel implements ITaskHistoryItemViewModel {
    id!: string;
    message?: string | null;
    createdByUserFullName?: string | null;
    createdByInitials?: string | null;
    hasAvatar!: boolean;
    avatarUrl?: string | null;
    createdAtString?: string | null;
    changes?: TaskPropertyChangeViewModel[] | null;

    constructor(data?: ITaskHistoryItemViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.createdByUserFullName = _data["createdByUserFullName"] !== undefined ? _data["createdByUserFullName"] : <any>null;
            this.createdByInitials = _data["createdByInitials"] !== undefined ? _data["createdByInitials"] : <any>null;
            this.hasAvatar = _data["hasAvatar"] !== undefined ? _data["hasAvatar"] : <any>null;
            this.avatarUrl = _data["avatarUrl"] !== undefined ? _data["avatarUrl"] : <any>null;
            this.createdAtString = _data["createdAtString"] !== undefined ? _data["createdAtString"] : <any>null;
            if (Array.isArray(_data["changes"])) {
                this.changes = [] as any;
                for (let item of _data["changes"])
                    this.changes!.push(TaskPropertyChangeViewModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TaskHistoryItemViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new TaskHistoryItemViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["createdByUserFullName"] = this.createdByUserFullName !== undefined ? this.createdByUserFullName : <any>null;
        data["createdByInitials"] = this.createdByInitials !== undefined ? this.createdByInitials : <any>null;
        data["hasAvatar"] = this.hasAvatar !== undefined ? this.hasAvatar : <any>null;
        data["avatarUrl"] = this.avatarUrl !== undefined ? this.avatarUrl : <any>null;
        data["createdAtString"] = this.createdAtString !== undefined ? this.createdAtString : <any>null;
        if (Array.isArray(this.changes)) {
            data["changes"] = [];
            for (let item of this.changes)
                data["changes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITaskHistoryItemViewModel {
    id: string;
    message?: string | null;
    createdByUserFullName?: string | null;
    createdByInitials?: string | null;
    hasAvatar: boolean;
    avatarUrl?: string | null;
    createdAtString?: string | null;
    changes?: TaskPropertyChangeViewModel[] | null;
}

export class TaskPropertyChangeViewModel implements ITaskPropertyChangeViewModel {
    propertyName?: string | null;
    oldValue?: string | null;
    newValue?: string | null;

    constructor(data?: ITaskPropertyChangeViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.propertyName = _data["propertyName"] !== undefined ? _data["propertyName"] : <any>null;
            this.oldValue = _data["oldValue"] !== undefined ? _data["oldValue"] : <any>null;
            this.newValue = _data["newValue"] !== undefined ? _data["newValue"] : <any>null;
        }
    }

    static fromJS(data: any): TaskPropertyChangeViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new TaskPropertyChangeViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propertyName"] = this.propertyName !== undefined ? this.propertyName : <any>null;
        data["oldValue"] = this.oldValue !== undefined ? this.oldValue : <any>null;
        data["newValue"] = this.newValue !== undefined ? this.newValue : <any>null;
        return data; 
    }
}

export interface ITaskPropertyChangeViewModel {
    propertyName?: string | null;
    oldValue?: string | null;
    newValue?: string | null;
}

export class GetTaskHistoryQuery implements IGetTaskHistoryQuery {
    taskId!: string;

    constructor(data?: IGetTaskHistoryQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.taskId = _data["taskId"] !== undefined ? _data["taskId"] : <any>null;
        }
    }

    static fromJS(data: any): GetTaskHistoryQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetTaskHistoryQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["taskId"] = this.taskId !== undefined ? this.taskId : <any>null;
        return data; 
    }
}

export interface IGetTaskHistoryQuery {
    taskId: string;
}

export class TaskMessagesViewModel implements ITaskMessagesViewModel {
    createdByUserFullName?: string | null;
    createdByInitials?: string | null;
    pageOfMessages?: PageOfOfTaskMessageViewModel | null;

    constructor(data?: ITaskMessagesViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.createdByUserFullName = _data["createdByUserFullName"] !== undefined ? _data["createdByUserFullName"] : <any>null;
            this.createdByInitials = _data["createdByInitials"] !== undefined ? _data["createdByInitials"] : <any>null;
            this.pageOfMessages = _data["pageOfMessages"] ? PageOfOfTaskMessageViewModel.fromJS(_data["pageOfMessages"]) : <any>null;
        }
    }

    static fromJS(data: any): TaskMessagesViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new TaskMessagesViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdByUserFullName"] = this.createdByUserFullName !== undefined ? this.createdByUserFullName : <any>null;
        data["createdByInitials"] = this.createdByInitials !== undefined ? this.createdByInitials : <any>null;
        data["pageOfMessages"] = this.pageOfMessages ? this.pageOfMessages.toJSON() : <any>null;
        return data; 
    }
}

export interface ITaskMessagesViewModel {
    createdByUserFullName?: string | null;
    createdByInitials?: string | null;
    pageOfMessages?: PageOfOfTaskMessageViewModel | null;
}

export class PageOfOfTaskMessageViewModel implements IPageOfOfTaskMessageViewModel {
    items?: TaskMessageViewModel[] | null;
    totalNumberOfItems!: number;

    constructor(data?: IPageOfOfTaskMessageViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TaskMessageViewModel.fromJS(item));
            }
            this.totalNumberOfItems = _data["totalNumberOfItems"] !== undefined ? _data["totalNumberOfItems"] : <any>null;
        }
    }

    static fromJS(data: any): PageOfOfTaskMessageViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfOfTaskMessageViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalNumberOfItems"] = this.totalNumberOfItems !== undefined ? this.totalNumberOfItems : <any>null;
        return data; 
    }
}

export interface IPageOfOfTaskMessageViewModel {
    items?: TaskMessageViewModel[] | null;
    totalNumberOfItems: number;
}

export class TaskMessageViewModel implements ITaskMessageViewModel {
    id!: string;
    message?: string | null;
    createdByUserId!: string;
    createdByUserFullName?: string | null;
    createdByInitials?: string | null;
    hasAvatar!: boolean;
    avatarUrl?: string | null;
    createdAtString?: string | null;
    isMyMessage!: boolean;

    constructor(data?: ITaskMessageViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.createdByUserId = _data["createdByUserId"] !== undefined ? _data["createdByUserId"] : <any>null;
            this.createdByUserFullName = _data["createdByUserFullName"] !== undefined ? _data["createdByUserFullName"] : <any>null;
            this.createdByInitials = _data["createdByInitials"] !== undefined ? _data["createdByInitials"] : <any>null;
            this.hasAvatar = _data["hasAvatar"] !== undefined ? _data["hasAvatar"] : <any>null;
            this.avatarUrl = _data["avatarUrl"] !== undefined ? _data["avatarUrl"] : <any>null;
            this.createdAtString = _data["createdAtString"] !== undefined ? _data["createdAtString"] : <any>null;
            this.isMyMessage = _data["isMyMessage"] !== undefined ? _data["isMyMessage"] : <any>null;
        }
    }

    static fromJS(data: any): TaskMessageViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new TaskMessageViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["createdByUserId"] = this.createdByUserId !== undefined ? this.createdByUserId : <any>null;
        data["createdByUserFullName"] = this.createdByUserFullName !== undefined ? this.createdByUserFullName : <any>null;
        data["createdByInitials"] = this.createdByInitials !== undefined ? this.createdByInitials : <any>null;
        data["hasAvatar"] = this.hasAvatar !== undefined ? this.hasAvatar : <any>null;
        data["avatarUrl"] = this.avatarUrl !== undefined ? this.avatarUrl : <any>null;
        data["createdAtString"] = this.createdAtString !== undefined ? this.createdAtString : <any>null;
        data["isMyMessage"] = this.isMyMessage !== undefined ? this.isMyMessage : <any>null;
        return data; 
    }
}

export interface ITaskMessageViewModel {
    id: string;
    message?: string | null;
    createdByUserId: string;
    createdByUserFullName?: string | null;
    createdByInitials?: string | null;
    hasAvatar: boolean;
    avatarUrl?: string | null;
    createdAtString?: string | null;
    isMyMessage: boolean;
}

export class GetTaskMessagesQuery implements IGetTaskMessagesQuery {
    taskId!: string;

    constructor(data?: IGetTaskMessagesQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.taskId = _data["taskId"] !== undefined ? _data["taskId"] : <any>null;
        }
    }

    static fromJS(data: any): GetTaskMessagesQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetTaskMessagesQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["taskId"] = this.taskId !== undefined ? this.taskId : <any>null;
        return data; 
    }
}

export interface IGetTaskMessagesQuery {
    taskId: string;
}

export class ChangeTaskStatusCommand implements IChangeTaskStatusCommand {
    taskId!: string;
    statusKey?: string | null;

    constructor(data?: IChangeTaskStatusCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.taskId = _data["taskId"] !== undefined ? _data["taskId"] : <any>null;
            this.statusKey = _data["statusKey"] !== undefined ? _data["statusKey"] : <any>null;
        }
    }

    static fromJS(data: any): ChangeTaskStatusCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeTaskStatusCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["taskId"] = this.taskId !== undefined ? this.taskId : <any>null;
        data["statusKey"] = this.statusKey !== undefined ? this.statusKey : <any>null;
        return data; 
    }
}

export interface IChangeTaskStatusCommand {
    taskId: string;
    statusKey?: string | null;
}

export class ProcessResponseOfTaskMessageViewModel extends ProcessResponse implements IProcessResponseOfTaskMessageViewModel {
    data?: TaskMessageViewModel | null;

    constructor(data?: IProcessResponseOfTaskMessageViewModel) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? TaskMessageViewModel.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfTaskMessageViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfTaskMessageViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfTaskMessageViewModel extends IProcessResponse {
    data?: TaskMessageViewModel | null;
}

export class SendTaskMessageCommand implements ISendTaskMessageCommand {
    taskId!: string;
    message?: string | null;

    constructor(data?: ISendTaskMessageCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.taskId = _data["taskId"] !== undefined ? _data["taskId"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
        }
    }

    static fromJS(data: any): SendTaskMessageCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SendTaskMessageCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["taskId"] = this.taskId !== undefined ? this.taskId : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        return data; 
    }
}

export interface ISendTaskMessageCommand {
    taskId: string;
    message?: string | null;
}

export class UpdateTaskCommand implements IUpdateTaskCommand {
    id!: string;
    startsAtString?: string | null;
    userId!: string;

    constructor(data?: IUpdateTaskCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.startsAtString = _data["startsAtString"] !== undefined ? _data["startsAtString"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateTaskCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTaskCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["startsAtString"] = this.startsAtString !== undefined ? this.startsAtString : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        return data; 
    }
}

export interface IUpdateTaskCommand {
    id: string;
    startsAtString?: string | null;
    userId: string;
}

export class ReassignTaskCommand implements IReassignTaskCommand {
    taskId!: string;
    startsAtString?: string | null;
    userId?: string | null;
    isForPlannedAttendant!: boolean;

    constructor(data?: IReassignTaskCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.taskId = _data["taskId"] !== undefined ? _data["taskId"] : <any>null;
            this.startsAtString = _data["startsAtString"] !== undefined ? _data["startsAtString"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.isForPlannedAttendant = _data["isForPlannedAttendant"] !== undefined ? _data["isForPlannedAttendant"] : <any>null;
        }
    }

    static fromJS(data: any): ReassignTaskCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ReassignTaskCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["taskId"] = this.taskId !== undefined ? this.taskId : <any>null;
        data["startsAtString"] = this.startsAtString !== undefined ? this.startsAtString : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["isForPlannedAttendant"] = this.isForPlannedAttendant !== undefined ? this.isForPlannedAttendant : <any>null;
        return data; 
    }
}

export interface IReassignTaskCommand {
    taskId: string;
    startsAtString?: string | null;
    userId?: string | null;
    isForPlannedAttendant: boolean;
}

export class CancelTaskCommand implements ICancelTaskCommand {
    taskId!: string;

    constructor(data?: ICancelTaskCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.taskId = _data["taskId"] !== undefined ? _data["taskId"] : <any>null;
        }
    }

    static fromJS(data: any): CancelTaskCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CancelTaskCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["taskId"] = this.taskId !== undefined ? this.taskId : <any>null;
        return data; 
    }
}

export interface ICancelTaskCommand {
    taskId: string;
}

export class MonthlyTasksGraphsViewModel implements IMonthlyTasksGraphsViewModel {
    labels?: MonthlyTasksLabelViewModel[] | null;
    numberOfWorkers?: number[] | null;
    maxNumberOfWorkers!: number;
    numberOfTasks?: number[] | null;
    maxNumberOfTasks!: number;
    averageTasksPerWorker?: number[] | null;
    maxAverageTasksPerWorker!: number;

    constructor(data?: IMonthlyTasksGraphsViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["labels"])) {
                this.labels = [] as any;
                for (let item of _data["labels"])
                    this.labels!.push(MonthlyTasksLabelViewModel.fromJS(item));
            }
            if (Array.isArray(_data["numberOfWorkers"])) {
                this.numberOfWorkers = [] as any;
                for (let item of _data["numberOfWorkers"])
                    this.numberOfWorkers!.push(item);
            }
            this.maxNumberOfWorkers = _data["maxNumberOfWorkers"] !== undefined ? _data["maxNumberOfWorkers"] : <any>null;
            if (Array.isArray(_data["numberOfTasks"])) {
                this.numberOfTasks = [] as any;
                for (let item of _data["numberOfTasks"])
                    this.numberOfTasks!.push(item);
            }
            this.maxNumberOfTasks = _data["maxNumberOfTasks"] !== undefined ? _data["maxNumberOfTasks"] : <any>null;
            if (Array.isArray(_data["averageTasksPerWorker"])) {
                this.averageTasksPerWorker = [] as any;
                for (let item of _data["averageTasksPerWorker"])
                    this.averageTasksPerWorker!.push(item);
            }
            this.maxAverageTasksPerWorker = _data["maxAverageTasksPerWorker"] !== undefined ? _data["maxAverageTasksPerWorker"] : <any>null;
        }
    }

    static fromJS(data: any): MonthlyTasksGraphsViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new MonthlyTasksGraphsViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.labels)) {
            data["labels"] = [];
            for (let item of this.labels)
                data["labels"].push(item.toJSON());
        }
        if (Array.isArray(this.numberOfWorkers)) {
            data["numberOfWorkers"] = [];
            for (let item of this.numberOfWorkers)
                data["numberOfWorkers"].push(item);
        }
        data["maxNumberOfWorkers"] = this.maxNumberOfWorkers !== undefined ? this.maxNumberOfWorkers : <any>null;
        if (Array.isArray(this.numberOfTasks)) {
            data["numberOfTasks"] = [];
            for (let item of this.numberOfTasks)
                data["numberOfTasks"].push(item);
        }
        data["maxNumberOfTasks"] = this.maxNumberOfTasks !== undefined ? this.maxNumberOfTasks : <any>null;
        if (Array.isArray(this.averageTasksPerWorker)) {
            data["averageTasksPerWorker"] = [];
            for (let item of this.averageTasksPerWorker)
                data["averageTasksPerWorker"].push(item);
        }
        data["maxAverageTasksPerWorker"] = this.maxAverageTasksPerWorker !== undefined ? this.maxAverageTasksPerWorker : <any>null;
        return data; 
    }
}

export interface IMonthlyTasksGraphsViewModel {
    labels?: MonthlyTasksLabelViewModel[] | null;
    numberOfWorkers?: number[] | null;
    maxNumberOfWorkers: number;
    numberOfTasks?: number[] | null;
    maxNumberOfTasks: number;
    averageTasksPerWorker?: number[] | null;
    maxAverageTasksPerWorker: number;
}

export class MonthlyTasksLabelViewModel implements IMonthlyTasksLabelViewModel {
    key?: string | null;
    text?: string | null;
    day!: number;

    constructor(data?: IMonthlyTasksLabelViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"] !== undefined ? _data["key"] : <any>null;
            this.text = _data["text"] !== undefined ? _data["text"] : <any>null;
            this.day = _data["day"] !== undefined ? _data["day"] : <any>null;
        }
    }

    static fromJS(data: any): MonthlyTasksLabelViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new MonthlyTasksLabelViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key !== undefined ? this.key : <any>null;
        data["text"] = this.text !== undefined ? this.text : <any>null;
        data["day"] = this.day !== undefined ? this.day : <any>null;
        return data; 
    }
}

export interface IMonthlyTasksLabelViewModel {
    key?: string | null;
    text?: string | null;
    day: number;
}

export class GetMonthlyTasksGraphsDataQuery implements IGetMonthlyTasksGraphsDataQuery {
    monthDate!: moment.Moment;

    constructor(data?: IGetMonthlyTasksGraphsDataQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.monthDate = _data["monthDate"] ? moment(_data["monthDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): GetMonthlyTasksGraphsDataQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetMonthlyTasksGraphsDataQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["monthDate"] = this.monthDate ? this.monthDate.toISOString() : <any>null;
        return data; 
    }
}

export interface IGetMonthlyTasksGraphsDataQuery {
    monthDate: moment.Moment;
}

export class GetMonthlyTasksQuery implements IGetMonthlyTasksQuery {
    keywords?: string | null;
    monthDate!: moment.Moment;
    statusKey?: string | null;
    actionName?: string | null;
    assetId?: string | null;
    assetGroupId?: string | null;
    whos?: TaskWhoData[] | null;
    wheres?: TaskWhereData[] | null;

    constructor(data?: IGetMonthlyTasksQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.keywords = _data["keywords"] !== undefined ? _data["keywords"] : <any>null;
            this.monthDate = _data["monthDate"] ? moment(_data["monthDate"].toString()) : <any>null;
            this.statusKey = _data["statusKey"] !== undefined ? _data["statusKey"] : <any>null;
            this.actionName = _data["actionName"] !== undefined ? _data["actionName"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            if (Array.isArray(_data["whos"])) {
                this.whos = [] as any;
                for (let item of _data["whos"])
                    this.whos!.push(TaskWhoData.fromJS(item));
            }
            if (Array.isArray(_data["wheres"])) {
                this.wheres = [] as any;
                for (let item of _data["wheres"])
                    this.wheres!.push(TaskWhereData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetMonthlyTasksQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetMonthlyTasksQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["keywords"] = this.keywords !== undefined ? this.keywords : <any>null;
        data["monthDate"] = this.monthDate ? this.monthDate.toISOString() : <any>null;
        data["statusKey"] = this.statusKey !== undefined ? this.statusKey : <any>null;
        data["actionName"] = this.actionName !== undefined ? this.actionName : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        if (Array.isArray(this.whos)) {
            data["whos"] = [];
            for (let item of this.whos)
                data["whos"].push(item.toJSON());
        }
        if (Array.isArray(this.wheres)) {
            data["wheres"] = [];
            for (let item of this.wheres)
                data["wheres"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetMonthlyTasksQuery {
    keywords?: string | null;
    monthDate: moment.Moment;
    statusKey?: string | null;
    actionName?: string | null;
    assetId?: string | null;
    assetGroupId?: string | null;
    whos?: TaskWhoData[] | null;
    wheres?: TaskWhereData[] | null;
}

export class ExtendedWhereData extends TaskWhereData implements IExtendedWhereData {
    hotelId?: string | null;
    guestName?: string | null;
    roomName?: string | null;

    constructor(data?: IExtendedWhereData) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.guestName = _data["guestName"] !== undefined ? _data["guestName"] : <any>null;
            this.roomName = _data["roomName"] !== undefined ? _data["roomName"] : <any>null;
        }
    }

    static fromJS(data: any): ExtendedWhereData {
        data = typeof data === 'object' ? data : {};
        let result = new ExtendedWhereData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["guestName"] = this.guestName !== undefined ? this.guestName : <any>null;
        data["roomName"] = this.roomName !== undefined ? this.roomName : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IExtendedWhereData extends ITaskWhereData {
    hotelId?: string | null;
    guestName?: string | null;
    roomName?: string | null;
}

export class GetAllWheresQuery implements IGetAllWheresQuery {
    includeReservationsWithoutRooms!: boolean;
    ignoreUnAllocatedReservations!: boolean;
    ignoreBuildingsMap!: boolean;
    ignoreWarehouses!: boolean;
    ignoreTemporaryRooms!: boolean;

    constructor(data?: IGetAllWheresQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.includeReservationsWithoutRooms = _data["includeReservationsWithoutRooms"] !== undefined ? _data["includeReservationsWithoutRooms"] : <any>null;
            this.ignoreUnAllocatedReservations = _data["ignoreUnAllocatedReservations"] !== undefined ? _data["ignoreUnAllocatedReservations"] : <any>null;
            this.ignoreBuildingsMap = _data["ignoreBuildingsMap"] !== undefined ? _data["ignoreBuildingsMap"] : <any>null;
            this.ignoreWarehouses = _data["ignoreWarehouses"] !== undefined ? _data["ignoreWarehouses"] : <any>null;
            this.ignoreTemporaryRooms = _data["ignoreTemporaryRooms"] !== undefined ? _data["ignoreTemporaryRooms"] : <any>null;
        }
    }

    static fromJS(data: any): GetAllWheresQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllWheresQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["includeReservationsWithoutRooms"] = this.includeReservationsWithoutRooms !== undefined ? this.includeReservationsWithoutRooms : <any>null;
        data["ignoreUnAllocatedReservations"] = this.ignoreUnAllocatedReservations !== undefined ? this.ignoreUnAllocatedReservations : <any>null;
        data["ignoreBuildingsMap"] = this.ignoreBuildingsMap !== undefined ? this.ignoreBuildingsMap : <any>null;
        data["ignoreWarehouses"] = this.ignoreWarehouses !== undefined ? this.ignoreWarehouses : <any>null;
        data["ignoreTemporaryRooms"] = this.ignoreTemporaryRooms !== undefined ? this.ignoreTemporaryRooms : <any>null;
        return data; 
    }
}

export interface IGetAllWheresQuery {
    includeReservationsWithoutRooms: boolean;
    ignoreUnAllocatedReservations: boolean;
    ignoreBuildingsMap: boolean;
    ignoreWarehouses: boolean;
    ignoreTemporaryRooms: boolean;
}

export class ClaimTaskCommand implements IClaimTaskCommand {
    taskId!: string;

    constructor(data?: IClaimTaskCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.taskId = _data["taskId"] !== undefined ? _data["taskId"] : <any>null;
        }
    }

    static fromJS(data: any): ClaimTaskCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ClaimTaskCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["taskId"] = this.taskId !== undefined ? this.taskId : <any>null;
        return data; 
    }
}

export interface IClaimTaskCommand {
    taskId: string;
}

export class RejectTaskCommand implements IRejectTaskCommand {
    taskId!: string;

    constructor(data?: IRejectTaskCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.taskId = _data["taskId"] !== undefined ? _data["taskId"] : <any>null;
        }
    }

    static fromJS(data: any): RejectTaskCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RejectTaskCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["taskId"] = this.taskId !== undefined ? this.taskId : <any>null;
        return data; 
    }
}

export interface IRejectTaskCommand {
    taskId: string;
}

export class FullGroupHierarchyData implements IFullGroupHierarchyData {
    groups?: GroupHierarchyData[] | null;
    ungroupedUsers?: UserHierarchyData[] | null;

    constructor(data?: IFullGroupHierarchyData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["groups"])) {
                this.groups = [] as any;
                for (let item of _data["groups"])
                    this.groups!.push(GroupHierarchyData.fromJS(item));
            }
            if (Array.isArray(_data["ungroupedUsers"])) {
                this.ungroupedUsers = [] as any;
                for (let item of _data["ungroupedUsers"])
                    this.ungroupedUsers!.push(UserHierarchyData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FullGroupHierarchyData {
        data = typeof data === 'object' ? data : {};
        let result = new FullGroupHierarchyData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.groups)) {
            data["groups"] = [];
            for (let item of this.groups)
                data["groups"].push(item.toJSON());
        }
        if (Array.isArray(this.ungroupedUsers)) {
            data["ungroupedUsers"] = [];
            for (let item of this.ungroupedUsers)
                data["ungroupedUsers"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IFullGroupHierarchyData {
    groups?: GroupHierarchyData[] | null;
    ungroupedUsers?: UserHierarchyData[] | null;
}

export class GroupHierarchyData implements IGroupHierarchyData {
    id!: string;
    name?: string | null;
    createdAt!: moment.Moment;
    users?: UserHierarchyData[] | null;
    subGroups?: SubGroupHierarchyData[] | null;

    constructor(data?: IGroupHierarchyData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>null;
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(UserHierarchyData.fromJS(item));
            }
            if (Array.isArray(_data["subGroups"])) {
                this.subGroups = [] as any;
                for (let item of _data["subGroups"])
                    this.subGroups!.push(SubGroupHierarchyData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GroupHierarchyData {
        data = typeof data === 'object' ? data : {};
        let result = new GroupHierarchyData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        if (Array.isArray(this.subGroups)) {
            data["subGroups"] = [];
            for (let item of this.subGroups)
                data["subGroups"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGroupHierarchyData {
    id: string;
    name?: string | null;
    createdAt: moment.Moment;
    users?: UserHierarchyData[] | null;
    subGroups?: SubGroupHierarchyData[] | null;
}

export class UserHierarchyData implements IUserHierarchyData {
    id!: string;
    username?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    userRole?: string | null;
    avatarImageUrl?: string | null;
    fullNameInitials?: string | null;
    isSubGroupLeader!: boolean;
    isActive!: boolean;
    defaultAvatarColorHex?: string | null;

    constructor(data?: IUserHierarchyData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.userRole = _data["userRole"] !== undefined ? _data["userRole"] : <any>null;
            this.avatarImageUrl = _data["avatarImageUrl"] !== undefined ? _data["avatarImageUrl"] : <any>null;
            this.fullNameInitials = _data["fullNameInitials"] !== undefined ? _data["fullNameInitials"] : <any>null;
            this.isSubGroupLeader = _data["isSubGroupLeader"] !== undefined ? _data["isSubGroupLeader"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.defaultAvatarColorHex = _data["defaultAvatarColorHex"] !== undefined ? _data["defaultAvatarColorHex"] : <any>null;
        }
    }

    static fromJS(data: any): UserHierarchyData {
        data = typeof data === 'object' ? data : {};
        let result = new UserHierarchyData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["userRole"] = this.userRole !== undefined ? this.userRole : <any>null;
        data["avatarImageUrl"] = this.avatarImageUrl !== undefined ? this.avatarImageUrl : <any>null;
        data["fullNameInitials"] = this.fullNameInitials !== undefined ? this.fullNameInitials : <any>null;
        data["isSubGroupLeader"] = this.isSubGroupLeader !== undefined ? this.isSubGroupLeader : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["defaultAvatarColorHex"] = this.defaultAvatarColorHex !== undefined ? this.defaultAvatarColorHex : <any>null;
        return data; 
    }
}

export interface IUserHierarchyData {
    id: string;
    username?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    userRole?: string | null;
    avatarImageUrl?: string | null;
    fullNameInitials?: string | null;
    isSubGroupLeader: boolean;
    isActive: boolean;
    defaultAvatarColorHex?: string | null;
}

export class SubGroupHierarchyData implements ISubGroupHierarchyData {
    id!: string;
    name?: string | null;
    createdAt!: moment.Moment;
    users?: UserHierarchyData[] | null;

    constructor(data?: ISubGroupHierarchyData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>null;
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(UserHierarchyData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SubGroupHierarchyData {
        data = typeof data === 'object' ? data : {};
        let result = new SubGroupHierarchyData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISubGroupHierarchyData {
    id: string;
    name?: string | null;
    createdAt: moment.Moment;
    users?: UserHierarchyData[] | null;
}

export class GetFullUserGroupsHierarchyQuery implements IGetFullUserGroupsHierarchyQuery {
    keywords?: string | null;
    sortKey?: string | null;
    activeStatusKey?: string | null;
    showEmptyGroupsAndSubGroups!: boolean;

    constructor(data?: IGetFullUserGroupsHierarchyQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.keywords = _data["keywords"] !== undefined ? _data["keywords"] : <any>null;
            this.sortKey = _data["sortKey"] !== undefined ? _data["sortKey"] : <any>null;
            this.activeStatusKey = _data["activeStatusKey"] !== undefined ? _data["activeStatusKey"] : <any>null;
            this.showEmptyGroupsAndSubGroups = _data["showEmptyGroupsAndSubGroups"] !== undefined ? _data["showEmptyGroupsAndSubGroups"] : <any>null;
        }
    }

    static fromJS(data: any): GetFullUserGroupsHierarchyQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetFullUserGroupsHierarchyQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["keywords"] = this.keywords !== undefined ? this.keywords : <any>null;
        data["sortKey"] = this.sortKey !== undefined ? this.sortKey : <any>null;
        data["activeStatusKey"] = this.activeStatusKey !== undefined ? this.activeStatusKey : <any>null;
        data["showEmptyGroupsAndSubGroups"] = this.showEmptyGroupsAndSubGroups !== undefined ? this.showEmptyGroupsAndSubGroups : <any>null;
        return data; 
    }
}

export interface IGetFullUserGroupsHierarchyQuery {
    keywords?: string | null;
    sortKey?: string | null;
    activeStatusKey?: string | null;
    showEmptyGroupsAndSubGroups: boolean;
}

export class ProcessResponseOfFullGroupHierarchyData extends ProcessResponse implements IProcessResponseOfFullGroupHierarchyData {
    data?: FullGroupHierarchyData | null;

    constructor(data?: IProcessResponseOfFullGroupHierarchyData) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? FullGroupHierarchyData.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfFullGroupHierarchyData {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfFullGroupHierarchyData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfFullGroupHierarchyData extends IProcessResponse {
    data?: FullGroupHierarchyData | null;
}

export class ProcessResponseOfGroupHierarchyData extends ProcessResponse implements IProcessResponseOfGroupHierarchyData {
    data?: GroupHierarchyData | null;

    constructor(data?: IProcessResponseOfGroupHierarchyData) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? GroupHierarchyData.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfGroupHierarchyData {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfGroupHierarchyData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfGroupHierarchyData extends IProcessResponse {
    data?: GroupHierarchyData | null;
}

export class InsertGroupCommand implements IInsertGroupCommand {
    name?: string | null;

    constructor(data?: IInsertGroupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): InsertGroupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new InsertGroupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data; 
    }
}

export interface IInsertGroupCommand {
    name?: string | null;
}

export class UpdateGroupCommand implements IUpdateGroupCommand {
    id!: string;
    name?: string | null;

    constructor(data?: IUpdateGroupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateGroupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateGroupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data; 
    }
}

export interface IUpdateGroupCommand {
    id: string;
    name?: string | null;
}

export class DeleteGroupCommand implements IDeleteGroupCommand {
    id!: string;

    constructor(data?: IDeleteGroupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteGroupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteGroupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IDeleteGroupCommand {
    id: string;
}

export class ProcessResponseOfSubGroupHierarchyData extends ProcessResponse implements IProcessResponseOfSubGroupHierarchyData {
    data?: SubGroupHierarchyData | null;

    constructor(data?: IProcessResponseOfSubGroupHierarchyData) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? SubGroupHierarchyData.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfSubGroupHierarchyData {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfSubGroupHierarchyData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfSubGroupHierarchyData extends IProcessResponse {
    data?: SubGroupHierarchyData | null;
}

export class InsertSubGroupCommand implements IInsertSubGroupCommand {
    name?: string | null;
    groupId!: string;

    constructor(data?: IInsertSubGroupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.groupId = _data["groupId"] !== undefined ? _data["groupId"] : <any>null;
        }
    }

    static fromJS(data: any): InsertSubGroupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new InsertSubGroupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["groupId"] = this.groupId !== undefined ? this.groupId : <any>null;
        return data; 
    }
}

export interface IInsertSubGroupCommand {
    name?: string | null;
    groupId: string;
}

export class UpdateSubGroupCommand implements IUpdateSubGroupCommand {
    id!: string;
    name?: string | null;
    groupId!: string;

    constructor(data?: IUpdateSubGroupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.groupId = _data["groupId"] !== undefined ? _data["groupId"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateSubGroupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateSubGroupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["groupId"] = this.groupId !== undefined ? this.groupId : <any>null;
        return data; 
    }
}

export interface IUpdateSubGroupCommand {
    id: string;
    name?: string | null;
    groupId: string;
}

export class DeleteSubGroupCommand implements IDeleteSubGroupCommand {
    id!: string;

    constructor(data?: IDeleteSubGroupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteSubGroupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteSubGroupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IDeleteSubGroupCommand {
    id: string;
}

export class ProcessResponseOfUserModel extends ProcessResponse implements IProcessResponseOfUserModel {
    data?: UserModel | null;

    constructor(data?: IProcessResponseOfUserModel) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? UserModel.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfUserModel {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfUserModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfUserModel extends IProcessResponse {
    data?: UserModel | null;
}

export class UserModel implements IUserModel {
    id?: string | null;
    email?: string | null;
    userName?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    connectionName?: string | null;
    registrationNumber?: string | null;
    language?: string | null;
    originalHotel?: string | null;
    userSubGroupId?: string | null;
    userGroupId?: string | null;
    phoneNumber?: string | null;
    hotelIds?: string[] | null;
    roleId?: string | null;
    isSubGroupLeader!: boolean;
    isActive!: boolean;
    defaultAvatarColorHex?: string | null;
    avatarImageUrl?: string | null;

    constructor(data?: IUserModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.connectionName = _data["connectionName"] !== undefined ? _data["connectionName"] : <any>null;
            this.registrationNumber = _data["registrationNumber"] !== undefined ? _data["registrationNumber"] : <any>null;
            this.language = _data["language"] !== undefined ? _data["language"] : <any>null;
            this.originalHotel = _data["originalHotel"] !== undefined ? _data["originalHotel"] : <any>null;
            this.userSubGroupId = _data["userSubGroupId"] !== undefined ? _data["userSubGroupId"] : <any>null;
            this.userGroupId = _data["userGroupId"] !== undefined ? _data["userGroupId"] : <any>null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
            if (Array.isArray(_data["hotelIds"])) {
                this.hotelIds = [] as any;
                for (let item of _data["hotelIds"])
                    this.hotelIds!.push(item);
            }
            this.roleId = _data["roleId"] !== undefined ? _data["roleId"] : <any>null;
            this.isSubGroupLeader = _data["isSubGroupLeader"] !== undefined ? _data["isSubGroupLeader"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.defaultAvatarColorHex = _data["defaultAvatarColorHex"] !== undefined ? _data["defaultAvatarColorHex"] : <any>null;
            this.avatarImageUrl = _data["avatarImageUrl"] !== undefined ? _data["avatarImageUrl"] : <any>null;
        }
    }

    static fromJS(data: any): UserModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["connectionName"] = this.connectionName !== undefined ? this.connectionName : <any>null;
        data["registrationNumber"] = this.registrationNumber !== undefined ? this.registrationNumber : <any>null;
        data["language"] = this.language !== undefined ? this.language : <any>null;
        data["originalHotel"] = this.originalHotel !== undefined ? this.originalHotel : <any>null;
        data["userSubGroupId"] = this.userSubGroupId !== undefined ? this.userSubGroupId : <any>null;
        data["userGroupId"] = this.userGroupId !== undefined ? this.userGroupId : <any>null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
        if (Array.isArray(this.hotelIds)) {
            data["hotelIds"] = [];
            for (let item of this.hotelIds)
                data["hotelIds"].push(item);
        }
        data["roleId"] = this.roleId !== undefined ? this.roleId : <any>null;
        data["isSubGroupLeader"] = this.isSubGroupLeader !== undefined ? this.isSubGroupLeader : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["defaultAvatarColorHex"] = this.defaultAvatarColorHex !== undefined ? this.defaultAvatarColorHex : <any>null;
        data["avatarImageUrl"] = this.avatarImageUrl !== undefined ? this.avatarImageUrl : <any>null;
        return data; 
    }
}

export interface IUserModel {
    id?: string | null;
    email?: string | null;
    userName?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    connectionName?: string | null;
    registrationNumber?: string | null;
    language?: string | null;
    originalHotel?: string | null;
    userSubGroupId?: string | null;
    userGroupId?: string | null;
    phoneNumber?: string | null;
    hotelIds?: string[] | null;
    roleId?: string | null;
    isSubGroupLeader: boolean;
    isActive: boolean;
    defaultAvatarColorHex?: string | null;
    avatarImageUrl?: string | null;
}

export class ProcessResponseOfUserHierarchyData extends ProcessResponse implements IProcessResponseOfUserHierarchyData {
    data?: UserHierarchyData | null;

    constructor(data?: IProcessResponseOfUserHierarchyData) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.data = _data["data"] ? UserHierarchyData.fromJS(_data["data"]) : <any>null;
        }
    }

    static fromJS(data: any): ProcessResponseOfUserHierarchyData {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessResponseOfUserHierarchyData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IProcessResponseOfUserHierarchyData extends IProcessResponse {
    data?: UserHierarchyData | null;
}

export class InsertUserCommand implements IInsertUserCommand {
    email?: string | null;
    userName?: string | null;
    password?: string | null;
    passwordConfirmation?: string | null;
    phoneNumber?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    connectionName?: string | null;
    registrationNumber?: string | null;
    language?: string | null;
    originalHotel?: string | null;
    hotelIds?: string[] | null;
    roleId?: string | null;
    isSubGroupLeader!: boolean;
    isActive!: boolean;
    userSubGroupId?: string | null;
    userGroupId?: string | null;
    avatarData?: SaveAvatarData | null;
    defaultAvatarColorHex?: string | null;

    constructor(data?: IInsertUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
            this.passwordConfirmation = _data["passwordConfirmation"] !== undefined ? _data["passwordConfirmation"] : <any>null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.connectionName = _data["connectionName"] !== undefined ? _data["connectionName"] : <any>null;
            this.registrationNumber = _data["registrationNumber"] !== undefined ? _data["registrationNumber"] : <any>null;
            this.language = _data["language"] !== undefined ? _data["language"] : <any>null;
            this.originalHotel = _data["originalHotel"] !== undefined ? _data["originalHotel"] : <any>null;
            if (Array.isArray(_data["hotelIds"])) {
                this.hotelIds = [] as any;
                for (let item of _data["hotelIds"])
                    this.hotelIds!.push(item);
            }
            this.roleId = _data["roleId"] !== undefined ? _data["roleId"] : <any>null;
            this.isSubGroupLeader = _data["isSubGroupLeader"] !== undefined ? _data["isSubGroupLeader"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.userSubGroupId = _data["userSubGroupId"] !== undefined ? _data["userSubGroupId"] : <any>null;
            this.userGroupId = _data["userGroupId"] !== undefined ? _data["userGroupId"] : <any>null;
            this.avatarData = _data["avatarData"] ? SaveAvatarData.fromJS(_data["avatarData"]) : <any>null;
            this.defaultAvatarColorHex = _data["defaultAvatarColorHex"] !== undefined ? _data["defaultAvatarColorHex"] : <any>null;
        }
    }

    static fromJS(data: any): InsertUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new InsertUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["passwordConfirmation"] = this.passwordConfirmation !== undefined ? this.passwordConfirmation : <any>null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["connectionName"] = this.connectionName !== undefined ? this.connectionName : <any>null;
        data["registrationNumber"] = this.registrationNumber !== undefined ? this.registrationNumber : <any>null;
        data["language"] = this.language !== undefined ? this.language : <any>null;
        data["originalHotel"] = this.originalHotel !== undefined ? this.originalHotel : <any>null;
        if (Array.isArray(this.hotelIds)) {
            data["hotelIds"] = [];
            for (let item of this.hotelIds)
                data["hotelIds"].push(item);
        }
        data["roleId"] = this.roleId !== undefined ? this.roleId : <any>null;
        data["isSubGroupLeader"] = this.isSubGroupLeader !== undefined ? this.isSubGroupLeader : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["userSubGroupId"] = this.userSubGroupId !== undefined ? this.userSubGroupId : <any>null;
        data["userGroupId"] = this.userGroupId !== undefined ? this.userGroupId : <any>null;
        data["avatarData"] = this.avatarData ? this.avatarData.toJSON() : <any>null;
        data["defaultAvatarColorHex"] = this.defaultAvatarColorHex !== undefined ? this.defaultAvatarColorHex : <any>null;
        return data; 
    }
}

export interface IInsertUserCommand {
    email?: string | null;
    userName?: string | null;
    password?: string | null;
    passwordConfirmation?: string | null;
    phoneNumber?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    connectionName?: string | null;
    registrationNumber?: string | null;
    language?: string | null;
    originalHotel?: string | null;
    hotelIds?: string[] | null;
    roleId?: string | null;
    isSubGroupLeader: boolean;
    isActive: boolean;
    userSubGroupId?: string | null;
    userGroupId?: string | null;
    avatarData?: SaveAvatarData | null;
    defaultAvatarColorHex?: string | null;
}

export class SaveAvatarData implements ISaveAvatarData {
    hasChanged!: boolean;
    fileName?: string | null;
    file?: string | null;

    constructor(data?: ISaveAvatarData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hasChanged = _data["hasChanged"] !== undefined ? _data["hasChanged"] : <any>null;
            this.fileName = _data["fileName"] !== undefined ? _data["fileName"] : <any>null;
            this.file = _data["file"] !== undefined ? _data["file"] : <any>null;
        }
    }

    static fromJS(data: any): SaveAvatarData {
        data = typeof data === 'object' ? data : {};
        let result = new SaveAvatarData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hasChanged"] = this.hasChanged !== undefined ? this.hasChanged : <any>null;
        data["fileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        data["file"] = this.file !== undefined ? this.file : <any>null;
        return data; 
    }
}

export interface ISaveAvatarData {
    hasChanged: boolean;
    fileName?: string | null;
    file?: string | null;
}

export class UpdateUserCommand implements IUpdateUserCommand {
    id!: string;
    email?: string | null;
    userName?: string | null;
    password?: string | null;
    passwordConfirmation?: string | null;
    phoneNumber?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    connectionName?: string | null;
    registrationNumber?: string | null;
    language?: string | null;
    originalHotel?: string | null;
    hotelIds?: string[] | null;
    roleId?: string | null;
    userSubGroupId?: string | null;
    userGroupId?: string | null;
    avatarData?: SaveAvatarData | null;
    isSubGroupLeader!: boolean;
    isActive!: boolean;
    defaultAvatarColorHex?: string | null;

    constructor(data?: IUpdateUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
            this.passwordConfirmation = _data["passwordConfirmation"] !== undefined ? _data["passwordConfirmation"] : <any>null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.connectionName = _data["connectionName"] !== undefined ? _data["connectionName"] : <any>null;
            this.registrationNumber = _data["registrationNumber"] !== undefined ? _data["registrationNumber"] : <any>null;
            this.language = _data["language"] !== undefined ? _data["language"] : <any>null;
            this.originalHotel = _data["originalHotel"] !== undefined ? _data["originalHotel"] : <any>null;
            if (Array.isArray(_data["hotelIds"])) {
                this.hotelIds = [] as any;
                for (let item of _data["hotelIds"])
                    this.hotelIds!.push(item);
            }
            this.roleId = _data["roleId"] !== undefined ? _data["roleId"] : <any>null;
            this.userSubGroupId = _data["userSubGroupId"] !== undefined ? _data["userSubGroupId"] : <any>null;
            this.userGroupId = _data["userGroupId"] !== undefined ? _data["userGroupId"] : <any>null;
            this.avatarData = _data["avatarData"] ? SaveAvatarData.fromJS(_data["avatarData"]) : <any>null;
            this.isSubGroupLeader = _data["isSubGroupLeader"] !== undefined ? _data["isSubGroupLeader"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.defaultAvatarColorHex = _data["defaultAvatarColorHex"] !== undefined ? _data["defaultAvatarColorHex"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["passwordConfirmation"] = this.passwordConfirmation !== undefined ? this.passwordConfirmation : <any>null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["connectionName"] = this.connectionName !== undefined ? this.connectionName : <any>null;
        data["registrationNumber"] = this.registrationNumber !== undefined ? this.registrationNumber : <any>null;
        data["language"] = this.language !== undefined ? this.language : <any>null;
        data["originalHotel"] = this.originalHotel !== undefined ? this.originalHotel : <any>null;
        if (Array.isArray(this.hotelIds)) {
            data["hotelIds"] = [];
            for (let item of this.hotelIds)
                data["hotelIds"].push(item);
        }
        data["roleId"] = this.roleId !== undefined ? this.roleId : <any>null;
        data["userSubGroupId"] = this.userSubGroupId !== undefined ? this.userSubGroupId : <any>null;
        data["userGroupId"] = this.userGroupId !== undefined ? this.userGroupId : <any>null;
        data["avatarData"] = this.avatarData ? this.avatarData.toJSON() : <any>null;
        data["isSubGroupLeader"] = this.isSubGroupLeader !== undefined ? this.isSubGroupLeader : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["defaultAvatarColorHex"] = this.defaultAvatarColorHex !== undefined ? this.defaultAvatarColorHex : <any>null;
        return data; 
    }
}

export interface IUpdateUserCommand {
    id: string;
    email?: string | null;
    userName?: string | null;
    password?: string | null;
    passwordConfirmation?: string | null;
    phoneNumber?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    connectionName?: string | null;
    registrationNumber?: string | null;
    language?: string | null;
    originalHotel?: string | null;
    hotelIds?: string[] | null;
    roleId?: string | null;
    userSubGroupId?: string | null;
    userGroupId?: string | null;
    avatarData?: SaveAvatarData | null;
    isSubGroupLeader: boolean;
    isActive: boolean;
    defaultAvatarColorHex?: string | null;
}

export class DeleteProcessResponse extends ProcessResponse implements IDeleteProcessResponse {
    hasWarning!: boolean;

    constructor(data?: IDeleteProcessResponse) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.hasWarning = _data["hasWarning"] !== undefined ? _data["hasWarning"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteProcessResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteProcessResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hasWarning"] = this.hasWarning !== undefined ? this.hasWarning : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IDeleteProcessResponse extends IProcessResponse {
    hasWarning: boolean;
}

export class DeleteUserCommand implements IDeleteUserCommand {
    id!: string;

    constructor(data?: IDeleteUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IDeleteUserCommand {
    id: string;
}

export class UserListItemData implements IUserListItemData {
    id!: string;
    userName?: string | null;
    fullName?: string | null;
    roleName?: string | null;
    avatarImageUrl?: string | null;
    fullNameInitials?: string | null;
    isSubGroupLeader!: boolean;
    isActive!: boolean;
    defaultAvatarColorHex?: string | null;

    constructor(data?: IUserListItemData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.fullName = _data["fullName"] !== undefined ? _data["fullName"] : <any>null;
            this.roleName = _data["roleName"] !== undefined ? _data["roleName"] : <any>null;
            this.avatarImageUrl = _data["avatarImageUrl"] !== undefined ? _data["avatarImageUrl"] : <any>null;
            this.fullNameInitials = _data["fullNameInitials"] !== undefined ? _data["fullNameInitials"] : <any>null;
            this.isSubGroupLeader = _data["isSubGroupLeader"] !== undefined ? _data["isSubGroupLeader"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.defaultAvatarColorHex = _data["defaultAvatarColorHex"] !== undefined ? _data["defaultAvatarColorHex"] : <any>null;
        }
    }

    static fromJS(data: any): UserListItemData {
        data = typeof data === 'object' ? data : {};
        let result = new UserListItemData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["fullName"] = this.fullName !== undefined ? this.fullName : <any>null;
        data["roleName"] = this.roleName !== undefined ? this.roleName : <any>null;
        data["avatarImageUrl"] = this.avatarImageUrl !== undefined ? this.avatarImageUrl : <any>null;
        data["fullNameInitials"] = this.fullNameInitials !== undefined ? this.fullNameInitials : <any>null;
        data["isSubGroupLeader"] = this.isSubGroupLeader !== undefined ? this.isSubGroupLeader : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["defaultAvatarColorHex"] = this.defaultAvatarColorHex !== undefined ? this.defaultAvatarColorHex : <any>null;
        return data; 
    }
}

export interface IUserListItemData {
    id: string;
    userName?: string | null;
    fullName?: string | null;
    roleName?: string | null;
    avatarImageUrl?: string | null;
    fullNameInitials?: string | null;
    isSubGroupLeader: boolean;
    isActive: boolean;
    defaultAvatarColorHex?: string | null;
}

export class GetListOfUsersQuery implements IGetListOfUsersQuery {

    constructor(data?: IGetListOfUsersQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): GetListOfUsersQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfUsersQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IGetListOfUsersQuery {
}

export class CleanerListItemData implements ICleanerListItemData {
    id!: string;
    userName?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    fullNameInitials?: string | null;
    avatarImageUrl?: string | null;
    groupName?: string | null;
    subGroupName?: string | null;
    isSubGroupLeader!: boolean;
    isActive!: boolean;

    constructor(data?: ICleanerListItemData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.fullNameInitials = _data["fullNameInitials"] !== undefined ? _data["fullNameInitials"] : <any>null;
            this.avatarImageUrl = _data["avatarImageUrl"] !== undefined ? _data["avatarImageUrl"] : <any>null;
            this.groupName = _data["groupName"] !== undefined ? _data["groupName"] : <any>null;
            this.subGroupName = _data["subGroupName"] !== undefined ? _data["subGroupName"] : <any>null;
            this.isSubGroupLeader = _data["isSubGroupLeader"] !== undefined ? _data["isSubGroupLeader"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
        }
    }

    static fromJS(data: any): CleanerListItemData {
        data = typeof data === 'object' ? data : {};
        let result = new CleanerListItemData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["fullNameInitials"] = this.fullNameInitials !== undefined ? this.fullNameInitials : <any>null;
        data["avatarImageUrl"] = this.avatarImageUrl !== undefined ? this.avatarImageUrl : <any>null;
        data["groupName"] = this.groupName !== undefined ? this.groupName : <any>null;
        data["subGroupName"] = this.subGroupName !== undefined ? this.subGroupName : <any>null;
        data["isSubGroupLeader"] = this.isSubGroupLeader !== undefined ? this.isSubGroupLeader : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        return data; 
    }
}

export interface ICleanerListItemData {
    id: string;
    userName?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    fullNameInitials?: string | null;
    avatarImageUrl?: string | null;
    groupName?: string | null;
    subGroupName?: string | null;
    isSubGroupLeader: boolean;
    isActive: boolean;
}

export class GetListOfCleanersQuery implements IGetListOfCleanersQuery {
    hotelId?: string | null;

    constructor(data?: IGetListOfCleanersQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): GetListOfCleanersQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfCleanersQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IGetListOfCleanersQuery {
    hotelId?: string | null;
}

export class ChangeMyOnDutyStatusCommand implements IChangeMyOnDutyStatusCommand {
    hotelId?: string | null;
    isOnDuty!: boolean;

    constructor(data?: IChangeMyOnDutyStatusCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.isOnDuty = _data["isOnDuty"] !== undefined ? _data["isOnDuty"] : <any>null;
        }
    }

    static fromJS(data: any): ChangeMyOnDutyStatusCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeMyOnDutyStatusCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["isOnDuty"] = this.isOnDuty !== undefined ? this.isOnDuty : <any>null;
        return data; 
    }
}

export interface IChangeMyOnDutyStatusCommand {
    hotelId?: string | null;
    isOnDuty: boolean;
}

export class WarehouseData implements IWarehouseData {
    id!: string;
    name?: string | null;
    isCentralWarehouse!: boolean;
    floorId?: string | null;
    floorName?: string | null;
    hotelId?: string | null;
    hotelName?: string | null;

    constructor(data?: IWarehouseData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isCentralWarehouse = _data["isCentralWarehouse"] !== undefined ? _data["isCentralWarehouse"] : <any>null;
            this.floorId = _data["floorId"] !== undefined ? _data["floorId"] : <any>null;
            this.floorName = _data["floorName"] !== undefined ? _data["floorName"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.hotelName = _data["hotelName"] !== undefined ? _data["hotelName"] : <any>null;
        }
    }

    static fromJS(data: any): WarehouseData {
        data = typeof data === 'object' ? data : {};
        let result = new WarehouseData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isCentralWarehouse"] = this.isCentralWarehouse !== undefined ? this.isCentralWarehouse : <any>null;
        data["floorId"] = this.floorId !== undefined ? this.floorId : <any>null;
        data["floorName"] = this.floorName !== undefined ? this.floorName : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["hotelName"] = this.hotelName !== undefined ? this.hotelName : <any>null;
        return data; 
    }
}

export interface IWarehouseData {
    id: string;
    name?: string | null;
    isCentralWarehouse: boolean;
    floorId?: string | null;
    floorName?: string | null;
    hotelId?: string | null;
    hotelName?: string | null;
}

export class GetListOfWarehousesQuery implements IGetListOfWarehousesQuery {
    hotelId?: string | null;

    constructor(data?: IGetListOfWarehousesQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): GetListOfWarehousesQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfWarehousesQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IGetListOfWarehousesQuery {
    hotelId?: string | null;
}

export class WarehouseDetailsData implements IWarehouseDetailsData {
    id!: string;
    name?: string | null;
    isCentralWarehouse!: boolean;
    floorId?: string | null;
    floorName?: string | null;
    hotelId?: string | null;
    hotelName?: string | null;

    constructor(data?: IWarehouseDetailsData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isCentralWarehouse = _data["isCentralWarehouse"] !== undefined ? _data["isCentralWarehouse"] : <any>null;
            this.floorId = _data["floorId"] !== undefined ? _data["floorId"] : <any>null;
            this.floorName = _data["floorName"] !== undefined ? _data["floorName"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.hotelName = _data["hotelName"] !== undefined ? _data["hotelName"] : <any>null;
        }
    }

    static fromJS(data: any): WarehouseDetailsData {
        data = typeof data === 'object' ? data : {};
        let result = new WarehouseDetailsData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isCentralWarehouse"] = this.isCentralWarehouse !== undefined ? this.isCentralWarehouse : <any>null;
        data["floorId"] = this.floorId !== undefined ? this.floorId : <any>null;
        data["floorName"] = this.floorName !== undefined ? this.floorName : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["hotelName"] = this.hotelName !== undefined ? this.hotelName : <any>null;
        return data; 
    }
}

export interface IWarehouseDetailsData {
    id: string;
    name?: string | null;
    isCentralWarehouse: boolean;
    floorId?: string | null;
    floorName?: string | null;
    hotelId?: string | null;
    hotelName?: string | null;
}

export class GetWarehouseDetailsQuery implements IGetWarehouseDetailsQuery {
    id?: string | null;
    hotelId?: string | null;
    floorId?: string | null;

    constructor(data?: IGetWarehouseDetailsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.floorId = _data["floorId"] !== undefined ? _data["floorId"] : <any>null;
        }
    }

    static fromJS(data: any): GetWarehouseDetailsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetWarehouseDetailsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["floorId"] = this.floorId !== undefined ? this.floorId : <any>null;
        return data; 
    }
}

export interface IGetWarehouseDetailsQuery {
    id?: string | null;
    hotelId?: string | null;
    floorId?: string | null;
}

export class SaveWarehouseRequest implements ISaveWarehouseRequest {
    name?: string | null;
    isCentralWarehouse!: boolean;
    hotelId?: string | null;
    floorId?: string | null;

    constructor(data?: ISaveWarehouseRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isCentralWarehouse = _data["isCentralWarehouse"] !== undefined ? _data["isCentralWarehouse"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.floorId = _data["floorId"] !== undefined ? _data["floorId"] : <any>null;
        }
    }

    static fromJS(data: any): SaveWarehouseRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SaveWarehouseRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isCentralWarehouse"] = this.isCentralWarehouse !== undefined ? this.isCentralWarehouse : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["floorId"] = this.floorId !== undefined ? this.floorId : <any>null;
        return data; 
    }
}

export interface ISaveWarehouseRequest {
    name?: string | null;
    isCentralWarehouse: boolean;
    hotelId?: string | null;
    floorId?: string | null;
}

export class InsertWarehouseCommand extends SaveWarehouseRequest implements IInsertWarehouseCommand {

    constructor(data?: IInsertWarehouseCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): InsertWarehouseCommand {
        data = typeof data === 'object' ? data : {};
        let result = new InsertWarehouseCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IInsertWarehouseCommand extends ISaveWarehouseRequest {
}

export class UpdateWarehouseCommand extends SaveWarehouseRequest implements IUpdateWarehouseCommand {
    id!: string;

    constructor(data?: IUpdateWarehouseCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateWarehouseCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateWarehouseCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IUpdateWarehouseCommand extends ISaveWarehouseRequest {
    id: string;
}

export class DeleteWarehouseCommand implements IDeleteWarehouseCommand {
    id!: string;

    constructor(data?: IDeleteWarehouseCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteWarehouseCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteWarehouseCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IDeleteWarehouseCommand {
    id: string;
}

export class ReceiveAssetToWarehouseCommand implements IReceiveAssetToWarehouseCommand {
    assetId!: string;
    quantity!: number;
    warehouseId!: string;
    note?: string | null;

    constructor(data?: IReceiveAssetToWarehouseCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.quantity = _data["quantity"] !== undefined ? _data["quantity"] : <any>null;
            this.warehouseId = _data["warehouseId"] !== undefined ? _data["warehouseId"] : <any>null;
            this.note = _data["note"] !== undefined ? _data["note"] : <any>null;
        }
    }

    static fromJS(data: any): ReceiveAssetToWarehouseCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ReceiveAssetToWarehouseCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["warehouseId"] = this.warehouseId !== undefined ? this.warehouseId : <any>null;
        data["note"] = this.note !== undefined ? this.note : <any>null;
        return data; 
    }
}

export interface IReceiveAssetToWarehouseCommand {
    assetId: string;
    quantity: number;
    warehouseId: string;
    note?: string | null;
}

export class DispatchAssetFromWarehouseCommand implements IDispatchAssetFromWarehouseCommand {
    assetId!: string;
    quantity!: number;
    warehouseId!: string;
    note?: string | null;

    constructor(data?: IDispatchAssetFromWarehouseCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.quantity = _data["quantity"] !== undefined ? _data["quantity"] : <any>null;
            this.warehouseId = _data["warehouseId"] !== undefined ? _data["warehouseId"] : <any>null;
            this.note = _data["note"] !== undefined ? _data["note"] : <any>null;
        }
    }

    static fromJS(data: any): DispatchAssetFromWarehouseCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DispatchAssetFromWarehouseCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["warehouseId"] = this.warehouseId !== undefined ? this.warehouseId : <any>null;
        data["note"] = this.note !== undefined ? this.note : <any>null;
        return data; 
    }
}

export interface IDispatchAssetFromWarehouseCommand {
    assetId: string;
    quantity: number;
    warehouseId: string;
    note?: string | null;
}

export class WarehouseAssetGroup implements IWarehouseAssetGroup {
    isSimple!: boolean;
    id!: string;
    name?: string | null;
    assets?: WarehouseAsset[] | null;

    constructor(data?: IWarehouseAssetGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSimple = _data["isSimple"] !== undefined ? _data["isSimple"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            if (Array.isArray(_data["assets"])) {
                this.assets = [] as any;
                for (let item of _data["assets"])
                    this.assets!.push(WarehouseAsset.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WarehouseAssetGroup {
        data = typeof data === 'object' ? data : {};
        let result = new WarehouseAssetGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSimple"] = this.isSimple !== undefined ? this.isSimple : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.assets)) {
            data["assets"] = [];
            for (let item of this.assets)
                data["assets"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IWarehouseAssetGroup {
    isSimple: boolean;
    id: string;
    name?: string | null;
    assets?: WarehouseAsset[] | null;
}

export class WarehouseAsset implements IWarehouseAsset {
    id!: string;
    name?: string | null;
    isBulk!: boolean;
    serialNumber?: string | null;
    imageUrl?: string | null;
    availableQuantity!: number;
    reservedQuantity!: number;
    totalQuantity!: number;

    constructor(data?: IWarehouseAsset) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isBulk = _data["isBulk"] !== undefined ? _data["isBulk"] : <any>null;
            this.serialNumber = _data["serialNumber"] !== undefined ? _data["serialNumber"] : <any>null;
            this.imageUrl = _data["imageUrl"] !== undefined ? _data["imageUrl"] : <any>null;
            this.availableQuantity = _data["availableQuantity"] !== undefined ? _data["availableQuantity"] : <any>null;
            this.reservedQuantity = _data["reservedQuantity"] !== undefined ? _data["reservedQuantity"] : <any>null;
            this.totalQuantity = _data["totalQuantity"] !== undefined ? _data["totalQuantity"] : <any>null;
        }
    }

    static fromJS(data: any): WarehouseAsset {
        data = typeof data === 'object' ? data : {};
        let result = new WarehouseAsset();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isBulk"] = this.isBulk !== undefined ? this.isBulk : <any>null;
        data["serialNumber"] = this.serialNumber !== undefined ? this.serialNumber : <any>null;
        data["imageUrl"] = this.imageUrl !== undefined ? this.imageUrl : <any>null;
        data["availableQuantity"] = this.availableQuantity !== undefined ? this.availableQuantity : <any>null;
        data["reservedQuantity"] = this.reservedQuantity !== undefined ? this.reservedQuantity : <any>null;
        data["totalQuantity"] = this.totalQuantity !== undefined ? this.totalQuantity : <any>null;
        return data; 
    }
}

export interface IWarehouseAsset {
    id: string;
    name?: string | null;
    isBulk: boolean;
    serialNumber?: string | null;
    imageUrl?: string | null;
    availableQuantity: number;
    reservedQuantity: number;
    totalQuantity: number;
}

export class GetWarehouseAssetGroupsQuery implements IGetWarehouseAssetGroupsQuery {
    warehouseId!: string;

    constructor(data?: IGetWarehouseAssetGroupsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.warehouseId = _data["warehouseId"] !== undefined ? _data["warehouseId"] : <any>null;
        }
    }

    static fromJS(data: any): GetWarehouseAssetGroupsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetWarehouseAssetGroupsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["warehouseId"] = this.warehouseId !== undefined ? this.warehouseId : <any>null;
        return data; 
    }
}

export interface IGetWarehouseAssetGroupsQuery {
    warehouseId: string;
}

export class PageOfOfWarehouseInventoryArchiveItem implements IPageOfOfWarehouseInventoryArchiveItem {
    items?: WarehouseInventoryArchiveItem[] | null;
    totalNumberOfItems!: number;

    constructor(data?: IPageOfOfWarehouseInventoryArchiveItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(WarehouseInventoryArchiveItem.fromJS(item));
            }
            this.totalNumberOfItems = _data["totalNumberOfItems"] !== undefined ? _data["totalNumberOfItems"] : <any>null;
        }
    }

    static fromJS(data: any): PageOfOfWarehouseInventoryArchiveItem {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfOfWarehouseInventoryArchiveItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalNumberOfItems"] = this.totalNumberOfItems !== undefined ? this.totalNumberOfItems : <any>null;
        return data; 
    }
}

export interface IPageOfOfWarehouseInventoryArchiveItem {
    items?: WarehouseInventoryArchiveItem[] | null;
    totalNumberOfItems: number;
}

export class WarehouseInventoryArchiveItem implements IWarehouseInventoryArchiveItem {
    id!: string;
    createdAt!: moment.Moment;
    createdAtString?: string | null;
    createdByName?: string | null;
    createdByUsername?: string | null;
    createdById?: string | null;

    constructor(data?: IWarehouseInventoryArchiveItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>null;
            this.createdAtString = _data["createdAtString"] !== undefined ? _data["createdAtString"] : <any>null;
            this.createdByName = _data["createdByName"] !== undefined ? _data["createdByName"] : <any>null;
            this.createdByUsername = _data["createdByUsername"] !== undefined ? _data["createdByUsername"] : <any>null;
            this.createdById = _data["createdById"] !== undefined ? _data["createdById"] : <any>null;
        }
    }

    static fromJS(data: any): WarehouseInventoryArchiveItem {
        data = typeof data === 'object' ? data : {};
        let result = new WarehouseInventoryArchiveItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        data["createdAtString"] = this.createdAtString !== undefined ? this.createdAtString : <any>null;
        data["createdByName"] = this.createdByName !== undefined ? this.createdByName : <any>null;
        data["createdByUsername"] = this.createdByUsername !== undefined ? this.createdByUsername : <any>null;
        data["createdById"] = this.createdById !== undefined ? this.createdById : <any>null;
        return data; 
    }
}

export interface IWarehouseInventoryArchiveItem {
    id: string;
    createdAt: moment.Moment;
    createdAtString?: string | null;
    createdByName?: string | null;
    createdByUsername?: string | null;
    createdById?: string | null;
}

export class GetPageOfWarehouseInventoryArchivesQuery implements IGetPageOfWarehouseInventoryArchivesQuery {
    warehouseId!: string;
    skip!: number;
    take!: number;
    sortKey?: string | null;
    keywords?: string | null;

    constructor(data?: IGetPageOfWarehouseInventoryArchivesQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.warehouseId = _data["warehouseId"] !== undefined ? _data["warehouseId"] : <any>null;
            this.skip = _data["skip"] !== undefined ? _data["skip"] : <any>null;
            this.take = _data["take"] !== undefined ? _data["take"] : <any>null;
            this.sortKey = _data["sortKey"] !== undefined ? _data["sortKey"] : <any>null;
            this.keywords = _data["keywords"] !== undefined ? _data["keywords"] : <any>null;
        }
    }

    static fromJS(data: any): GetPageOfWarehouseInventoryArchivesQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetPageOfWarehouseInventoryArchivesQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["warehouseId"] = this.warehouseId !== undefined ? this.warehouseId : <any>null;
        data["skip"] = this.skip !== undefined ? this.skip : <any>null;
        data["take"] = this.take !== undefined ? this.take : <any>null;
        data["sortKey"] = this.sortKey !== undefined ? this.sortKey : <any>null;
        data["keywords"] = this.keywords !== undefined ? this.keywords : <any>null;
        return data; 
    }
}

export interface IGetPageOfWarehouseInventoryArchivesQuery {
    warehouseId: string;
    skip: number;
    take: number;
    sortKey?: string | null;
    keywords?: string | null;
}

export class PageOfOfWarehouseHistoryItem implements IPageOfOfWarehouseHistoryItem {
    items?: WarehouseHistoryItem[] | null;
    totalNumberOfItems!: number;

    constructor(data?: IPageOfOfWarehouseHistoryItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(WarehouseHistoryItem.fromJS(item));
            }
            this.totalNumberOfItems = _data["totalNumberOfItems"] !== undefined ? _data["totalNumberOfItems"] : <any>null;
        }
    }

    static fromJS(data: any): PageOfOfWarehouseHistoryItem {
        data = typeof data === 'object' ? data : {};
        let result = new PageOfOfWarehouseHistoryItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalNumberOfItems"] = this.totalNumberOfItems !== undefined ? this.totalNumberOfItems : <any>null;
        return data; 
    }
}

export interface IPageOfOfWarehouseHistoryItem {
    items?: WarehouseHistoryItem[] | null;
    totalNumberOfItems: number;
}

export class WarehouseHistoryItem implements IWarehouseHistoryItem {
    id!: string;
    createdAt!: moment.Moment;
    createdAtString?: string | null;
    createdByName?: string | null;
    createdByUsername?: string | null;
    createdById?: string | null;
    warehouseId!: string;
    typeKey?: string | null;
    note?: string | null;
    assetId!: string;
    assetName?: string | null;
    availableQuantityChange!: number;
    availableQuantityBeforeChange!: number;
    reservedQuantityChange!: number;
    reservedQuantityBeforeChange!: number;

    constructor(data?: IWarehouseHistoryItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>null;
            this.createdAtString = _data["createdAtString"] !== undefined ? _data["createdAtString"] : <any>null;
            this.createdByName = _data["createdByName"] !== undefined ? _data["createdByName"] : <any>null;
            this.createdByUsername = _data["createdByUsername"] !== undefined ? _data["createdByUsername"] : <any>null;
            this.createdById = _data["createdById"] !== undefined ? _data["createdById"] : <any>null;
            this.warehouseId = _data["warehouseId"] !== undefined ? _data["warehouseId"] : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            this.note = _data["note"] !== undefined ? _data["note"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetName = _data["assetName"] !== undefined ? _data["assetName"] : <any>null;
            this.availableQuantityChange = _data["availableQuantityChange"] !== undefined ? _data["availableQuantityChange"] : <any>null;
            this.availableQuantityBeforeChange = _data["availableQuantityBeforeChange"] !== undefined ? _data["availableQuantityBeforeChange"] : <any>null;
            this.reservedQuantityChange = _data["reservedQuantityChange"] !== undefined ? _data["reservedQuantityChange"] : <any>null;
            this.reservedQuantityBeforeChange = _data["reservedQuantityBeforeChange"] !== undefined ? _data["reservedQuantityBeforeChange"] : <any>null;
        }
    }

    static fromJS(data: any): WarehouseHistoryItem {
        data = typeof data === 'object' ? data : {};
        let result = new WarehouseHistoryItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        data["createdAtString"] = this.createdAtString !== undefined ? this.createdAtString : <any>null;
        data["createdByName"] = this.createdByName !== undefined ? this.createdByName : <any>null;
        data["createdByUsername"] = this.createdByUsername !== undefined ? this.createdByUsername : <any>null;
        data["createdById"] = this.createdById !== undefined ? this.createdById : <any>null;
        data["warehouseId"] = this.warehouseId !== undefined ? this.warehouseId : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        data["note"] = this.note !== undefined ? this.note : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetName"] = this.assetName !== undefined ? this.assetName : <any>null;
        data["availableQuantityChange"] = this.availableQuantityChange !== undefined ? this.availableQuantityChange : <any>null;
        data["availableQuantityBeforeChange"] = this.availableQuantityBeforeChange !== undefined ? this.availableQuantityBeforeChange : <any>null;
        data["reservedQuantityChange"] = this.reservedQuantityChange !== undefined ? this.reservedQuantityChange : <any>null;
        data["reservedQuantityBeforeChange"] = this.reservedQuantityBeforeChange !== undefined ? this.reservedQuantityBeforeChange : <any>null;
        return data; 
    }
}

export interface IWarehouseHistoryItem {
    id: string;
    createdAt: moment.Moment;
    createdAtString?: string | null;
    createdByName?: string | null;
    createdByUsername?: string | null;
    createdById?: string | null;
    warehouseId: string;
    typeKey?: string | null;
    note?: string | null;
    assetId: string;
    assetName?: string | null;
    availableQuantityChange: number;
    availableQuantityBeforeChange: number;
    reservedQuantityChange: number;
    reservedQuantityBeforeChange: number;
}

export class GetPageOfWarehouseHistoryQuery implements IGetPageOfWarehouseHistoryQuery {
    warehouseId!: string;
    skip!: number;
    take!: number;
    sortKey?: string | null;
    keywords?: string | null;

    constructor(data?: IGetPageOfWarehouseHistoryQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.warehouseId = _data["warehouseId"] !== undefined ? _data["warehouseId"] : <any>null;
            this.skip = _data["skip"] !== undefined ? _data["skip"] : <any>null;
            this.take = _data["take"] !== undefined ? _data["take"] : <any>null;
            this.sortKey = _data["sortKey"] !== undefined ? _data["sortKey"] : <any>null;
            this.keywords = _data["keywords"] !== undefined ? _data["keywords"] : <any>null;
        }
    }

    static fromJS(data: any): GetPageOfWarehouseHistoryQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetPageOfWarehouseHistoryQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["warehouseId"] = this.warehouseId !== undefined ? this.warehouseId : <any>null;
        data["skip"] = this.skip !== undefined ? this.skip : <any>null;
        data["take"] = this.take !== undefined ? this.take : <any>null;
        data["sortKey"] = this.sortKey !== undefined ? this.sortKey : <any>null;
        data["keywords"] = this.keywords !== undefined ? this.keywords : <any>null;
        return data; 
    }
}

export interface IGetPageOfWarehouseHistoryQuery {
    warehouseId: string;
    skip: number;
    take: number;
    sortKey?: string | null;
    keywords?: string | null;
}

export class RccHotel implements IRccHotel {
    id?: string | null;
    name?: string | null;

    constructor(data?: IRccHotel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): RccHotel {
        data = typeof data === 'object' ? data : {};
        let result = new RccHotel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data; 
    }
}

export interface IRccHotel {
    id?: string | null;
    name?: string | null;
}

export class GetListOfHotelGroupHotelsQuery implements IGetListOfHotelGroupHotelsQuery {
    hotelGroupKey?: string | null;

    constructor(data?: IGetListOfHotelGroupHotelsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelGroupKey = _data["hotelGroupKey"] !== undefined ? _data["hotelGroupKey"] : <any>null;
        }
    }

    static fromJS(data: any): GetListOfHotelGroupHotelsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfHotelGroupHotelsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelGroupKey"] = this.hotelGroupKey !== undefined ? this.hotelGroupKey : <any>null;
        return data; 
    }
}

export interface IGetListOfHotelGroupHotelsQuery {
    hotelGroupKey?: string | null;
}

export class RccHotelGroup implements IRccHotelGroup {
    id!: string;
    key?: string | null;

    constructor(data?: IRccHotelGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.key = _data["key"] !== undefined ? _data["key"] : <any>null;
        }
    }

    static fromJS(data: any): RccHotelGroup {
        data = typeof data === 'object' ? data : {};
        let result = new RccHotelGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["key"] = this.key !== undefined ? this.key : <any>null;
        return data; 
    }
}

export interface IRccHotelGroup {
    id: string;
    key?: string | null;
}

export class GetListOfHotelGroupsQuery implements IGetListOfHotelGroupsQuery {

    constructor(data?: IGetListOfHotelGroupsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): GetListOfHotelGroupsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfHotelGroupsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IGetListOfHotelGroupsQuery {
}

export class RccHotelGroupRoomStatusChanges implements IRccHotelGroupRoomStatusChanges {
    at!: moment.Moment;
    hotelGroupId!: string;
    hotelGroupKey?: string | null;
    hotelRoomStatuses?: RccHotelRoomStatusChanges[] | null;

    constructor(data?: IRccHotelGroupRoomStatusChanges) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.at = _data["at"] ? moment(_data["at"].toString()) : <any>null;
            this.hotelGroupId = _data["hotelGroupId"] !== undefined ? _data["hotelGroupId"] : <any>null;
            this.hotelGroupKey = _data["hotelGroupKey"] !== undefined ? _data["hotelGroupKey"] : <any>null;
            if (Array.isArray(_data["hotelRoomStatuses"])) {
                this.hotelRoomStatuses = [] as any;
                for (let item of _data["hotelRoomStatuses"])
                    this.hotelRoomStatuses!.push(RccHotelRoomStatusChanges.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RccHotelGroupRoomStatusChanges {
        data = typeof data === 'object' ? data : {};
        let result = new RccHotelGroupRoomStatusChanges();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["at"] = this.at ? this.at.toISOString() : <any>null;
        data["hotelGroupId"] = this.hotelGroupId !== undefined ? this.hotelGroupId : <any>null;
        data["hotelGroupKey"] = this.hotelGroupKey !== undefined ? this.hotelGroupKey : <any>null;
        if (Array.isArray(this.hotelRoomStatuses)) {
            data["hotelRoomStatuses"] = [];
            for (let item of this.hotelRoomStatuses)
                data["hotelRoomStatuses"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRccHotelGroupRoomStatusChanges {
    at: moment.Moment;
    hotelGroupId: string;
    hotelGroupKey?: string | null;
    hotelRoomStatuses?: RccHotelRoomStatusChanges[] | null;
}

export class RccHotelRoomStatusChanges implements IRccHotelRoomStatusChanges {
    hotelId?: string | null;
    roomStatuses?: RccRoomStatusData[] | null;

    constructor(data?: IRccHotelRoomStatusChanges) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            if (Array.isArray(_data["roomStatuses"])) {
                this.roomStatuses = [] as any;
                for (let item of _data["roomStatuses"])
                    this.roomStatuses!.push(RccRoomStatusData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RccHotelRoomStatusChanges {
        data = typeof data === 'object' ? data : {};
        let result = new RccHotelRoomStatusChanges();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        if (Array.isArray(this.roomStatuses)) {
            data["roomStatuses"] = [];
            for (let item of this.roomStatuses)
                data["roomStatuses"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRccHotelRoomStatusChanges {
    hotelId?: string | null;
    roomStatuses?: RccRoomStatusData[] | null;
}

export class RccRoomStatusData implements IRccRoomStatusData {
    roomName?: string | null;
    hkCode?: string | null;
    rsCode?: string | null;
    lastUpdate!: moment.Moment;
    updateUsername?: string | null;

    constructor(data?: IRccRoomStatusData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomName = _data["roomName"] !== undefined ? _data["roomName"] : <any>null;
            this.hkCode = _data["hkCode"] !== undefined ? _data["hkCode"] : <any>null;
            this.rsCode = _data["rsCode"] !== undefined ? _data["rsCode"] : <any>null;
            this.lastUpdate = _data["lastUpdate"] ? moment(_data["lastUpdate"].toString()) : <any>null;
            this.updateUsername = _data["updateUsername"] !== undefined ? _data["updateUsername"] : <any>null;
        }
    }

    static fromJS(data: any): RccRoomStatusData {
        data = typeof data === 'object' ? data : {};
        let result = new RccRoomStatusData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomName"] = this.roomName !== undefined ? this.roomName : <any>null;
        data["hkCode"] = this.hkCode !== undefined ? this.hkCode : <any>null;
        data["rsCode"] = this.rsCode !== undefined ? this.rsCode : <any>null;
        data["lastUpdate"] = this.lastUpdate ? this.lastUpdate.toISOString() : <any>null;
        data["updateUsername"] = this.updateUsername !== undefined ? this.updateUsername : <any>null;
        return data; 
    }
}

export interface IRccRoomStatusData {
    roomName?: string | null;
    hkCode?: string | null;
    rsCode?: string | null;
    lastUpdate: moment.Moment;
    updateUsername?: string | null;
}

export class GetHotelGroupRoomStatusesQuery implements IGetHotelGroupRoomStatusesQuery {
    hotelGroupKey?: string | null;
    includeTemporaryRooms?: boolean | null;
    onlyBedSpaces?: boolean | null;

    constructor(data?: IGetHotelGroupRoomStatusesQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelGroupKey = _data["hotelGroupKey"] !== undefined ? _data["hotelGroupKey"] : <any>null;
            this.includeTemporaryRooms = _data["includeTemporaryRooms"] !== undefined ? _data["includeTemporaryRooms"] : <any>null;
            this.onlyBedSpaces = _data["onlyBedSpaces"] !== undefined ? _data["onlyBedSpaces"] : <any>null;
        }
    }

    static fromJS(data: any): GetHotelGroupRoomStatusesQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetHotelGroupRoomStatusesQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelGroupKey"] = this.hotelGroupKey !== undefined ? this.hotelGroupKey : <any>null;
        data["includeTemporaryRooms"] = this.includeTemporaryRooms !== undefined ? this.includeTemporaryRooms : <any>null;
        data["onlyBedSpaces"] = this.onlyBedSpaces !== undefined ? this.onlyBedSpaces : <any>null;
        return data; 
    }
}

export interface IGetHotelGroupRoomStatusesQuery {
    hotelGroupKey?: string | null;
    includeTemporaryRooms?: boolean | null;
    onlyBedSpaces?: boolean | null;
}

export class GetHotelRoomStatusesQuery implements IGetHotelRoomStatusesQuery {
    hotelGroupKey?: string | null;
    hotelId?: string | null;
    includeTemporaryRooms?: boolean | null;
    onlyBedSpaces?: boolean | null;

    constructor(data?: IGetHotelRoomStatusesQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelGroupKey = _data["hotelGroupKey"] !== undefined ? _data["hotelGroupKey"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.includeTemporaryRooms = _data["includeTemporaryRooms"] !== undefined ? _data["includeTemporaryRooms"] : <any>null;
            this.onlyBedSpaces = _data["onlyBedSpaces"] !== undefined ? _data["onlyBedSpaces"] : <any>null;
        }
    }

    static fromJS(data: any): GetHotelRoomStatusesQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetHotelRoomStatusesQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelGroupKey"] = this.hotelGroupKey !== undefined ? this.hotelGroupKey : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["includeTemporaryRooms"] = this.includeTemporaryRooms !== undefined ? this.includeTemporaryRooms : <any>null;
        data["onlyBedSpaces"] = this.onlyBedSpaces !== undefined ? this.onlyBedSpaces : <any>null;
        return data; 
    }
}

export interface IGetHotelRoomStatusesQuery {
    hotelGroupKey?: string | null;
    hotelId?: string | null;
    includeTemporaryRooms?: boolean | null;
    onlyBedSpaces?: boolean | null;
}

export class SendDifferentialRoomStatusChangesQuery implements ISendDifferentialRoomStatusChangesQuery {
    hotelGroupKey?: string | null;
    hotelId?: string | null;
    roomIds?: string[] | null;

    constructor(data?: ISendDifferentialRoomStatusChangesQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelGroupKey = _data["hotelGroupKey"] !== undefined ? _data["hotelGroupKey"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            if (Array.isArray(_data["roomIds"])) {
                this.roomIds = [] as any;
                for (let item of _data["roomIds"])
                    this.roomIds!.push(item);
            }
        }
    }

    static fromJS(data: any): SendDifferentialRoomStatusChangesQuery {
        data = typeof data === 'object' ? data : {};
        let result = new SendDifferentialRoomStatusChangesQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelGroupKey"] = this.hotelGroupKey !== undefined ? this.hotelGroupKey : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        if (Array.isArray(this.roomIds)) {
            data["roomIds"] = [];
            for (let item of this.roomIds)
                data["roomIds"].push(item);
        }
        return data; 
    }
}

export interface ISendDifferentialRoomStatusChangesQuery {
    hotelGroupKey?: string | null;
    hotelId?: string | null;
    roomIds?: string[] | null;
}

export class SendFullRoomStatusChangesQuery implements ISendFullRoomStatusChangesQuery {
    hotelGroupKey?: string | null;

    constructor(data?: ISendFullRoomStatusChangesQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelGroupKey = _data["hotelGroupKey"] !== undefined ? _data["hotelGroupKey"] : <any>null;
        }
    }

    static fromJS(data: any): SendFullRoomStatusChangesQuery {
        data = typeof data === 'object' ? data : {};
        let result = new SendFullRoomStatusChangesQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelGroupKey"] = this.hotelGroupKey !== undefined ? this.hotelGroupKey : <any>null;
        return data; 
    }
}

export interface ISendFullRoomStatusChangesQuery {
    hotelGroupKey?: string | null;
}

export class ExternalInsertCompactTaskCommand implements IExternalInsertCompactTaskCommand {
    hotelGroupId?: string | null;
    hotelGroupKey?: string | null;
    hotelId?: string | null;
    roomId?: string | null;
    roomName?: string | null;
    roomBedId?: string | null;
    roomBedName?: string | null;
    reservationId?: string | null;
    locationTypeKey?: string | null;
    userId?: string | null;
    assetActions?: ExternalInsertCompactTaskAssetAction[] | null;
    requestedBy?: string | null;
    comment?: string | null;
    credits?: number | null;
    isForPlannedAttendant?: boolean | null;
    isGuestRequest?: boolean | null;
    price?: number | null;
    priorityKey?: string | null;
    startsAt?: moment.Moment | null;

    constructor(data?: IExternalInsertCompactTaskCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelGroupId = _data["hotelGroupId"] !== undefined ? _data["hotelGroupId"] : <any>null;
            this.hotelGroupKey = _data["hotelGroupKey"] !== undefined ? _data["hotelGroupKey"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.roomName = _data["roomName"] !== undefined ? _data["roomName"] : <any>null;
            this.roomBedId = _data["roomBedId"] !== undefined ? _data["roomBedId"] : <any>null;
            this.roomBedName = _data["roomBedName"] !== undefined ? _data["roomBedName"] : <any>null;
            this.reservationId = _data["reservationId"] !== undefined ? _data["reservationId"] : <any>null;
            this.locationTypeKey = _data["locationTypeKey"] !== undefined ? _data["locationTypeKey"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            if (Array.isArray(_data["assetActions"])) {
                this.assetActions = [] as any;
                for (let item of _data["assetActions"])
                    this.assetActions!.push(ExternalInsertCompactTaskAssetAction.fromJS(item));
            }
            this.requestedBy = _data["requestedBy"] !== undefined ? _data["requestedBy"] : <any>null;
            this.comment = _data["comment"] !== undefined ? _data["comment"] : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
            this.isForPlannedAttendant = _data["isForPlannedAttendant"] !== undefined ? _data["isForPlannedAttendant"] : <any>null;
            this.isGuestRequest = _data["isGuestRequest"] !== undefined ? _data["isGuestRequest"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
            this.priorityKey = _data["priorityKey"] !== undefined ? _data["priorityKey"] : <any>null;
            this.startsAt = _data["startsAt"] ? moment(_data["startsAt"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): ExternalInsertCompactTaskCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalInsertCompactTaskCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelGroupId"] = this.hotelGroupId !== undefined ? this.hotelGroupId : <any>null;
        data["hotelGroupKey"] = this.hotelGroupKey !== undefined ? this.hotelGroupKey : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["roomName"] = this.roomName !== undefined ? this.roomName : <any>null;
        data["roomBedId"] = this.roomBedId !== undefined ? this.roomBedId : <any>null;
        data["roomBedName"] = this.roomBedName !== undefined ? this.roomBedName : <any>null;
        data["reservationId"] = this.reservationId !== undefined ? this.reservationId : <any>null;
        data["locationTypeKey"] = this.locationTypeKey !== undefined ? this.locationTypeKey : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        if (Array.isArray(this.assetActions)) {
            data["assetActions"] = [];
            for (let item of this.assetActions)
                data["assetActions"].push(item.toJSON());
        }
        data["requestedBy"] = this.requestedBy !== undefined ? this.requestedBy : <any>null;
        data["comment"] = this.comment !== undefined ? this.comment : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        data["isForPlannedAttendant"] = this.isForPlannedAttendant !== undefined ? this.isForPlannedAttendant : <any>null;
        data["isGuestRequest"] = this.isGuestRequest !== undefined ? this.isGuestRequest : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["priorityKey"] = this.priorityKey !== undefined ? this.priorityKey : <any>null;
        data["startsAt"] = this.startsAt ? this.startsAt.toISOString() : <any>null;
        return data; 
    }
}

export interface IExternalInsertCompactTaskCommand {
    hotelGroupId?: string | null;
    hotelGroupKey?: string | null;
    hotelId?: string | null;
    roomId?: string | null;
    roomName?: string | null;
    roomBedId?: string | null;
    roomBedName?: string | null;
    reservationId?: string | null;
    locationTypeKey?: string | null;
    userId?: string | null;
    assetActions?: ExternalInsertCompactTaskAssetAction[] | null;
    requestedBy?: string | null;
    comment?: string | null;
    credits?: number | null;
    isForPlannedAttendant?: boolean | null;
    isGuestRequest?: boolean | null;
    price?: number | null;
    priorityKey?: string | null;
    startsAt?: moment.Moment | null;
}

export class ExternalInsertCompactTaskAssetAction implements IExternalInsertCompactTaskAssetAction {
    assetQuantity?: number | null;
    assetId?: string | null;
    assetName?: string | null;
    actionId?: string | null;
    actionName?: string | null;

    constructor(data?: IExternalInsertCompactTaskAssetAction) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetQuantity = _data["assetQuantity"] !== undefined ? _data["assetQuantity"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetName = _data["assetName"] !== undefined ? _data["assetName"] : <any>null;
            this.actionId = _data["actionId"] !== undefined ? _data["actionId"] : <any>null;
            this.actionName = _data["actionName"] !== undefined ? _data["actionName"] : <any>null;
        }
    }

    static fromJS(data: any): ExternalInsertCompactTaskAssetAction {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalInsertCompactTaskAssetAction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetQuantity"] = this.assetQuantity !== undefined ? this.assetQuantity : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetName"] = this.assetName !== undefined ? this.assetName : <any>null;
        data["actionId"] = this.actionId !== undefined ? this.actionId : <any>null;
        data["actionName"] = this.actionName !== undefined ? this.actionName : <any>null;
        return data; 
    }
}

export interface IExternalInsertCompactTaskAssetAction {
    assetQuantity?: number | null;
    assetId?: string | null;
    assetName?: string | null;
    actionId?: string | null;
    actionName?: string | null;
}

export class ExternalDndOnCommand implements IExternalDndOnCommand {
    hotelGroupId?: string | null;
    hotelGroupKey?: string | null;
    hotelId?: string | null;
    roomId?: string | null;
    roomName?: string | null;
    roomBedId?: string | null;
    roomBedName?: string | null;
    requestedBy?: string | null;

    constructor(data?: IExternalDndOnCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelGroupId = _data["hotelGroupId"] !== undefined ? _data["hotelGroupId"] : <any>null;
            this.hotelGroupKey = _data["hotelGroupKey"] !== undefined ? _data["hotelGroupKey"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.roomName = _data["roomName"] !== undefined ? _data["roomName"] : <any>null;
            this.roomBedId = _data["roomBedId"] !== undefined ? _data["roomBedId"] : <any>null;
            this.roomBedName = _data["roomBedName"] !== undefined ? _data["roomBedName"] : <any>null;
            this.requestedBy = _data["requestedBy"] !== undefined ? _data["requestedBy"] : <any>null;
        }
    }

    static fromJS(data: any): ExternalDndOnCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalDndOnCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelGroupId"] = this.hotelGroupId !== undefined ? this.hotelGroupId : <any>null;
        data["hotelGroupKey"] = this.hotelGroupKey !== undefined ? this.hotelGroupKey : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["roomName"] = this.roomName !== undefined ? this.roomName : <any>null;
        data["roomBedId"] = this.roomBedId !== undefined ? this.roomBedId : <any>null;
        data["roomBedName"] = this.roomBedName !== undefined ? this.roomBedName : <any>null;
        data["requestedBy"] = this.requestedBy !== undefined ? this.requestedBy : <any>null;
        return data; 
    }
}

export interface IExternalDndOnCommand {
    hotelGroupId?: string | null;
    hotelGroupKey?: string | null;
    hotelId?: string | null;
    roomId?: string | null;
    roomName?: string | null;
    roomBedId?: string | null;
    roomBedName?: string | null;
    requestedBy?: string | null;
}

export class ExternalDndOffCommand implements IExternalDndOffCommand {
    hotelGroupId?: string | null;
    hotelGroupKey?: string | null;
    hotelId?: string | null;
    roomId?: string | null;
    roomName?: string | null;
    roomBedId?: string | null;
    roomBedName?: string | null;
    requestedBy?: string | null;

    constructor(data?: IExternalDndOffCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelGroupId = _data["hotelGroupId"] !== undefined ? _data["hotelGroupId"] : <any>null;
            this.hotelGroupKey = _data["hotelGroupKey"] !== undefined ? _data["hotelGroupKey"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.roomName = _data["roomName"] !== undefined ? _data["roomName"] : <any>null;
            this.roomBedId = _data["roomBedId"] !== undefined ? _data["roomBedId"] : <any>null;
            this.roomBedName = _data["roomBedName"] !== undefined ? _data["roomBedName"] : <any>null;
            this.requestedBy = _data["requestedBy"] !== undefined ? _data["requestedBy"] : <any>null;
        }
    }

    static fromJS(data: any): ExternalDndOffCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalDndOffCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelGroupId"] = this.hotelGroupId !== undefined ? this.hotelGroupId : <any>null;
        data["hotelGroupKey"] = this.hotelGroupKey !== undefined ? this.hotelGroupKey : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["roomName"] = this.roomName !== undefined ? this.roomName : <any>null;
        data["roomBedId"] = this.roomBedId !== undefined ? this.roomBedId : <any>null;
        data["roomBedName"] = this.roomBedName !== undefined ? this.roomBedName : <any>null;
        data["requestedBy"] = this.requestedBy !== undefined ? this.requestedBy : <any>null;
        return data; 
    }
}

export interface IExternalDndOffCommand {
    hotelGroupId?: string | null;
    hotelGroupKey?: string | null;
    hotelId?: string | null;
    roomId?: string | null;
    roomName?: string | null;
    roomBedId?: string | null;
    roomBedName?: string | null;
    requestedBy?: string | null;
}

export class ExternalRequestCleaningCommand implements IExternalRequestCleaningCommand {
    hotelGroupId?: string | null;
    hotelGroupKey?: string | null;
    hotelId?: string | null;
    roomId?: string | null;
    roomName?: string | null;
    roomBedId?: string | null;
    roomBedName?: string | null;
    requestedBy?: string | null;

    constructor(data?: IExternalRequestCleaningCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelGroupId = _data["hotelGroupId"] !== undefined ? _data["hotelGroupId"] : <any>null;
            this.hotelGroupKey = _data["hotelGroupKey"] !== undefined ? _data["hotelGroupKey"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.roomName = _data["roomName"] !== undefined ? _data["roomName"] : <any>null;
            this.roomBedId = _data["roomBedId"] !== undefined ? _data["roomBedId"] : <any>null;
            this.roomBedName = _data["roomBedName"] !== undefined ? _data["roomBedName"] : <any>null;
            this.requestedBy = _data["requestedBy"] !== undefined ? _data["requestedBy"] : <any>null;
        }
    }

    static fromJS(data: any): ExternalRequestCleaningCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalRequestCleaningCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelGroupId"] = this.hotelGroupId !== undefined ? this.hotelGroupId : <any>null;
        data["hotelGroupKey"] = this.hotelGroupKey !== undefined ? this.hotelGroupKey : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["roomName"] = this.roomName !== undefined ? this.roomName : <any>null;
        data["roomBedId"] = this.roomBedId !== undefined ? this.roomBedId : <any>null;
        data["roomBedName"] = this.roomBedName !== undefined ? this.roomBedName : <any>null;
        data["requestedBy"] = this.requestedBy !== undefined ? this.requestedBy : <any>null;
        return data; 
    }
}

export interface IExternalRequestCleaningCommand {
    hotelGroupId?: string | null;
    hotelGroupKey?: string | null;
    hotelId?: string | null;
    roomId?: string | null;
    roomName?: string | null;
    roomBedId?: string | null;
    roomBedName?: string | null;
    requestedBy?: string | null;
}

export class AttendantMobileAppConfiguration implements IAttendantMobileAppConfiguration {
    user?: UserForMobile | null;
    hotel?: HotelForMobile | null;
    groups?: string[] | null;
    permissions?: AttendantPermission[] | null;
    config?: AttendantAppConfiguration | null;

    constructor(data?: IAttendantMobileAppConfiguration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.user = _data["user"] ? UserForMobile.fromJS(_data["user"]) : <any>null;
            this.hotel = _data["hotel"] ? HotelForMobile.fromJS(_data["hotel"]) : <any>null;
            if (Array.isArray(_data["groups"])) {
                this.groups = [] as any;
                for (let item of _data["groups"])
                    this.groups!.push(item);
            }
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(AttendantPermission.fromJS(item));
            }
            this.config = _data["config"] ? AttendantAppConfiguration.fromJS(_data["config"]) : <any>null;
        }
    }

    static fromJS(data: any): AttendantMobileAppConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new AttendantMobileAppConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>null;
        data["hotel"] = this.hotel ? this.hotel.toJSON() : <any>null;
        if (Array.isArray(this.groups)) {
            data["groups"] = [];
            for (let item of this.groups)
                data["groups"].push(item);
        }
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        data["config"] = this.config ? this.config.toJSON() : <any>null;
        return data; 
    }
}

export interface IAttendantMobileAppConfiguration {
    user?: UserForMobile | null;
    hotel?: HotelForMobile | null;
    groups?: string[] | null;
    permissions?: AttendantPermission[] | null;
    config?: AttendantAppConfiguration | null;
}

export class UserForMobile implements IUserForMobile {
    id!: string;
    email?: string | null;
    username?: string | null;
    first_name?: string | null;
    last_name?: string | null;
    organization?: string | null;
    hotel?: string | null;
    hotelUsername?: string | null;
    hotelUsernameRequired!: boolean;
    image?: string | null;
    thumbnail?: string | null;
    isBypassAttendant!: boolean;
    isOnDuty!: boolean;
    groups?: string[] | null;
    language?: string | null;
    status?: string | null;
    zip?: string | null;
    country?: string | null;
    state?: string | null;
    city?: string | null;
    street?: string | null;
    isSuperAdmin!: boolean;
    isHost!: boolean;
    isFoodBeverage!: boolean;
    isRoomRunner!: boolean;
    isRoomsService!: boolean;
    isReceptionist!: boolean;
    isMaintenance!: boolean;
    isInspector!: boolean;
    isAttendant!: boolean;
    isAdministrator!: boolean;
    hotelGroupId!: string;
    hotelGroupKey?: string | null;
    hotelGroupName?: string | null;
    availableHotels?: AvailableHotelForMobile[] | null;
    userGroupId?: string | null;
    userGroupName?: string | null;
    userSubGroupId?: string | null;
    userSubGroupName?: string | null;
    roleId!: string;
    roleName?: string | null;
    role!: number;
    employeeId?: string | null;
    appVersion?: string | null;
    permissions?: string[] | null;
    salt?: string | null;
    hashed_password?: string | null;

    constructor(data?: IUserForMobile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.first_name = _data["first_name"] !== undefined ? _data["first_name"] : <any>null;
            this.last_name = _data["last_name"] !== undefined ? _data["last_name"] : <any>null;
            this.organization = _data["organization"] !== undefined ? _data["organization"] : <any>null;
            this.hotel = _data["hotel"] !== undefined ? _data["hotel"] : <any>null;
            this.hotelUsername = _data["hotelUsername"] !== undefined ? _data["hotelUsername"] : <any>null;
            this.hotelUsernameRequired = _data["hotelUsernameRequired"] !== undefined ? _data["hotelUsernameRequired"] : <any>null;
            this.image = _data["image"] !== undefined ? _data["image"] : <any>null;
            this.thumbnail = _data["thumbnail"] !== undefined ? _data["thumbnail"] : <any>null;
            this.isBypassAttendant = _data["isBypassAttendant"] !== undefined ? _data["isBypassAttendant"] : <any>null;
            this.isOnDuty = _data["isOnDuty"] !== undefined ? _data["isOnDuty"] : <any>null;
            if (Array.isArray(_data["groups"])) {
                this.groups = [] as any;
                for (let item of _data["groups"])
                    this.groups!.push(item);
            }
            this.language = _data["language"] !== undefined ? _data["language"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.zip = _data["zip"] !== undefined ? _data["zip"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.street = _data["street"] !== undefined ? _data["street"] : <any>null;
            this.isSuperAdmin = _data["isSuperAdmin"] !== undefined ? _data["isSuperAdmin"] : <any>null;
            this.isHost = _data["isHost"] !== undefined ? _data["isHost"] : <any>null;
            this.isFoodBeverage = _data["isFoodBeverage"] !== undefined ? _data["isFoodBeverage"] : <any>null;
            this.isRoomRunner = _data["isRoomRunner"] !== undefined ? _data["isRoomRunner"] : <any>null;
            this.isRoomsService = _data["isRoomsService"] !== undefined ? _data["isRoomsService"] : <any>null;
            this.isReceptionist = _data["isReceptionist"] !== undefined ? _data["isReceptionist"] : <any>null;
            this.isMaintenance = _data["isMaintenance"] !== undefined ? _data["isMaintenance"] : <any>null;
            this.isInspector = _data["isInspector"] !== undefined ? _data["isInspector"] : <any>null;
            this.isAttendant = _data["isAttendant"] !== undefined ? _data["isAttendant"] : <any>null;
            this.isAdministrator = _data["isAdministrator"] !== undefined ? _data["isAdministrator"] : <any>null;
            this.hotelGroupId = _data["hotelGroupId"] !== undefined ? _data["hotelGroupId"] : <any>null;
            this.hotelGroupKey = _data["hotelGroupKey"] !== undefined ? _data["hotelGroupKey"] : <any>null;
            this.hotelGroupName = _data["hotelGroupName"] !== undefined ? _data["hotelGroupName"] : <any>null;
            if (Array.isArray(_data["availableHotels"])) {
                this.availableHotels = [] as any;
                for (let item of _data["availableHotels"])
                    this.availableHotels!.push(AvailableHotelForMobile.fromJS(item));
            }
            this.userGroupId = _data["userGroupId"] !== undefined ? _data["userGroupId"] : <any>null;
            this.userGroupName = _data["userGroupName"] !== undefined ? _data["userGroupName"] : <any>null;
            this.userSubGroupId = _data["userSubGroupId"] !== undefined ? _data["userSubGroupId"] : <any>null;
            this.userSubGroupName = _data["userSubGroupName"] !== undefined ? _data["userSubGroupName"] : <any>null;
            this.roleId = _data["roleId"] !== undefined ? _data["roleId"] : <any>null;
            this.roleName = _data["roleName"] !== undefined ? _data["roleName"] : <any>null;
            this.role = _data["role"] !== undefined ? _data["role"] : <any>null;
            this.employeeId = _data["employeeId"] !== undefined ? _data["employeeId"] : <any>null;
            this.appVersion = _data["appVersion"] !== undefined ? _data["appVersion"] : <any>null;
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(item);
            }
            this.salt = _data["salt"] !== undefined ? _data["salt"] : <any>null;
            this.hashed_password = _data["hashed_password"] !== undefined ? _data["hashed_password"] : <any>null;
        }
    }

    static fromJS(data: any): UserForMobile {
        data = typeof data === 'object' ? data : {};
        let result = new UserForMobile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["first_name"] = this.first_name !== undefined ? this.first_name : <any>null;
        data["last_name"] = this.last_name !== undefined ? this.last_name : <any>null;
        data["organization"] = this.organization !== undefined ? this.organization : <any>null;
        data["hotel"] = this.hotel !== undefined ? this.hotel : <any>null;
        data["hotelUsername"] = this.hotelUsername !== undefined ? this.hotelUsername : <any>null;
        data["hotelUsernameRequired"] = this.hotelUsernameRequired !== undefined ? this.hotelUsernameRequired : <any>null;
        data["image"] = this.image !== undefined ? this.image : <any>null;
        data["thumbnail"] = this.thumbnail !== undefined ? this.thumbnail : <any>null;
        data["isBypassAttendant"] = this.isBypassAttendant !== undefined ? this.isBypassAttendant : <any>null;
        data["isOnDuty"] = this.isOnDuty !== undefined ? this.isOnDuty : <any>null;
        if (Array.isArray(this.groups)) {
            data["groups"] = [];
            for (let item of this.groups)
                data["groups"].push(item);
        }
        data["language"] = this.language !== undefined ? this.language : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["zip"] = this.zip !== undefined ? this.zip : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["street"] = this.street !== undefined ? this.street : <any>null;
        data["isSuperAdmin"] = this.isSuperAdmin !== undefined ? this.isSuperAdmin : <any>null;
        data["isHost"] = this.isHost !== undefined ? this.isHost : <any>null;
        data["isFoodBeverage"] = this.isFoodBeverage !== undefined ? this.isFoodBeverage : <any>null;
        data["isRoomRunner"] = this.isRoomRunner !== undefined ? this.isRoomRunner : <any>null;
        data["isRoomsService"] = this.isRoomsService !== undefined ? this.isRoomsService : <any>null;
        data["isReceptionist"] = this.isReceptionist !== undefined ? this.isReceptionist : <any>null;
        data["isMaintenance"] = this.isMaintenance !== undefined ? this.isMaintenance : <any>null;
        data["isInspector"] = this.isInspector !== undefined ? this.isInspector : <any>null;
        data["isAttendant"] = this.isAttendant !== undefined ? this.isAttendant : <any>null;
        data["isAdministrator"] = this.isAdministrator !== undefined ? this.isAdministrator : <any>null;
        data["hotelGroupId"] = this.hotelGroupId !== undefined ? this.hotelGroupId : <any>null;
        data["hotelGroupKey"] = this.hotelGroupKey !== undefined ? this.hotelGroupKey : <any>null;
        data["hotelGroupName"] = this.hotelGroupName !== undefined ? this.hotelGroupName : <any>null;
        if (Array.isArray(this.availableHotels)) {
            data["availableHotels"] = [];
            for (let item of this.availableHotels)
                data["availableHotels"].push(item.toJSON());
        }
        data["userGroupId"] = this.userGroupId !== undefined ? this.userGroupId : <any>null;
        data["userGroupName"] = this.userGroupName !== undefined ? this.userGroupName : <any>null;
        data["userSubGroupId"] = this.userSubGroupId !== undefined ? this.userSubGroupId : <any>null;
        data["userSubGroupName"] = this.userSubGroupName !== undefined ? this.userSubGroupName : <any>null;
        data["roleId"] = this.roleId !== undefined ? this.roleId : <any>null;
        data["roleName"] = this.roleName !== undefined ? this.roleName : <any>null;
        data["role"] = this.role !== undefined ? this.role : <any>null;
        data["employeeId"] = this.employeeId !== undefined ? this.employeeId : <any>null;
        data["appVersion"] = this.appVersion !== undefined ? this.appVersion : <any>null;
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item);
        }
        data["salt"] = this.salt !== undefined ? this.salt : <any>null;
        data["hashed_password"] = this.hashed_password !== undefined ? this.hashed_password : <any>null;
        return data; 
    }
}

export interface IUserForMobile {
    id: string;
    email?: string | null;
    username?: string | null;
    first_name?: string | null;
    last_name?: string | null;
    organization?: string | null;
    hotel?: string | null;
    hotelUsername?: string | null;
    hotelUsernameRequired: boolean;
    image?: string | null;
    thumbnail?: string | null;
    isBypassAttendant: boolean;
    isOnDuty: boolean;
    groups?: string[] | null;
    language?: string | null;
    status?: string | null;
    zip?: string | null;
    country?: string | null;
    state?: string | null;
    city?: string | null;
    street?: string | null;
    isSuperAdmin: boolean;
    isHost: boolean;
    isFoodBeverage: boolean;
    isRoomRunner: boolean;
    isRoomsService: boolean;
    isReceptionist: boolean;
    isMaintenance: boolean;
    isInspector: boolean;
    isAttendant: boolean;
    isAdministrator: boolean;
    hotelGroupId: string;
    hotelGroupKey?: string | null;
    hotelGroupName?: string | null;
    availableHotels?: AvailableHotelForMobile[] | null;
    userGroupId?: string | null;
    userGroupName?: string | null;
    userSubGroupId?: string | null;
    userSubGroupName?: string | null;
    roleId: string;
    roleName?: string | null;
    role: number;
    employeeId?: string | null;
    appVersion?: string | null;
    permissions?: string[] | null;
    salt?: string | null;
    hashed_password?: string | null;
}

export class AvailableHotelForMobile implements IAvailableHotelForMobile {
    hotelId?: string | null;
    hotelName?: string | null;

    constructor(data?: IAvailableHotelForMobile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.hotelName = _data["hotelName"] !== undefined ? _data["hotelName"] : <any>null;
        }
    }

    static fromJS(data: any): AvailableHotelForMobile {
        data = typeof data === 'object' ? data : {};
        let result = new AvailableHotelForMobile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["hotelName"] = this.hotelName !== undefined ? this.hotelName : <any>null;
        return data; 
    }
}

export interface IAvailableHotelForMobile {
    hotelId?: string | null;
    hotelName?: string | null;
}

export class HotelForMobile implements IHotelForMobile {
    id?: string | null;
    city?: string | null;
    country?: string | null;
    images?: string | null;
    name?: string | null;
    phone?: string | null;
    remarks?: string | null;
    state?: string | null;
    street?: string | null;
    thumbnail?: string | null;
    username?: string | null;
    zip?: string | null;
    modules?: HotelModulesForMobile | null;
    isHideCleaningData!: boolean;
    isLimitAttendantContainers!: boolean;
    isRemoveMessagesDaily!: boolean;
    isRenotifyPN!: boolean;
    isWebAttendantIcons!: boolean;
    isAdminOnlyAssetCreate!: boolean;
    isRemovePriorityOnFinish!: boolean;
    isShowAllTaskCounts!: boolean;
    isInspectionRemovesPriority!: boolean;
    isAttendantDisablePMSNotes!: boolean;
    isAttendantTaskNotes!: boolean;
    escalationPhones?: string[] | null;
    explicitOccupiedWorkflow?: string | null;
    explicitVacantWorkflow?: string | null;
    isExplicitWorkflow!: boolean;
    isAttendantPriorityColor!: boolean;
    shouldResetDirty!: boolean;
    isHostEnabled!: boolean;
    isRestockEnabled!: boolean;
    isAttendantImmediateTasks!: boolean;
    isAttendantOneStep!: boolean;
    isAttendantNotificationPN!: boolean;
    isAttendantLitePN!: boolean;
    isAttendantNormalPN!: boolean;
    isAttendantPriorityPN!: boolean;
    isMaintenanceNotificationPN!: boolean;
    isMaintenanceLitePN!: boolean;
    isMaintenanceNormalPN!: boolean;
    isMaintenancePriorityPN!: boolean;
    isDisableDNDPhoto!: boolean;
    isDisablePMSNotesDEP!: boolean;
    isTaskMaintenance!: boolean;
    isRoomNotesAttendantDisabled!: boolean;
    isRoomNotesInspectorDisabled!: boolean;
    isRoomNotesWebDisabled!: boolean;
    nightPlanningTime!: number;
    isPlanningNightEnabled!: boolean;
    isLFWaitingDisabled!: boolean;
    isEnabledMaintenanceUnassigned!: boolean;
    disableGuestLocator!: boolean;
    attendantDefaultView?: string | null;
    isAttendantBypass!: boolean;
    isAttendantWorkflow!: boolean;
    timezone!: number;
    attendantCancelMinutes!: number;
    disableAttendantTimer!: boolean;
    isAdvancedLayout!: boolean;
    departureMultiplier!: number;
    stayMultiplier!: number;
    vacantMultiplier!: number;
    creditMinutes!: number;
    isShowGuestName!: boolean;
    isHideGuestInfo!: boolean;
    isAllNightly!: boolean;
    isOCCNightly!: boolean;
    organizations?: string[] | null;
    floors?: string[] | null;
    users?: string[] | null;
    notes?: string[] | null;
    remoteApi?: string | null;
    display?: string | null;

    constructor(data?: IHotelForMobile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.images = _data["images"] !== undefined ? _data["images"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.phone = _data["phone"] !== undefined ? _data["phone"] : <any>null;
            this.remarks = _data["remarks"] !== undefined ? _data["remarks"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.street = _data["street"] !== undefined ? _data["street"] : <any>null;
            this.thumbnail = _data["thumbnail"] !== undefined ? _data["thumbnail"] : <any>null;
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.zip = _data["zip"] !== undefined ? _data["zip"] : <any>null;
            this.modules = _data["modules"] ? HotelModulesForMobile.fromJS(_data["modules"]) : <any>null;
            this.isHideCleaningData = _data["isHideCleaningData"] !== undefined ? _data["isHideCleaningData"] : <any>null;
            this.isLimitAttendantContainers = _data["isLimitAttendantContainers"] !== undefined ? _data["isLimitAttendantContainers"] : <any>null;
            this.isRemoveMessagesDaily = _data["isRemoveMessagesDaily"] !== undefined ? _data["isRemoveMessagesDaily"] : <any>null;
            this.isRenotifyPN = _data["isRenotifyPN"] !== undefined ? _data["isRenotifyPN"] : <any>null;
            this.isWebAttendantIcons = _data["isWebAttendantIcons"] !== undefined ? _data["isWebAttendantIcons"] : <any>null;
            this.isAdminOnlyAssetCreate = _data["isAdminOnlyAssetCreate"] !== undefined ? _data["isAdminOnlyAssetCreate"] : <any>null;
            this.isRemovePriorityOnFinish = _data["isRemovePriorityOnFinish"] !== undefined ? _data["isRemovePriorityOnFinish"] : <any>null;
            this.isShowAllTaskCounts = _data["isShowAllTaskCounts"] !== undefined ? _data["isShowAllTaskCounts"] : <any>null;
            this.isInspectionRemovesPriority = _data["isInspectionRemovesPriority"] !== undefined ? _data["isInspectionRemovesPriority"] : <any>null;
            this.isAttendantDisablePMSNotes = _data["isAttendantDisablePMSNotes"] !== undefined ? _data["isAttendantDisablePMSNotes"] : <any>null;
            this.isAttendantTaskNotes = _data["isAttendantTaskNotes"] !== undefined ? _data["isAttendantTaskNotes"] : <any>null;
            if (Array.isArray(_data["escalationPhones"])) {
                this.escalationPhones = [] as any;
                for (let item of _data["escalationPhones"])
                    this.escalationPhones!.push(item);
            }
            this.explicitOccupiedWorkflow = _data["explicitOccupiedWorkflow"] !== undefined ? _data["explicitOccupiedWorkflow"] : <any>null;
            this.explicitVacantWorkflow = _data["explicitVacantWorkflow"] !== undefined ? _data["explicitVacantWorkflow"] : <any>null;
            this.isExplicitWorkflow = _data["isExplicitWorkflow"] !== undefined ? _data["isExplicitWorkflow"] : <any>null;
            this.isAttendantPriorityColor = _data["isAttendantPriorityColor"] !== undefined ? _data["isAttendantPriorityColor"] : <any>null;
            this.shouldResetDirty = _data["shouldResetDirty"] !== undefined ? _data["shouldResetDirty"] : <any>null;
            this.isHostEnabled = _data["isHostEnabled"] !== undefined ? _data["isHostEnabled"] : <any>null;
            this.isRestockEnabled = _data["isRestockEnabled"] !== undefined ? _data["isRestockEnabled"] : <any>null;
            this.isAttendantImmediateTasks = _data["isAttendantImmediateTasks"] !== undefined ? _data["isAttendantImmediateTasks"] : <any>null;
            this.isAttendantOneStep = _data["isAttendantOneStep"] !== undefined ? _data["isAttendantOneStep"] : <any>null;
            this.isAttendantNotificationPN = _data["isAttendantNotificationPN"] !== undefined ? _data["isAttendantNotificationPN"] : <any>null;
            this.isAttendantLitePN = _data["isAttendantLitePN"] !== undefined ? _data["isAttendantLitePN"] : <any>null;
            this.isAttendantNormalPN = _data["isAttendantNormalPN"] !== undefined ? _data["isAttendantNormalPN"] : <any>null;
            this.isAttendantPriorityPN = _data["isAttendantPriorityPN"] !== undefined ? _data["isAttendantPriorityPN"] : <any>null;
            this.isMaintenanceNotificationPN = _data["isMaintenanceNotificationPN"] !== undefined ? _data["isMaintenanceNotificationPN"] : <any>null;
            this.isMaintenanceLitePN = _data["isMaintenanceLitePN"] !== undefined ? _data["isMaintenanceLitePN"] : <any>null;
            this.isMaintenanceNormalPN = _data["isMaintenanceNormalPN"] !== undefined ? _data["isMaintenanceNormalPN"] : <any>null;
            this.isMaintenancePriorityPN = _data["isMaintenancePriorityPN"] !== undefined ? _data["isMaintenancePriorityPN"] : <any>null;
            this.isDisableDNDPhoto = _data["isDisableDNDPhoto"] !== undefined ? _data["isDisableDNDPhoto"] : <any>null;
            this.isDisablePMSNotesDEP = _data["isDisablePMSNotesDEP"] !== undefined ? _data["isDisablePMSNotesDEP"] : <any>null;
            this.isTaskMaintenance = _data["isTaskMaintenance"] !== undefined ? _data["isTaskMaintenance"] : <any>null;
            this.isRoomNotesAttendantDisabled = _data["isRoomNotesAttendantDisabled"] !== undefined ? _data["isRoomNotesAttendantDisabled"] : <any>null;
            this.isRoomNotesInspectorDisabled = _data["isRoomNotesInspectorDisabled"] !== undefined ? _data["isRoomNotesInspectorDisabled"] : <any>null;
            this.isRoomNotesWebDisabled = _data["isRoomNotesWebDisabled"] !== undefined ? _data["isRoomNotesWebDisabled"] : <any>null;
            this.nightPlanningTime = _data["nightPlanningTime"] !== undefined ? _data["nightPlanningTime"] : <any>null;
            this.isPlanningNightEnabled = _data["isPlanningNightEnabled"] !== undefined ? _data["isPlanningNightEnabled"] : <any>null;
            this.isLFWaitingDisabled = _data["isLFWaitingDisabled"] !== undefined ? _data["isLFWaitingDisabled"] : <any>null;
            this.isEnabledMaintenanceUnassigned = _data["isEnabledMaintenanceUnassigned"] !== undefined ? _data["isEnabledMaintenanceUnassigned"] : <any>null;
            this.disableGuestLocator = _data["disableGuestLocator"] !== undefined ? _data["disableGuestLocator"] : <any>null;
            this.attendantDefaultView = _data["attendantDefaultView"] !== undefined ? _data["attendantDefaultView"] : <any>null;
            this.isAttendantBypass = _data["isAttendantBypass"] !== undefined ? _data["isAttendantBypass"] : <any>null;
            this.isAttendantWorkflow = _data["isAttendantWorkflow"] !== undefined ? _data["isAttendantWorkflow"] : <any>null;
            this.timezone = _data["timezone"] !== undefined ? _data["timezone"] : <any>null;
            this.attendantCancelMinutes = _data["attendantCancelMinutes"] !== undefined ? _data["attendantCancelMinutes"] : <any>null;
            this.disableAttendantTimer = _data["disableAttendantTimer"] !== undefined ? _data["disableAttendantTimer"] : <any>null;
            this.isAdvancedLayout = _data["isAdvancedLayout"] !== undefined ? _data["isAdvancedLayout"] : <any>null;
            this.departureMultiplier = _data["departureMultiplier"] !== undefined ? _data["departureMultiplier"] : <any>null;
            this.stayMultiplier = _data["stayMultiplier"] !== undefined ? _data["stayMultiplier"] : <any>null;
            this.vacantMultiplier = _data["vacantMultiplier"] !== undefined ? _data["vacantMultiplier"] : <any>null;
            this.creditMinutes = _data["creditMinutes"] !== undefined ? _data["creditMinutes"] : <any>null;
            this.isShowGuestName = _data["isShowGuestName"] !== undefined ? _data["isShowGuestName"] : <any>null;
            this.isHideGuestInfo = _data["isHideGuestInfo"] !== undefined ? _data["isHideGuestInfo"] : <any>null;
            this.isAllNightly = _data["isAllNightly"] !== undefined ? _data["isAllNightly"] : <any>null;
            this.isOCCNightly = _data["isOCCNightly"] !== undefined ? _data["isOCCNightly"] : <any>null;
            if (Array.isArray(_data["organizations"])) {
                this.organizations = [] as any;
                for (let item of _data["organizations"])
                    this.organizations!.push(item);
            }
            if (Array.isArray(_data["floors"])) {
                this.floors = [] as any;
                for (let item of _data["floors"])
                    this.floors!.push(item);
            }
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(item);
            }
            if (Array.isArray(_data["notes"])) {
                this.notes = [] as any;
                for (let item of _data["notes"])
                    this.notes!.push(item);
            }
            this.remoteApi = _data["remoteApi"] !== undefined ? _data["remoteApi"] : <any>null;
            this.display = _data["display"] !== undefined ? _data["display"] : <any>null;
        }
    }

    static fromJS(data: any): HotelForMobile {
        data = typeof data === 'object' ? data : {};
        let result = new HotelForMobile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["images"] = this.images !== undefined ? this.images : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["phone"] = this.phone !== undefined ? this.phone : <any>null;
        data["remarks"] = this.remarks !== undefined ? this.remarks : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["street"] = this.street !== undefined ? this.street : <any>null;
        data["thumbnail"] = this.thumbnail !== undefined ? this.thumbnail : <any>null;
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["zip"] = this.zip !== undefined ? this.zip : <any>null;
        data["modules"] = this.modules ? this.modules.toJSON() : <any>null;
        data["isHideCleaningData"] = this.isHideCleaningData !== undefined ? this.isHideCleaningData : <any>null;
        data["isLimitAttendantContainers"] = this.isLimitAttendantContainers !== undefined ? this.isLimitAttendantContainers : <any>null;
        data["isRemoveMessagesDaily"] = this.isRemoveMessagesDaily !== undefined ? this.isRemoveMessagesDaily : <any>null;
        data["isRenotifyPN"] = this.isRenotifyPN !== undefined ? this.isRenotifyPN : <any>null;
        data["isWebAttendantIcons"] = this.isWebAttendantIcons !== undefined ? this.isWebAttendantIcons : <any>null;
        data["isAdminOnlyAssetCreate"] = this.isAdminOnlyAssetCreate !== undefined ? this.isAdminOnlyAssetCreate : <any>null;
        data["isRemovePriorityOnFinish"] = this.isRemovePriorityOnFinish !== undefined ? this.isRemovePriorityOnFinish : <any>null;
        data["isShowAllTaskCounts"] = this.isShowAllTaskCounts !== undefined ? this.isShowAllTaskCounts : <any>null;
        data["isInspectionRemovesPriority"] = this.isInspectionRemovesPriority !== undefined ? this.isInspectionRemovesPriority : <any>null;
        data["isAttendantDisablePMSNotes"] = this.isAttendantDisablePMSNotes !== undefined ? this.isAttendantDisablePMSNotes : <any>null;
        data["isAttendantTaskNotes"] = this.isAttendantTaskNotes !== undefined ? this.isAttendantTaskNotes : <any>null;
        if (Array.isArray(this.escalationPhones)) {
            data["escalationPhones"] = [];
            for (let item of this.escalationPhones)
                data["escalationPhones"].push(item);
        }
        data["explicitOccupiedWorkflow"] = this.explicitOccupiedWorkflow !== undefined ? this.explicitOccupiedWorkflow : <any>null;
        data["explicitVacantWorkflow"] = this.explicitVacantWorkflow !== undefined ? this.explicitVacantWorkflow : <any>null;
        data["isExplicitWorkflow"] = this.isExplicitWorkflow !== undefined ? this.isExplicitWorkflow : <any>null;
        data["isAttendantPriorityColor"] = this.isAttendantPriorityColor !== undefined ? this.isAttendantPriorityColor : <any>null;
        data["shouldResetDirty"] = this.shouldResetDirty !== undefined ? this.shouldResetDirty : <any>null;
        data["isHostEnabled"] = this.isHostEnabled !== undefined ? this.isHostEnabled : <any>null;
        data["isRestockEnabled"] = this.isRestockEnabled !== undefined ? this.isRestockEnabled : <any>null;
        data["isAttendantImmediateTasks"] = this.isAttendantImmediateTasks !== undefined ? this.isAttendantImmediateTasks : <any>null;
        data["isAttendantOneStep"] = this.isAttendantOneStep !== undefined ? this.isAttendantOneStep : <any>null;
        data["isAttendantNotificationPN"] = this.isAttendantNotificationPN !== undefined ? this.isAttendantNotificationPN : <any>null;
        data["isAttendantLitePN"] = this.isAttendantLitePN !== undefined ? this.isAttendantLitePN : <any>null;
        data["isAttendantNormalPN"] = this.isAttendantNormalPN !== undefined ? this.isAttendantNormalPN : <any>null;
        data["isAttendantPriorityPN"] = this.isAttendantPriorityPN !== undefined ? this.isAttendantPriorityPN : <any>null;
        data["isMaintenanceNotificationPN"] = this.isMaintenanceNotificationPN !== undefined ? this.isMaintenanceNotificationPN : <any>null;
        data["isMaintenanceLitePN"] = this.isMaintenanceLitePN !== undefined ? this.isMaintenanceLitePN : <any>null;
        data["isMaintenanceNormalPN"] = this.isMaintenanceNormalPN !== undefined ? this.isMaintenanceNormalPN : <any>null;
        data["isMaintenancePriorityPN"] = this.isMaintenancePriorityPN !== undefined ? this.isMaintenancePriorityPN : <any>null;
        data["isDisableDNDPhoto"] = this.isDisableDNDPhoto !== undefined ? this.isDisableDNDPhoto : <any>null;
        data["isDisablePMSNotesDEP"] = this.isDisablePMSNotesDEP !== undefined ? this.isDisablePMSNotesDEP : <any>null;
        data["isTaskMaintenance"] = this.isTaskMaintenance !== undefined ? this.isTaskMaintenance : <any>null;
        data["isRoomNotesAttendantDisabled"] = this.isRoomNotesAttendantDisabled !== undefined ? this.isRoomNotesAttendantDisabled : <any>null;
        data["isRoomNotesInspectorDisabled"] = this.isRoomNotesInspectorDisabled !== undefined ? this.isRoomNotesInspectorDisabled : <any>null;
        data["isRoomNotesWebDisabled"] = this.isRoomNotesWebDisabled !== undefined ? this.isRoomNotesWebDisabled : <any>null;
        data["nightPlanningTime"] = this.nightPlanningTime !== undefined ? this.nightPlanningTime : <any>null;
        data["isPlanningNightEnabled"] = this.isPlanningNightEnabled !== undefined ? this.isPlanningNightEnabled : <any>null;
        data["isLFWaitingDisabled"] = this.isLFWaitingDisabled !== undefined ? this.isLFWaitingDisabled : <any>null;
        data["isEnabledMaintenanceUnassigned"] = this.isEnabledMaintenanceUnassigned !== undefined ? this.isEnabledMaintenanceUnassigned : <any>null;
        data["disableGuestLocator"] = this.disableGuestLocator !== undefined ? this.disableGuestLocator : <any>null;
        data["attendantDefaultView"] = this.attendantDefaultView !== undefined ? this.attendantDefaultView : <any>null;
        data["isAttendantBypass"] = this.isAttendantBypass !== undefined ? this.isAttendantBypass : <any>null;
        data["isAttendantWorkflow"] = this.isAttendantWorkflow !== undefined ? this.isAttendantWorkflow : <any>null;
        data["timezone"] = this.timezone !== undefined ? this.timezone : <any>null;
        data["attendantCancelMinutes"] = this.attendantCancelMinutes !== undefined ? this.attendantCancelMinutes : <any>null;
        data["disableAttendantTimer"] = this.disableAttendantTimer !== undefined ? this.disableAttendantTimer : <any>null;
        data["isAdvancedLayout"] = this.isAdvancedLayout !== undefined ? this.isAdvancedLayout : <any>null;
        data["departureMultiplier"] = this.departureMultiplier !== undefined ? this.departureMultiplier : <any>null;
        data["stayMultiplier"] = this.stayMultiplier !== undefined ? this.stayMultiplier : <any>null;
        data["vacantMultiplier"] = this.vacantMultiplier !== undefined ? this.vacantMultiplier : <any>null;
        data["creditMinutes"] = this.creditMinutes !== undefined ? this.creditMinutes : <any>null;
        data["isShowGuestName"] = this.isShowGuestName !== undefined ? this.isShowGuestName : <any>null;
        data["isHideGuestInfo"] = this.isHideGuestInfo !== undefined ? this.isHideGuestInfo : <any>null;
        data["isAllNightly"] = this.isAllNightly !== undefined ? this.isAllNightly : <any>null;
        data["isOCCNightly"] = this.isOCCNightly !== undefined ? this.isOCCNightly : <any>null;
        if (Array.isArray(this.organizations)) {
            data["organizations"] = [];
            for (let item of this.organizations)
                data["organizations"].push(item);
        }
        if (Array.isArray(this.floors)) {
            data["floors"] = [];
            for (let item of this.floors)
                data["floors"].push(item);
        }
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item);
        }
        if (Array.isArray(this.notes)) {
            data["notes"] = [];
            for (let item of this.notes)
                data["notes"].push(item);
        }
        data["remoteApi"] = this.remoteApi !== undefined ? this.remoteApi : <any>null;
        data["display"] = this.display !== undefined ? this.display : <any>null;
        return data; 
    }
}

export interface IHotelForMobile {
    id?: string | null;
    city?: string | null;
    country?: string | null;
    images?: string | null;
    name?: string | null;
    phone?: string | null;
    remarks?: string | null;
    state?: string | null;
    street?: string | null;
    thumbnail?: string | null;
    username?: string | null;
    zip?: string | null;
    modules?: HotelModulesForMobile | null;
    isHideCleaningData: boolean;
    isLimitAttendantContainers: boolean;
    isRemoveMessagesDaily: boolean;
    isRenotifyPN: boolean;
    isWebAttendantIcons: boolean;
    isAdminOnlyAssetCreate: boolean;
    isRemovePriorityOnFinish: boolean;
    isShowAllTaskCounts: boolean;
    isInspectionRemovesPriority: boolean;
    isAttendantDisablePMSNotes: boolean;
    isAttendantTaskNotes: boolean;
    escalationPhones?: string[] | null;
    explicitOccupiedWorkflow?: string | null;
    explicitVacantWorkflow?: string | null;
    isExplicitWorkflow: boolean;
    isAttendantPriorityColor: boolean;
    shouldResetDirty: boolean;
    isHostEnabled: boolean;
    isRestockEnabled: boolean;
    isAttendantImmediateTasks: boolean;
    isAttendantOneStep: boolean;
    isAttendantNotificationPN: boolean;
    isAttendantLitePN: boolean;
    isAttendantNormalPN: boolean;
    isAttendantPriorityPN: boolean;
    isMaintenanceNotificationPN: boolean;
    isMaintenanceLitePN: boolean;
    isMaintenanceNormalPN: boolean;
    isMaintenancePriorityPN: boolean;
    isDisableDNDPhoto: boolean;
    isDisablePMSNotesDEP: boolean;
    isTaskMaintenance: boolean;
    isRoomNotesAttendantDisabled: boolean;
    isRoomNotesInspectorDisabled: boolean;
    isRoomNotesWebDisabled: boolean;
    nightPlanningTime: number;
    isPlanningNightEnabled: boolean;
    isLFWaitingDisabled: boolean;
    isEnabledMaintenanceUnassigned: boolean;
    disableGuestLocator: boolean;
    attendantDefaultView?: string | null;
    isAttendantBypass: boolean;
    isAttendantWorkflow: boolean;
    timezone: number;
    attendantCancelMinutes: number;
    disableAttendantTimer: boolean;
    isAdvancedLayout: boolean;
    departureMultiplier: number;
    stayMultiplier: number;
    vacantMultiplier: number;
    creditMinutes: number;
    isShowGuestName: boolean;
    isHideGuestInfo: boolean;
    isAllNightly: boolean;
    isOCCNightly: boolean;
    organizations?: string[] | null;
    floors?: string[] | null;
    users?: string[] | null;
    notes?: string[] | null;
    remoteApi?: string | null;
    display?: string | null;
}

export class HotelModulesForMobile implements IHotelModulesForMobile {
    isEnablePlanner!: boolean;
    isEnableCiCo!: boolean;
    isRunnerDisabled!: boolean;
    isPreventativeTasksDisabled!: boolean;
    isTurndownDisabled!: boolean;
    isInventoryDisabled!: boolean;
    isExperiencesDisabled!: boolean;
    isAuditsDisabled!: boolean;

    constructor(data?: IHotelModulesForMobile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isEnablePlanner = _data["isEnablePlanner"] !== undefined ? _data["isEnablePlanner"] : <any>null;
            this.isEnableCiCo = _data["isEnableCiCo"] !== undefined ? _data["isEnableCiCo"] : <any>null;
            this.isRunnerDisabled = _data["isRunnerDisabled"] !== undefined ? _data["isRunnerDisabled"] : <any>null;
            this.isPreventativeTasksDisabled = _data["isPreventativeTasksDisabled"] !== undefined ? _data["isPreventativeTasksDisabled"] : <any>null;
            this.isTurndownDisabled = _data["isTurndownDisabled"] !== undefined ? _data["isTurndownDisabled"] : <any>null;
            this.isInventoryDisabled = _data["isInventoryDisabled"] !== undefined ? _data["isInventoryDisabled"] : <any>null;
            this.isExperiencesDisabled = _data["isExperiencesDisabled"] !== undefined ? _data["isExperiencesDisabled"] : <any>null;
            this.isAuditsDisabled = _data["isAuditsDisabled"] !== undefined ? _data["isAuditsDisabled"] : <any>null;
        }
    }

    static fromJS(data: any): HotelModulesForMobile {
        data = typeof data === 'object' ? data : {};
        let result = new HotelModulesForMobile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEnablePlanner"] = this.isEnablePlanner !== undefined ? this.isEnablePlanner : <any>null;
        data["isEnableCiCo"] = this.isEnableCiCo !== undefined ? this.isEnableCiCo : <any>null;
        data["isRunnerDisabled"] = this.isRunnerDisabled !== undefined ? this.isRunnerDisabled : <any>null;
        data["isPreventativeTasksDisabled"] = this.isPreventativeTasksDisabled !== undefined ? this.isPreventativeTasksDisabled : <any>null;
        data["isTurndownDisabled"] = this.isTurndownDisabled !== undefined ? this.isTurndownDisabled : <any>null;
        data["isInventoryDisabled"] = this.isInventoryDisabled !== undefined ? this.isInventoryDisabled : <any>null;
        data["isExperiencesDisabled"] = this.isExperiencesDisabled !== undefined ? this.isExperiencesDisabled : <any>null;
        data["isAuditsDisabled"] = this.isAuditsDisabled !== undefined ? this.isAuditsDisabled : <any>null;
        return data; 
    }
}

export interface IHotelModulesForMobile {
    isEnablePlanner: boolean;
    isEnableCiCo: boolean;
    isRunnerDisabled: boolean;
    isPreventativeTasksDisabled: boolean;
    isTurndownDisabled: boolean;
    isInventoryDisabled: boolean;
    isExperiencesDisabled: boolean;
    isAuditsDisabled: boolean;
}

export class AttendantPermission implements IAttendantPermission {

    constructor(data?: IAttendantPermission) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AttendantPermission {
        data = typeof data === 'object' ? data : {};
        let result = new AttendantPermission();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IAttendantPermission {
}

export class AttendantAppConfiguration implements IAttendantAppConfiguration {
    automaticChangeSheets!: number;
    creditMinutes!: number;
    departureMultiplier!: number;
    disableChangeSheetsOnSoonDeparture!: boolean;
    enabledTurndownCategories?: string[] | null;
    hotelId?: string | null;
    isAdminOnlyAssetCreate!: boolean;
    isAdvancedRestockEnabled!: boolean;
    isAllNightly!: boolean;
    isEnableTurndown!: boolean;
    isLFWaitingDisabled!: boolean;
    isOCCNightly!: boolean;
    isRemoveMessagesDaily!: boolean;
    isRemovePriorityOnFinish!: boolean;
    isRemovePriorityOnInspected!: boolean;
    isRenotifyPN!: boolean;
    isRoomNotesWebDisabled!: boolean;
    isShowAllTaskCounts!: boolean;
    isSimpleRestockEnabled!: boolean;
    shouldResetDirty!: boolean;
    stayMultiplier!: number;
    vacantMultiplier!: number;
    isDisableAttendantAudits!: boolean;
    isEnableShowNonPlanned!: boolean;
    isEnableRunnerRecentTasks!: boolean;
    isDisableRunnerMarkExtras!: boolean;
    isEnableRunnerExtra!: boolean;
    isEnableRunnerInspection!: boolean;
    isDisableRunnerAudits!: boolean;
    isRequireRunnerInventoryConfirmation!: boolean;
    isDisableRunnerExperience!: boolean;
    isDisableRunnerTurndown!: boolean;
    isDisableMaintenanceExperience!: boolean;
    isDutyBackup!: boolean;
    isDutyEnabled!: boolean;
    isMaintenanceFiltersPersist!: boolean;
    isRequireMaintenanceActionTasks!: boolean;
    isDisableMaintenanceLiteTasks!: boolean;
    isMaintenanceNotificationsPN!: boolean;
    isMaintenanceLitePN!: boolean;
    isMaintenanceNormalPN!: boolean;
    isMaintenancePriorityPN!: boolean;
    isEnableAttendantPlannings!: boolean;
    isEnableAttendantAuditsCreate!: boolean;
    isEnableAttendantAudits!: boolean;
    isDisableAttendantExperience!: boolean;
    isDisableAttendantTurndown!: boolean;
    isEnableAttendantRecentTasks!: boolean;
    isShowAttendantTasks!: boolean;
    isDisableAttendantCreateNotes!: boolean;
    isDisableAttendantMarkExtras!: boolean;
    isRequireAttendantInventoryConfirmation!: boolean;
    isDisableAttendantFinishCancel!: boolean;
    isHideAttendantMaintenance!: boolean;
    isHideAttendantInventory!: boolean;
    isHideAttendantLF!: boolean;
    isHideAttendantGallery!: boolean;
    isHideAttendantNotes!: boolean;
    isHideAttendantDescription!: boolean;
    isHideAttendantCategory!: boolean;
    isHideAttendantCredits!: boolean;
    isHideAttendantMainFilter!: boolean;
    isEnableVoucherDnd!: boolean;
    isShowCreditsMain!: boolean;
    isDisableAttendantCleaningLimit!: boolean;
    isDisableAttendantPauseLimit!: boolean;
    isDisablePMSNotesAttendantDep!: boolean;
    isDisablePMSNotesAttendant!: boolean;
    isAttendantNotificationsPN!: boolean;
    isAttendantNormalPN!: boolean;
    isAttendantPriorityPN!: boolean;
    explicitWorkflowOccupied?: string | null;
    explicitWorkflowVacant?: string | null;
    isEnableExplicitAttendantWorkflow!: boolean;
    isEnableAttendantWorkflow!: boolean;
    attendantMinimumMinutes!: number;
    isHideAttendantTimer!: boolean;
    isDisableInspectorPlanning!: boolean;
    isEnableInspectorConcierge!: boolean;
    isDisableInspectorExperience!: boolean;
    isDisableInspectorTurndown!: boolean;
    isDisableRestocksDifferences!: boolean;
    isRequireInspectorActionTasks!: boolean;
    isDisableInspectorLiteTasks!: boolean;
    isDisableUnblocksDifferences!: boolean;
    isDisableMessagesDifferences!: boolean;
    isDisablePriorityDifferences!: boolean;
    isWebAutoLogout!: boolean;
    isWebHotelScheduleEnabled!: boolean;
    isDisablePlanningExportLongStay!: boolean;
    isDisablePlanningExportChangeSheets!: boolean;
    isDisablePlanningExportPriority!: boolean;
    isDisablePlanningExportCredits!: boolean;
    isDisablePlanningExportPMSNote!: boolean;
    isDisablePlanningExportOccupants!: boolean;
    isDisablePlanningExportName!: boolean;
    isDisablePlanningExportCategory!: boolean;
    isDisablePlanningExportHousekeeping!: boolean;
    isLimitPlanningContainers!: boolean;
    isDisableLFWaiting!: boolean;
    isLegacyAttendantIcons!: boolean;
    isDisableRoomNotesWeb!: boolean;
    isShowAllTasks!: boolean;
    isEnableMice!: boolean;
    networkMessage?: string | null;
    isEnableAdvancedMessages!: boolean;
    isEnableAudits!: boolean;
    isUpgradedPlanningV3!: boolean;
    isUpgradedPlanning!: boolean;
    isAdvancedTaskForm!: boolean;
    isHostsEnabled!: boolean;
    isShowDurableAssets!: boolean;
    isTaskMaintenance!: boolean;
    isDisableLiteTasks!: boolean;
    isLimitAssetActionAdmin!: boolean;
    isRemovePriorityRooms!: boolean;
    isResetRoomDirty!: boolean;
    isPushDNDChangeSheets!: boolean;
    isChangeSheetsDelay!: boolean;
    changeSheetsInternval!: number;
    isChangeSheetsEnabled!: boolean;
    isAutomaticMessages!: boolean;
    isRemoveMessageNightly!: boolean;
    occupiedRoomsInterval!: number;
    isOccupiedRoomsInterval!: boolean;
    isAparthotelSettings!: boolean;
    isAllRoomsNightly!: boolean;
    isOccupiedRoomsDeparture!: boolean;
    isOccupiedRoomsNightly!: boolean;

    constructor(data?: IAttendantAppConfiguration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.automaticChangeSheets = _data["automaticChangeSheets"] !== undefined ? _data["automaticChangeSheets"] : <any>null;
            this.creditMinutes = _data["creditMinutes"] !== undefined ? _data["creditMinutes"] : <any>null;
            this.departureMultiplier = _data["departureMultiplier"] !== undefined ? _data["departureMultiplier"] : <any>null;
            this.disableChangeSheetsOnSoonDeparture = _data["disableChangeSheetsOnSoonDeparture"] !== undefined ? _data["disableChangeSheetsOnSoonDeparture"] : <any>null;
            if (Array.isArray(_data["enabledTurndownCategories"])) {
                this.enabledTurndownCategories = [] as any;
                for (let item of _data["enabledTurndownCategories"])
                    this.enabledTurndownCategories!.push(item);
            }
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.isAdminOnlyAssetCreate = _data["isAdminOnlyAssetCreate"] !== undefined ? _data["isAdminOnlyAssetCreate"] : <any>null;
            this.isAdvancedRestockEnabled = _data["isAdvancedRestockEnabled"] !== undefined ? _data["isAdvancedRestockEnabled"] : <any>null;
            this.isAllNightly = _data["isAllNightly"] !== undefined ? _data["isAllNightly"] : <any>null;
            this.isEnableTurndown = _data["isEnableTurndown"] !== undefined ? _data["isEnableTurndown"] : <any>null;
            this.isLFWaitingDisabled = _data["isLFWaitingDisabled"] !== undefined ? _data["isLFWaitingDisabled"] : <any>null;
            this.isOCCNightly = _data["isOCCNightly"] !== undefined ? _data["isOCCNightly"] : <any>null;
            this.isRemoveMessagesDaily = _data["isRemoveMessagesDaily"] !== undefined ? _data["isRemoveMessagesDaily"] : <any>null;
            this.isRemovePriorityOnFinish = _data["isRemovePriorityOnFinish"] !== undefined ? _data["isRemovePriorityOnFinish"] : <any>null;
            this.isRemovePriorityOnInspected = _data["isRemovePriorityOnInspected"] !== undefined ? _data["isRemovePriorityOnInspected"] : <any>null;
            this.isRenotifyPN = _data["isRenotifyPN"] !== undefined ? _data["isRenotifyPN"] : <any>null;
            this.isRoomNotesWebDisabled = _data["isRoomNotesWebDisabled"] !== undefined ? _data["isRoomNotesWebDisabled"] : <any>null;
            this.isShowAllTaskCounts = _data["isShowAllTaskCounts"] !== undefined ? _data["isShowAllTaskCounts"] : <any>null;
            this.isSimpleRestockEnabled = _data["isSimpleRestockEnabled"] !== undefined ? _data["isSimpleRestockEnabled"] : <any>null;
            this.shouldResetDirty = _data["shouldResetDirty"] !== undefined ? _data["shouldResetDirty"] : <any>null;
            this.stayMultiplier = _data["stayMultiplier"] !== undefined ? _data["stayMultiplier"] : <any>null;
            this.vacantMultiplier = _data["vacantMultiplier"] !== undefined ? _data["vacantMultiplier"] : <any>null;
            this.isDisableAttendantAudits = _data["isDisableAttendantAudits"] !== undefined ? _data["isDisableAttendantAudits"] : <any>null;
            this.isEnableShowNonPlanned = _data["isEnableShowNonPlanned"] !== undefined ? _data["isEnableShowNonPlanned"] : <any>null;
            this.isEnableRunnerRecentTasks = _data["isEnableRunnerRecentTasks"] !== undefined ? _data["isEnableRunnerRecentTasks"] : <any>null;
            this.isDisableRunnerMarkExtras = _data["isDisableRunnerMarkExtras"] !== undefined ? _data["isDisableRunnerMarkExtras"] : <any>null;
            this.isEnableRunnerExtra = _data["isEnableRunnerExtra"] !== undefined ? _data["isEnableRunnerExtra"] : <any>null;
            this.isEnableRunnerInspection = _data["isEnableRunnerInspection"] !== undefined ? _data["isEnableRunnerInspection"] : <any>null;
            this.isDisableRunnerAudits = _data["isDisableRunnerAudits"] !== undefined ? _data["isDisableRunnerAudits"] : <any>null;
            this.isRequireRunnerInventoryConfirmation = _data["isRequireRunnerInventoryConfirmation"] !== undefined ? _data["isRequireRunnerInventoryConfirmation"] : <any>null;
            this.isDisableRunnerExperience = _data["isDisableRunnerExperience"] !== undefined ? _data["isDisableRunnerExperience"] : <any>null;
            this.isDisableRunnerTurndown = _data["isDisableRunnerTurndown"] !== undefined ? _data["isDisableRunnerTurndown"] : <any>null;
            this.isDisableMaintenanceExperience = _data["isDisableMaintenanceExperience"] !== undefined ? _data["isDisableMaintenanceExperience"] : <any>null;
            this.isDutyBackup = _data["isDutyBackup"] !== undefined ? _data["isDutyBackup"] : <any>null;
            this.isDutyEnabled = _data["isDutyEnabled"] !== undefined ? _data["isDutyEnabled"] : <any>null;
            this.isMaintenanceFiltersPersist = _data["isMaintenanceFiltersPersist"] !== undefined ? _data["isMaintenanceFiltersPersist"] : <any>null;
            this.isRequireMaintenanceActionTasks = _data["isRequireMaintenanceActionTasks"] !== undefined ? _data["isRequireMaintenanceActionTasks"] : <any>null;
            this.isDisableMaintenanceLiteTasks = _data["isDisableMaintenanceLiteTasks"] !== undefined ? _data["isDisableMaintenanceLiteTasks"] : <any>null;
            this.isMaintenanceNotificationsPN = _data["isMaintenanceNotificationsPN"] !== undefined ? _data["isMaintenanceNotificationsPN"] : <any>null;
            this.isMaintenanceLitePN = _data["isMaintenanceLitePN"] !== undefined ? _data["isMaintenanceLitePN"] : <any>null;
            this.isMaintenanceNormalPN = _data["isMaintenanceNormalPN"] !== undefined ? _data["isMaintenanceNormalPN"] : <any>null;
            this.isMaintenancePriorityPN = _data["isMaintenancePriorityPN"] !== undefined ? _data["isMaintenancePriorityPN"] : <any>null;
            this.isEnableAttendantPlannings = _data["isEnableAttendantPlannings"] !== undefined ? _data["isEnableAttendantPlannings"] : <any>null;
            this.isEnableAttendantAuditsCreate = _data["isEnableAttendantAuditsCreate"] !== undefined ? _data["isEnableAttendantAuditsCreate"] : <any>null;
            this.isEnableAttendantAudits = _data["isEnableAttendantAudits"] !== undefined ? _data["isEnableAttendantAudits"] : <any>null;
            this.isDisableAttendantExperience = _data["isDisableAttendantExperience"] !== undefined ? _data["isDisableAttendantExperience"] : <any>null;
            this.isDisableAttendantTurndown = _data["isDisableAttendantTurndown"] !== undefined ? _data["isDisableAttendantTurndown"] : <any>null;
            this.isEnableAttendantRecentTasks = _data["isEnableAttendantRecentTasks"] !== undefined ? _data["isEnableAttendantRecentTasks"] : <any>null;
            this.isShowAttendantTasks = _data["isShowAttendantTasks"] !== undefined ? _data["isShowAttendantTasks"] : <any>null;
            this.isDisableAttendantCreateNotes = _data["isDisableAttendantCreateNotes"] !== undefined ? _data["isDisableAttendantCreateNotes"] : <any>null;
            this.isDisableAttendantMarkExtras = _data["isDisableAttendantMarkExtras"] !== undefined ? _data["isDisableAttendantMarkExtras"] : <any>null;
            this.isRequireAttendantInventoryConfirmation = _data["isRequireAttendantInventoryConfirmation"] !== undefined ? _data["isRequireAttendantInventoryConfirmation"] : <any>null;
            this.isDisableAttendantFinishCancel = _data["isDisableAttendantFinishCancel"] !== undefined ? _data["isDisableAttendantFinishCancel"] : <any>null;
            this.isHideAttendantMaintenance = _data["isHideAttendantMaintenance"] !== undefined ? _data["isHideAttendantMaintenance"] : <any>null;
            this.isHideAttendantInventory = _data["isHideAttendantInventory"] !== undefined ? _data["isHideAttendantInventory"] : <any>null;
            this.isHideAttendantLF = _data["isHideAttendantLF"] !== undefined ? _data["isHideAttendantLF"] : <any>null;
            this.isHideAttendantGallery = _data["isHideAttendantGallery"] !== undefined ? _data["isHideAttendantGallery"] : <any>null;
            this.isHideAttendantNotes = _data["isHideAttendantNotes"] !== undefined ? _data["isHideAttendantNotes"] : <any>null;
            this.isHideAttendantDescription = _data["isHideAttendantDescription"] !== undefined ? _data["isHideAttendantDescription"] : <any>null;
            this.isHideAttendantCategory = _data["isHideAttendantCategory"] !== undefined ? _data["isHideAttendantCategory"] : <any>null;
            this.isHideAttendantCredits = _data["isHideAttendantCredits"] !== undefined ? _data["isHideAttendantCredits"] : <any>null;
            this.isHideAttendantMainFilter = _data["isHideAttendantMainFilter"] !== undefined ? _data["isHideAttendantMainFilter"] : <any>null;
            this.isEnableVoucherDnd = _data["isEnableVoucherDnd"] !== undefined ? _data["isEnableVoucherDnd"] : <any>null;
            this.isShowCreditsMain = _data["isShowCreditsMain"] !== undefined ? _data["isShowCreditsMain"] : <any>null;
            this.isDisableAttendantCleaningLimit = _data["isDisableAttendantCleaningLimit"] !== undefined ? _data["isDisableAttendantCleaningLimit"] : <any>null;
            this.isDisableAttendantPauseLimit = _data["isDisableAttendantPauseLimit"] !== undefined ? _data["isDisableAttendantPauseLimit"] : <any>null;
            this.isDisablePMSNotesAttendantDep = _data["isDisablePMSNotesAttendantDep"] !== undefined ? _data["isDisablePMSNotesAttendantDep"] : <any>null;
            this.isDisablePMSNotesAttendant = _data["isDisablePMSNotesAttendant"] !== undefined ? _data["isDisablePMSNotesAttendant"] : <any>null;
            this.isAttendantNotificationsPN = _data["isAttendantNotificationsPN"] !== undefined ? _data["isAttendantNotificationsPN"] : <any>null;
            this.isAttendantNormalPN = _data["isAttendantNormalPN"] !== undefined ? _data["isAttendantNormalPN"] : <any>null;
            this.isAttendantPriorityPN = _data["isAttendantPriorityPN"] !== undefined ? _data["isAttendantPriorityPN"] : <any>null;
            this.explicitWorkflowOccupied = _data["explicitWorkflowOccupied"] !== undefined ? _data["explicitWorkflowOccupied"] : <any>null;
            this.explicitWorkflowVacant = _data["explicitWorkflowVacant"] !== undefined ? _data["explicitWorkflowVacant"] : <any>null;
            this.isEnableExplicitAttendantWorkflow = _data["isEnableExplicitAttendantWorkflow"] !== undefined ? _data["isEnableExplicitAttendantWorkflow"] : <any>null;
            this.isEnableAttendantWorkflow = _data["isEnableAttendantWorkflow"] !== undefined ? _data["isEnableAttendantWorkflow"] : <any>null;
            this.attendantMinimumMinutes = _data["attendantMinimumMinutes"] !== undefined ? _data["attendantMinimumMinutes"] : <any>null;
            this.isHideAttendantTimer = _data["isHideAttendantTimer"] !== undefined ? _data["isHideAttendantTimer"] : <any>null;
            this.isDisableInspectorPlanning = _data["isDisableInspectorPlanning"] !== undefined ? _data["isDisableInspectorPlanning"] : <any>null;
            this.isEnableInspectorConcierge = _data["isEnableInspectorConcierge"] !== undefined ? _data["isEnableInspectorConcierge"] : <any>null;
            this.isDisableInspectorExperience = _data["isDisableInspectorExperience"] !== undefined ? _data["isDisableInspectorExperience"] : <any>null;
            this.isDisableInspectorTurndown = _data["isDisableInspectorTurndown"] !== undefined ? _data["isDisableInspectorTurndown"] : <any>null;
            this.isDisableRestocksDifferences = _data["isDisableRestocksDifferences"] !== undefined ? _data["isDisableRestocksDifferences"] : <any>null;
            this.isRequireInspectorActionTasks = _data["isRequireInspectorActionTasks"] !== undefined ? _data["isRequireInspectorActionTasks"] : <any>null;
            this.isDisableInspectorLiteTasks = _data["isDisableInspectorLiteTasks"] !== undefined ? _data["isDisableInspectorLiteTasks"] : <any>null;
            this.isDisableUnblocksDifferences = _data["isDisableUnblocksDifferences"] !== undefined ? _data["isDisableUnblocksDifferences"] : <any>null;
            this.isDisableMessagesDifferences = _data["isDisableMessagesDifferences"] !== undefined ? _data["isDisableMessagesDifferences"] : <any>null;
            this.isDisablePriorityDifferences = _data["isDisablePriorityDifferences"] !== undefined ? _data["isDisablePriorityDifferences"] : <any>null;
            this.isWebAutoLogout = _data["isWebAutoLogout"] !== undefined ? _data["isWebAutoLogout"] : <any>null;
            this.isWebHotelScheduleEnabled = _data["isWebHotelScheduleEnabled"] !== undefined ? _data["isWebHotelScheduleEnabled"] : <any>null;
            this.isDisablePlanningExportLongStay = _data["isDisablePlanningExportLongStay"] !== undefined ? _data["isDisablePlanningExportLongStay"] : <any>null;
            this.isDisablePlanningExportChangeSheets = _data["isDisablePlanningExportChangeSheets"] !== undefined ? _data["isDisablePlanningExportChangeSheets"] : <any>null;
            this.isDisablePlanningExportPriority = _data["isDisablePlanningExportPriority"] !== undefined ? _data["isDisablePlanningExportPriority"] : <any>null;
            this.isDisablePlanningExportCredits = _data["isDisablePlanningExportCredits"] !== undefined ? _data["isDisablePlanningExportCredits"] : <any>null;
            this.isDisablePlanningExportPMSNote = _data["isDisablePlanningExportPMSNote"] !== undefined ? _data["isDisablePlanningExportPMSNote"] : <any>null;
            this.isDisablePlanningExportOccupants = _data["isDisablePlanningExportOccupants"] !== undefined ? _data["isDisablePlanningExportOccupants"] : <any>null;
            this.isDisablePlanningExportName = _data["isDisablePlanningExportName"] !== undefined ? _data["isDisablePlanningExportName"] : <any>null;
            this.isDisablePlanningExportCategory = _data["isDisablePlanningExportCategory"] !== undefined ? _data["isDisablePlanningExportCategory"] : <any>null;
            this.isDisablePlanningExportHousekeeping = _data["isDisablePlanningExportHousekeeping"] !== undefined ? _data["isDisablePlanningExportHousekeeping"] : <any>null;
            this.isLimitPlanningContainers = _data["isLimitPlanningContainers"] !== undefined ? _data["isLimitPlanningContainers"] : <any>null;
            this.isDisableLFWaiting = _data["isDisableLFWaiting"] !== undefined ? _data["isDisableLFWaiting"] : <any>null;
            this.isLegacyAttendantIcons = _data["isLegacyAttendantIcons"] !== undefined ? _data["isLegacyAttendantIcons"] : <any>null;
            this.isDisableRoomNotesWeb = _data["isDisableRoomNotesWeb"] !== undefined ? _data["isDisableRoomNotesWeb"] : <any>null;
            this.isShowAllTasks = _data["isShowAllTasks"] !== undefined ? _data["isShowAllTasks"] : <any>null;
            this.isEnableMice = _data["isEnableMice"] !== undefined ? _data["isEnableMice"] : <any>null;
            this.networkMessage = _data["networkMessage"] !== undefined ? _data["networkMessage"] : <any>null;
            this.isEnableAdvancedMessages = _data["isEnableAdvancedMessages"] !== undefined ? _data["isEnableAdvancedMessages"] : <any>null;
            this.isEnableAudits = _data["isEnableAudits"] !== undefined ? _data["isEnableAudits"] : <any>null;
            this.isUpgradedPlanningV3 = _data["isUpgradedPlanningV3"] !== undefined ? _data["isUpgradedPlanningV3"] : <any>null;
            this.isUpgradedPlanning = _data["isUpgradedPlanning"] !== undefined ? _data["isUpgradedPlanning"] : <any>null;
            this.isAdvancedTaskForm = _data["isAdvancedTaskForm"] !== undefined ? _data["isAdvancedTaskForm"] : <any>null;
            this.isHostsEnabled = _data["isHostsEnabled"] !== undefined ? _data["isHostsEnabled"] : <any>null;
            this.isShowDurableAssets = _data["isShowDurableAssets"] !== undefined ? _data["isShowDurableAssets"] : <any>null;
            this.isTaskMaintenance = _data["isTaskMaintenance"] !== undefined ? _data["isTaskMaintenance"] : <any>null;
            this.isDisableLiteTasks = _data["isDisableLiteTasks"] !== undefined ? _data["isDisableLiteTasks"] : <any>null;
            this.isLimitAssetActionAdmin = _data["isLimitAssetActionAdmin"] !== undefined ? _data["isLimitAssetActionAdmin"] : <any>null;
            this.isRemovePriorityRooms = _data["isRemovePriorityRooms"] !== undefined ? _data["isRemovePriorityRooms"] : <any>null;
            this.isResetRoomDirty = _data["isResetRoomDirty"] !== undefined ? _data["isResetRoomDirty"] : <any>null;
            this.isPushDNDChangeSheets = _data["isPushDNDChangeSheets"] !== undefined ? _data["isPushDNDChangeSheets"] : <any>null;
            this.isChangeSheetsDelay = _data["isChangeSheetsDelay"] !== undefined ? _data["isChangeSheetsDelay"] : <any>null;
            this.changeSheetsInternval = _data["changeSheetsInternval"] !== undefined ? _data["changeSheetsInternval"] : <any>null;
            this.isChangeSheetsEnabled = _data["isChangeSheetsEnabled"] !== undefined ? _data["isChangeSheetsEnabled"] : <any>null;
            this.isAutomaticMessages = _data["isAutomaticMessages"] !== undefined ? _data["isAutomaticMessages"] : <any>null;
            this.isRemoveMessageNightly = _data["isRemoveMessageNightly"] !== undefined ? _data["isRemoveMessageNightly"] : <any>null;
            this.occupiedRoomsInterval = _data["occupiedRoomsInterval"] !== undefined ? _data["occupiedRoomsInterval"] : <any>null;
            this.isOccupiedRoomsInterval = _data["isOccupiedRoomsInterval"] !== undefined ? _data["isOccupiedRoomsInterval"] : <any>null;
            this.isAparthotelSettings = _data["isAparthotelSettings"] !== undefined ? _data["isAparthotelSettings"] : <any>null;
            this.isAllRoomsNightly = _data["isAllRoomsNightly"] !== undefined ? _data["isAllRoomsNightly"] : <any>null;
            this.isOccupiedRoomsDeparture = _data["isOccupiedRoomsDeparture"] !== undefined ? _data["isOccupiedRoomsDeparture"] : <any>null;
            this.isOccupiedRoomsNightly = _data["isOccupiedRoomsNightly"] !== undefined ? _data["isOccupiedRoomsNightly"] : <any>null;
        }
    }

    static fromJS(data: any): AttendantAppConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new AttendantAppConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["automaticChangeSheets"] = this.automaticChangeSheets !== undefined ? this.automaticChangeSheets : <any>null;
        data["creditMinutes"] = this.creditMinutes !== undefined ? this.creditMinutes : <any>null;
        data["departureMultiplier"] = this.departureMultiplier !== undefined ? this.departureMultiplier : <any>null;
        data["disableChangeSheetsOnSoonDeparture"] = this.disableChangeSheetsOnSoonDeparture !== undefined ? this.disableChangeSheetsOnSoonDeparture : <any>null;
        if (Array.isArray(this.enabledTurndownCategories)) {
            data["enabledTurndownCategories"] = [];
            for (let item of this.enabledTurndownCategories)
                data["enabledTurndownCategories"].push(item);
        }
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["isAdminOnlyAssetCreate"] = this.isAdminOnlyAssetCreate !== undefined ? this.isAdminOnlyAssetCreate : <any>null;
        data["isAdvancedRestockEnabled"] = this.isAdvancedRestockEnabled !== undefined ? this.isAdvancedRestockEnabled : <any>null;
        data["isAllNightly"] = this.isAllNightly !== undefined ? this.isAllNightly : <any>null;
        data["isEnableTurndown"] = this.isEnableTurndown !== undefined ? this.isEnableTurndown : <any>null;
        data["isLFWaitingDisabled"] = this.isLFWaitingDisabled !== undefined ? this.isLFWaitingDisabled : <any>null;
        data["isOCCNightly"] = this.isOCCNightly !== undefined ? this.isOCCNightly : <any>null;
        data["isRemoveMessagesDaily"] = this.isRemoveMessagesDaily !== undefined ? this.isRemoveMessagesDaily : <any>null;
        data["isRemovePriorityOnFinish"] = this.isRemovePriorityOnFinish !== undefined ? this.isRemovePriorityOnFinish : <any>null;
        data["isRemovePriorityOnInspected"] = this.isRemovePriorityOnInspected !== undefined ? this.isRemovePriorityOnInspected : <any>null;
        data["isRenotifyPN"] = this.isRenotifyPN !== undefined ? this.isRenotifyPN : <any>null;
        data["isRoomNotesWebDisabled"] = this.isRoomNotesWebDisabled !== undefined ? this.isRoomNotesWebDisabled : <any>null;
        data["isShowAllTaskCounts"] = this.isShowAllTaskCounts !== undefined ? this.isShowAllTaskCounts : <any>null;
        data["isSimpleRestockEnabled"] = this.isSimpleRestockEnabled !== undefined ? this.isSimpleRestockEnabled : <any>null;
        data["shouldResetDirty"] = this.shouldResetDirty !== undefined ? this.shouldResetDirty : <any>null;
        data["stayMultiplier"] = this.stayMultiplier !== undefined ? this.stayMultiplier : <any>null;
        data["vacantMultiplier"] = this.vacantMultiplier !== undefined ? this.vacantMultiplier : <any>null;
        data["isDisableAttendantAudits"] = this.isDisableAttendantAudits !== undefined ? this.isDisableAttendantAudits : <any>null;
        data["isEnableShowNonPlanned"] = this.isEnableShowNonPlanned !== undefined ? this.isEnableShowNonPlanned : <any>null;
        data["isEnableRunnerRecentTasks"] = this.isEnableRunnerRecentTasks !== undefined ? this.isEnableRunnerRecentTasks : <any>null;
        data["isDisableRunnerMarkExtras"] = this.isDisableRunnerMarkExtras !== undefined ? this.isDisableRunnerMarkExtras : <any>null;
        data["isEnableRunnerExtra"] = this.isEnableRunnerExtra !== undefined ? this.isEnableRunnerExtra : <any>null;
        data["isEnableRunnerInspection"] = this.isEnableRunnerInspection !== undefined ? this.isEnableRunnerInspection : <any>null;
        data["isDisableRunnerAudits"] = this.isDisableRunnerAudits !== undefined ? this.isDisableRunnerAudits : <any>null;
        data["isRequireRunnerInventoryConfirmation"] = this.isRequireRunnerInventoryConfirmation !== undefined ? this.isRequireRunnerInventoryConfirmation : <any>null;
        data["isDisableRunnerExperience"] = this.isDisableRunnerExperience !== undefined ? this.isDisableRunnerExperience : <any>null;
        data["isDisableRunnerTurndown"] = this.isDisableRunnerTurndown !== undefined ? this.isDisableRunnerTurndown : <any>null;
        data["isDisableMaintenanceExperience"] = this.isDisableMaintenanceExperience !== undefined ? this.isDisableMaintenanceExperience : <any>null;
        data["isDutyBackup"] = this.isDutyBackup !== undefined ? this.isDutyBackup : <any>null;
        data["isDutyEnabled"] = this.isDutyEnabled !== undefined ? this.isDutyEnabled : <any>null;
        data["isMaintenanceFiltersPersist"] = this.isMaintenanceFiltersPersist !== undefined ? this.isMaintenanceFiltersPersist : <any>null;
        data["isRequireMaintenanceActionTasks"] = this.isRequireMaintenanceActionTasks !== undefined ? this.isRequireMaintenanceActionTasks : <any>null;
        data["isDisableMaintenanceLiteTasks"] = this.isDisableMaintenanceLiteTasks !== undefined ? this.isDisableMaintenanceLiteTasks : <any>null;
        data["isMaintenanceNotificationsPN"] = this.isMaintenanceNotificationsPN !== undefined ? this.isMaintenanceNotificationsPN : <any>null;
        data["isMaintenanceLitePN"] = this.isMaintenanceLitePN !== undefined ? this.isMaintenanceLitePN : <any>null;
        data["isMaintenanceNormalPN"] = this.isMaintenanceNormalPN !== undefined ? this.isMaintenanceNormalPN : <any>null;
        data["isMaintenancePriorityPN"] = this.isMaintenancePriorityPN !== undefined ? this.isMaintenancePriorityPN : <any>null;
        data["isEnableAttendantPlannings"] = this.isEnableAttendantPlannings !== undefined ? this.isEnableAttendantPlannings : <any>null;
        data["isEnableAttendantAuditsCreate"] = this.isEnableAttendantAuditsCreate !== undefined ? this.isEnableAttendantAuditsCreate : <any>null;
        data["isEnableAttendantAudits"] = this.isEnableAttendantAudits !== undefined ? this.isEnableAttendantAudits : <any>null;
        data["isDisableAttendantExperience"] = this.isDisableAttendantExperience !== undefined ? this.isDisableAttendantExperience : <any>null;
        data["isDisableAttendantTurndown"] = this.isDisableAttendantTurndown !== undefined ? this.isDisableAttendantTurndown : <any>null;
        data["isEnableAttendantRecentTasks"] = this.isEnableAttendantRecentTasks !== undefined ? this.isEnableAttendantRecentTasks : <any>null;
        data["isShowAttendantTasks"] = this.isShowAttendantTasks !== undefined ? this.isShowAttendantTasks : <any>null;
        data["isDisableAttendantCreateNotes"] = this.isDisableAttendantCreateNotes !== undefined ? this.isDisableAttendantCreateNotes : <any>null;
        data["isDisableAttendantMarkExtras"] = this.isDisableAttendantMarkExtras !== undefined ? this.isDisableAttendantMarkExtras : <any>null;
        data["isRequireAttendantInventoryConfirmation"] = this.isRequireAttendantInventoryConfirmation !== undefined ? this.isRequireAttendantInventoryConfirmation : <any>null;
        data["isDisableAttendantFinishCancel"] = this.isDisableAttendantFinishCancel !== undefined ? this.isDisableAttendantFinishCancel : <any>null;
        data["isHideAttendantMaintenance"] = this.isHideAttendantMaintenance !== undefined ? this.isHideAttendantMaintenance : <any>null;
        data["isHideAttendantInventory"] = this.isHideAttendantInventory !== undefined ? this.isHideAttendantInventory : <any>null;
        data["isHideAttendantLF"] = this.isHideAttendantLF !== undefined ? this.isHideAttendantLF : <any>null;
        data["isHideAttendantGallery"] = this.isHideAttendantGallery !== undefined ? this.isHideAttendantGallery : <any>null;
        data["isHideAttendantNotes"] = this.isHideAttendantNotes !== undefined ? this.isHideAttendantNotes : <any>null;
        data["isHideAttendantDescription"] = this.isHideAttendantDescription !== undefined ? this.isHideAttendantDescription : <any>null;
        data["isHideAttendantCategory"] = this.isHideAttendantCategory !== undefined ? this.isHideAttendantCategory : <any>null;
        data["isHideAttendantCredits"] = this.isHideAttendantCredits !== undefined ? this.isHideAttendantCredits : <any>null;
        data["isHideAttendantMainFilter"] = this.isHideAttendantMainFilter !== undefined ? this.isHideAttendantMainFilter : <any>null;
        data["isEnableVoucherDnd"] = this.isEnableVoucherDnd !== undefined ? this.isEnableVoucherDnd : <any>null;
        data["isShowCreditsMain"] = this.isShowCreditsMain !== undefined ? this.isShowCreditsMain : <any>null;
        data["isDisableAttendantCleaningLimit"] = this.isDisableAttendantCleaningLimit !== undefined ? this.isDisableAttendantCleaningLimit : <any>null;
        data["isDisableAttendantPauseLimit"] = this.isDisableAttendantPauseLimit !== undefined ? this.isDisableAttendantPauseLimit : <any>null;
        data["isDisablePMSNotesAttendantDep"] = this.isDisablePMSNotesAttendantDep !== undefined ? this.isDisablePMSNotesAttendantDep : <any>null;
        data["isDisablePMSNotesAttendant"] = this.isDisablePMSNotesAttendant !== undefined ? this.isDisablePMSNotesAttendant : <any>null;
        data["isAttendantNotificationsPN"] = this.isAttendantNotificationsPN !== undefined ? this.isAttendantNotificationsPN : <any>null;
        data["isAttendantNormalPN"] = this.isAttendantNormalPN !== undefined ? this.isAttendantNormalPN : <any>null;
        data["isAttendantPriorityPN"] = this.isAttendantPriorityPN !== undefined ? this.isAttendantPriorityPN : <any>null;
        data["explicitWorkflowOccupied"] = this.explicitWorkflowOccupied !== undefined ? this.explicitWorkflowOccupied : <any>null;
        data["explicitWorkflowVacant"] = this.explicitWorkflowVacant !== undefined ? this.explicitWorkflowVacant : <any>null;
        data["isEnableExplicitAttendantWorkflow"] = this.isEnableExplicitAttendantWorkflow !== undefined ? this.isEnableExplicitAttendantWorkflow : <any>null;
        data["isEnableAttendantWorkflow"] = this.isEnableAttendantWorkflow !== undefined ? this.isEnableAttendantWorkflow : <any>null;
        data["attendantMinimumMinutes"] = this.attendantMinimumMinutes !== undefined ? this.attendantMinimumMinutes : <any>null;
        data["isHideAttendantTimer"] = this.isHideAttendantTimer !== undefined ? this.isHideAttendantTimer : <any>null;
        data["isDisableInspectorPlanning"] = this.isDisableInspectorPlanning !== undefined ? this.isDisableInspectorPlanning : <any>null;
        data["isEnableInspectorConcierge"] = this.isEnableInspectorConcierge !== undefined ? this.isEnableInspectorConcierge : <any>null;
        data["isDisableInspectorExperience"] = this.isDisableInspectorExperience !== undefined ? this.isDisableInspectorExperience : <any>null;
        data["isDisableInspectorTurndown"] = this.isDisableInspectorTurndown !== undefined ? this.isDisableInspectorTurndown : <any>null;
        data["isDisableRestocksDifferences"] = this.isDisableRestocksDifferences !== undefined ? this.isDisableRestocksDifferences : <any>null;
        data["isRequireInspectorActionTasks"] = this.isRequireInspectorActionTasks !== undefined ? this.isRequireInspectorActionTasks : <any>null;
        data["isDisableInspectorLiteTasks"] = this.isDisableInspectorLiteTasks !== undefined ? this.isDisableInspectorLiteTasks : <any>null;
        data["isDisableUnblocksDifferences"] = this.isDisableUnblocksDifferences !== undefined ? this.isDisableUnblocksDifferences : <any>null;
        data["isDisableMessagesDifferences"] = this.isDisableMessagesDifferences !== undefined ? this.isDisableMessagesDifferences : <any>null;
        data["isDisablePriorityDifferences"] = this.isDisablePriorityDifferences !== undefined ? this.isDisablePriorityDifferences : <any>null;
        data["isWebAutoLogout"] = this.isWebAutoLogout !== undefined ? this.isWebAutoLogout : <any>null;
        data["isWebHotelScheduleEnabled"] = this.isWebHotelScheduleEnabled !== undefined ? this.isWebHotelScheduleEnabled : <any>null;
        data["isDisablePlanningExportLongStay"] = this.isDisablePlanningExportLongStay !== undefined ? this.isDisablePlanningExportLongStay : <any>null;
        data["isDisablePlanningExportChangeSheets"] = this.isDisablePlanningExportChangeSheets !== undefined ? this.isDisablePlanningExportChangeSheets : <any>null;
        data["isDisablePlanningExportPriority"] = this.isDisablePlanningExportPriority !== undefined ? this.isDisablePlanningExportPriority : <any>null;
        data["isDisablePlanningExportCredits"] = this.isDisablePlanningExportCredits !== undefined ? this.isDisablePlanningExportCredits : <any>null;
        data["isDisablePlanningExportPMSNote"] = this.isDisablePlanningExportPMSNote !== undefined ? this.isDisablePlanningExportPMSNote : <any>null;
        data["isDisablePlanningExportOccupants"] = this.isDisablePlanningExportOccupants !== undefined ? this.isDisablePlanningExportOccupants : <any>null;
        data["isDisablePlanningExportName"] = this.isDisablePlanningExportName !== undefined ? this.isDisablePlanningExportName : <any>null;
        data["isDisablePlanningExportCategory"] = this.isDisablePlanningExportCategory !== undefined ? this.isDisablePlanningExportCategory : <any>null;
        data["isDisablePlanningExportHousekeeping"] = this.isDisablePlanningExportHousekeeping !== undefined ? this.isDisablePlanningExportHousekeeping : <any>null;
        data["isLimitPlanningContainers"] = this.isLimitPlanningContainers !== undefined ? this.isLimitPlanningContainers : <any>null;
        data["isDisableLFWaiting"] = this.isDisableLFWaiting !== undefined ? this.isDisableLFWaiting : <any>null;
        data["isLegacyAttendantIcons"] = this.isLegacyAttendantIcons !== undefined ? this.isLegacyAttendantIcons : <any>null;
        data["isDisableRoomNotesWeb"] = this.isDisableRoomNotesWeb !== undefined ? this.isDisableRoomNotesWeb : <any>null;
        data["isShowAllTasks"] = this.isShowAllTasks !== undefined ? this.isShowAllTasks : <any>null;
        data["isEnableMice"] = this.isEnableMice !== undefined ? this.isEnableMice : <any>null;
        data["networkMessage"] = this.networkMessage !== undefined ? this.networkMessage : <any>null;
        data["isEnableAdvancedMessages"] = this.isEnableAdvancedMessages !== undefined ? this.isEnableAdvancedMessages : <any>null;
        data["isEnableAudits"] = this.isEnableAudits !== undefined ? this.isEnableAudits : <any>null;
        data["isUpgradedPlanningV3"] = this.isUpgradedPlanningV3 !== undefined ? this.isUpgradedPlanningV3 : <any>null;
        data["isUpgradedPlanning"] = this.isUpgradedPlanning !== undefined ? this.isUpgradedPlanning : <any>null;
        data["isAdvancedTaskForm"] = this.isAdvancedTaskForm !== undefined ? this.isAdvancedTaskForm : <any>null;
        data["isHostsEnabled"] = this.isHostsEnabled !== undefined ? this.isHostsEnabled : <any>null;
        data["isShowDurableAssets"] = this.isShowDurableAssets !== undefined ? this.isShowDurableAssets : <any>null;
        data["isTaskMaintenance"] = this.isTaskMaintenance !== undefined ? this.isTaskMaintenance : <any>null;
        data["isDisableLiteTasks"] = this.isDisableLiteTasks !== undefined ? this.isDisableLiteTasks : <any>null;
        data["isLimitAssetActionAdmin"] = this.isLimitAssetActionAdmin !== undefined ? this.isLimitAssetActionAdmin : <any>null;
        data["isRemovePriorityRooms"] = this.isRemovePriorityRooms !== undefined ? this.isRemovePriorityRooms : <any>null;
        data["isResetRoomDirty"] = this.isResetRoomDirty !== undefined ? this.isResetRoomDirty : <any>null;
        data["isPushDNDChangeSheets"] = this.isPushDNDChangeSheets !== undefined ? this.isPushDNDChangeSheets : <any>null;
        data["isChangeSheetsDelay"] = this.isChangeSheetsDelay !== undefined ? this.isChangeSheetsDelay : <any>null;
        data["changeSheetsInternval"] = this.changeSheetsInternval !== undefined ? this.changeSheetsInternval : <any>null;
        data["isChangeSheetsEnabled"] = this.isChangeSheetsEnabled !== undefined ? this.isChangeSheetsEnabled : <any>null;
        data["isAutomaticMessages"] = this.isAutomaticMessages !== undefined ? this.isAutomaticMessages : <any>null;
        data["isRemoveMessageNightly"] = this.isRemoveMessageNightly !== undefined ? this.isRemoveMessageNightly : <any>null;
        data["occupiedRoomsInterval"] = this.occupiedRoomsInterval !== undefined ? this.occupiedRoomsInterval : <any>null;
        data["isOccupiedRoomsInterval"] = this.isOccupiedRoomsInterval !== undefined ? this.isOccupiedRoomsInterval : <any>null;
        data["isAparthotelSettings"] = this.isAparthotelSettings !== undefined ? this.isAparthotelSettings : <any>null;
        data["isAllRoomsNightly"] = this.isAllRoomsNightly !== undefined ? this.isAllRoomsNightly : <any>null;
        data["isOccupiedRoomsDeparture"] = this.isOccupiedRoomsDeparture !== undefined ? this.isOccupiedRoomsDeparture : <any>null;
        data["isOccupiedRoomsNightly"] = this.isOccupiedRoomsNightly !== undefined ? this.isOccupiedRoomsNightly : <any>null;
        return data; 
    }
}

export interface IAttendantAppConfiguration {
    automaticChangeSheets: number;
    creditMinutes: number;
    departureMultiplier: number;
    disableChangeSheetsOnSoonDeparture: boolean;
    enabledTurndownCategories?: string[] | null;
    hotelId?: string | null;
    isAdminOnlyAssetCreate: boolean;
    isAdvancedRestockEnabled: boolean;
    isAllNightly: boolean;
    isEnableTurndown: boolean;
    isLFWaitingDisabled: boolean;
    isOCCNightly: boolean;
    isRemoveMessagesDaily: boolean;
    isRemovePriorityOnFinish: boolean;
    isRemovePriorityOnInspected: boolean;
    isRenotifyPN: boolean;
    isRoomNotesWebDisabled: boolean;
    isShowAllTaskCounts: boolean;
    isSimpleRestockEnabled: boolean;
    shouldResetDirty: boolean;
    stayMultiplier: number;
    vacantMultiplier: number;
    isDisableAttendantAudits: boolean;
    isEnableShowNonPlanned: boolean;
    isEnableRunnerRecentTasks: boolean;
    isDisableRunnerMarkExtras: boolean;
    isEnableRunnerExtra: boolean;
    isEnableRunnerInspection: boolean;
    isDisableRunnerAudits: boolean;
    isRequireRunnerInventoryConfirmation: boolean;
    isDisableRunnerExperience: boolean;
    isDisableRunnerTurndown: boolean;
    isDisableMaintenanceExperience: boolean;
    isDutyBackup: boolean;
    isDutyEnabled: boolean;
    isMaintenanceFiltersPersist: boolean;
    isRequireMaintenanceActionTasks: boolean;
    isDisableMaintenanceLiteTasks: boolean;
    isMaintenanceNotificationsPN: boolean;
    isMaintenanceLitePN: boolean;
    isMaintenanceNormalPN: boolean;
    isMaintenancePriorityPN: boolean;
    isEnableAttendantPlannings: boolean;
    isEnableAttendantAuditsCreate: boolean;
    isEnableAttendantAudits: boolean;
    isDisableAttendantExperience: boolean;
    isDisableAttendantTurndown: boolean;
    isEnableAttendantRecentTasks: boolean;
    isShowAttendantTasks: boolean;
    isDisableAttendantCreateNotes: boolean;
    isDisableAttendantMarkExtras: boolean;
    isRequireAttendantInventoryConfirmation: boolean;
    isDisableAttendantFinishCancel: boolean;
    isHideAttendantMaintenance: boolean;
    isHideAttendantInventory: boolean;
    isHideAttendantLF: boolean;
    isHideAttendantGallery: boolean;
    isHideAttendantNotes: boolean;
    isHideAttendantDescription: boolean;
    isHideAttendantCategory: boolean;
    isHideAttendantCredits: boolean;
    isHideAttendantMainFilter: boolean;
    isEnableVoucherDnd: boolean;
    isShowCreditsMain: boolean;
    isDisableAttendantCleaningLimit: boolean;
    isDisableAttendantPauseLimit: boolean;
    isDisablePMSNotesAttendantDep: boolean;
    isDisablePMSNotesAttendant: boolean;
    isAttendantNotificationsPN: boolean;
    isAttendantNormalPN: boolean;
    isAttendantPriorityPN: boolean;
    explicitWorkflowOccupied?: string | null;
    explicitWorkflowVacant?: string | null;
    isEnableExplicitAttendantWorkflow: boolean;
    isEnableAttendantWorkflow: boolean;
    attendantMinimumMinutes: number;
    isHideAttendantTimer: boolean;
    isDisableInspectorPlanning: boolean;
    isEnableInspectorConcierge: boolean;
    isDisableInspectorExperience: boolean;
    isDisableInspectorTurndown: boolean;
    isDisableRestocksDifferences: boolean;
    isRequireInspectorActionTasks: boolean;
    isDisableInspectorLiteTasks: boolean;
    isDisableUnblocksDifferences: boolean;
    isDisableMessagesDifferences: boolean;
    isDisablePriorityDifferences: boolean;
    isWebAutoLogout: boolean;
    isWebHotelScheduleEnabled: boolean;
    isDisablePlanningExportLongStay: boolean;
    isDisablePlanningExportChangeSheets: boolean;
    isDisablePlanningExportPriority: boolean;
    isDisablePlanningExportCredits: boolean;
    isDisablePlanningExportPMSNote: boolean;
    isDisablePlanningExportOccupants: boolean;
    isDisablePlanningExportName: boolean;
    isDisablePlanningExportCategory: boolean;
    isDisablePlanningExportHousekeeping: boolean;
    isLimitPlanningContainers: boolean;
    isDisableLFWaiting: boolean;
    isLegacyAttendantIcons: boolean;
    isDisableRoomNotesWeb: boolean;
    isShowAllTasks: boolean;
    isEnableMice: boolean;
    networkMessage?: string | null;
    isEnableAdvancedMessages: boolean;
    isEnableAudits: boolean;
    isUpgradedPlanningV3: boolean;
    isUpgradedPlanning: boolean;
    isAdvancedTaskForm: boolean;
    isHostsEnabled: boolean;
    isShowDurableAssets: boolean;
    isTaskMaintenance: boolean;
    isDisableLiteTasks: boolean;
    isLimitAssetActionAdmin: boolean;
    isRemovePriorityRooms: boolean;
    isResetRoomDirty: boolean;
    isPushDNDChangeSheets: boolean;
    isChangeSheetsDelay: boolean;
    changeSheetsInternval: number;
    isChangeSheetsEnabled: boolean;
    isAutomaticMessages: boolean;
    isRemoveMessageNightly: boolean;
    occupiedRoomsInterval: number;
    isOccupiedRoomsInterval: boolean;
    isAparthotelSettings: boolean;
    isAllRoomsNightly: boolean;
    isOccupiedRoomsDeparture: boolean;
    isOccupiedRoomsNightly: boolean;
}

export class GetAttendantMobileAppConfigurationQuery implements IGetAttendantMobileAppConfigurationQuery {
    userId!: string;

    constructor(data?: IGetAttendantMobileAppConfigurationQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
        }
    }

    static fromJS(data: any): GetAttendantMobileAppConfigurationQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAttendantMobileAppConfigurationQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        return data; 
    }
}

export interface IGetAttendantMobileAppConfigurationQuery {
    userId: string;
}

export class GetAttendantMobileAppConfigurationForHotelQuery implements IGetAttendantMobileAppConfigurationForHotelQuery {
    hotelName?: string | null;

    constructor(data?: IGetAttendantMobileAppConfigurationForHotelQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelName = _data["hotelName"] !== undefined ? _data["hotelName"] : <any>null;
        }
    }

    static fromJS(data: any): GetAttendantMobileAppConfigurationForHotelQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAttendantMobileAppConfigurationForHotelQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelName"] = this.hotelName !== undefined ? this.hotelName : <any>null;
        return data; 
    }
}

export interface IGetAttendantMobileAppConfigurationForHotelQuery {
    hotelName?: string | null;
}

export class MobileAsset implements IMobileAsset {
    id!: string;
    name?: string | null;
    imageUrl?: string | null;
    typeKey?: string | null;
    assetGroupId?: string | null;
    assetGroupName?: string | null;
    isBulk!: boolean;
    serialNumber?: string | null;
    tags?: string[] | null;

    constructor(data?: IMobileAsset) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.imageUrl = _data["imageUrl"] !== undefined ? _data["imageUrl"] : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            this.assetGroupName = _data["assetGroupName"] !== undefined ? _data["assetGroupName"] : <any>null;
            this.isBulk = _data["isBulk"] !== undefined ? _data["isBulk"] : <any>null;
            this.serialNumber = _data["serialNumber"] !== undefined ? _data["serialNumber"] : <any>null;
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(item);
            }
        }
    }

    static fromJS(data: any): MobileAsset {
        data = typeof data === 'object' ? data : {};
        let result = new MobileAsset();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["imageUrl"] = this.imageUrl !== undefined ? this.imageUrl : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        data["assetGroupName"] = this.assetGroupName !== undefined ? this.assetGroupName : <any>null;
        data["isBulk"] = this.isBulk !== undefined ? this.isBulk : <any>null;
        data["serialNumber"] = this.serialNumber !== undefined ? this.serialNumber : <any>null;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        return data; 
    }
}

export interface IMobileAsset {
    id: string;
    name?: string | null;
    imageUrl?: string | null;
    typeKey?: string | null;
    assetGroupId?: string | null;
    assetGroupName?: string | null;
    isBulk: boolean;
    serialNumber?: string | null;
    tags?: string[] | null;
}

export class GetListOfAssetsForMobileQuery implements IGetListOfAssetsForMobileQuery {

    constructor(data?: IGetListOfAssetsForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): GetListOfAssetsForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfAssetsForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IGetListOfAssetsForMobileQuery {
}

export class MobileAssetAction implements IMobileAssetAction {
    id!: string;
    assetGroupId?: string | null;
    assetGroupName?: string | null;
    name?: string | null;
    quickOrTimedKey?: string | null;
    priorityKey?: string | null;
    defaultAssignedToUserId?: string | null;
    defaultAssignedToUserGroupId?: string | null;
    defaultAssignedToUserSubGroupId?: string | null;
    credits?: number | null;
    price?: number | null;
    isSystemDefined!: boolean;
    systemActionTypeKey?: string | null;
    systemDefinedActionIdentifierKey?: string | null;

    constructor(data?: IMobileAssetAction) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            this.assetGroupName = _data["assetGroupName"] !== undefined ? _data["assetGroupName"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.quickOrTimedKey = _data["quickOrTimedKey"] !== undefined ? _data["quickOrTimedKey"] : <any>null;
            this.priorityKey = _data["priorityKey"] !== undefined ? _data["priorityKey"] : <any>null;
            this.defaultAssignedToUserId = _data["defaultAssignedToUserId"] !== undefined ? _data["defaultAssignedToUserId"] : <any>null;
            this.defaultAssignedToUserGroupId = _data["defaultAssignedToUserGroupId"] !== undefined ? _data["defaultAssignedToUserGroupId"] : <any>null;
            this.defaultAssignedToUserSubGroupId = _data["defaultAssignedToUserSubGroupId"] !== undefined ? _data["defaultAssignedToUserSubGroupId"] : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
            this.isSystemDefined = _data["isSystemDefined"] !== undefined ? _data["isSystemDefined"] : <any>null;
            this.systemActionTypeKey = _data["systemActionTypeKey"] !== undefined ? _data["systemActionTypeKey"] : <any>null;
            this.systemDefinedActionIdentifierKey = _data["systemDefinedActionIdentifierKey"] !== undefined ? _data["systemDefinedActionIdentifierKey"] : <any>null;
        }
    }

    static fromJS(data: any): MobileAssetAction {
        data = typeof data === 'object' ? data : {};
        let result = new MobileAssetAction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        data["assetGroupName"] = this.assetGroupName !== undefined ? this.assetGroupName : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["quickOrTimedKey"] = this.quickOrTimedKey !== undefined ? this.quickOrTimedKey : <any>null;
        data["priorityKey"] = this.priorityKey !== undefined ? this.priorityKey : <any>null;
        data["defaultAssignedToUserId"] = this.defaultAssignedToUserId !== undefined ? this.defaultAssignedToUserId : <any>null;
        data["defaultAssignedToUserGroupId"] = this.defaultAssignedToUserGroupId !== undefined ? this.defaultAssignedToUserGroupId : <any>null;
        data["defaultAssignedToUserSubGroupId"] = this.defaultAssignedToUserSubGroupId !== undefined ? this.defaultAssignedToUserSubGroupId : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["isSystemDefined"] = this.isSystemDefined !== undefined ? this.isSystemDefined : <any>null;
        data["systemActionTypeKey"] = this.systemActionTypeKey !== undefined ? this.systemActionTypeKey : <any>null;
        data["systemDefinedActionIdentifierKey"] = this.systemDefinedActionIdentifierKey !== undefined ? this.systemDefinedActionIdentifierKey : <any>null;
        return data; 
    }
}

export interface IMobileAssetAction {
    id: string;
    assetGroupId?: string | null;
    assetGroupName?: string | null;
    name?: string | null;
    quickOrTimedKey?: string | null;
    priorityKey?: string | null;
    defaultAssignedToUserId?: string | null;
    defaultAssignedToUserGroupId?: string | null;
    defaultAssignedToUserSubGroupId?: string | null;
    credits?: number | null;
    price?: number | null;
    isSystemDefined: boolean;
    systemActionTypeKey?: string | null;
    systemDefinedActionIdentifierKey?: string | null;
}

export class GetListOfAssetActionsForMobileQuery implements IGetListOfAssetActionsForMobileQuery {

    constructor(data?: IGetListOfAssetActionsForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): GetListOfAssetActionsForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfAssetActionsForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IGetListOfAssetActionsForMobileQuery {
}

export class CreateCustomCleaningForMobileCommand implements ICreateCustomCleaningForMobileCommand {
    hotelId?: string | null;
    description?: string | null;
    credits?: number | null;
    roomId!: string;
    roomBedId?: string | null;
    cleanerId!: string;
    changeSheets?: boolean | null;

    constructor(data?: ICreateCustomCleaningForMobileCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.roomBedId = _data["roomBedId"] !== undefined ? _data["roomBedId"] : <any>null;
            this.cleanerId = _data["cleanerId"] !== undefined ? _data["cleanerId"] : <any>null;
            this.changeSheets = _data["changeSheets"] !== undefined ? _data["changeSheets"] : <any>null;
        }
    }

    static fromJS(data: any): CreateCustomCleaningForMobileCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCustomCleaningForMobileCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["roomBedId"] = this.roomBedId !== undefined ? this.roomBedId : <any>null;
        data["cleanerId"] = this.cleanerId !== undefined ? this.cleanerId : <any>null;
        data["changeSheets"] = this.changeSheets !== undefined ? this.changeSheets : <any>null;
        return data; 
    }
}

export interface ICreateCustomCleaningForMobileCommand {
    hotelId?: string | null;
    description?: string | null;
    credits?: number | null;
    roomId: string;
    roomBedId?: string | null;
    cleanerId: string;
    changeSheets?: boolean | null;
}

export class CleaningForMobile implements ICleaningForMobile {
    id!: string;
    date_ts!: number;
    planning_date?: string | null;
    hotel_id?: string | null;
    room_id!: string;
    room_name?: string | null;
    bed_id?: string | null;
    bed_name?: string | null;
    planning_user_id!: string;
    planning_user_username?: string | null;
    planning_user_email?: string | null;
    planning_user_firstname?: string | null;
    planning_user_lastname?: string | null;
    creator_id?: string | null;
    credits!: number;
    is_priority!: number;
    is_change_sheets!: number;
    assigned_time?: string | null;
    guest_status?: string | null;
    scheduled_ts?: number | null;
    scheduled_order?: number | null;
    container_index?: number | null;
    secondary_user_id?: string | null;
    secondary_user_username?: string | null;
    secondary_user_firstname?: string | null;
    secondary_user_lastname?: string | null;
    name?: string | null;

    constructor(data?: ICleaningForMobile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.date_ts = _data["date_ts"] !== undefined ? _data["date_ts"] : <any>null;
            this.planning_date = _data["planning_date"] !== undefined ? _data["planning_date"] : <any>null;
            this.hotel_id = _data["hotel_id"] !== undefined ? _data["hotel_id"] : <any>null;
            this.room_id = _data["room_id"] !== undefined ? _data["room_id"] : <any>null;
            this.room_name = _data["room_name"] !== undefined ? _data["room_name"] : <any>null;
            this.bed_id = _data["bed_id"] !== undefined ? _data["bed_id"] : <any>null;
            this.bed_name = _data["bed_name"] !== undefined ? _data["bed_name"] : <any>null;
            this.planning_user_id = _data["planning_user_id"] !== undefined ? _data["planning_user_id"] : <any>null;
            this.planning_user_username = _data["planning_user_username"] !== undefined ? _data["planning_user_username"] : <any>null;
            this.planning_user_email = _data["planning_user_email"] !== undefined ? _data["planning_user_email"] : <any>null;
            this.planning_user_firstname = _data["planning_user_firstname"] !== undefined ? _data["planning_user_firstname"] : <any>null;
            this.planning_user_lastname = _data["planning_user_lastname"] !== undefined ? _data["planning_user_lastname"] : <any>null;
            this.creator_id = _data["creator_id"] !== undefined ? _data["creator_id"] : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
            this.is_priority = _data["is_priority"] !== undefined ? _data["is_priority"] : <any>null;
            this.is_change_sheets = _data["is_change_sheets"] !== undefined ? _data["is_change_sheets"] : <any>null;
            this.assigned_time = _data["assigned_time"] !== undefined ? _data["assigned_time"] : <any>null;
            this.guest_status = _data["guest_status"] !== undefined ? _data["guest_status"] : <any>null;
            this.scheduled_ts = _data["scheduled_ts"] !== undefined ? _data["scheduled_ts"] : <any>null;
            this.scheduled_order = _data["scheduled_order"] !== undefined ? _data["scheduled_order"] : <any>null;
            this.container_index = _data["container_index"] !== undefined ? _data["container_index"] : <any>null;
            this.secondary_user_id = _data["secondary_user_id"] !== undefined ? _data["secondary_user_id"] : <any>null;
            this.secondary_user_username = _data["secondary_user_username"] !== undefined ? _data["secondary_user_username"] : <any>null;
            this.secondary_user_firstname = _data["secondary_user_firstname"] !== undefined ? _data["secondary_user_firstname"] : <any>null;
            this.secondary_user_lastname = _data["secondary_user_lastname"] !== undefined ? _data["secondary_user_lastname"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): CleaningForMobile {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningForMobile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["date_ts"] = this.date_ts !== undefined ? this.date_ts : <any>null;
        data["planning_date"] = this.planning_date !== undefined ? this.planning_date : <any>null;
        data["hotel_id"] = this.hotel_id !== undefined ? this.hotel_id : <any>null;
        data["room_id"] = this.room_id !== undefined ? this.room_id : <any>null;
        data["room_name"] = this.room_name !== undefined ? this.room_name : <any>null;
        data["bed_id"] = this.bed_id !== undefined ? this.bed_id : <any>null;
        data["bed_name"] = this.bed_name !== undefined ? this.bed_name : <any>null;
        data["planning_user_id"] = this.planning_user_id !== undefined ? this.planning_user_id : <any>null;
        data["planning_user_username"] = this.planning_user_username !== undefined ? this.planning_user_username : <any>null;
        data["planning_user_email"] = this.planning_user_email !== undefined ? this.planning_user_email : <any>null;
        data["planning_user_firstname"] = this.planning_user_firstname !== undefined ? this.planning_user_firstname : <any>null;
        data["planning_user_lastname"] = this.planning_user_lastname !== undefined ? this.planning_user_lastname : <any>null;
        data["creator_id"] = this.creator_id !== undefined ? this.creator_id : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        data["is_priority"] = this.is_priority !== undefined ? this.is_priority : <any>null;
        data["is_change_sheets"] = this.is_change_sheets !== undefined ? this.is_change_sheets : <any>null;
        data["assigned_time"] = this.assigned_time !== undefined ? this.assigned_time : <any>null;
        data["guest_status"] = this.guest_status !== undefined ? this.guest_status : <any>null;
        data["scheduled_ts"] = this.scheduled_ts !== undefined ? this.scheduled_ts : <any>null;
        data["scheduled_order"] = this.scheduled_order !== undefined ? this.scheduled_order : <any>null;
        data["container_index"] = this.container_index !== undefined ? this.container_index : <any>null;
        data["secondary_user_id"] = this.secondary_user_id !== undefined ? this.secondary_user_id : <any>null;
        data["secondary_user_username"] = this.secondary_user_username !== undefined ? this.secondary_user_username : <any>null;
        data["secondary_user_firstname"] = this.secondary_user_firstname !== undefined ? this.secondary_user_firstname : <any>null;
        data["secondary_user_lastname"] = this.secondary_user_lastname !== undefined ? this.secondary_user_lastname : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data; 
    }
}

export interface ICleaningForMobile {
    id: string;
    date_ts: number;
    planning_date?: string | null;
    hotel_id?: string | null;
    room_id: string;
    room_name?: string | null;
    bed_id?: string | null;
    bed_name?: string | null;
    planning_user_id: string;
    planning_user_username?: string | null;
    planning_user_email?: string | null;
    planning_user_firstname?: string | null;
    planning_user_lastname?: string | null;
    creator_id?: string | null;
    credits: number;
    is_priority: number;
    is_change_sheets: number;
    assigned_time?: string | null;
    guest_status?: string | null;
    scheduled_ts?: number | null;
    scheduled_order?: number | null;
    container_index?: number | null;
    secondary_user_id?: string | null;
    secondary_user_username?: string | null;
    secondary_user_firstname?: string | null;
    secondary_user_lastname?: string | null;
    name?: string | null;
}

export class CleaningDetailsForMobile extends CleaningForMobile implements ICleaningDetailsForMobile {

    constructor(data?: ICleaningDetailsForMobile) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): CleaningDetailsForMobile {
        data = typeof data === 'object' ? data : {};
        let result = new CleaningDetailsForMobile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ICleaningDetailsForMobile extends ICleaningForMobile {
}

export class GetCleaningDetailsForMobileQuery implements IGetCleaningDetailsForMobileQuery {
    hotelId?: string | null;
    roomId!: string;

    constructor(data?: IGetCleaningDetailsForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
        }
    }

    static fromJS(data: any): GetCleaningDetailsForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetCleaningDetailsForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        return data; 
    }
}

export interface IGetCleaningDetailsForMobileQuery {
    hotelId?: string | null;
    roomId: string;
}

export class GetListOfCleaningsForMobileQuery implements IGetListOfCleaningsForMobileQuery {
    hotelId?: string | null;

    constructor(data?: IGetListOfCleaningsForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): GetListOfCleaningsForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfCleaningsForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IGetListOfCleaningsForMobileQuery {
    hotelId?: string | null;
}

export class GetListOfCleaningsForInspectionForMobileQuery implements IGetListOfCleaningsForInspectionForMobileQuery {
    hotelId?: string | null;

    constructor(data?: IGetListOfCleaningsForInspectionForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): GetListOfCleaningsForInspectionForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfCleaningsForInspectionForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IGetListOfCleaningsForInspectionForMobileQuery {
    hotelId?: string | null;
}

export class MobileRoomDetails implements IMobileRoomDetails {
    name?: string | null;
    pmsName?: string | null;
    description?: string | null;
    hotelId?: string | null;
    roomAccessId?: string | null;
    roomCategoryId?: string | null;
    roomStatusId?: string | null;
    roomMaintenanceId?: string | null;
    roomHousekeepingId?: string | null;
    comment?: string | null;
    roomNoteId?: string | null;
    overwriteCredits!: number;
    lastDate!: moment.Moment;
    attendantStatus?: string | null;
    attendantStatusNight?: string | null;
    turndownService?: string | null;
    isGuestIn!: boolean;
    isChangeSheets!: boolean;
    isLongStay!: boolean;
    isRoomBlocked!: boolean;
    isRoomRestocked!: boolean;
    sortValue!: number;
    section?: string | null;
    subSection?: string | null;
    tags?: string[] | null;
    features?: string[] | null;
    sublocations?: string[] | null;
    updateUsername?: string | null;
    updateType?: string | null;
    updateTs?: number | null;
    updateTapTs?: number | null;
    externalInfoId?: string | null;
    id!: string;
    floorId?: string | null;
    floorName?: string | null;
    floorNumber?: number | null;
    buildingId?: string | null;
    buildingName?: string | null;
    isTemporaryRoom!: boolean;
    typeKey?: string | null;

    constructor(data?: IMobileRoomDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.pmsName = _data["pmsName"] !== undefined ? _data["pmsName"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.roomAccessId = _data["roomAccessId"] !== undefined ? _data["roomAccessId"] : <any>null;
            this.roomCategoryId = _data["roomCategoryId"] !== undefined ? _data["roomCategoryId"] : <any>null;
            this.roomStatusId = _data["roomStatusId"] !== undefined ? _data["roomStatusId"] : <any>null;
            this.roomMaintenanceId = _data["roomMaintenanceId"] !== undefined ? _data["roomMaintenanceId"] : <any>null;
            this.roomHousekeepingId = _data["roomHousekeepingId"] !== undefined ? _data["roomHousekeepingId"] : <any>null;
            this.comment = _data["comment"] !== undefined ? _data["comment"] : <any>null;
            this.roomNoteId = _data["roomNoteId"] !== undefined ? _data["roomNoteId"] : <any>null;
            this.overwriteCredits = _data["overwriteCredits"] !== undefined ? _data["overwriteCredits"] : <any>null;
            this.lastDate = _data["lastDate"] ? moment(_data["lastDate"].toString()) : <any>null;
            this.attendantStatus = _data["attendantStatus"] !== undefined ? _data["attendantStatus"] : <any>null;
            this.attendantStatusNight = _data["attendantStatusNight"] !== undefined ? _data["attendantStatusNight"] : <any>null;
            this.turndownService = _data["turndownService"] !== undefined ? _data["turndownService"] : <any>null;
            this.isGuestIn = _data["isGuestIn"] !== undefined ? _data["isGuestIn"] : <any>null;
            this.isChangeSheets = _data["isChangeSheets"] !== undefined ? _data["isChangeSheets"] : <any>null;
            this.isLongStay = _data["isLongStay"] !== undefined ? _data["isLongStay"] : <any>null;
            this.isRoomBlocked = _data["isRoomBlocked"] !== undefined ? _data["isRoomBlocked"] : <any>null;
            this.isRoomRestocked = _data["isRoomRestocked"] !== undefined ? _data["isRoomRestocked"] : <any>null;
            this.sortValue = _data["sortValue"] !== undefined ? _data["sortValue"] : <any>null;
            this.section = _data["section"] !== undefined ? _data["section"] : <any>null;
            this.subSection = _data["subSection"] !== undefined ? _data["subSection"] : <any>null;
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(item);
            }
            if (Array.isArray(_data["features"])) {
                this.features = [] as any;
                for (let item of _data["features"])
                    this.features!.push(item);
            }
            if (Array.isArray(_data["sublocations"])) {
                this.sublocations = [] as any;
                for (let item of _data["sublocations"])
                    this.sublocations!.push(item);
            }
            this.updateUsername = _data["updateUsername"] !== undefined ? _data["updateUsername"] : <any>null;
            this.updateType = _data["updateType"] !== undefined ? _data["updateType"] : <any>null;
            this.updateTs = _data["updateTs"] !== undefined ? _data["updateTs"] : <any>null;
            this.updateTapTs = _data["updateTapTs"] !== undefined ? _data["updateTapTs"] : <any>null;
            this.externalInfoId = _data["externalInfoId"] !== undefined ? _data["externalInfoId"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.floorId = _data["floorId"] !== undefined ? _data["floorId"] : <any>null;
            this.floorName = _data["floorName"] !== undefined ? _data["floorName"] : <any>null;
            this.floorNumber = _data["floorNumber"] !== undefined ? _data["floorNumber"] : <any>null;
            this.buildingId = _data["buildingId"] !== undefined ? _data["buildingId"] : <any>null;
            this.buildingName = _data["buildingName"] !== undefined ? _data["buildingName"] : <any>null;
            this.isTemporaryRoom = _data["isTemporaryRoom"] !== undefined ? _data["isTemporaryRoom"] : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
        }
    }

    static fromJS(data: any): MobileRoomDetails {
        data = typeof data === 'object' ? data : {};
        let result = new MobileRoomDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["pmsName"] = this.pmsName !== undefined ? this.pmsName : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["roomAccessId"] = this.roomAccessId !== undefined ? this.roomAccessId : <any>null;
        data["roomCategoryId"] = this.roomCategoryId !== undefined ? this.roomCategoryId : <any>null;
        data["roomStatusId"] = this.roomStatusId !== undefined ? this.roomStatusId : <any>null;
        data["roomMaintenanceId"] = this.roomMaintenanceId !== undefined ? this.roomMaintenanceId : <any>null;
        data["roomHousekeepingId"] = this.roomHousekeepingId !== undefined ? this.roomHousekeepingId : <any>null;
        data["comment"] = this.comment !== undefined ? this.comment : <any>null;
        data["roomNoteId"] = this.roomNoteId !== undefined ? this.roomNoteId : <any>null;
        data["overwriteCredits"] = this.overwriteCredits !== undefined ? this.overwriteCredits : <any>null;
        data["lastDate"] = this.lastDate ? this.lastDate.toISOString() : <any>null;
        data["attendantStatus"] = this.attendantStatus !== undefined ? this.attendantStatus : <any>null;
        data["attendantStatusNight"] = this.attendantStatusNight !== undefined ? this.attendantStatusNight : <any>null;
        data["turndownService"] = this.turndownService !== undefined ? this.turndownService : <any>null;
        data["isGuestIn"] = this.isGuestIn !== undefined ? this.isGuestIn : <any>null;
        data["isChangeSheets"] = this.isChangeSheets !== undefined ? this.isChangeSheets : <any>null;
        data["isLongStay"] = this.isLongStay !== undefined ? this.isLongStay : <any>null;
        data["isRoomBlocked"] = this.isRoomBlocked !== undefined ? this.isRoomBlocked : <any>null;
        data["isRoomRestocked"] = this.isRoomRestocked !== undefined ? this.isRoomRestocked : <any>null;
        data["sortValue"] = this.sortValue !== undefined ? this.sortValue : <any>null;
        data["section"] = this.section !== undefined ? this.section : <any>null;
        data["subSection"] = this.subSection !== undefined ? this.subSection : <any>null;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        if (Array.isArray(this.features)) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item);
        }
        if (Array.isArray(this.sublocations)) {
            data["sublocations"] = [];
            for (let item of this.sublocations)
                data["sublocations"].push(item);
        }
        data["updateUsername"] = this.updateUsername !== undefined ? this.updateUsername : <any>null;
        data["updateType"] = this.updateType !== undefined ? this.updateType : <any>null;
        data["updateTs"] = this.updateTs !== undefined ? this.updateTs : <any>null;
        data["updateTapTs"] = this.updateTapTs !== undefined ? this.updateTapTs : <any>null;
        data["externalInfoId"] = this.externalInfoId !== undefined ? this.externalInfoId : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["floorId"] = this.floorId !== undefined ? this.floorId : <any>null;
        data["floorName"] = this.floorName !== undefined ? this.floorName : <any>null;
        data["floorNumber"] = this.floorNumber !== undefined ? this.floorNumber : <any>null;
        data["buildingId"] = this.buildingId !== undefined ? this.buildingId : <any>null;
        data["buildingName"] = this.buildingName !== undefined ? this.buildingName : <any>null;
        data["isTemporaryRoom"] = this.isTemporaryRoom !== undefined ? this.isTemporaryRoom : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        return data; 
    }
}

export interface IMobileRoomDetails {
    name?: string | null;
    pmsName?: string | null;
    description?: string | null;
    hotelId?: string | null;
    roomAccessId?: string | null;
    roomCategoryId?: string | null;
    roomStatusId?: string | null;
    roomMaintenanceId?: string | null;
    roomHousekeepingId?: string | null;
    comment?: string | null;
    roomNoteId?: string | null;
    overwriteCredits: number;
    lastDate: moment.Moment;
    attendantStatus?: string | null;
    attendantStatusNight?: string | null;
    turndownService?: string | null;
    isGuestIn: boolean;
    isChangeSheets: boolean;
    isLongStay: boolean;
    isRoomBlocked: boolean;
    isRoomRestocked: boolean;
    sortValue: number;
    section?: string | null;
    subSection?: string | null;
    tags?: string[] | null;
    features?: string[] | null;
    sublocations?: string[] | null;
    updateUsername?: string | null;
    updateType?: string | null;
    updateTs?: number | null;
    updateTapTs?: number | null;
    externalInfoId?: string | null;
    id: string;
    floorId?: string | null;
    floorName?: string | null;
    floorNumber?: number | null;
    buildingId?: string | null;
    buildingName?: string | null;
    isTemporaryRoom: boolean;
    typeKey?: string | null;
}

export class ExtendedMobileRoomDetails extends MobileRoomDetails implements IExtendedMobileRoomDetails {
    housekeepingStatus?: MobileRoomHousekeepingStatus | null;
    roomStatus?: MobileRoomStatus | null;

    constructor(data?: IExtendedMobileRoomDetails) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.housekeepingStatus = _data["housekeepingStatus"] ? MobileRoomHousekeepingStatus.fromJS(_data["housekeepingStatus"]) : <any>null;
            this.roomStatus = _data["roomStatus"] ? MobileRoomStatus.fromJS(_data["roomStatus"]) : <any>null;
        }
    }

    static fromJS(data: any): ExtendedMobileRoomDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ExtendedMobileRoomDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["housekeepingStatus"] = this.housekeepingStatus ? this.housekeepingStatus.toJSON() : <any>null;
        data["roomStatus"] = this.roomStatus ? this.roomStatus.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IExtendedMobileRoomDetails extends IMobileRoomDetails {
    housekeepingStatus?: MobileRoomHousekeepingStatus | null;
    roomStatus?: MobileRoomStatus | null;
}

export class MobileRoomHousekeepingStatus implements IMobileRoomHousekeepingStatus {
    id!: string;
    roomId!: string;
    label?: string | null;
    code?: string | null;
    color?: string | null;
    hotelId?: string | null;

    constructor(data?: IMobileRoomHousekeepingStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.label = _data["label"] !== undefined ? _data["label"] : <any>null;
            this.code = _data["code"] !== undefined ? _data["code"] : <any>null;
            this.color = _data["color"] !== undefined ? _data["color"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): MobileRoomHousekeepingStatus {
        data = typeof data === 'object' ? data : {};
        let result = new MobileRoomHousekeepingStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["label"] = this.label !== undefined ? this.label : <any>null;
        data["code"] = this.code !== undefined ? this.code : <any>null;
        data["color"] = this.color !== undefined ? this.color : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IMobileRoomHousekeepingStatus {
    id: string;
    roomId: string;
    label?: string | null;
    code?: string | null;
    color?: string | null;
    hotelId?: string | null;
}

export class MobileRoomStatus implements IMobileRoomStatus {
    id!: string;
    roomId!: string;
    label?: string | null;
    code?: string | null;
    color?: string | null;
    hotelId?: string | null;

    constructor(data?: IMobileRoomStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.label = _data["label"] !== undefined ? _data["label"] : <any>null;
            this.code = _data["code"] !== undefined ? _data["code"] : <any>null;
            this.color = _data["color"] !== undefined ? _data["color"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): MobileRoomStatus {
        data = typeof data === 'object' ? data : {};
        let result = new MobileRoomStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["label"] = this.label !== undefined ? this.label : <any>null;
        data["code"] = this.code !== undefined ? this.code : <any>null;
        data["color"] = this.color !== undefined ? this.color : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IMobileRoomStatus {
    id: string;
    roomId: string;
    label?: string | null;
    code?: string | null;
    color?: string | null;
    hotelId?: string | null;
}

export class UpdateCleaningStatusCommand implements IUpdateCleaningStatusCommand {
    cleaningId!: string;
    status?: string | null;
    timeStamp!: number;

    constructor(data?: IUpdateCleaningStatusCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cleaningId = _data["cleaningId"] !== undefined ? _data["cleaningId"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.timeStamp = _data["timeStamp"] !== undefined ? _data["timeStamp"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateCleaningStatusCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCleaningStatusCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cleaningId"] = this.cleaningId !== undefined ? this.cleaningId : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["timeStamp"] = this.timeStamp !== undefined ? this.timeStamp : <any>null;
        return data; 
    }
}

export interface IUpdateCleaningStatusCommand {
    cleaningId: string;
    status?: string | null;
    timeStamp: number;
}

export class UpdateInspectionStatusCommand implements IUpdateInspectionStatusCommand {
    cleaningId!: string;
    status?: string | null;
    timeStamp!: number;

    constructor(data?: IUpdateInspectionStatusCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cleaningId = _data["cleaningId"] !== undefined ? _data["cleaningId"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.timeStamp = _data["timeStamp"] !== undefined ? _data["timeStamp"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateInspectionStatusCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateInspectionStatusCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cleaningId"] = this.cleaningId !== undefined ? this.cleaningId : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["timeStamp"] = this.timeStamp !== undefined ? this.timeStamp : <any>null;
        return data; 
    }
}

export interface IUpdateInspectionStatusCommand {
    cleaningId: string;
    status?: string | null;
    timeStamp: number;
}

export class MobileFloorDetails implements IMobileFloorDetails {
    id!: string;
    number?: string | null;
    description?: string | null;
    hotelId?: string | null;
    lastAction?: string | null;
    lastDate!: moment.Moment;

    constructor(data?: IMobileFloorDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.number = _data["number"] !== undefined ? _data["number"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.lastAction = _data["lastAction"] !== undefined ? _data["lastAction"] : <any>null;
            this.lastDate = _data["lastDate"] ? moment(_data["lastDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): MobileFloorDetails {
        data = typeof data === 'object' ? data : {};
        let result = new MobileFloorDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["number"] = this.number !== undefined ? this.number : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["lastAction"] = this.lastAction !== undefined ? this.lastAction : <any>null;
        data["lastDate"] = this.lastDate ? this.lastDate.toISOString() : <any>null;
        return data; 
    }
}

export interface IMobileFloorDetails {
    id: string;
    number?: string | null;
    description?: string | null;
    hotelId?: string | null;
    lastAction?: string | null;
    lastDate: moment.Moment;
}

export class GetFloorDetailsForMobileQuery implements IGetFloorDetailsForMobileQuery {
    id!: string;

    constructor(data?: IGetFloorDetailsForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): GetFloorDetailsForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetFloorDetailsForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IGetFloorDetailsForMobileQuery {
    id: string;
}

export class MobileFloor implements IMobileFloor {
    id!: string;
    number?: string | null;
    description?: string | null;
    hotelId?: string | null;
    lastAction?: string | null;
    lastDate!: moment.Moment;

    constructor(data?: IMobileFloor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.number = _data["number"] !== undefined ? _data["number"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.lastAction = _data["lastAction"] !== undefined ? _data["lastAction"] : <any>null;
            this.lastDate = _data["lastDate"] ? moment(_data["lastDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): MobileFloor {
        data = typeof data === 'object' ? data : {};
        let result = new MobileFloor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["number"] = this.number !== undefined ? this.number : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["lastAction"] = this.lastAction !== undefined ? this.lastAction : <any>null;
        data["lastDate"] = this.lastDate ? this.lastDate.toISOString() : <any>null;
        return data; 
    }
}

export interface IMobileFloor {
    id: string;
    number?: string | null;
    description?: string | null;
    hotelId?: string | null;
    lastAction?: string | null;
    lastDate: moment.Moment;
}

export class GetListOfFloorsForMobileQuery implements IGetListOfFloorsForMobileQuery {
    hotelId?: string | null;

    constructor(data?: IGetListOfFloorsForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): GetListOfFloorsForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfFloorsForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IGetListOfFloorsForMobileQuery {
    hotelId?: string | null;
}

export class MobileFoundItem implements IMobileFoundItem {
    id!: string;
    hotel_id?: string | null;
    room_id?: string | null;
    room_name?: string | null;
    location?: string | null;
    guest_name?: string | null;
    date_ts!: number;
    name_or_description?: string | null;
    category?: string | null;
    image?: string | null;
    log_date?: string | null;
    pending_message?: string | null;
    user_id!: string;
    user_username?: string | null;
    user_email?: string | null;
    user_first_name?: string | null;
    user_last_name?: string | null;
    last_user_id!: string;
    held?: string | null;
    status?: string | null;
    is_closed!: number;
    reference?: string | null;
    notes?: string | null;
    signature?: string | null;
    added_image_one?: string | null;
    added_image_two?: string | null;

    constructor(data?: IMobileFoundItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.hotel_id = _data["hotel_id"] !== undefined ? _data["hotel_id"] : <any>null;
            this.room_id = _data["room_id"] !== undefined ? _data["room_id"] : <any>null;
            this.room_name = _data["room_name"] !== undefined ? _data["room_name"] : <any>null;
            this.location = _data["location"] !== undefined ? _data["location"] : <any>null;
            this.guest_name = _data["guest_name"] !== undefined ? _data["guest_name"] : <any>null;
            this.date_ts = _data["date_ts"] !== undefined ? _data["date_ts"] : <any>null;
            this.name_or_description = _data["name_or_description"] !== undefined ? _data["name_or_description"] : <any>null;
            this.category = _data["category"] !== undefined ? _data["category"] : <any>null;
            this.image = _data["image"] !== undefined ? _data["image"] : <any>null;
            this.log_date = _data["log_date"] !== undefined ? _data["log_date"] : <any>null;
            this.pending_message = _data["pending_message"] !== undefined ? _data["pending_message"] : <any>null;
            this.user_id = _data["user_id"] !== undefined ? _data["user_id"] : <any>null;
            this.user_username = _data["user_username"] !== undefined ? _data["user_username"] : <any>null;
            this.user_email = _data["user_email"] !== undefined ? _data["user_email"] : <any>null;
            this.user_first_name = _data["user_first_name"] !== undefined ? _data["user_first_name"] : <any>null;
            this.user_last_name = _data["user_last_name"] !== undefined ? _data["user_last_name"] : <any>null;
            this.last_user_id = _data["last_user_id"] !== undefined ? _data["last_user_id"] : <any>null;
            this.held = _data["held"] !== undefined ? _data["held"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.is_closed = _data["is_closed"] !== undefined ? _data["is_closed"] : <any>null;
            this.reference = _data["reference"] !== undefined ? _data["reference"] : <any>null;
            this.notes = _data["notes"] !== undefined ? _data["notes"] : <any>null;
            this.signature = _data["signature"] !== undefined ? _data["signature"] : <any>null;
            this.added_image_one = _data["added_image_one"] !== undefined ? _data["added_image_one"] : <any>null;
            this.added_image_two = _data["added_image_two"] !== undefined ? _data["added_image_two"] : <any>null;
        }
    }

    static fromJS(data: any): MobileFoundItem {
        data = typeof data === 'object' ? data : {};
        let result = new MobileFoundItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["hotel_id"] = this.hotel_id !== undefined ? this.hotel_id : <any>null;
        data["room_id"] = this.room_id !== undefined ? this.room_id : <any>null;
        data["room_name"] = this.room_name !== undefined ? this.room_name : <any>null;
        data["location"] = this.location !== undefined ? this.location : <any>null;
        data["guest_name"] = this.guest_name !== undefined ? this.guest_name : <any>null;
        data["date_ts"] = this.date_ts !== undefined ? this.date_ts : <any>null;
        data["name_or_description"] = this.name_or_description !== undefined ? this.name_or_description : <any>null;
        data["category"] = this.category !== undefined ? this.category : <any>null;
        data["image"] = this.image !== undefined ? this.image : <any>null;
        data["log_date"] = this.log_date !== undefined ? this.log_date : <any>null;
        data["pending_message"] = this.pending_message !== undefined ? this.pending_message : <any>null;
        data["user_id"] = this.user_id !== undefined ? this.user_id : <any>null;
        data["user_username"] = this.user_username !== undefined ? this.user_username : <any>null;
        data["user_email"] = this.user_email !== undefined ? this.user_email : <any>null;
        data["user_first_name"] = this.user_first_name !== undefined ? this.user_first_name : <any>null;
        data["user_last_name"] = this.user_last_name !== undefined ? this.user_last_name : <any>null;
        data["last_user_id"] = this.last_user_id !== undefined ? this.last_user_id : <any>null;
        data["held"] = this.held !== undefined ? this.held : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["is_closed"] = this.is_closed !== undefined ? this.is_closed : <any>null;
        data["reference"] = this.reference !== undefined ? this.reference : <any>null;
        data["notes"] = this.notes !== undefined ? this.notes : <any>null;
        data["signature"] = this.signature !== undefined ? this.signature : <any>null;
        data["added_image_one"] = this.added_image_one !== undefined ? this.added_image_one : <any>null;
        data["added_image_two"] = this.added_image_two !== undefined ? this.added_image_two : <any>null;
        return data; 
    }
}

export interface IMobileFoundItem {
    id: string;
    hotel_id?: string | null;
    room_id?: string | null;
    room_name?: string | null;
    location?: string | null;
    guest_name?: string | null;
    date_ts: number;
    name_or_description?: string | null;
    category?: string | null;
    image?: string | null;
    log_date?: string | null;
    pending_message?: string | null;
    user_id: string;
    user_username?: string | null;
    user_email?: string | null;
    user_first_name?: string | null;
    user_last_name?: string | null;
    last_user_id: string;
    held?: string | null;
    status?: string | null;
    is_closed: number;
    reference?: string | null;
    notes?: string | null;
    signature?: string | null;
    added_image_one?: string | null;
    added_image_two?: string | null;
}

export class GetListOfFoundsForMobileQuery implements IGetListOfFoundsForMobileQuery {
    hotelId?: string | null;

    constructor(data?: IGetListOfFoundsForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): GetListOfFoundsForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfFoundsForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IGetListOfFoundsForMobileQuery {
    hotelId?: string | null;
}

export class SaveFoundForMobileCommand implements ISaveFoundForMobileCommand {
    hotelId?: string | null;
    room_id!: string;
    guest_name?: string | null;
    location?: string | null;
    category?: string | null;
    name_or_description?: string | null;
    image?: string | null;
    status?: string | null;
    pending_message?: string | null;
    notes?: string | null;
    reference?: string | null;

    constructor(data?: ISaveFoundForMobileCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.room_id = _data["room_id"] !== undefined ? _data["room_id"] : <any>null;
            this.guest_name = _data["guest_name"] !== undefined ? _data["guest_name"] : <any>null;
            this.location = _data["location"] !== undefined ? _data["location"] : <any>null;
            this.category = _data["category"] !== undefined ? _data["category"] : <any>null;
            this.name_or_description = _data["name_or_description"] !== undefined ? _data["name_or_description"] : <any>null;
            this.image = _data["image"] !== undefined ? _data["image"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.pending_message = _data["pending_message"] !== undefined ? _data["pending_message"] : <any>null;
            this.notes = _data["notes"] !== undefined ? _data["notes"] : <any>null;
            this.reference = _data["reference"] !== undefined ? _data["reference"] : <any>null;
        }
    }

    static fromJS(data: any): SaveFoundForMobileCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SaveFoundForMobileCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["room_id"] = this.room_id !== undefined ? this.room_id : <any>null;
        data["guest_name"] = this.guest_name !== undefined ? this.guest_name : <any>null;
        data["location"] = this.location !== undefined ? this.location : <any>null;
        data["category"] = this.category !== undefined ? this.category : <any>null;
        data["name_or_description"] = this.name_or_description !== undefined ? this.name_or_description : <any>null;
        data["image"] = this.image !== undefined ? this.image : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["pending_message"] = this.pending_message !== undefined ? this.pending_message : <any>null;
        data["notes"] = this.notes !== undefined ? this.notes : <any>null;
        data["reference"] = this.reference !== undefined ? this.reference : <any>null;
        return data; 
    }
}

export interface ISaveFoundForMobileCommand {
    hotelId?: string | null;
    room_id: string;
    guest_name?: string | null;
    location?: string | null;
    category?: string | null;
    name_or_description?: string | null;
    image?: string | null;
    status?: string | null;
    pending_message?: string | null;
    notes?: string | null;
    reference?: string | null;
}

export class InsertFoundForMobileCommand extends SaveFoundForMobileCommand implements IInsertFoundForMobileCommand {

    constructor(data?: IInsertFoundForMobileCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): InsertFoundForMobileCommand {
        data = typeof data === 'object' ? data : {};
        let result = new InsertFoundForMobileCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IInsertFoundForMobileCommand extends ISaveFoundForMobileCommand {
}

export class UpdateFoundForMobileCommand extends SaveFoundForMobileCommand implements IUpdateFoundForMobileCommand {
    id!: string;
    is_closed!: boolean;

    constructor(data?: IUpdateFoundForMobileCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.is_closed = _data["is_closed"] !== undefined ? _data["is_closed"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateFoundForMobileCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateFoundForMobileCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["is_closed"] = this.is_closed !== undefined ? this.is_closed : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IUpdateFoundForMobileCommand extends ISaveFoundForMobileCommand {
    id: string;
    is_closed: boolean;
}

export class SimpleProcessResponse implements ISimpleProcessResponse {
    success!: boolean;

    constructor(data?: ISimpleProcessResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"] !== undefined ? _data["success"] : <any>null;
        }
    }

    static fromJS(data: any): SimpleProcessResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SimpleProcessResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        return data; 
    }
}

export interface ISimpleProcessResponse {
    success: boolean;
}

export class UpdateFoundImageForMobileCommand implements IUpdateFoundImageForMobileCommand {
    hotelId?: string | null;
    id!: string;
    photoUrl?: string | null;

    constructor(data?: IUpdateFoundImageForMobileCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.photoUrl = _data["photoUrl"] !== undefined ? _data["photoUrl"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateFoundImageForMobileCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateFoundImageForMobileCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["photoUrl"] = this.photoUrl !== undefined ? this.photoUrl : <any>null;
        return data; 
    }
}

export interface IUpdateFoundImageForMobileCommand {
    hotelId?: string | null;
    id: string;
    photoUrl?: string | null;
}

export class DeleteFoundForMobileCommand implements IDeleteFoundForMobileCommand {
    hotelId?: string | null;
    id!: string;

    constructor(data?: IDeleteFoundForMobileCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteFoundForMobileCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteFoundForMobileCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IDeleteFoundForMobileCommand {
    hotelId?: string | null;
    id: string;
}

export class MobileHotelDetails implements IMobileHotelDetails {
    id?: string | null;
    city?: string | null;
    country?: string | null;
    images?: string | null;
    name?: string | null;
    phone?: string | null;
    remarks?: string | null;
    state?: string | null;
    street?: string | null;
    thumbnail?: string | null;
    username?: string | null;
    zip?: string | null;
    modules?: MobileHotelModuleDetails | null;
    isHideCleaningData!: boolean;
    isLimitAttendantContainers!: boolean;
    isRemoveMessagesDaily!: boolean;
    isRenotifyPN!: boolean;
    isWebAttendantIcons!: boolean;
    isAdminOnlyAssetCreate!: boolean;
    isRemovePriorityOnFinish!: boolean;
    isShowAllTaskCounts!: boolean;
    isInspectionRemovesPriority!: boolean;
    isAttendantDisablePMSNotes!: boolean;
    isAttendantTaskNotes!: boolean;
    escalationPhones?: string[] | null;
    explicitOccupiedWorkflow?: string | null;
    explicitVacantWorkflow?: string | null;
    isExplicitWorkflow!: boolean;
    isAttendantPriorityColor!: boolean;
    shouldResetDirty!: boolean;
    isHostEnabled!: boolean;
    isRestockEnabled!: boolean;
    isAttendantImmediateTasks!: boolean;
    isAttendantOneStep!: boolean;
    isAttendantNotificationPN!: boolean;
    isAttendantLitePN!: boolean;
    isAttendantNormalPN!: boolean;
    isAttendantPriorityPN!: boolean;
    isMaintenanceNotificationPN!: boolean;
    isMaintenanceLitePN!: boolean;
    isMaintenanceNormalPN!: boolean;
    isMaintenancePriorityPN!: boolean;
    isDisableDNDPhoto!: boolean;
    isDisablePMSNotesDEP!: boolean;
    isTaskMaintenance!: boolean;
    isRoomNotesAttendantDisabled!: boolean;
    isRoomNotesInspectorDisabled!: boolean;
    isRoomNotesWebDisabled!: boolean;
    nightPlanningTime!: number;
    isPlanningNightEnabled!: boolean;
    isLFWaitingDisabled!: boolean;
    isEnabledMaintenanceUnassigned!: boolean;
    disableGuestLocator!: boolean;
    attendantDefaultView?: string | null;
    isAttendantBypass!: boolean;
    isAttendantWorkflow!: boolean;
    timezone!: number;
    attendantCancelMinutes!: number;
    disableAttendantTimer!: boolean;
    isAdvancedLayout!: boolean;
    departureMultiplier!: number;
    stayMultiplier!: number;
    vacantMultiplier!: number;
    creditMinutes!: number;
    isShowGuestName!: boolean;
    isHideGuestInfo!: boolean;
    isAllNightly!: boolean;
    isOCCNightly!: boolean;
    organizations?: string[] | null;
    floors?: string[] | null;
    users?: string[] | null;
    notes?: string[] | null;
    remoteApi?: string | null;
    display?: string | null;

    constructor(data?: IMobileHotelDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.images = _data["images"] !== undefined ? _data["images"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.phone = _data["phone"] !== undefined ? _data["phone"] : <any>null;
            this.remarks = _data["remarks"] !== undefined ? _data["remarks"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.street = _data["street"] !== undefined ? _data["street"] : <any>null;
            this.thumbnail = _data["thumbnail"] !== undefined ? _data["thumbnail"] : <any>null;
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.zip = _data["zip"] !== undefined ? _data["zip"] : <any>null;
            this.modules = _data["modules"] ? MobileHotelModuleDetails.fromJS(_data["modules"]) : <any>null;
            this.isHideCleaningData = _data["isHideCleaningData"] !== undefined ? _data["isHideCleaningData"] : <any>null;
            this.isLimitAttendantContainers = _data["isLimitAttendantContainers"] !== undefined ? _data["isLimitAttendantContainers"] : <any>null;
            this.isRemoveMessagesDaily = _data["isRemoveMessagesDaily"] !== undefined ? _data["isRemoveMessagesDaily"] : <any>null;
            this.isRenotifyPN = _data["isRenotifyPN"] !== undefined ? _data["isRenotifyPN"] : <any>null;
            this.isWebAttendantIcons = _data["isWebAttendantIcons"] !== undefined ? _data["isWebAttendantIcons"] : <any>null;
            this.isAdminOnlyAssetCreate = _data["isAdminOnlyAssetCreate"] !== undefined ? _data["isAdminOnlyAssetCreate"] : <any>null;
            this.isRemovePriorityOnFinish = _data["isRemovePriorityOnFinish"] !== undefined ? _data["isRemovePriorityOnFinish"] : <any>null;
            this.isShowAllTaskCounts = _data["isShowAllTaskCounts"] !== undefined ? _data["isShowAllTaskCounts"] : <any>null;
            this.isInspectionRemovesPriority = _data["isInspectionRemovesPriority"] !== undefined ? _data["isInspectionRemovesPriority"] : <any>null;
            this.isAttendantDisablePMSNotes = _data["isAttendantDisablePMSNotes"] !== undefined ? _data["isAttendantDisablePMSNotes"] : <any>null;
            this.isAttendantTaskNotes = _data["isAttendantTaskNotes"] !== undefined ? _data["isAttendantTaskNotes"] : <any>null;
            if (Array.isArray(_data["escalationPhones"])) {
                this.escalationPhones = [] as any;
                for (let item of _data["escalationPhones"])
                    this.escalationPhones!.push(item);
            }
            this.explicitOccupiedWorkflow = _data["explicitOccupiedWorkflow"] !== undefined ? _data["explicitOccupiedWorkflow"] : <any>null;
            this.explicitVacantWorkflow = _data["explicitVacantWorkflow"] !== undefined ? _data["explicitVacantWorkflow"] : <any>null;
            this.isExplicitWorkflow = _data["isExplicitWorkflow"] !== undefined ? _data["isExplicitWorkflow"] : <any>null;
            this.isAttendantPriorityColor = _data["isAttendantPriorityColor"] !== undefined ? _data["isAttendantPriorityColor"] : <any>null;
            this.shouldResetDirty = _data["shouldResetDirty"] !== undefined ? _data["shouldResetDirty"] : <any>null;
            this.isHostEnabled = _data["isHostEnabled"] !== undefined ? _data["isHostEnabled"] : <any>null;
            this.isRestockEnabled = _data["isRestockEnabled"] !== undefined ? _data["isRestockEnabled"] : <any>null;
            this.isAttendantImmediateTasks = _data["isAttendantImmediateTasks"] !== undefined ? _data["isAttendantImmediateTasks"] : <any>null;
            this.isAttendantOneStep = _data["isAttendantOneStep"] !== undefined ? _data["isAttendantOneStep"] : <any>null;
            this.isAttendantNotificationPN = _data["isAttendantNotificationPN"] !== undefined ? _data["isAttendantNotificationPN"] : <any>null;
            this.isAttendantLitePN = _data["isAttendantLitePN"] !== undefined ? _data["isAttendantLitePN"] : <any>null;
            this.isAttendantNormalPN = _data["isAttendantNormalPN"] !== undefined ? _data["isAttendantNormalPN"] : <any>null;
            this.isAttendantPriorityPN = _data["isAttendantPriorityPN"] !== undefined ? _data["isAttendantPriorityPN"] : <any>null;
            this.isMaintenanceNotificationPN = _data["isMaintenanceNotificationPN"] !== undefined ? _data["isMaintenanceNotificationPN"] : <any>null;
            this.isMaintenanceLitePN = _data["isMaintenanceLitePN"] !== undefined ? _data["isMaintenanceLitePN"] : <any>null;
            this.isMaintenanceNormalPN = _data["isMaintenanceNormalPN"] !== undefined ? _data["isMaintenanceNormalPN"] : <any>null;
            this.isMaintenancePriorityPN = _data["isMaintenancePriorityPN"] !== undefined ? _data["isMaintenancePriorityPN"] : <any>null;
            this.isDisableDNDPhoto = _data["isDisableDNDPhoto"] !== undefined ? _data["isDisableDNDPhoto"] : <any>null;
            this.isDisablePMSNotesDEP = _data["isDisablePMSNotesDEP"] !== undefined ? _data["isDisablePMSNotesDEP"] : <any>null;
            this.isTaskMaintenance = _data["isTaskMaintenance"] !== undefined ? _data["isTaskMaintenance"] : <any>null;
            this.isRoomNotesAttendantDisabled = _data["isRoomNotesAttendantDisabled"] !== undefined ? _data["isRoomNotesAttendantDisabled"] : <any>null;
            this.isRoomNotesInspectorDisabled = _data["isRoomNotesInspectorDisabled"] !== undefined ? _data["isRoomNotesInspectorDisabled"] : <any>null;
            this.isRoomNotesWebDisabled = _data["isRoomNotesWebDisabled"] !== undefined ? _data["isRoomNotesWebDisabled"] : <any>null;
            this.nightPlanningTime = _data["nightPlanningTime"] !== undefined ? _data["nightPlanningTime"] : <any>null;
            this.isPlanningNightEnabled = _data["isPlanningNightEnabled"] !== undefined ? _data["isPlanningNightEnabled"] : <any>null;
            this.isLFWaitingDisabled = _data["isLFWaitingDisabled"] !== undefined ? _data["isLFWaitingDisabled"] : <any>null;
            this.isEnabledMaintenanceUnassigned = _data["isEnabledMaintenanceUnassigned"] !== undefined ? _data["isEnabledMaintenanceUnassigned"] : <any>null;
            this.disableGuestLocator = _data["disableGuestLocator"] !== undefined ? _data["disableGuestLocator"] : <any>null;
            this.attendantDefaultView = _data["attendantDefaultView"] !== undefined ? _data["attendantDefaultView"] : <any>null;
            this.isAttendantBypass = _data["isAttendantBypass"] !== undefined ? _data["isAttendantBypass"] : <any>null;
            this.isAttendantWorkflow = _data["isAttendantWorkflow"] !== undefined ? _data["isAttendantWorkflow"] : <any>null;
            this.timezone = _data["timezone"] !== undefined ? _data["timezone"] : <any>null;
            this.attendantCancelMinutes = _data["attendantCancelMinutes"] !== undefined ? _data["attendantCancelMinutes"] : <any>null;
            this.disableAttendantTimer = _data["disableAttendantTimer"] !== undefined ? _data["disableAttendantTimer"] : <any>null;
            this.isAdvancedLayout = _data["isAdvancedLayout"] !== undefined ? _data["isAdvancedLayout"] : <any>null;
            this.departureMultiplier = _data["departureMultiplier"] !== undefined ? _data["departureMultiplier"] : <any>null;
            this.stayMultiplier = _data["stayMultiplier"] !== undefined ? _data["stayMultiplier"] : <any>null;
            this.vacantMultiplier = _data["vacantMultiplier"] !== undefined ? _data["vacantMultiplier"] : <any>null;
            this.creditMinutes = _data["creditMinutes"] !== undefined ? _data["creditMinutes"] : <any>null;
            this.isShowGuestName = _data["isShowGuestName"] !== undefined ? _data["isShowGuestName"] : <any>null;
            this.isHideGuestInfo = _data["isHideGuestInfo"] !== undefined ? _data["isHideGuestInfo"] : <any>null;
            this.isAllNightly = _data["isAllNightly"] !== undefined ? _data["isAllNightly"] : <any>null;
            this.isOCCNightly = _data["isOCCNightly"] !== undefined ? _data["isOCCNightly"] : <any>null;
            if (Array.isArray(_data["organizations"])) {
                this.organizations = [] as any;
                for (let item of _data["organizations"])
                    this.organizations!.push(item);
            }
            if (Array.isArray(_data["floors"])) {
                this.floors = [] as any;
                for (let item of _data["floors"])
                    this.floors!.push(item);
            }
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(item);
            }
            if (Array.isArray(_data["notes"])) {
                this.notes = [] as any;
                for (let item of _data["notes"])
                    this.notes!.push(item);
            }
            this.remoteApi = _data["remoteApi"] !== undefined ? _data["remoteApi"] : <any>null;
            this.display = _data["display"] !== undefined ? _data["display"] : <any>null;
        }
    }

    static fromJS(data: any): MobileHotelDetails {
        data = typeof data === 'object' ? data : {};
        let result = new MobileHotelDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["images"] = this.images !== undefined ? this.images : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["phone"] = this.phone !== undefined ? this.phone : <any>null;
        data["remarks"] = this.remarks !== undefined ? this.remarks : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["street"] = this.street !== undefined ? this.street : <any>null;
        data["thumbnail"] = this.thumbnail !== undefined ? this.thumbnail : <any>null;
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["zip"] = this.zip !== undefined ? this.zip : <any>null;
        data["modules"] = this.modules ? this.modules.toJSON() : <any>null;
        data["isHideCleaningData"] = this.isHideCleaningData !== undefined ? this.isHideCleaningData : <any>null;
        data["isLimitAttendantContainers"] = this.isLimitAttendantContainers !== undefined ? this.isLimitAttendantContainers : <any>null;
        data["isRemoveMessagesDaily"] = this.isRemoveMessagesDaily !== undefined ? this.isRemoveMessagesDaily : <any>null;
        data["isRenotifyPN"] = this.isRenotifyPN !== undefined ? this.isRenotifyPN : <any>null;
        data["isWebAttendantIcons"] = this.isWebAttendantIcons !== undefined ? this.isWebAttendantIcons : <any>null;
        data["isAdminOnlyAssetCreate"] = this.isAdminOnlyAssetCreate !== undefined ? this.isAdminOnlyAssetCreate : <any>null;
        data["isRemovePriorityOnFinish"] = this.isRemovePriorityOnFinish !== undefined ? this.isRemovePriorityOnFinish : <any>null;
        data["isShowAllTaskCounts"] = this.isShowAllTaskCounts !== undefined ? this.isShowAllTaskCounts : <any>null;
        data["isInspectionRemovesPriority"] = this.isInspectionRemovesPriority !== undefined ? this.isInspectionRemovesPriority : <any>null;
        data["isAttendantDisablePMSNotes"] = this.isAttendantDisablePMSNotes !== undefined ? this.isAttendantDisablePMSNotes : <any>null;
        data["isAttendantTaskNotes"] = this.isAttendantTaskNotes !== undefined ? this.isAttendantTaskNotes : <any>null;
        if (Array.isArray(this.escalationPhones)) {
            data["escalationPhones"] = [];
            for (let item of this.escalationPhones)
                data["escalationPhones"].push(item);
        }
        data["explicitOccupiedWorkflow"] = this.explicitOccupiedWorkflow !== undefined ? this.explicitOccupiedWorkflow : <any>null;
        data["explicitVacantWorkflow"] = this.explicitVacantWorkflow !== undefined ? this.explicitVacantWorkflow : <any>null;
        data["isExplicitWorkflow"] = this.isExplicitWorkflow !== undefined ? this.isExplicitWorkflow : <any>null;
        data["isAttendantPriorityColor"] = this.isAttendantPriorityColor !== undefined ? this.isAttendantPriorityColor : <any>null;
        data["shouldResetDirty"] = this.shouldResetDirty !== undefined ? this.shouldResetDirty : <any>null;
        data["isHostEnabled"] = this.isHostEnabled !== undefined ? this.isHostEnabled : <any>null;
        data["isRestockEnabled"] = this.isRestockEnabled !== undefined ? this.isRestockEnabled : <any>null;
        data["isAttendantImmediateTasks"] = this.isAttendantImmediateTasks !== undefined ? this.isAttendantImmediateTasks : <any>null;
        data["isAttendantOneStep"] = this.isAttendantOneStep !== undefined ? this.isAttendantOneStep : <any>null;
        data["isAttendantNotificationPN"] = this.isAttendantNotificationPN !== undefined ? this.isAttendantNotificationPN : <any>null;
        data["isAttendantLitePN"] = this.isAttendantLitePN !== undefined ? this.isAttendantLitePN : <any>null;
        data["isAttendantNormalPN"] = this.isAttendantNormalPN !== undefined ? this.isAttendantNormalPN : <any>null;
        data["isAttendantPriorityPN"] = this.isAttendantPriorityPN !== undefined ? this.isAttendantPriorityPN : <any>null;
        data["isMaintenanceNotificationPN"] = this.isMaintenanceNotificationPN !== undefined ? this.isMaintenanceNotificationPN : <any>null;
        data["isMaintenanceLitePN"] = this.isMaintenanceLitePN !== undefined ? this.isMaintenanceLitePN : <any>null;
        data["isMaintenanceNormalPN"] = this.isMaintenanceNormalPN !== undefined ? this.isMaintenanceNormalPN : <any>null;
        data["isMaintenancePriorityPN"] = this.isMaintenancePriorityPN !== undefined ? this.isMaintenancePriorityPN : <any>null;
        data["isDisableDNDPhoto"] = this.isDisableDNDPhoto !== undefined ? this.isDisableDNDPhoto : <any>null;
        data["isDisablePMSNotesDEP"] = this.isDisablePMSNotesDEP !== undefined ? this.isDisablePMSNotesDEP : <any>null;
        data["isTaskMaintenance"] = this.isTaskMaintenance !== undefined ? this.isTaskMaintenance : <any>null;
        data["isRoomNotesAttendantDisabled"] = this.isRoomNotesAttendantDisabled !== undefined ? this.isRoomNotesAttendantDisabled : <any>null;
        data["isRoomNotesInspectorDisabled"] = this.isRoomNotesInspectorDisabled !== undefined ? this.isRoomNotesInspectorDisabled : <any>null;
        data["isRoomNotesWebDisabled"] = this.isRoomNotesWebDisabled !== undefined ? this.isRoomNotesWebDisabled : <any>null;
        data["nightPlanningTime"] = this.nightPlanningTime !== undefined ? this.nightPlanningTime : <any>null;
        data["isPlanningNightEnabled"] = this.isPlanningNightEnabled !== undefined ? this.isPlanningNightEnabled : <any>null;
        data["isLFWaitingDisabled"] = this.isLFWaitingDisabled !== undefined ? this.isLFWaitingDisabled : <any>null;
        data["isEnabledMaintenanceUnassigned"] = this.isEnabledMaintenanceUnassigned !== undefined ? this.isEnabledMaintenanceUnassigned : <any>null;
        data["disableGuestLocator"] = this.disableGuestLocator !== undefined ? this.disableGuestLocator : <any>null;
        data["attendantDefaultView"] = this.attendantDefaultView !== undefined ? this.attendantDefaultView : <any>null;
        data["isAttendantBypass"] = this.isAttendantBypass !== undefined ? this.isAttendantBypass : <any>null;
        data["isAttendantWorkflow"] = this.isAttendantWorkflow !== undefined ? this.isAttendantWorkflow : <any>null;
        data["timezone"] = this.timezone !== undefined ? this.timezone : <any>null;
        data["attendantCancelMinutes"] = this.attendantCancelMinutes !== undefined ? this.attendantCancelMinutes : <any>null;
        data["disableAttendantTimer"] = this.disableAttendantTimer !== undefined ? this.disableAttendantTimer : <any>null;
        data["isAdvancedLayout"] = this.isAdvancedLayout !== undefined ? this.isAdvancedLayout : <any>null;
        data["departureMultiplier"] = this.departureMultiplier !== undefined ? this.departureMultiplier : <any>null;
        data["stayMultiplier"] = this.stayMultiplier !== undefined ? this.stayMultiplier : <any>null;
        data["vacantMultiplier"] = this.vacantMultiplier !== undefined ? this.vacantMultiplier : <any>null;
        data["creditMinutes"] = this.creditMinutes !== undefined ? this.creditMinutes : <any>null;
        data["isShowGuestName"] = this.isShowGuestName !== undefined ? this.isShowGuestName : <any>null;
        data["isHideGuestInfo"] = this.isHideGuestInfo !== undefined ? this.isHideGuestInfo : <any>null;
        data["isAllNightly"] = this.isAllNightly !== undefined ? this.isAllNightly : <any>null;
        data["isOCCNightly"] = this.isOCCNightly !== undefined ? this.isOCCNightly : <any>null;
        if (Array.isArray(this.organizations)) {
            data["organizations"] = [];
            for (let item of this.organizations)
                data["organizations"].push(item);
        }
        if (Array.isArray(this.floors)) {
            data["floors"] = [];
            for (let item of this.floors)
                data["floors"].push(item);
        }
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item);
        }
        if (Array.isArray(this.notes)) {
            data["notes"] = [];
            for (let item of this.notes)
                data["notes"].push(item);
        }
        data["remoteApi"] = this.remoteApi !== undefined ? this.remoteApi : <any>null;
        data["display"] = this.display !== undefined ? this.display : <any>null;
        return data; 
    }
}

export interface IMobileHotelDetails {
    id?: string | null;
    city?: string | null;
    country?: string | null;
    images?: string | null;
    name?: string | null;
    phone?: string | null;
    remarks?: string | null;
    state?: string | null;
    street?: string | null;
    thumbnail?: string | null;
    username?: string | null;
    zip?: string | null;
    modules?: MobileHotelModuleDetails | null;
    isHideCleaningData: boolean;
    isLimitAttendantContainers: boolean;
    isRemoveMessagesDaily: boolean;
    isRenotifyPN: boolean;
    isWebAttendantIcons: boolean;
    isAdminOnlyAssetCreate: boolean;
    isRemovePriorityOnFinish: boolean;
    isShowAllTaskCounts: boolean;
    isInspectionRemovesPriority: boolean;
    isAttendantDisablePMSNotes: boolean;
    isAttendantTaskNotes: boolean;
    escalationPhones?: string[] | null;
    explicitOccupiedWorkflow?: string | null;
    explicitVacantWorkflow?: string | null;
    isExplicitWorkflow: boolean;
    isAttendantPriorityColor: boolean;
    shouldResetDirty: boolean;
    isHostEnabled: boolean;
    isRestockEnabled: boolean;
    isAttendantImmediateTasks: boolean;
    isAttendantOneStep: boolean;
    isAttendantNotificationPN: boolean;
    isAttendantLitePN: boolean;
    isAttendantNormalPN: boolean;
    isAttendantPriorityPN: boolean;
    isMaintenanceNotificationPN: boolean;
    isMaintenanceLitePN: boolean;
    isMaintenanceNormalPN: boolean;
    isMaintenancePriorityPN: boolean;
    isDisableDNDPhoto: boolean;
    isDisablePMSNotesDEP: boolean;
    isTaskMaintenance: boolean;
    isRoomNotesAttendantDisabled: boolean;
    isRoomNotesInspectorDisabled: boolean;
    isRoomNotesWebDisabled: boolean;
    nightPlanningTime: number;
    isPlanningNightEnabled: boolean;
    isLFWaitingDisabled: boolean;
    isEnabledMaintenanceUnassigned: boolean;
    disableGuestLocator: boolean;
    attendantDefaultView?: string | null;
    isAttendantBypass: boolean;
    isAttendantWorkflow: boolean;
    timezone: number;
    attendantCancelMinutes: number;
    disableAttendantTimer: boolean;
    isAdvancedLayout: boolean;
    departureMultiplier: number;
    stayMultiplier: number;
    vacantMultiplier: number;
    creditMinutes: number;
    isShowGuestName: boolean;
    isHideGuestInfo: boolean;
    isAllNightly: boolean;
    isOCCNightly: boolean;
    organizations?: string[] | null;
    floors?: string[] | null;
    users?: string[] | null;
    notes?: string[] | null;
    remoteApi?: string | null;
    display?: string | null;
}

export class MobileHotelModuleDetails implements IMobileHotelModuleDetails {
    isEnablePlanner!: boolean;
    isEnableCiCo!: boolean;
    isRunnerDisabled!: boolean;
    isPreventativeTasksDisabled!: boolean;
    isTurndownDisabled!: boolean;
    isInventoryDisabled!: boolean;
    isExperiencesDisabled!: boolean;
    isAuditsDisabled!: boolean;

    constructor(data?: IMobileHotelModuleDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isEnablePlanner = _data["isEnablePlanner"] !== undefined ? _data["isEnablePlanner"] : <any>null;
            this.isEnableCiCo = _data["isEnableCiCo"] !== undefined ? _data["isEnableCiCo"] : <any>null;
            this.isRunnerDisabled = _data["isRunnerDisabled"] !== undefined ? _data["isRunnerDisabled"] : <any>null;
            this.isPreventativeTasksDisabled = _data["isPreventativeTasksDisabled"] !== undefined ? _data["isPreventativeTasksDisabled"] : <any>null;
            this.isTurndownDisabled = _data["isTurndownDisabled"] !== undefined ? _data["isTurndownDisabled"] : <any>null;
            this.isInventoryDisabled = _data["isInventoryDisabled"] !== undefined ? _data["isInventoryDisabled"] : <any>null;
            this.isExperiencesDisabled = _data["isExperiencesDisabled"] !== undefined ? _data["isExperiencesDisabled"] : <any>null;
            this.isAuditsDisabled = _data["isAuditsDisabled"] !== undefined ? _data["isAuditsDisabled"] : <any>null;
        }
    }

    static fromJS(data: any): MobileHotelModuleDetails {
        data = typeof data === 'object' ? data : {};
        let result = new MobileHotelModuleDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEnablePlanner"] = this.isEnablePlanner !== undefined ? this.isEnablePlanner : <any>null;
        data["isEnableCiCo"] = this.isEnableCiCo !== undefined ? this.isEnableCiCo : <any>null;
        data["isRunnerDisabled"] = this.isRunnerDisabled !== undefined ? this.isRunnerDisabled : <any>null;
        data["isPreventativeTasksDisabled"] = this.isPreventativeTasksDisabled !== undefined ? this.isPreventativeTasksDisabled : <any>null;
        data["isTurndownDisabled"] = this.isTurndownDisabled !== undefined ? this.isTurndownDisabled : <any>null;
        data["isInventoryDisabled"] = this.isInventoryDisabled !== undefined ? this.isInventoryDisabled : <any>null;
        data["isExperiencesDisabled"] = this.isExperiencesDisabled !== undefined ? this.isExperiencesDisabled : <any>null;
        data["isAuditsDisabled"] = this.isAuditsDisabled !== undefined ? this.isAuditsDisabled : <any>null;
        return data; 
    }
}

export interface IMobileHotelModuleDetails {
    isEnablePlanner: boolean;
    isEnableCiCo: boolean;
    isRunnerDisabled: boolean;
    isPreventativeTasksDisabled: boolean;
    isTurndownDisabled: boolean;
    isInventoryDisabled: boolean;
    isExperiencesDisabled: boolean;
    isAuditsDisabled: boolean;
}

export class GetHotelDetailsForMobileQuery implements IGetHotelDetailsForMobileQuery {
    hotelId?: string | null;

    constructor(data?: IGetHotelDetailsForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): GetHotelDetailsForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetHotelDetailsForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IGetHotelDetailsForMobileQuery {
    hotelId?: string | null;
}

export class MobileHotel implements IMobileHotel {
    id?: string | null;
    name?: string | null;

    constructor(data?: IMobileHotel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): MobileHotel {
        data = typeof data === 'object' ? data : {};
        let result = new MobileHotel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data; 
    }
}

export interface IMobileHotel {
    id?: string | null;
    name?: string | null;
}

export class GetListOfHotelsForMobileQuery implements IGetListOfHotelsForMobileQuery {

    constructor(data?: IGetListOfHotelsForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): GetListOfHotelsForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfHotelsForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IGetListOfHotelsForMobileQuery {
}

export class MobileReservation implements IMobileReservation {
    id?: string | null;
    hotel_id?: string | null;
    pms_id?: string | null;
    source?: string | null;
    guest_name?: string | null;
    room_name?: string | null;
    room_id?: string | null;
    bed_name?: string | null;
    bed_id?: string | null;
    floor_number?: number | null;
    floor_id?: string | null;
    check_in_date?: moment.Moment | null;
    check_out_date?: moment.Moment | null;
    expected_arrival_ts?: number | null;
    arrival_ts?: number | null;
    expected_departure_ts?: number | null;
    departure_ts?: number | null;
    occupants!: number;
    adults!: number;
    children!: number;
    infants!: number;
    group_name?: string | null;
    pms_note?: string | null;
    rc_note?: string | null;
    is_active!: number;
    is_vip!: number;
    vip?: string | null;
    is_priority!: number;
    is_arrival!: number;
    rm_prior?: string | null;
    rm_current?: string | null;
    guest?: string | null;
    isTemporaryRoom!: boolean;

    constructor(data?: IMobileReservation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.hotel_id = _data["hotel_id"] !== undefined ? _data["hotel_id"] : <any>null;
            this.pms_id = _data["pms_id"] !== undefined ? _data["pms_id"] : <any>null;
            this.source = _data["source"] !== undefined ? _data["source"] : <any>null;
            this.guest_name = _data["guest_name"] !== undefined ? _data["guest_name"] : <any>null;
            this.room_name = _data["room_name"] !== undefined ? _data["room_name"] : <any>null;
            this.room_id = _data["room_id"] !== undefined ? _data["room_id"] : <any>null;
            this.bed_name = _data["bed_name"] !== undefined ? _data["bed_name"] : <any>null;
            this.bed_id = _data["bed_id"] !== undefined ? _data["bed_id"] : <any>null;
            this.floor_number = _data["floor_number"] !== undefined ? _data["floor_number"] : <any>null;
            this.floor_id = _data["floor_id"] !== undefined ? _data["floor_id"] : <any>null;
            this.check_in_date = _data["check_in_date"] ? moment(_data["check_in_date"].toString()) : <any>null;
            this.check_out_date = _data["check_out_date"] ? moment(_data["check_out_date"].toString()) : <any>null;
            this.expected_arrival_ts = _data["expected_arrival_ts"] !== undefined ? _data["expected_arrival_ts"] : <any>null;
            this.arrival_ts = _data["arrival_ts"] !== undefined ? _data["arrival_ts"] : <any>null;
            this.expected_departure_ts = _data["expected_departure_ts"] !== undefined ? _data["expected_departure_ts"] : <any>null;
            this.departure_ts = _data["departure_ts"] !== undefined ? _data["departure_ts"] : <any>null;
            this.occupants = _data["occupants"] !== undefined ? _data["occupants"] : <any>null;
            this.adults = _data["adults"] !== undefined ? _data["adults"] : <any>null;
            this.children = _data["children"] !== undefined ? _data["children"] : <any>null;
            this.infants = _data["infants"] !== undefined ? _data["infants"] : <any>null;
            this.group_name = _data["group_name"] !== undefined ? _data["group_name"] : <any>null;
            this.pms_note = _data["pms_note"] !== undefined ? _data["pms_note"] : <any>null;
            this.rc_note = _data["rc_note"] !== undefined ? _data["rc_note"] : <any>null;
            this.is_active = _data["is_active"] !== undefined ? _data["is_active"] : <any>null;
            this.is_vip = _data["is_vip"] !== undefined ? _data["is_vip"] : <any>null;
            this.vip = _data["vip"] !== undefined ? _data["vip"] : <any>null;
            this.is_priority = _data["is_priority"] !== undefined ? _data["is_priority"] : <any>null;
            this.is_arrival = _data["is_arrival"] !== undefined ? _data["is_arrival"] : <any>null;
            this.rm_prior = _data["rm_prior"] !== undefined ? _data["rm_prior"] : <any>null;
            this.rm_current = _data["rm_current"] !== undefined ? _data["rm_current"] : <any>null;
            this.guest = _data["guest"] !== undefined ? _data["guest"] : <any>null;
            this.isTemporaryRoom = _data["isTemporaryRoom"] !== undefined ? _data["isTemporaryRoom"] : <any>null;
        }
    }

    static fromJS(data: any): MobileReservation {
        data = typeof data === 'object' ? data : {};
        let result = new MobileReservation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["hotel_id"] = this.hotel_id !== undefined ? this.hotel_id : <any>null;
        data["pms_id"] = this.pms_id !== undefined ? this.pms_id : <any>null;
        data["source"] = this.source !== undefined ? this.source : <any>null;
        data["guest_name"] = this.guest_name !== undefined ? this.guest_name : <any>null;
        data["room_name"] = this.room_name !== undefined ? this.room_name : <any>null;
        data["room_id"] = this.room_id !== undefined ? this.room_id : <any>null;
        data["bed_name"] = this.bed_name !== undefined ? this.bed_name : <any>null;
        data["bed_id"] = this.bed_id !== undefined ? this.bed_id : <any>null;
        data["floor_number"] = this.floor_number !== undefined ? this.floor_number : <any>null;
        data["floor_id"] = this.floor_id !== undefined ? this.floor_id : <any>null;
        data["check_in_date"] = this.check_in_date ? this.check_in_date.toISOString() : <any>null;
        data["check_out_date"] = this.check_out_date ? this.check_out_date.toISOString() : <any>null;
        data["expected_arrival_ts"] = this.expected_arrival_ts !== undefined ? this.expected_arrival_ts : <any>null;
        data["arrival_ts"] = this.arrival_ts !== undefined ? this.arrival_ts : <any>null;
        data["expected_departure_ts"] = this.expected_departure_ts !== undefined ? this.expected_departure_ts : <any>null;
        data["departure_ts"] = this.departure_ts !== undefined ? this.departure_ts : <any>null;
        data["occupants"] = this.occupants !== undefined ? this.occupants : <any>null;
        data["adults"] = this.adults !== undefined ? this.adults : <any>null;
        data["children"] = this.children !== undefined ? this.children : <any>null;
        data["infants"] = this.infants !== undefined ? this.infants : <any>null;
        data["group_name"] = this.group_name !== undefined ? this.group_name : <any>null;
        data["pms_note"] = this.pms_note !== undefined ? this.pms_note : <any>null;
        data["rc_note"] = this.rc_note !== undefined ? this.rc_note : <any>null;
        data["is_active"] = this.is_active !== undefined ? this.is_active : <any>null;
        data["is_vip"] = this.is_vip !== undefined ? this.is_vip : <any>null;
        data["vip"] = this.vip !== undefined ? this.vip : <any>null;
        data["is_priority"] = this.is_priority !== undefined ? this.is_priority : <any>null;
        data["is_arrival"] = this.is_arrival !== undefined ? this.is_arrival : <any>null;
        data["rm_prior"] = this.rm_prior !== undefined ? this.rm_prior : <any>null;
        data["rm_current"] = this.rm_current !== undefined ? this.rm_current : <any>null;
        data["guest"] = this.guest !== undefined ? this.guest : <any>null;
        data["isTemporaryRoom"] = this.isTemporaryRoom !== undefined ? this.isTemporaryRoom : <any>null;
        return data; 
    }
}

export interface IMobileReservation {
    id?: string | null;
    hotel_id?: string | null;
    pms_id?: string | null;
    source?: string | null;
    guest_name?: string | null;
    room_name?: string | null;
    room_id?: string | null;
    bed_name?: string | null;
    bed_id?: string | null;
    floor_number?: number | null;
    floor_id?: string | null;
    check_in_date?: moment.Moment | null;
    check_out_date?: moment.Moment | null;
    expected_arrival_ts?: number | null;
    arrival_ts?: number | null;
    expected_departure_ts?: number | null;
    departure_ts?: number | null;
    occupants: number;
    adults: number;
    children: number;
    infants: number;
    group_name?: string | null;
    pms_note?: string | null;
    rc_note?: string | null;
    is_active: number;
    is_vip: number;
    vip?: string | null;
    is_priority: number;
    is_arrival: number;
    rm_prior?: string | null;
    rm_current?: string | null;
    guest?: string | null;
    isTemporaryRoom: boolean;
}

export class GetListOfReservationsForMobileQuery implements IGetListOfReservationsForMobileQuery {
    hotelId?: string | null;

    constructor(data?: IGetListOfReservationsForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): GetListOfReservationsForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfReservationsForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IGetListOfReservationsForMobileQuery {
    hotelId?: string | null;
}

export class MobileRoomCategoryDetails implements IMobileRoomCategoryDetails {
    id!: string;
    label?: string | null;
    credits?: number | null;
    hotelId?: string | null;
    isPublic!: boolean;
    isPrivate!: boolean;
    isOutside!: boolean;
    creditsStay!: number;
    creditsDep!: number;
    creditsCS!: number;
    creditsLS!: number;
    creditsOther!: number;

    constructor(data?: IMobileRoomCategoryDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.label = _data["label"] !== undefined ? _data["label"] : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.isPublic = _data["isPublic"] !== undefined ? _data["isPublic"] : <any>null;
            this.isPrivate = _data["isPrivate"] !== undefined ? _data["isPrivate"] : <any>null;
            this.isOutside = _data["isOutside"] !== undefined ? _data["isOutside"] : <any>null;
            this.creditsStay = _data["creditsStay"] !== undefined ? _data["creditsStay"] : <any>null;
            this.creditsDep = _data["creditsDep"] !== undefined ? _data["creditsDep"] : <any>null;
            this.creditsCS = _data["creditsCS"] !== undefined ? _data["creditsCS"] : <any>null;
            this.creditsLS = _data["creditsLS"] !== undefined ? _data["creditsLS"] : <any>null;
            this.creditsOther = _data["creditsOther"] !== undefined ? _data["creditsOther"] : <any>null;
        }
    }

    static fromJS(data: any): MobileRoomCategoryDetails {
        data = typeof data === 'object' ? data : {};
        let result = new MobileRoomCategoryDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["label"] = this.label !== undefined ? this.label : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["isPublic"] = this.isPublic !== undefined ? this.isPublic : <any>null;
        data["isPrivate"] = this.isPrivate !== undefined ? this.isPrivate : <any>null;
        data["isOutside"] = this.isOutside !== undefined ? this.isOutside : <any>null;
        data["creditsStay"] = this.creditsStay !== undefined ? this.creditsStay : <any>null;
        data["creditsDep"] = this.creditsDep !== undefined ? this.creditsDep : <any>null;
        data["creditsCS"] = this.creditsCS !== undefined ? this.creditsCS : <any>null;
        data["creditsLS"] = this.creditsLS !== undefined ? this.creditsLS : <any>null;
        data["creditsOther"] = this.creditsOther !== undefined ? this.creditsOther : <any>null;
        return data; 
    }
}

export interface IMobileRoomCategoryDetails {
    id: string;
    label?: string | null;
    credits?: number | null;
    hotelId?: string | null;
    isPublic: boolean;
    isPrivate: boolean;
    isOutside: boolean;
    creditsStay: number;
    creditsDep: number;
    creditsCS: number;
    creditsLS: number;
    creditsOther: number;
}

export class GetRoomCategoryDetailsForMobileQuery implements IGetRoomCategoryDetailsForMobileQuery {
    id!: string;

    constructor(data?: IGetRoomCategoryDetailsForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): GetRoomCategoryDetailsForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoomCategoryDetailsForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IGetRoomCategoryDetailsForMobileQuery {
    id: string;
}

export class MobileRoomCategory implements IMobileRoomCategory {
    id!: string;
    label?: string | null;
    credits?: number | null;
    hotelId?: string | null;
    isPublic!: boolean;
    isPrivate!: boolean;
    isOutside!: boolean;
    creditsStay!: number;
    creditsDep!: number;
    creditsCS!: number;
    creditsLS!: number;
    creditsOther!: number;

    constructor(data?: IMobileRoomCategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.label = _data["label"] !== undefined ? _data["label"] : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.isPublic = _data["isPublic"] !== undefined ? _data["isPublic"] : <any>null;
            this.isPrivate = _data["isPrivate"] !== undefined ? _data["isPrivate"] : <any>null;
            this.isOutside = _data["isOutside"] !== undefined ? _data["isOutside"] : <any>null;
            this.creditsStay = _data["creditsStay"] !== undefined ? _data["creditsStay"] : <any>null;
            this.creditsDep = _data["creditsDep"] !== undefined ? _data["creditsDep"] : <any>null;
            this.creditsCS = _data["creditsCS"] !== undefined ? _data["creditsCS"] : <any>null;
            this.creditsLS = _data["creditsLS"] !== undefined ? _data["creditsLS"] : <any>null;
            this.creditsOther = _data["creditsOther"] !== undefined ? _data["creditsOther"] : <any>null;
        }
    }

    static fromJS(data: any): MobileRoomCategory {
        data = typeof data === 'object' ? data : {};
        let result = new MobileRoomCategory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["label"] = this.label !== undefined ? this.label : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["isPublic"] = this.isPublic !== undefined ? this.isPublic : <any>null;
        data["isPrivate"] = this.isPrivate !== undefined ? this.isPrivate : <any>null;
        data["isOutside"] = this.isOutside !== undefined ? this.isOutside : <any>null;
        data["creditsStay"] = this.creditsStay !== undefined ? this.creditsStay : <any>null;
        data["creditsDep"] = this.creditsDep !== undefined ? this.creditsDep : <any>null;
        data["creditsCS"] = this.creditsCS !== undefined ? this.creditsCS : <any>null;
        data["creditsLS"] = this.creditsLS !== undefined ? this.creditsLS : <any>null;
        data["creditsOther"] = this.creditsOther !== undefined ? this.creditsOther : <any>null;
        return data; 
    }
}

export interface IMobileRoomCategory {
    id: string;
    label?: string | null;
    credits?: number | null;
    hotelId?: string | null;
    isPublic: boolean;
    isPrivate: boolean;
    isOutside: boolean;
    creditsStay: number;
    creditsDep: number;
    creditsCS: number;
    creditsLS: number;
    creditsOther: number;
}

export class GetListOfRoomCategoriesForMobileQuery implements IGetListOfRoomCategoriesForMobileQuery {

    constructor(data?: IGetListOfRoomCategoriesForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): GetListOfRoomCategoriesForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfRoomCategoriesForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IGetListOfRoomCategoriesForMobileQuery {
}

export class GetRoomDetailsForMobileQuery implements IGetRoomDetailsForMobileQuery {
    id!: string;

    constructor(data?: IGetRoomDetailsForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): GetRoomDetailsForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoomDetailsForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IGetRoomDetailsForMobileQuery {
    id: string;
}

export class MobileRoom implements IMobileRoom {
    name?: string | null;
    pmsName?: string | null;
    description?: string | null;
    hotelId?: string | null;
    roomAccessId?: string | null;
    roomCategoryId?: string | null;
    roomStatusId?: string | null;
    roomMaintenanceId?: string | null;
    roomHousekeepingId?: string | null;
    comment?: string | null;
    roomNoteId?: string | null;
    overwriteCredits!: number;
    lastDate!: moment.Moment;
    attendantStatus?: string | null;
    attendantStatusChangedAt?: moment.Moment | null;
    attendantStatusNight?: string | null;
    turndownService?: string | null;
    isGuestIn!: boolean;
    isChangeSheets!: boolean;
    isLongStay!: boolean;
    isRoomBlocked!: boolean;
    isRoomRestocked!: boolean;
    sortValue!: number;
    section?: string | null;
    subSection?: string | null;
    tags?: string[] | null;
    features?: string[] | null;
    sublocations?: string[] | null;
    updateUsername?: string | null;
    updateType?: string | null;
    updateTs?: number | null;
    updateTapTs?: number | null;
    externalInfoId?: string | null;
    id!: string;
    floorId?: string | null;
    floorName?: string | null;
    floorNumber?: number | null;
    buildingId?: string | null;
    buildingName?: string | null;
    isTemporaryRoom!: boolean;
    typeKey?: string | null;

    constructor(data?: IMobileRoom) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.pmsName = _data["pmsName"] !== undefined ? _data["pmsName"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.roomAccessId = _data["roomAccessId"] !== undefined ? _data["roomAccessId"] : <any>null;
            this.roomCategoryId = _data["roomCategoryId"] !== undefined ? _data["roomCategoryId"] : <any>null;
            this.roomStatusId = _data["roomStatusId"] !== undefined ? _data["roomStatusId"] : <any>null;
            this.roomMaintenanceId = _data["roomMaintenanceId"] !== undefined ? _data["roomMaintenanceId"] : <any>null;
            this.roomHousekeepingId = _data["roomHousekeepingId"] !== undefined ? _data["roomHousekeepingId"] : <any>null;
            this.comment = _data["comment"] !== undefined ? _data["comment"] : <any>null;
            this.roomNoteId = _data["roomNoteId"] !== undefined ? _data["roomNoteId"] : <any>null;
            this.overwriteCredits = _data["overwriteCredits"] !== undefined ? _data["overwriteCredits"] : <any>null;
            this.lastDate = _data["lastDate"] ? moment(_data["lastDate"].toString()) : <any>null;
            this.attendantStatus = _data["attendantStatus"] !== undefined ? _data["attendantStatus"] : <any>null;
            this.attendantStatusChangedAt = _data["attendantStatusChangedAt"] ? moment(_data["attendantStatusChangedAt"].toString()) : <any>null;
            this.attendantStatusNight = _data["attendantStatusNight"] !== undefined ? _data["attendantStatusNight"] : <any>null;
            this.turndownService = _data["turndownService"] !== undefined ? _data["turndownService"] : <any>null;
            this.isGuestIn = _data["isGuestIn"] !== undefined ? _data["isGuestIn"] : <any>null;
            this.isChangeSheets = _data["isChangeSheets"] !== undefined ? _data["isChangeSheets"] : <any>null;
            this.isLongStay = _data["isLongStay"] !== undefined ? _data["isLongStay"] : <any>null;
            this.isRoomBlocked = _data["isRoomBlocked"] !== undefined ? _data["isRoomBlocked"] : <any>null;
            this.isRoomRestocked = _data["isRoomRestocked"] !== undefined ? _data["isRoomRestocked"] : <any>null;
            this.sortValue = _data["sortValue"] !== undefined ? _data["sortValue"] : <any>null;
            this.section = _data["section"] !== undefined ? _data["section"] : <any>null;
            this.subSection = _data["subSection"] !== undefined ? _data["subSection"] : <any>null;
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(item);
            }
            if (Array.isArray(_data["features"])) {
                this.features = [] as any;
                for (let item of _data["features"])
                    this.features!.push(item);
            }
            if (Array.isArray(_data["sublocations"])) {
                this.sublocations = [] as any;
                for (let item of _data["sublocations"])
                    this.sublocations!.push(item);
            }
            this.updateUsername = _data["updateUsername"] !== undefined ? _data["updateUsername"] : <any>null;
            this.updateType = _data["updateType"] !== undefined ? _data["updateType"] : <any>null;
            this.updateTs = _data["updateTs"] !== undefined ? _data["updateTs"] : <any>null;
            this.updateTapTs = _data["updateTapTs"] !== undefined ? _data["updateTapTs"] : <any>null;
            this.externalInfoId = _data["externalInfoId"] !== undefined ? _data["externalInfoId"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.floorId = _data["floorId"] !== undefined ? _data["floorId"] : <any>null;
            this.floorName = _data["floorName"] !== undefined ? _data["floorName"] : <any>null;
            this.floorNumber = _data["floorNumber"] !== undefined ? _data["floorNumber"] : <any>null;
            this.buildingId = _data["buildingId"] !== undefined ? _data["buildingId"] : <any>null;
            this.buildingName = _data["buildingName"] !== undefined ? _data["buildingName"] : <any>null;
            this.isTemporaryRoom = _data["isTemporaryRoom"] !== undefined ? _data["isTemporaryRoom"] : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
        }
    }

    static fromJS(data: any): MobileRoom {
        data = typeof data === 'object' ? data : {};
        let result = new MobileRoom();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["pmsName"] = this.pmsName !== undefined ? this.pmsName : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["roomAccessId"] = this.roomAccessId !== undefined ? this.roomAccessId : <any>null;
        data["roomCategoryId"] = this.roomCategoryId !== undefined ? this.roomCategoryId : <any>null;
        data["roomStatusId"] = this.roomStatusId !== undefined ? this.roomStatusId : <any>null;
        data["roomMaintenanceId"] = this.roomMaintenanceId !== undefined ? this.roomMaintenanceId : <any>null;
        data["roomHousekeepingId"] = this.roomHousekeepingId !== undefined ? this.roomHousekeepingId : <any>null;
        data["comment"] = this.comment !== undefined ? this.comment : <any>null;
        data["roomNoteId"] = this.roomNoteId !== undefined ? this.roomNoteId : <any>null;
        data["overwriteCredits"] = this.overwriteCredits !== undefined ? this.overwriteCredits : <any>null;
        data["lastDate"] = this.lastDate ? this.lastDate.toISOString() : <any>null;
        data["attendantStatus"] = this.attendantStatus !== undefined ? this.attendantStatus : <any>null;
        data["attendantStatusChangedAt"] = this.attendantStatusChangedAt ? this.attendantStatusChangedAt.toISOString() : <any>null;
        data["attendantStatusNight"] = this.attendantStatusNight !== undefined ? this.attendantStatusNight : <any>null;
        data["turndownService"] = this.turndownService !== undefined ? this.turndownService : <any>null;
        data["isGuestIn"] = this.isGuestIn !== undefined ? this.isGuestIn : <any>null;
        data["isChangeSheets"] = this.isChangeSheets !== undefined ? this.isChangeSheets : <any>null;
        data["isLongStay"] = this.isLongStay !== undefined ? this.isLongStay : <any>null;
        data["isRoomBlocked"] = this.isRoomBlocked !== undefined ? this.isRoomBlocked : <any>null;
        data["isRoomRestocked"] = this.isRoomRestocked !== undefined ? this.isRoomRestocked : <any>null;
        data["sortValue"] = this.sortValue !== undefined ? this.sortValue : <any>null;
        data["section"] = this.section !== undefined ? this.section : <any>null;
        data["subSection"] = this.subSection !== undefined ? this.subSection : <any>null;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        if (Array.isArray(this.features)) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item);
        }
        if (Array.isArray(this.sublocations)) {
            data["sublocations"] = [];
            for (let item of this.sublocations)
                data["sublocations"].push(item);
        }
        data["updateUsername"] = this.updateUsername !== undefined ? this.updateUsername : <any>null;
        data["updateType"] = this.updateType !== undefined ? this.updateType : <any>null;
        data["updateTs"] = this.updateTs !== undefined ? this.updateTs : <any>null;
        data["updateTapTs"] = this.updateTapTs !== undefined ? this.updateTapTs : <any>null;
        data["externalInfoId"] = this.externalInfoId !== undefined ? this.externalInfoId : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["floorId"] = this.floorId !== undefined ? this.floorId : <any>null;
        data["floorName"] = this.floorName !== undefined ? this.floorName : <any>null;
        data["floorNumber"] = this.floorNumber !== undefined ? this.floorNumber : <any>null;
        data["buildingId"] = this.buildingId !== undefined ? this.buildingId : <any>null;
        data["buildingName"] = this.buildingName !== undefined ? this.buildingName : <any>null;
        data["isTemporaryRoom"] = this.isTemporaryRoom !== undefined ? this.isTemporaryRoom : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        return data; 
    }
}

export interface IMobileRoom {
    name?: string | null;
    pmsName?: string | null;
    description?: string | null;
    hotelId?: string | null;
    roomAccessId?: string | null;
    roomCategoryId?: string | null;
    roomStatusId?: string | null;
    roomMaintenanceId?: string | null;
    roomHousekeepingId?: string | null;
    comment?: string | null;
    roomNoteId?: string | null;
    overwriteCredits: number;
    lastDate: moment.Moment;
    attendantStatus?: string | null;
    attendantStatusChangedAt?: moment.Moment | null;
    attendantStatusNight?: string | null;
    turndownService?: string | null;
    isGuestIn: boolean;
    isChangeSheets: boolean;
    isLongStay: boolean;
    isRoomBlocked: boolean;
    isRoomRestocked: boolean;
    sortValue: number;
    section?: string | null;
    subSection?: string | null;
    tags?: string[] | null;
    features?: string[] | null;
    sublocations?: string[] | null;
    updateUsername?: string | null;
    updateType?: string | null;
    updateTs?: number | null;
    updateTapTs?: number | null;
    externalInfoId?: string | null;
    id: string;
    floorId?: string | null;
    floorName?: string | null;
    floorNumber?: number | null;
    buildingId?: string | null;
    buildingName?: string | null;
    isTemporaryRoom: boolean;
    typeKey?: string | null;
}

export class GetListOfRoomsForMobileQuery implements IGetListOfRoomsForMobileQuery {
    hotelId?: string | null;

    constructor(data?: IGetListOfRoomsForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): GetListOfRoomsForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfRoomsForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IGetListOfRoomsForMobileQuery {
    hotelId?: string | null;
}

export class MobileRoomStatusDetails implements IMobileRoomStatusDetails {
    roomId!: string;
    label?: string | null;
    code?: string | null;
    color?: string | null;
    hotelId?: string | null;

    constructor(data?: IMobileRoomStatusDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.label = _data["label"] !== undefined ? _data["label"] : <any>null;
            this.code = _data["code"] !== undefined ? _data["code"] : <any>null;
            this.color = _data["color"] !== undefined ? _data["color"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): MobileRoomStatusDetails {
        data = typeof data === 'object' ? data : {};
        let result = new MobileRoomStatusDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["label"] = this.label !== undefined ? this.label : <any>null;
        data["code"] = this.code !== undefined ? this.code : <any>null;
        data["color"] = this.color !== undefined ? this.color : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IMobileRoomStatusDetails {
    roomId: string;
    label?: string | null;
    code?: string | null;
    color?: string | null;
    hotelId?: string | null;
}

export class GetRoomStatusDetailsForMobileQuery implements IGetRoomStatusDetailsForMobileQuery {
    id!: string;

    constructor(data?: IGetRoomStatusDetailsForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): GetRoomStatusDetailsForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoomStatusDetailsForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IGetRoomStatusDetailsForMobileQuery {
    id: string;
}

export class GetListOfRoomStatusesForMobileQuery implements IGetListOfRoomStatusesForMobileQuery {
    hotelId?: string | null;

    constructor(data?: IGetListOfRoomStatusesForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): GetListOfRoomStatusesForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfRoomStatusesForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IGetListOfRoomStatusesForMobileQuery {
    hotelId?: string | null;
}

export class MobileRoomHousekeepingStatusDetails implements IMobileRoomHousekeepingStatusDetails {
    roomId!: string;
    label?: string | null;
    code?: string | null;
    color?: string | null;
    hotelId?: string | null;

    constructor(data?: IMobileRoomHousekeepingStatusDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.label = _data["label"] !== undefined ? _data["label"] : <any>null;
            this.code = _data["code"] !== undefined ? _data["code"] : <any>null;
            this.color = _data["color"] !== undefined ? _data["color"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): MobileRoomHousekeepingStatusDetails {
        data = typeof data === 'object' ? data : {};
        let result = new MobileRoomHousekeepingStatusDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["label"] = this.label !== undefined ? this.label : <any>null;
        data["code"] = this.code !== undefined ? this.code : <any>null;
        data["color"] = this.color !== undefined ? this.color : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IMobileRoomHousekeepingStatusDetails {
    roomId: string;
    label?: string | null;
    code?: string | null;
    color?: string | null;
    hotelId?: string | null;
}

export class GetRoomHousekeepingStatusDetailsForMobileQuery implements IGetRoomHousekeepingStatusDetailsForMobileQuery {
    id!: string;

    constructor(data?: IGetRoomHousekeepingStatusDetailsForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): GetRoomHousekeepingStatusDetailsForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoomHousekeepingStatusDetailsForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IGetRoomHousekeepingStatusDetailsForMobileQuery {
    id: string;
}

export class GetListOfRoomHousekeepingStatusesForMobileQuery implements IGetListOfRoomHousekeepingStatusesForMobileQuery {
    hotelId?: string | null;

    constructor(data?: IGetListOfRoomHousekeepingStatusesForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): GetListOfRoomHousekeepingStatusesForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfRoomHousekeepingStatusesForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IGetListOfRoomHousekeepingStatusesForMobileQuery {
    hotelId?: string | null;
}

export class MobileRoomNote implements IMobileRoomNote {
    id!: string;
    hotel_id?: string | null;
    room_id!: string;
    room_name?: string | null;
    room_status?: string | null;
    room_housekeeping?: string | null;
    attendant_status?: string | null;
    last_room_update?: number | null;
    date_ts?: number | null;
    note?: string | null;
    image?: string | null;
    user_id!: string;
    user_username?: string | null;
    user_first_name?: string | null;
    user_last_name?: string | null;
    application?: string | null;
    expiration?: moment.Moment | null;
    is_archived!: number;
    task_uuid?: string | null;

    constructor(data?: IMobileRoomNote) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.hotel_id = _data["hotel_id"] !== undefined ? _data["hotel_id"] : <any>null;
            this.room_id = _data["room_id"] !== undefined ? _data["room_id"] : <any>null;
            this.room_name = _data["room_name"] !== undefined ? _data["room_name"] : <any>null;
            this.room_status = _data["room_status"] !== undefined ? _data["room_status"] : <any>null;
            this.room_housekeeping = _data["room_housekeeping"] !== undefined ? _data["room_housekeeping"] : <any>null;
            this.attendant_status = _data["attendant_status"] !== undefined ? _data["attendant_status"] : <any>null;
            this.last_room_update = _data["last_room_update"] !== undefined ? _data["last_room_update"] : <any>null;
            this.date_ts = _data["date_ts"] !== undefined ? _data["date_ts"] : <any>null;
            this.note = _data["note"] !== undefined ? _data["note"] : <any>null;
            this.image = _data["image"] !== undefined ? _data["image"] : <any>null;
            this.user_id = _data["user_id"] !== undefined ? _data["user_id"] : <any>null;
            this.user_username = _data["user_username"] !== undefined ? _data["user_username"] : <any>null;
            this.user_first_name = _data["user_first_name"] !== undefined ? _data["user_first_name"] : <any>null;
            this.user_last_name = _data["user_last_name"] !== undefined ? _data["user_last_name"] : <any>null;
            this.application = _data["application"] !== undefined ? _data["application"] : <any>null;
            this.expiration = _data["expiration"] ? moment(_data["expiration"].toString()) : <any>null;
            this.is_archived = _data["is_archived"] !== undefined ? _data["is_archived"] : <any>null;
            this.task_uuid = _data["task_uuid"] !== undefined ? _data["task_uuid"] : <any>null;
        }
    }

    static fromJS(data: any): MobileRoomNote {
        data = typeof data === 'object' ? data : {};
        let result = new MobileRoomNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["hotel_id"] = this.hotel_id !== undefined ? this.hotel_id : <any>null;
        data["room_id"] = this.room_id !== undefined ? this.room_id : <any>null;
        data["room_name"] = this.room_name !== undefined ? this.room_name : <any>null;
        data["room_status"] = this.room_status !== undefined ? this.room_status : <any>null;
        data["room_housekeeping"] = this.room_housekeeping !== undefined ? this.room_housekeeping : <any>null;
        data["attendant_status"] = this.attendant_status !== undefined ? this.attendant_status : <any>null;
        data["last_room_update"] = this.last_room_update !== undefined ? this.last_room_update : <any>null;
        data["date_ts"] = this.date_ts !== undefined ? this.date_ts : <any>null;
        data["note"] = this.note !== undefined ? this.note : <any>null;
        data["image"] = this.image !== undefined ? this.image : <any>null;
        data["user_id"] = this.user_id !== undefined ? this.user_id : <any>null;
        data["user_username"] = this.user_username !== undefined ? this.user_username : <any>null;
        data["user_first_name"] = this.user_first_name !== undefined ? this.user_first_name : <any>null;
        data["user_last_name"] = this.user_last_name !== undefined ? this.user_last_name : <any>null;
        data["application"] = this.application !== undefined ? this.application : <any>null;
        data["expiration"] = this.expiration ? this.expiration.toISOString() : <any>null;
        data["is_archived"] = this.is_archived !== undefined ? this.is_archived : <any>null;
        data["task_uuid"] = this.task_uuid !== undefined ? this.task_uuid : <any>null;
        return data; 
    }
}

export interface IMobileRoomNote {
    id: string;
    hotel_id?: string | null;
    room_id: string;
    room_name?: string | null;
    room_status?: string | null;
    room_housekeeping?: string | null;
    attendant_status?: string | null;
    last_room_update?: number | null;
    date_ts?: number | null;
    note?: string | null;
    image?: string | null;
    user_id: string;
    user_username?: string | null;
    user_first_name?: string | null;
    user_last_name?: string | null;
    application?: string | null;
    expiration?: moment.Moment | null;
    is_archived: number;
    task_uuid?: string | null;
}

export class InsertRoomNoteForMobileCommand implements IInsertRoomNoteForMobileCommand {
    hotel_id?: string | null;
    room_id!: string;
    note?: string | null;
    image?: string | null;
    application?: string | null;
    task_uuid?: string | null;

    constructor(data?: IInsertRoomNoteForMobileCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotel_id = _data["hotel_id"] !== undefined ? _data["hotel_id"] : <any>null;
            this.room_id = _data["room_id"] !== undefined ? _data["room_id"] : <any>null;
            this.note = _data["note"] !== undefined ? _data["note"] : <any>null;
            this.image = _data["image"] !== undefined ? _data["image"] : <any>null;
            this.application = _data["application"] !== undefined ? _data["application"] : <any>null;
            this.task_uuid = _data["task_uuid"] !== undefined ? _data["task_uuid"] : <any>null;
        }
    }

    static fromJS(data: any): InsertRoomNoteForMobileCommand {
        data = typeof data === 'object' ? data : {};
        let result = new InsertRoomNoteForMobileCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotel_id"] = this.hotel_id !== undefined ? this.hotel_id : <any>null;
        data["room_id"] = this.room_id !== undefined ? this.room_id : <any>null;
        data["note"] = this.note !== undefined ? this.note : <any>null;
        data["image"] = this.image !== undefined ? this.image : <any>null;
        data["application"] = this.application !== undefined ? this.application : <any>null;
        data["task_uuid"] = this.task_uuid !== undefined ? this.task_uuid : <any>null;
        return data; 
    }
}

export interface IInsertRoomNoteForMobileCommand {
    hotel_id?: string | null;
    room_id: string;
    note?: string | null;
    image?: string | null;
    application?: string | null;
    task_uuid?: string | null;
}

export class UpdateRoomNoteForMobileCommand implements IUpdateRoomNoteForMobileCommand {
    hotelId?: string | null;
    roomId!: string;
    id!: string;

    constructor(data?: IUpdateRoomNoteForMobileCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateRoomNoteForMobileCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRoomNoteForMobileCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IUpdateRoomNoteForMobileCommand {
    hotelId?: string | null;
    roomId: string;
    id: string;
}

export class DeleteRoomNoteForMobileCommand implements IDeleteRoomNoteForMobileCommand {
    hotelId?: string | null;
    roomId!: string;

    constructor(data?: IDeleteRoomNoteForMobileCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteRoomNoteForMobileCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteRoomNoteForMobileCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        return data; 
    }
}

export interface IDeleteRoomNoteForMobileCommand {
    hotelId?: string | null;
    roomId: string;
}

export class GetListOfRoomNotesForMobileQuery implements IGetListOfRoomNotesForMobileQuery {
    hotelId?: string | null;

    constructor(data?: IGetListOfRoomNotesForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): GetListOfRoomNotesForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfRoomNotesForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IGetListOfRoomNotesForMobileQuery {
    hotelId?: string | null;
}

export class MobileRoomNoteDetails extends MobileRoomNote implements IMobileRoomNoteDetails {

    constructor(data?: IMobileRoomNoteDetails) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): MobileRoomNoteDetails {
        data = typeof data === 'object' ? data : {};
        let result = new MobileRoomNoteDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IMobileRoomNoteDetails extends IMobileRoomNote {
}

export class GetRoomNoteDetailsForMobileQuery implements IGetRoomNoteDetailsForMobileQuery {
    hotelId?: string | null;
    id!: string;

    constructor(data?: IGetRoomNoteDetailsForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): GetRoomNoteDetailsForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoomNoteDetailsForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IGetRoomNoteDetailsForMobileQuery {
    hotelId?: string | null;
    id: string;
}

export class MobileRoomMessageDetails implements IMobileRoomMessageDetails {
    id!: string;
    message?: string | null;
    createdByName?: string | null;
    createdAt!: moment.Moment;
    isMessageForReservation!: boolean;
    messageRooms?: MobileMessageRoom[] | null;
    messageReservationIds?: string[] | null;

    constructor(data?: IMobileRoomMessageDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.createdByName = _data["createdByName"] !== undefined ? _data["createdByName"] : <any>null;
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>null;
            this.isMessageForReservation = _data["isMessageForReservation"] !== undefined ? _data["isMessageForReservation"] : <any>null;
            if (Array.isArray(_data["messageRooms"])) {
                this.messageRooms = [] as any;
                for (let item of _data["messageRooms"])
                    this.messageRooms!.push(MobileMessageRoom.fromJS(item));
            }
            if (Array.isArray(_data["messageReservationIds"])) {
                this.messageReservationIds = [] as any;
                for (let item of _data["messageReservationIds"])
                    this.messageReservationIds!.push(item);
            }
        }
    }

    static fromJS(data: any): MobileRoomMessageDetails {
        data = typeof data === 'object' ? data : {};
        let result = new MobileRoomMessageDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["createdByName"] = this.createdByName !== undefined ? this.createdByName : <any>null;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        data["isMessageForReservation"] = this.isMessageForReservation !== undefined ? this.isMessageForReservation : <any>null;
        if (Array.isArray(this.messageRooms)) {
            data["messageRooms"] = [];
            for (let item of this.messageRooms)
                data["messageRooms"].push(item.toJSON());
        }
        if (Array.isArray(this.messageReservationIds)) {
            data["messageReservationIds"] = [];
            for (let item of this.messageReservationIds)
                data["messageReservationIds"].push(item);
        }
        return data; 
    }
}

export interface IMobileRoomMessageDetails {
    id: string;
    message?: string | null;
    createdByName?: string | null;
    createdAt: moment.Moment;
    isMessageForReservation: boolean;
    messageRooms?: MobileMessageRoom[] | null;
    messageReservationIds?: string[] | null;
}

export class MobileMessageRoom implements IMobileMessageRoom {
    roomId!: string;
    roomBedId?: string | null;

    constructor(data?: IMobileMessageRoom) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.roomBedId = _data["roomBedId"] !== undefined ? _data["roomBedId"] : <any>null;
        }
    }

    static fromJS(data: any): MobileMessageRoom {
        data = typeof data === 'object' ? data : {};
        let result = new MobileMessageRoom();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["roomBedId"] = this.roomBedId !== undefined ? this.roomBedId : <any>null;
        return data; 
    }
}

export interface IMobileMessageRoom {
    roomId: string;
    roomBedId?: string | null;
}

export class GetListOfAllRoomMessagesForMobileQuery implements IGetListOfAllRoomMessagesForMobileQuery {
    hotelId?: string | null;

    constructor(data?: IGetListOfAllRoomMessagesForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): GetListOfAllRoomMessagesForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfAllRoomMessagesForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IGetListOfAllRoomMessagesForMobileQuery {
    hotelId?: string | null;
}

export class MobileRoomMessage implements IMobileRoomMessage {
    id!: string;
    message?: string | null;
    createdByName?: string | null;
    createdAt!: moment.Moment;

    constructor(data?: IMobileRoomMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.createdByName = _data["createdByName"] !== undefined ? _data["createdByName"] : <any>null;
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): MobileRoomMessage {
        data = typeof data === 'object' ? data : {};
        let result = new MobileRoomMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["createdByName"] = this.createdByName !== undefined ? this.createdByName : <any>null;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        return data; 
    }
}

export interface IMobileRoomMessage {
    id: string;
    message?: string | null;
    createdByName?: string | null;
    createdAt: moment.Moment;
}

export class GetListOfRoomMessagesForMobileQuery implements IGetListOfRoomMessagesForMobileQuery {
    hotelId?: string | null;
    roomId!: string;
    roomBedId?: string | null;

    constructor(data?: IGetListOfRoomMessagesForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.roomBedId = _data["roomBedId"] !== undefined ? _data["roomBedId"] : <any>null;
        }
    }

    static fromJS(data: any): GetListOfRoomMessagesForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfRoomMessagesForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["roomBedId"] = this.roomBedId !== undefined ? this.roomBedId : <any>null;
        return data; 
    }
}

export interface IGetListOfRoomMessagesForMobileQuery {
    hotelId?: string | null;
    roomId: string;
    roomBedId?: string | null;
}

export class SendRoomMessageForMobileCommand implements ISendRoomMessageForMobileCommand {
    forKey?: string | null;
    message?: string | null;
    roomId?: string | null;
    roomBedId?: string | null;
    reservationIds?: string[] | null;
    createdAt!: moment.Moment;
    hotelId?: string | null;

    constructor(data?: ISendRoomMessageForMobileCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.forKey = _data["forKey"] !== undefined ? _data["forKey"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.roomId = _data["roomId"] !== undefined ? _data["roomId"] : <any>null;
            this.roomBedId = _data["roomBedId"] !== undefined ? _data["roomBedId"] : <any>null;
            if (Array.isArray(_data["reservationIds"])) {
                this.reservationIds = [] as any;
                for (let item of _data["reservationIds"])
                    this.reservationIds!.push(item);
            }
            this.createdAt = _data["createdAt"] ? moment(_data["createdAt"].toString()) : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): SendRoomMessageForMobileCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SendRoomMessageForMobileCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["forKey"] = this.forKey !== undefined ? this.forKey : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["roomId"] = this.roomId !== undefined ? this.roomId : <any>null;
        data["roomBedId"] = this.roomBedId !== undefined ? this.roomBedId : <any>null;
        if (Array.isArray(this.reservationIds)) {
            data["reservationIds"] = [];
            for (let item of this.reservationIds)
                data["reservationIds"].push(item);
        }
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface ISendRoomMessageForMobileCommand {
    forKey?: string | null;
    message?: string | null;
    roomId?: string | null;
    roomBedId?: string | null;
    reservationIds?: string[] | null;
    createdAt: moment.Moment;
    hotelId?: string | null;
}

export class InsertTaskForMobileCommand implements IInsertTaskForMobileCommand {
    hotelId?: string | null;
    roomIds?: string[] | null;
    assetId!: string;
    actionId!: string;
    quantity?: number | null;
    price?: number | null;
    credits?: number | null;
    comment?: string | null;
    isHighPriority?: boolean | null;
    isGuestRequest?: boolean | null;
    imageUrl?: string | null;
    startsAt?: moment.Moment | null;
    userIds?: string[] | null;
    userGroupIds?: string[] | null;
    userSubGroupIds?: string[] | null;

    constructor(data?: IInsertTaskForMobileCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            if (Array.isArray(_data["roomIds"])) {
                this.roomIds = [] as any;
                for (let item of _data["roomIds"])
                    this.roomIds!.push(item);
            }
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.actionId = _data["actionId"] !== undefined ? _data["actionId"] : <any>null;
            this.quantity = _data["quantity"] !== undefined ? _data["quantity"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
            this.credits = _data["credits"] !== undefined ? _data["credits"] : <any>null;
            this.comment = _data["comment"] !== undefined ? _data["comment"] : <any>null;
            this.isHighPriority = _data["isHighPriority"] !== undefined ? _data["isHighPriority"] : <any>null;
            this.isGuestRequest = _data["isGuestRequest"] !== undefined ? _data["isGuestRequest"] : <any>null;
            this.imageUrl = _data["imageUrl"] !== undefined ? _data["imageUrl"] : <any>null;
            this.startsAt = _data["startsAt"] ? moment(_data["startsAt"].toString()) : <any>null;
            if (Array.isArray(_data["userIds"])) {
                this.userIds = [] as any;
                for (let item of _data["userIds"])
                    this.userIds!.push(item);
            }
            if (Array.isArray(_data["userGroupIds"])) {
                this.userGroupIds = [] as any;
                for (let item of _data["userGroupIds"])
                    this.userGroupIds!.push(item);
            }
            if (Array.isArray(_data["userSubGroupIds"])) {
                this.userSubGroupIds = [] as any;
                for (let item of _data["userSubGroupIds"])
                    this.userSubGroupIds!.push(item);
            }
        }
    }

    static fromJS(data: any): InsertTaskForMobileCommand {
        data = typeof data === 'object' ? data : {};
        let result = new InsertTaskForMobileCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        if (Array.isArray(this.roomIds)) {
            data["roomIds"] = [];
            for (let item of this.roomIds)
                data["roomIds"].push(item);
        }
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["actionId"] = this.actionId !== undefined ? this.actionId : <any>null;
        data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["credits"] = this.credits !== undefined ? this.credits : <any>null;
        data["comment"] = this.comment !== undefined ? this.comment : <any>null;
        data["isHighPriority"] = this.isHighPriority !== undefined ? this.isHighPriority : <any>null;
        data["isGuestRequest"] = this.isGuestRequest !== undefined ? this.isGuestRequest : <any>null;
        data["imageUrl"] = this.imageUrl !== undefined ? this.imageUrl : <any>null;
        data["startsAt"] = this.startsAt ? this.startsAt.toISOString() : <any>null;
        if (Array.isArray(this.userIds)) {
            data["userIds"] = [];
            for (let item of this.userIds)
                data["userIds"].push(item);
        }
        if (Array.isArray(this.userGroupIds)) {
            data["userGroupIds"] = [];
            for (let item of this.userGroupIds)
                data["userGroupIds"].push(item);
        }
        if (Array.isArray(this.userSubGroupIds)) {
            data["userSubGroupIds"] = [];
            for (let item of this.userSubGroupIds)
                data["userSubGroupIds"].push(item);
        }
        return data; 
    }
}

export interface IInsertTaskForMobileCommand {
    hotelId?: string | null;
    roomIds?: string[] | null;
    assetId: string;
    actionId: string;
    quantity?: number | null;
    price?: number | null;
    credits?: number | null;
    comment?: string | null;
    isHighPriority?: boolean | null;
    isGuestRequest?: boolean | null;
    imageUrl?: string | null;
    startsAt?: moment.Moment | null;
    userIds?: string[] | null;
    userGroupIds?: string[] | null;
    userSubGroupIds?: string[] | null;
}

export class UpdateTaskStatusForMobileCommand implements IUpdateTaskStatusForMobileCommand {
    hotelId?: string | null;
    taskId!: string;
    status?: string | null;

    constructor(data?: IUpdateTaskStatusForMobileCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.taskId = _data["taskId"] !== undefined ? _data["taskId"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateTaskStatusForMobileCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTaskStatusForMobileCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["taskId"] = this.taskId !== undefined ? this.taskId : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        return data; 
    }
}

export interface IUpdateTaskStatusForMobileCommand {
    hotelId?: string | null;
    taskId: string;
    status?: string | null;
}

export class UpdateMultipleTaskStatusesForMobileCommand implements IUpdateMultipleTaskStatusesForMobileCommand {
    hotelId?: string | null;
    tasks?: UpdateMultipleTaksStatusesItem[] | null;

    constructor(data?: IUpdateMultipleTaskStatusesForMobileCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            if (Array.isArray(_data["tasks"])) {
                this.tasks = [] as any;
                for (let item of _data["tasks"])
                    this.tasks!.push(UpdateMultipleTaksStatusesItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateMultipleTaskStatusesForMobileCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateMultipleTaskStatusesForMobileCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        if (Array.isArray(this.tasks)) {
            data["tasks"] = [];
            for (let item of this.tasks)
                data["tasks"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUpdateMultipleTaskStatusesForMobileCommand {
    hotelId?: string | null;
    tasks?: UpdateMultipleTaksStatusesItem[] | null;
}

export class UpdateMultipleTaksStatusesItem implements IUpdateMultipleTaksStatusesItem {
    taskId!: string;
    status?: string | null;

    constructor(data?: IUpdateMultipleTaksStatusesItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.taskId = _data["taskId"] !== undefined ? _data["taskId"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateMultipleTaksStatusesItem {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateMultipleTaksStatusesItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["taskId"] = this.taskId !== undefined ? this.taskId : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        return data; 
    }
}

export interface IUpdateMultipleTaksStatusesItem {
    taskId: string;
    status?: string | null;
}

export class MobileTask implements IMobileTask {
    id!: string;
    date_ts!: number;
    last_ts!: number;
    hotel_id?: string | null;
    creator_id!: string;
    uuid!: string;
    group_uuid?: string | null;
    task?: string | null;
    type?: string | null;
    meta?: MobileTaskMeta | null;
    guest_info?: MobileTaskGuestInfo | null;
    assigned?: MobileTaskAssigned | null;
    responsible_id!: string;
    responsible_first_name?: string | null;
    responsible_last_name?: string | null;
    due_date?: string | null;
    start_date?: string | null;
    due_ts?: number | null;
    messages?: MobileTaskMessage[] | null;
    updates?: MobileTaskStatusUpdateHistory[] | null;
    chain?: string | null;
    is_claimed!: boolean;
    is_rejected!: boolean;
    is_started!: boolean;
    is_completed!: boolean;
    is_paused!: boolean;
    is_cancelled!: boolean;
    is_required!: boolean;
    is_optional!: boolean;
    is_priority!: boolean;
    is_group!: boolean;
    is_hidden!: boolean;
    comment?: string | null;
    image_urls?: string[] | null;
    is_guest_request!: boolean;

    constructor(data?: IMobileTask) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.date_ts = _data["date_ts"] !== undefined ? _data["date_ts"] : <any>null;
            this.last_ts = _data["last_ts"] !== undefined ? _data["last_ts"] : <any>null;
            this.hotel_id = _data["hotel_id"] !== undefined ? _data["hotel_id"] : <any>null;
            this.creator_id = _data["creator_id"] !== undefined ? _data["creator_id"] : <any>null;
            this.uuid = _data["uuid"] !== undefined ? _data["uuid"] : <any>null;
            this.group_uuid = _data["group_uuid"] !== undefined ? _data["group_uuid"] : <any>null;
            this.task = _data["task"] !== undefined ? _data["task"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.meta = _data["meta"] ? MobileTaskMeta.fromJS(_data["meta"]) : <any>null;
            this.guest_info = _data["guest_info"] ? MobileTaskGuestInfo.fromJS(_data["guest_info"]) : <any>null;
            this.assigned = _data["assigned"] ? MobileTaskAssigned.fromJS(_data["assigned"]) : <any>null;
            this.responsible_id = _data["responsible_id"] !== undefined ? _data["responsible_id"] : <any>null;
            this.responsible_first_name = _data["responsible_first_name"] !== undefined ? _data["responsible_first_name"] : <any>null;
            this.responsible_last_name = _data["responsible_last_name"] !== undefined ? _data["responsible_last_name"] : <any>null;
            this.due_date = _data["due_date"] !== undefined ? _data["due_date"] : <any>null;
            this.start_date = _data["start_date"] !== undefined ? _data["start_date"] : <any>null;
            this.due_ts = _data["due_ts"] !== undefined ? _data["due_ts"] : <any>null;
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(MobileTaskMessage.fromJS(item));
            }
            if (Array.isArray(_data["updates"])) {
                this.updates = [] as any;
                for (let item of _data["updates"])
                    this.updates!.push(MobileTaskStatusUpdateHistory.fromJS(item));
            }
            this.chain = _data["chain"] !== undefined ? _data["chain"] : <any>null;
            this.is_claimed = _data["is_claimed"] !== undefined ? _data["is_claimed"] : <any>null;
            this.is_rejected = _data["is_rejected"] !== undefined ? _data["is_rejected"] : <any>null;
            this.is_started = _data["is_started"] !== undefined ? _data["is_started"] : <any>null;
            this.is_completed = _data["is_completed"] !== undefined ? _data["is_completed"] : <any>null;
            this.is_paused = _data["is_paused"] !== undefined ? _data["is_paused"] : <any>null;
            this.is_cancelled = _data["is_cancelled"] !== undefined ? _data["is_cancelled"] : <any>null;
            this.is_required = _data["is_required"] !== undefined ? _data["is_required"] : <any>null;
            this.is_optional = _data["is_optional"] !== undefined ? _data["is_optional"] : <any>null;
            this.is_priority = _data["is_priority"] !== undefined ? _data["is_priority"] : <any>null;
            this.is_group = _data["is_group"] !== undefined ? _data["is_group"] : <any>null;
            this.is_hidden = _data["is_hidden"] !== undefined ? _data["is_hidden"] : <any>null;
            this.comment = _data["comment"] !== undefined ? _data["comment"] : <any>null;
            if (Array.isArray(_data["image_urls"])) {
                this.image_urls = [] as any;
                for (let item of _data["image_urls"])
                    this.image_urls!.push(item);
            }
            this.is_guest_request = _data["is_guest_request"] !== undefined ? _data["is_guest_request"] : <any>null;
        }
    }

    static fromJS(data: any): MobileTask {
        data = typeof data === 'object' ? data : {};
        let result = new MobileTask();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["date_ts"] = this.date_ts !== undefined ? this.date_ts : <any>null;
        data["last_ts"] = this.last_ts !== undefined ? this.last_ts : <any>null;
        data["hotel_id"] = this.hotel_id !== undefined ? this.hotel_id : <any>null;
        data["creator_id"] = this.creator_id !== undefined ? this.creator_id : <any>null;
        data["uuid"] = this.uuid !== undefined ? this.uuid : <any>null;
        data["group_uuid"] = this.group_uuid !== undefined ? this.group_uuid : <any>null;
        data["task"] = this.task !== undefined ? this.task : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["meta"] = this.meta ? this.meta.toJSON() : <any>null;
        data["guest_info"] = this.guest_info ? this.guest_info.toJSON() : <any>null;
        data["assigned"] = this.assigned ? this.assigned.toJSON() : <any>null;
        data["responsible_id"] = this.responsible_id !== undefined ? this.responsible_id : <any>null;
        data["responsible_first_name"] = this.responsible_first_name !== undefined ? this.responsible_first_name : <any>null;
        data["responsible_last_name"] = this.responsible_last_name !== undefined ? this.responsible_last_name : <any>null;
        data["due_date"] = this.due_date !== undefined ? this.due_date : <any>null;
        data["start_date"] = this.start_date !== undefined ? this.start_date : <any>null;
        data["due_ts"] = this.due_ts !== undefined ? this.due_ts : <any>null;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        if (Array.isArray(this.updates)) {
            data["updates"] = [];
            for (let item of this.updates)
                data["updates"].push(item.toJSON());
        }
        data["chain"] = this.chain !== undefined ? this.chain : <any>null;
        data["is_claimed"] = this.is_claimed !== undefined ? this.is_claimed : <any>null;
        data["is_rejected"] = this.is_rejected !== undefined ? this.is_rejected : <any>null;
        data["is_started"] = this.is_started !== undefined ? this.is_started : <any>null;
        data["is_completed"] = this.is_completed !== undefined ? this.is_completed : <any>null;
        data["is_paused"] = this.is_paused !== undefined ? this.is_paused : <any>null;
        data["is_cancelled"] = this.is_cancelled !== undefined ? this.is_cancelled : <any>null;
        data["is_required"] = this.is_required !== undefined ? this.is_required : <any>null;
        data["is_optional"] = this.is_optional !== undefined ? this.is_optional : <any>null;
        data["is_priority"] = this.is_priority !== undefined ? this.is_priority : <any>null;
        data["is_group"] = this.is_group !== undefined ? this.is_group : <any>null;
        data["is_hidden"] = this.is_hidden !== undefined ? this.is_hidden : <any>null;
        data["comment"] = this.comment !== undefined ? this.comment : <any>null;
        if (Array.isArray(this.image_urls)) {
            data["image_urls"] = [];
            for (let item of this.image_urls)
                data["image_urls"].push(item);
        }
        data["is_guest_request"] = this.is_guest_request !== undefined ? this.is_guest_request : <any>null;
        return data; 
    }
}

export interface IMobileTask {
    id: string;
    date_ts: number;
    last_ts: number;
    hotel_id?: string | null;
    creator_id: string;
    uuid: string;
    group_uuid?: string | null;
    task?: string | null;
    type?: string | null;
    meta?: MobileTaskMeta | null;
    guest_info?: MobileTaskGuestInfo | null;
    assigned?: MobileTaskAssigned | null;
    responsible_id: string;
    responsible_first_name?: string | null;
    responsible_last_name?: string | null;
    due_date?: string | null;
    start_date?: string | null;
    due_ts?: number | null;
    messages?: MobileTaskMessage[] | null;
    updates?: MobileTaskStatusUpdateHistory[] | null;
    chain?: string | null;
    is_claimed: boolean;
    is_rejected: boolean;
    is_started: boolean;
    is_completed: boolean;
    is_paused: boolean;
    is_cancelled: boolean;
    is_required: boolean;
    is_optional: boolean;
    is_priority: boolean;
    is_group: boolean;
    is_hidden: boolean;
    comment?: string | null;
    image_urls?: string[] | null;
    is_guest_request: boolean;
}

export class MobileTaskMeta implements IMobileTaskMeta {
    isBlocking!: boolean;
    isHousekeeping!: boolean;
    isConcierge!: boolean;
    isMaintenance!: boolean;
    estimatedTime?: string | null;
    creatorId!: string;
    action?: MobileTaskMetaAction | null;
    location?: string | null;
    room_id!: string;

    constructor(data?: IMobileTaskMeta) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isBlocking = _data["isBlocking"] !== undefined ? _data["isBlocking"] : <any>null;
            this.isHousekeeping = _data["isHousekeeping"] !== undefined ? _data["isHousekeeping"] : <any>null;
            this.isConcierge = _data["isConcierge"] !== undefined ? _data["isConcierge"] : <any>null;
            this.isMaintenance = _data["isMaintenance"] !== undefined ? _data["isMaintenance"] : <any>null;
            this.estimatedTime = _data["estimatedTime"] !== undefined ? _data["estimatedTime"] : <any>null;
            this.creatorId = _data["creatorId"] !== undefined ? _data["creatorId"] : <any>null;
            this.action = _data["action"] ? MobileTaskMetaAction.fromJS(_data["action"]) : <any>null;
            this.location = _data["location"] !== undefined ? _data["location"] : <any>null;
            this.room_id = _data["room_id"] !== undefined ? _data["room_id"] : <any>null;
        }
    }

    static fromJS(data: any): MobileTaskMeta {
        data = typeof data === 'object' ? data : {};
        let result = new MobileTaskMeta();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isBlocking"] = this.isBlocking !== undefined ? this.isBlocking : <any>null;
        data["isHousekeeping"] = this.isHousekeeping !== undefined ? this.isHousekeeping : <any>null;
        data["isConcierge"] = this.isConcierge !== undefined ? this.isConcierge : <any>null;
        data["isMaintenance"] = this.isMaintenance !== undefined ? this.isMaintenance : <any>null;
        data["estimatedTime"] = this.estimatedTime !== undefined ? this.estimatedTime : <any>null;
        data["creatorId"] = this.creatorId !== undefined ? this.creatorId : <any>null;
        data["action"] = this.action ? this.action.toJSON() : <any>null;
        data["location"] = this.location !== undefined ? this.location : <any>null;
        data["room_id"] = this.room_id !== undefined ? this.room_id : <any>null;
        return data; 
    }
}

export interface IMobileTaskMeta {
    isBlocking: boolean;
    isHousekeeping: boolean;
    isConcierge: boolean;
    isMaintenance: boolean;
    estimatedTime?: string | null;
    creatorId: string;
    action?: MobileTaskMetaAction | null;
    location?: string | null;
    room_id: string;
}

export class MobileTaskMetaAction implements IMobileTaskMetaAction {
    id!: number;
    hotel_id?: string | null;
    date_ts!: number;
    creator_id!: number;
    label?: string | null;
    body?: MobileTaskMetaActionBody | null;
    is_active!: number;
    isSelected!: boolean;

    constructor(data?: IMobileTaskMetaAction) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.hotel_id = _data["hotel_id"] !== undefined ? _data["hotel_id"] : <any>null;
            this.date_ts = _data["date_ts"] !== undefined ? _data["date_ts"] : <any>null;
            this.creator_id = _data["creator_id"] !== undefined ? _data["creator_id"] : <any>null;
            this.label = _data["label"] !== undefined ? _data["label"] : <any>null;
            this.body = _data["body"] ? MobileTaskMetaActionBody.fromJS(_data["body"]) : <any>null;
            this.is_active = _data["is_active"] !== undefined ? _data["is_active"] : <any>null;
            this.isSelected = _data["isSelected"] !== undefined ? _data["isSelected"] : <any>null;
        }
    }

    static fromJS(data: any): MobileTaskMetaAction {
        data = typeof data === 'object' ? data : {};
        let result = new MobileTaskMetaAction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["hotel_id"] = this.hotel_id !== undefined ? this.hotel_id : <any>null;
        data["date_ts"] = this.date_ts !== undefined ? this.date_ts : <any>null;
        data["creator_id"] = this.creator_id !== undefined ? this.creator_id : <any>null;
        data["label"] = this.label !== undefined ? this.label : <any>null;
        data["body"] = this.body ? this.body.toJSON() : <any>null;
        data["is_active"] = this.is_active !== undefined ? this.is_active : <any>null;
        data["isSelected"] = this.isSelected !== undefined ? this.isSelected : <any>null;
        return data; 
    }
}

export interface IMobileTaskMetaAction {
    id: number;
    hotel_id?: string | null;
    date_ts: number;
    creator_id: number;
    label?: string | null;
    body?: MobileTaskMetaActionBody | null;
    is_active: number;
    isSelected: boolean;
}

export class MobileTaskMetaActionBody implements IMobileTaskMetaActionBody {
    task_type?: string | null;
    is_Mandatory!: boolean;

    constructor(data?: IMobileTaskMetaActionBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.task_type = _data["task_type"] !== undefined ? _data["task_type"] : <any>null;
            this.is_Mandatory = _data["is_Mandatory"] !== undefined ? _data["is_Mandatory"] : <any>null;
        }
    }

    static fromJS(data: any): MobileTaskMetaActionBody {
        data = typeof data === 'object' ? data : {};
        let result = new MobileTaskMetaActionBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["task_type"] = this.task_type !== undefined ? this.task_type : <any>null;
        data["is_Mandatory"] = this.is_Mandatory !== undefined ? this.is_Mandatory : <any>null;
        return data; 
    }
}

export interface IMobileTaskMetaActionBody {
    task_type?: string | null;
    is_Mandatory: boolean;
}

export class MobileTaskGuestInfo implements IMobileTaskGuestInfo {
    guest_name?: string | null;

    constructor(data?: IMobileTaskGuestInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.guest_name = _data["guest_name"] !== undefined ? _data["guest_name"] : <any>null;
        }
    }

    static fromJS(data: any): MobileTaskGuestInfo {
        data = typeof data === 'object' ? data : {};
        let result = new MobileTaskGuestInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["guest_name"] = this.guest_name !== undefined ? this.guest_name : <any>null;
        return data; 
    }
}

export interface IMobileTaskGuestInfo {
    guest_name?: string | null;
}

export class MobileTaskAssigned implements IMobileTaskAssigned {
    is_mandatory!: boolean;
    isPlannedAttendant!: boolean;
    isPlannedRunner!: boolean;
    user_ids?: string[] | null;
    label?: string | null;

    constructor(data?: IMobileTaskAssigned) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.is_mandatory = _data["is_mandatory"] !== undefined ? _data["is_mandatory"] : <any>null;
            this.isPlannedAttendant = _data["isPlannedAttendant"] !== undefined ? _data["isPlannedAttendant"] : <any>null;
            this.isPlannedRunner = _data["isPlannedRunner"] !== undefined ? _data["isPlannedRunner"] : <any>null;
            if (Array.isArray(_data["user_ids"])) {
                this.user_ids = [] as any;
                for (let item of _data["user_ids"])
                    this.user_ids!.push(item);
            }
            this.label = _data["label"] !== undefined ? _data["label"] : <any>null;
        }
    }

    static fromJS(data: any): MobileTaskAssigned {
        data = typeof data === 'object' ? data : {};
        let result = new MobileTaskAssigned();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["is_mandatory"] = this.is_mandatory !== undefined ? this.is_mandatory : <any>null;
        data["isPlannedAttendant"] = this.isPlannedAttendant !== undefined ? this.isPlannedAttendant : <any>null;
        data["isPlannedRunner"] = this.isPlannedRunner !== undefined ? this.isPlannedRunner : <any>null;
        if (Array.isArray(this.user_ids)) {
            data["user_ids"] = [];
            for (let item of this.user_ids)
                data["user_ids"].push(item);
        }
        data["label"] = this.label !== undefined ? this.label : <any>null;
        return data; 
    }
}

export interface IMobileTaskAssigned {
    is_mandatory: boolean;
    isPlannedAttendant: boolean;
    isPlannedRunner: boolean;
    user_ids?: string[] | null;
    label?: string | null;
}

export class MobileTaskMessage implements IMobileTaskMessage {
    message?: string | null;
    user_id!: string;
    date_ts!: number;

    constructor(data?: IMobileTaskMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.user_id = _data["user_id"] !== undefined ? _data["user_id"] : <any>null;
            this.date_ts = _data["date_ts"] !== undefined ? _data["date_ts"] : <any>null;
        }
    }

    static fromJS(data: any): MobileTaskMessage {
        data = typeof data === 'object' ? data : {};
        let result = new MobileTaskMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["user_id"] = this.user_id !== undefined ? this.user_id : <any>null;
        data["date_ts"] = this.date_ts !== undefined ? this.date_ts : <any>null;
        return data; 
    }
}

export interface IMobileTaskMessage {
    message?: string | null;
    user_id: string;
    date_ts: number;
}

export class MobileTaskStatusUpdateHistory implements IMobileTaskStatusUpdateHistory {
    user_id!: string;
    update_type?: string | null;
    status?: string | null;

    constructor(data?: IMobileTaskStatusUpdateHistory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.user_id = _data["user_id"] !== undefined ? _data["user_id"] : <any>null;
            this.update_type = _data["update_type"] !== undefined ? _data["update_type"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
        }
    }

    static fromJS(data: any): MobileTaskStatusUpdateHistory {
        data = typeof data === 'object' ? data : {};
        let result = new MobileTaskStatusUpdateHistory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user_id"] = this.user_id !== undefined ? this.user_id : <any>null;
        data["update_type"] = this.update_type !== undefined ? this.update_type : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        return data; 
    }
}

export interface IMobileTaskStatusUpdateHistory {
    user_id: string;
    update_type?: string | null;
    status?: string | null;
}

export class GetListOfTasksForMobileQuery implements IGetListOfTasksForMobileQuery {
    hotelId?: string | null;

    constructor(data?: IGetListOfTasksForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): GetListOfTasksForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfTasksForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IGetListOfTasksForMobileQuery {
    hotelId?: string | null;
}

export class MobileUsersPreview implements IMobileUsersPreview {
    name?: string | null;
    images?: string | null;
    users?: MobileUserPreview[] | null;
    hotelId?: string | null;
    hotelGroupId!: string;
    hotelGroupName?: string | null;
    hotelName?: string | null;

    constructor(data?: IMobileUsersPreview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.images = _data["images"] !== undefined ? _data["images"] : <any>null;
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(MobileUserPreview.fromJS(item));
            }
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.hotelGroupId = _data["hotelGroupId"] !== undefined ? _data["hotelGroupId"] : <any>null;
            this.hotelGroupName = _data["hotelGroupName"] !== undefined ? _data["hotelGroupName"] : <any>null;
            this.hotelName = _data["hotelName"] !== undefined ? _data["hotelName"] : <any>null;
        }
    }

    static fromJS(data: any): MobileUsersPreview {
        data = typeof data === 'object' ? data : {};
        let result = new MobileUsersPreview();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["images"] = this.images !== undefined ? this.images : <any>null;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["hotelGroupId"] = this.hotelGroupId !== undefined ? this.hotelGroupId : <any>null;
        data["hotelGroupName"] = this.hotelGroupName !== undefined ? this.hotelGroupName : <any>null;
        data["hotelName"] = this.hotelName !== undefined ? this.hotelName : <any>null;
        return data; 
    }
}

export interface IMobileUsersPreview {
    name?: string | null;
    images?: string | null;
    users?: MobileUserPreview[] | null;
    hotelId?: string | null;
    hotelGroupId: string;
    hotelGroupName?: string | null;
    hotelName?: string | null;
}

export class MobileUserPreview implements IMobileUserPreview {
    username?: string | null;
    image?: string | null;
    language?: string | null;

    constructor(data?: IMobileUserPreview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.image = _data["image"] !== undefined ? _data["image"] : <any>null;
            this.language = _data["language"] !== undefined ? _data["language"] : <any>null;
        }
    }

    static fromJS(data: any): MobileUserPreview {
        data = typeof data === 'object' ? data : {};
        let result = new MobileUserPreview();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["image"] = this.image !== undefined ? this.image : <any>null;
        data["language"] = this.language !== undefined ? this.language : <any>null;
        return data; 
    }
}

export interface IMobileUserPreview {
    username?: string | null;
    image?: string | null;
    language?: string | null;
}

export class GetListOfHotelGroupUsersForMobileQuery implements IGetListOfHotelGroupUsersForMobileQuery {
    hotelUsername?: string | null;
    userType?: string | null;

    constructor(data?: IGetListOfHotelGroupUsersForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelUsername = _data["hotelUsername"] !== undefined ? _data["hotelUsername"] : <any>null;
            this.userType = _data["userType"] !== undefined ? _data["userType"] : <any>null;
        }
    }

    static fromJS(data: any): GetListOfHotelGroupUsersForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfHotelGroupUsersForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelUsername"] = this.hotelUsername !== undefined ? this.hotelUsername : <any>null;
        data["userType"] = this.userType !== undefined ? this.userType : <any>null;
        return data; 
    }
}

export interface IGetListOfHotelGroupUsersForMobileQuery {
    hotelUsername?: string | null;
    userType?: string | null;
}

export class GetListOfHotelGroupUsersForHotelForMobileQuery implements IGetListOfHotelGroupUsersForHotelForMobileQuery {
    hotelName?: string | null;
    hotelGroupKey?: string | null;
    userType?: string | null;

    constructor(data?: IGetListOfHotelGroupUsersForHotelForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelName = _data["hotelName"] !== undefined ? _data["hotelName"] : <any>null;
            this.hotelGroupKey = _data["hotelGroupKey"] !== undefined ? _data["hotelGroupKey"] : <any>null;
            this.userType = _data["userType"] !== undefined ? _data["userType"] : <any>null;
        }
    }

    static fromJS(data: any): GetListOfHotelGroupUsersForHotelForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfHotelGroupUsersForHotelForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelName"] = this.hotelName !== undefined ? this.hotelName : <any>null;
        data["hotelGroupKey"] = this.hotelGroupKey !== undefined ? this.hotelGroupKey : <any>null;
        data["userType"] = this.userType !== undefined ? this.userType : <any>null;
        return data; 
    }
}

export interface IGetListOfHotelGroupUsersForHotelForMobileQuery {
    hotelName?: string | null;
    hotelGroupKey?: string | null;
    userType?: string | null;
}

export class UserDetailsForMobile implements IUserDetailsForMobile {
    id!: string;
    username?: string | null;
    name?: string | null;
    language?: string | null;

    constructor(data?: IUserDetailsForMobile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.language = _data["language"] !== undefined ? _data["language"] : <any>null;
        }
    }

    static fromJS(data: any): UserDetailsForMobile {
        data = typeof data === 'object' ? data : {};
        let result = new UserDetailsForMobile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["language"] = this.language !== undefined ? this.language : <any>null;
        return data; 
    }
}

export interface IUserDetailsForMobile {
    id: string;
    username?: string | null;
    name?: string | null;
    language?: string | null;
}

export class GetUserDetailsForMobileQuery implements IGetUserDetailsForMobileQuery {
    id!: string;

    constructor(data?: IGetUserDetailsForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): GetUserDetailsForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserDetailsForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IGetUserDetailsForMobileQuery {
    id: string;
}

export class GetMyUserDetailsForMobileQuery implements IGetMyUserDetailsForMobileQuery {

    constructor(data?: IGetMyUserDetailsForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): GetMyUserDetailsForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetMyUserDetailsForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IGetMyUserDetailsForMobileQuery {
}

export class MobileUser implements IMobileUser {
    id!: string;
    username?: string | null;
    email?: string | null;
    hotelUsername?: string | null;
    first_name?: string | null;
    last_name?: string | null;
    hashed_password?: string | null;
    salt?: string | null;
    street?: string | null;
    city?: string | null;
    state?: string | null;
    country?: string | null;
    zip?: string | null;
    status?: string | null;
    image?: string | null;
    thumbnail?: string | null;
    language?: string | null;
    isAdministrator!: boolean;
    isAttendant!: boolean;
    isInspector!: boolean;
    isMaintenance!: boolean;
    isReceptionist!: boolean;
    isRoomsServices!: boolean;
    isRoomRunner!: boolean;
    isFoodBeverage!: boolean;
    isHost!: boolean;
    isSuperAdmin!: boolean;
    isOnDuty!: boolean;
    appVersion?: string | null;
    employeeId?: string | null;
    hotel?: string | null;
    organization?: string | null;
    role!: number;
    groups?: string[] | null;
    permissions?: string[] | null;
    userGroupId?: string | null;
    userSubGroupId?: string | null;

    constructor(data?: IMobileUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.hotelUsername = _data["hotelUsername"] !== undefined ? _data["hotelUsername"] : <any>null;
            this.first_name = _data["first_name"] !== undefined ? _data["first_name"] : <any>null;
            this.last_name = _data["last_name"] !== undefined ? _data["last_name"] : <any>null;
            this.hashed_password = _data["hashed_password"] !== undefined ? _data["hashed_password"] : <any>null;
            this.salt = _data["salt"] !== undefined ? _data["salt"] : <any>null;
            this.street = _data["street"] !== undefined ? _data["street"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.zip = _data["zip"] !== undefined ? _data["zip"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.image = _data["image"] !== undefined ? _data["image"] : <any>null;
            this.thumbnail = _data["thumbnail"] !== undefined ? _data["thumbnail"] : <any>null;
            this.language = _data["language"] !== undefined ? _data["language"] : <any>null;
            this.isAdministrator = _data["isAdministrator"] !== undefined ? _data["isAdministrator"] : <any>null;
            this.isAttendant = _data["isAttendant"] !== undefined ? _data["isAttendant"] : <any>null;
            this.isInspector = _data["isInspector"] !== undefined ? _data["isInspector"] : <any>null;
            this.isMaintenance = _data["isMaintenance"] !== undefined ? _data["isMaintenance"] : <any>null;
            this.isReceptionist = _data["isReceptionist"] !== undefined ? _data["isReceptionist"] : <any>null;
            this.isRoomsServices = _data["isRoomsServices"] !== undefined ? _data["isRoomsServices"] : <any>null;
            this.isRoomRunner = _data["isRoomRunner"] !== undefined ? _data["isRoomRunner"] : <any>null;
            this.isFoodBeverage = _data["isFoodBeverage"] !== undefined ? _data["isFoodBeverage"] : <any>null;
            this.isHost = _data["isHost"] !== undefined ? _data["isHost"] : <any>null;
            this.isSuperAdmin = _data["isSuperAdmin"] !== undefined ? _data["isSuperAdmin"] : <any>null;
            this.isOnDuty = _data["isOnDuty"] !== undefined ? _data["isOnDuty"] : <any>null;
            this.appVersion = _data["appVersion"] !== undefined ? _data["appVersion"] : <any>null;
            this.employeeId = _data["employeeId"] !== undefined ? _data["employeeId"] : <any>null;
            this.hotel = _data["hotel"] !== undefined ? _data["hotel"] : <any>null;
            this.organization = _data["organization"] !== undefined ? _data["organization"] : <any>null;
            this.role = _data["role"] !== undefined ? _data["role"] : <any>null;
            if (Array.isArray(_data["groups"])) {
                this.groups = [] as any;
                for (let item of _data["groups"])
                    this.groups!.push(item);
            }
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(item);
            }
            this.userGroupId = _data["userGroupId"] !== undefined ? _data["userGroupId"] : <any>null;
            this.userSubGroupId = _data["userSubGroupId"] !== undefined ? _data["userSubGroupId"] : <any>null;
        }
    }

    static fromJS(data: any): MobileUser {
        data = typeof data === 'object' ? data : {};
        let result = new MobileUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["hotelUsername"] = this.hotelUsername !== undefined ? this.hotelUsername : <any>null;
        data["first_name"] = this.first_name !== undefined ? this.first_name : <any>null;
        data["last_name"] = this.last_name !== undefined ? this.last_name : <any>null;
        data["hashed_password"] = this.hashed_password !== undefined ? this.hashed_password : <any>null;
        data["salt"] = this.salt !== undefined ? this.salt : <any>null;
        data["street"] = this.street !== undefined ? this.street : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["zip"] = this.zip !== undefined ? this.zip : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["image"] = this.image !== undefined ? this.image : <any>null;
        data["thumbnail"] = this.thumbnail !== undefined ? this.thumbnail : <any>null;
        data["language"] = this.language !== undefined ? this.language : <any>null;
        data["isAdministrator"] = this.isAdministrator !== undefined ? this.isAdministrator : <any>null;
        data["isAttendant"] = this.isAttendant !== undefined ? this.isAttendant : <any>null;
        data["isInspector"] = this.isInspector !== undefined ? this.isInspector : <any>null;
        data["isMaintenance"] = this.isMaintenance !== undefined ? this.isMaintenance : <any>null;
        data["isReceptionist"] = this.isReceptionist !== undefined ? this.isReceptionist : <any>null;
        data["isRoomsServices"] = this.isRoomsServices !== undefined ? this.isRoomsServices : <any>null;
        data["isRoomRunner"] = this.isRoomRunner !== undefined ? this.isRoomRunner : <any>null;
        data["isFoodBeverage"] = this.isFoodBeverage !== undefined ? this.isFoodBeverage : <any>null;
        data["isHost"] = this.isHost !== undefined ? this.isHost : <any>null;
        data["isSuperAdmin"] = this.isSuperAdmin !== undefined ? this.isSuperAdmin : <any>null;
        data["isOnDuty"] = this.isOnDuty !== undefined ? this.isOnDuty : <any>null;
        data["appVersion"] = this.appVersion !== undefined ? this.appVersion : <any>null;
        data["employeeId"] = this.employeeId !== undefined ? this.employeeId : <any>null;
        data["hotel"] = this.hotel !== undefined ? this.hotel : <any>null;
        data["organization"] = this.organization !== undefined ? this.organization : <any>null;
        data["role"] = this.role !== undefined ? this.role : <any>null;
        if (Array.isArray(this.groups)) {
            data["groups"] = [];
            for (let item of this.groups)
                data["groups"].push(item);
        }
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item);
        }
        data["userGroupId"] = this.userGroupId !== undefined ? this.userGroupId : <any>null;
        data["userSubGroupId"] = this.userSubGroupId !== undefined ? this.userSubGroupId : <any>null;
        return data; 
    }
}

export interface IMobileUser {
    id: string;
    username?: string | null;
    email?: string | null;
    hotelUsername?: string | null;
    first_name?: string | null;
    last_name?: string | null;
    hashed_password?: string | null;
    salt?: string | null;
    street?: string | null;
    city?: string | null;
    state?: string | null;
    country?: string | null;
    zip?: string | null;
    status?: string | null;
    image?: string | null;
    thumbnail?: string | null;
    language?: string | null;
    isAdministrator: boolean;
    isAttendant: boolean;
    isInspector: boolean;
    isMaintenance: boolean;
    isReceptionist: boolean;
    isRoomsServices: boolean;
    isRoomRunner: boolean;
    isFoodBeverage: boolean;
    isHost: boolean;
    isSuperAdmin: boolean;
    isOnDuty: boolean;
    appVersion?: string | null;
    employeeId?: string | null;
    hotel?: string | null;
    organization?: string | null;
    role: number;
    groups?: string[] | null;
    permissions?: string[] | null;
    userGroupId?: string | null;
    userSubGroupId?: string | null;
}

export class GetListOfUsersForMobileQuery implements IGetListOfUsersForMobileQuery {
    hotelId?: string | null;

    constructor(data?: IGetListOfUsersForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): GetListOfUsersForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfUsersForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IGetListOfUsersForMobileQuery {
    hotelId?: string | null;
}

export class UpdateOnDutyStatusForMobileCommand implements IUpdateOnDutyStatusForMobileCommand {
    hotelId?: string | null;
    userId!: string;
    status!: boolean;

    constructor(data?: IUpdateOnDutyStatusForMobileCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateOnDutyStatusForMobileCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateOnDutyStatusForMobileCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        return data; 
    }
}

export interface IUpdateOnDutyStatusForMobileCommand {
    hotelId?: string | null;
    userId: string;
    status: boolean;
}

export class MobileUserGroup implements IMobileUserGroup {
    id!: string;
    name?: string | null;
    hotelId?: string | null;
    userIds?: string[] | null;
    isMaintenanceViewable!: boolean;
    isHousekeepingViewable!: boolean;
    isConciergeViewable!: boolean;
    isPlanningViewable!: boolean;
    isDashboardViewable!: boolean;
    isQuestionnairesViewable!: boolean;
    isInventoryViewable!: boolean;
    isLostFoundViewable!: boolean;
    isHistoryViewable!: boolean;
    isAssetsViewable!: boolean;
    isCatalogViewable!: boolean;
    isRoomsViewable!: boolean;
    isUsersViewable!: boolean;
    isGroupsViewable!: boolean;
    isSettingsViewable!: boolean;
    isDashboardTasksViewable!: boolean;
    isDashboardInventoryViewable!: boolean;
    isDashboardAttendantViewable!: boolean;
    isDashboardAuditViewable!: boolean;
    isDashboardExperiencesViewable!: boolean;
    emails?: string[] | null;
    isEnableEscalationAccepted!: boolean;
    isEscalationAcceptedGuests!: boolean;
    escalationAcceptedTime!: number;
    isEnableEscalationCompleted!: boolean;
    isEscalationCompletedGuests!: boolean;
    escalationCompletedTime!: number;
    isEnableExperienceStartEmail!: boolean;
    isEnableExperienceUpdateEmail!: boolean;
    isEnableExperienceEndEmail!: boolean;
    isSubGroup!: boolean;
    userGroupId!: string;
    userSubGroupId?: string | null;
    typeKey?: string | null;

    constructor(data?: IMobileUserGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            if (Array.isArray(_data["userIds"])) {
                this.userIds = [] as any;
                for (let item of _data["userIds"])
                    this.userIds!.push(item);
            }
            this.isMaintenanceViewable = _data["isMaintenanceViewable"] !== undefined ? _data["isMaintenanceViewable"] : <any>null;
            this.isHousekeepingViewable = _data["isHousekeepingViewable"] !== undefined ? _data["isHousekeepingViewable"] : <any>null;
            this.isConciergeViewable = _data["isConciergeViewable"] !== undefined ? _data["isConciergeViewable"] : <any>null;
            this.isPlanningViewable = _data["isPlanningViewable"] !== undefined ? _data["isPlanningViewable"] : <any>null;
            this.isDashboardViewable = _data["isDashboardViewable"] !== undefined ? _data["isDashboardViewable"] : <any>null;
            this.isQuestionnairesViewable = _data["isQuestionnairesViewable"] !== undefined ? _data["isQuestionnairesViewable"] : <any>null;
            this.isInventoryViewable = _data["isInventoryViewable"] !== undefined ? _data["isInventoryViewable"] : <any>null;
            this.isLostFoundViewable = _data["isLostFoundViewable"] !== undefined ? _data["isLostFoundViewable"] : <any>null;
            this.isHistoryViewable = _data["isHistoryViewable"] !== undefined ? _data["isHistoryViewable"] : <any>null;
            this.isAssetsViewable = _data["isAssetsViewable"] !== undefined ? _data["isAssetsViewable"] : <any>null;
            this.isCatalogViewable = _data["isCatalogViewable"] !== undefined ? _data["isCatalogViewable"] : <any>null;
            this.isRoomsViewable = _data["isRoomsViewable"] !== undefined ? _data["isRoomsViewable"] : <any>null;
            this.isUsersViewable = _data["isUsersViewable"] !== undefined ? _data["isUsersViewable"] : <any>null;
            this.isGroupsViewable = _data["isGroupsViewable"] !== undefined ? _data["isGroupsViewable"] : <any>null;
            this.isSettingsViewable = _data["isSettingsViewable"] !== undefined ? _data["isSettingsViewable"] : <any>null;
            this.isDashboardTasksViewable = _data["isDashboardTasksViewable"] !== undefined ? _data["isDashboardTasksViewable"] : <any>null;
            this.isDashboardInventoryViewable = _data["isDashboardInventoryViewable"] !== undefined ? _data["isDashboardInventoryViewable"] : <any>null;
            this.isDashboardAttendantViewable = _data["isDashboardAttendantViewable"] !== undefined ? _data["isDashboardAttendantViewable"] : <any>null;
            this.isDashboardAuditViewable = _data["isDashboardAuditViewable"] !== undefined ? _data["isDashboardAuditViewable"] : <any>null;
            this.isDashboardExperiencesViewable = _data["isDashboardExperiencesViewable"] !== undefined ? _data["isDashboardExperiencesViewable"] : <any>null;
            if (Array.isArray(_data["emails"])) {
                this.emails = [] as any;
                for (let item of _data["emails"])
                    this.emails!.push(item);
            }
            this.isEnableEscalationAccepted = _data["isEnableEscalationAccepted"] !== undefined ? _data["isEnableEscalationAccepted"] : <any>null;
            this.isEscalationAcceptedGuests = _data["isEscalationAcceptedGuests"] !== undefined ? _data["isEscalationAcceptedGuests"] : <any>null;
            this.escalationAcceptedTime = _data["escalationAcceptedTime"] !== undefined ? _data["escalationAcceptedTime"] : <any>null;
            this.isEnableEscalationCompleted = _data["isEnableEscalationCompleted"] !== undefined ? _data["isEnableEscalationCompleted"] : <any>null;
            this.isEscalationCompletedGuests = _data["isEscalationCompletedGuests"] !== undefined ? _data["isEscalationCompletedGuests"] : <any>null;
            this.escalationCompletedTime = _data["escalationCompletedTime"] !== undefined ? _data["escalationCompletedTime"] : <any>null;
            this.isEnableExperienceStartEmail = _data["isEnableExperienceStartEmail"] !== undefined ? _data["isEnableExperienceStartEmail"] : <any>null;
            this.isEnableExperienceUpdateEmail = _data["isEnableExperienceUpdateEmail"] !== undefined ? _data["isEnableExperienceUpdateEmail"] : <any>null;
            this.isEnableExperienceEndEmail = _data["isEnableExperienceEndEmail"] !== undefined ? _data["isEnableExperienceEndEmail"] : <any>null;
            this.isSubGroup = _data["isSubGroup"] !== undefined ? _data["isSubGroup"] : <any>null;
            this.userGroupId = _data["userGroupId"] !== undefined ? _data["userGroupId"] : <any>null;
            this.userSubGroupId = _data["userSubGroupId"] !== undefined ? _data["userSubGroupId"] : <any>null;
            this.typeKey = _data["typeKey"] !== undefined ? _data["typeKey"] : <any>null;
        }
    }

    static fromJS(data: any): MobileUserGroup {
        data = typeof data === 'object' ? data : {};
        let result = new MobileUserGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        if (Array.isArray(this.userIds)) {
            data["userIds"] = [];
            for (let item of this.userIds)
                data["userIds"].push(item);
        }
        data["isMaintenanceViewable"] = this.isMaintenanceViewable !== undefined ? this.isMaintenanceViewable : <any>null;
        data["isHousekeepingViewable"] = this.isHousekeepingViewable !== undefined ? this.isHousekeepingViewable : <any>null;
        data["isConciergeViewable"] = this.isConciergeViewable !== undefined ? this.isConciergeViewable : <any>null;
        data["isPlanningViewable"] = this.isPlanningViewable !== undefined ? this.isPlanningViewable : <any>null;
        data["isDashboardViewable"] = this.isDashboardViewable !== undefined ? this.isDashboardViewable : <any>null;
        data["isQuestionnairesViewable"] = this.isQuestionnairesViewable !== undefined ? this.isQuestionnairesViewable : <any>null;
        data["isInventoryViewable"] = this.isInventoryViewable !== undefined ? this.isInventoryViewable : <any>null;
        data["isLostFoundViewable"] = this.isLostFoundViewable !== undefined ? this.isLostFoundViewable : <any>null;
        data["isHistoryViewable"] = this.isHistoryViewable !== undefined ? this.isHistoryViewable : <any>null;
        data["isAssetsViewable"] = this.isAssetsViewable !== undefined ? this.isAssetsViewable : <any>null;
        data["isCatalogViewable"] = this.isCatalogViewable !== undefined ? this.isCatalogViewable : <any>null;
        data["isRoomsViewable"] = this.isRoomsViewable !== undefined ? this.isRoomsViewable : <any>null;
        data["isUsersViewable"] = this.isUsersViewable !== undefined ? this.isUsersViewable : <any>null;
        data["isGroupsViewable"] = this.isGroupsViewable !== undefined ? this.isGroupsViewable : <any>null;
        data["isSettingsViewable"] = this.isSettingsViewable !== undefined ? this.isSettingsViewable : <any>null;
        data["isDashboardTasksViewable"] = this.isDashboardTasksViewable !== undefined ? this.isDashboardTasksViewable : <any>null;
        data["isDashboardInventoryViewable"] = this.isDashboardInventoryViewable !== undefined ? this.isDashboardInventoryViewable : <any>null;
        data["isDashboardAttendantViewable"] = this.isDashboardAttendantViewable !== undefined ? this.isDashboardAttendantViewable : <any>null;
        data["isDashboardAuditViewable"] = this.isDashboardAuditViewable !== undefined ? this.isDashboardAuditViewable : <any>null;
        data["isDashboardExperiencesViewable"] = this.isDashboardExperiencesViewable !== undefined ? this.isDashboardExperiencesViewable : <any>null;
        if (Array.isArray(this.emails)) {
            data["emails"] = [];
            for (let item of this.emails)
                data["emails"].push(item);
        }
        data["isEnableEscalationAccepted"] = this.isEnableEscalationAccepted !== undefined ? this.isEnableEscalationAccepted : <any>null;
        data["isEscalationAcceptedGuests"] = this.isEscalationAcceptedGuests !== undefined ? this.isEscalationAcceptedGuests : <any>null;
        data["escalationAcceptedTime"] = this.escalationAcceptedTime !== undefined ? this.escalationAcceptedTime : <any>null;
        data["isEnableEscalationCompleted"] = this.isEnableEscalationCompleted !== undefined ? this.isEnableEscalationCompleted : <any>null;
        data["isEscalationCompletedGuests"] = this.isEscalationCompletedGuests !== undefined ? this.isEscalationCompletedGuests : <any>null;
        data["escalationCompletedTime"] = this.escalationCompletedTime !== undefined ? this.escalationCompletedTime : <any>null;
        data["isEnableExperienceStartEmail"] = this.isEnableExperienceStartEmail !== undefined ? this.isEnableExperienceStartEmail : <any>null;
        data["isEnableExperienceUpdateEmail"] = this.isEnableExperienceUpdateEmail !== undefined ? this.isEnableExperienceUpdateEmail : <any>null;
        data["isEnableExperienceEndEmail"] = this.isEnableExperienceEndEmail !== undefined ? this.isEnableExperienceEndEmail : <any>null;
        data["isSubGroup"] = this.isSubGroup !== undefined ? this.isSubGroup : <any>null;
        data["userGroupId"] = this.userGroupId !== undefined ? this.userGroupId : <any>null;
        data["userSubGroupId"] = this.userSubGroupId !== undefined ? this.userSubGroupId : <any>null;
        data["typeKey"] = this.typeKey !== undefined ? this.typeKey : <any>null;
        return data; 
    }
}

export interface IMobileUserGroup {
    id: string;
    name?: string | null;
    hotelId?: string | null;
    userIds?: string[] | null;
    isMaintenanceViewable: boolean;
    isHousekeepingViewable: boolean;
    isConciergeViewable: boolean;
    isPlanningViewable: boolean;
    isDashboardViewable: boolean;
    isQuestionnairesViewable: boolean;
    isInventoryViewable: boolean;
    isLostFoundViewable: boolean;
    isHistoryViewable: boolean;
    isAssetsViewable: boolean;
    isCatalogViewable: boolean;
    isRoomsViewable: boolean;
    isUsersViewable: boolean;
    isGroupsViewable: boolean;
    isSettingsViewable: boolean;
    isDashboardTasksViewable: boolean;
    isDashboardInventoryViewable: boolean;
    isDashboardAttendantViewable: boolean;
    isDashboardAuditViewable: boolean;
    isDashboardExperiencesViewable: boolean;
    emails?: string[] | null;
    isEnableEscalationAccepted: boolean;
    isEscalationAcceptedGuests: boolean;
    escalationAcceptedTime: number;
    isEnableEscalationCompleted: boolean;
    isEscalationCompletedGuests: boolean;
    escalationCompletedTime: number;
    isEnableExperienceStartEmail: boolean;
    isEnableExperienceUpdateEmail: boolean;
    isEnableExperienceEndEmail: boolean;
    isSubGroup: boolean;
    userGroupId: string;
    userSubGroupId?: string | null;
    typeKey?: string | null;
}

export class GetListOfUserGroupsForMobileQuery implements IGetListOfUserGroupsForMobileQuery {
    hotelId?: string | null;

    constructor(data?: IGetListOfUserGroupsForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
        }
    }

    static fromJS(data: any): GetListOfUserGroupsForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetListOfUserGroupsForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        return data; 
    }
}

export interface IGetListOfUserGroupsForMobileQuery {
    hotelId?: string | null;
}

export class MobileUserGroupDetails extends MobileUserGroup implements IMobileUserGroupDetails {

    constructor(data?: IMobileUserGroupDetails) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): MobileUserGroupDetails {
        data = typeof data === 'object' ? data : {};
        let result = new MobileUserGroupDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IMobileUserGroupDetails extends IMobileUserGroup {
}

export class GetUserGroupDetailsForMobileQuery implements IGetUserGroupDetailsForMobileQuery {
    hotelId?: string | null;
    id!: string;
    isSubGroup!: boolean;

    constructor(data?: IGetUserGroupDetailsForMobileQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"] !== undefined ? _data["hotelId"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.isSubGroup = _data["isSubGroup"] !== undefined ? _data["isSubGroup"] : <any>null;
        }
    }

    static fromJS(data: any): GetUserGroupDetailsForMobileQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserGroupDetailsForMobileQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId !== undefined ? this.hotelId : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["isSubGroup"] = this.isSubGroup !== undefined ? this.isSubGroup : <any>null;
        return data; 
    }
}

export interface IGetUserGroupDetailsForMobileQuery {
    hotelId?: string | null;
    id: string;
    isSubGroup: boolean;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}