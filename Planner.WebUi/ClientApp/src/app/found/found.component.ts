import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { BehaviorSubject } from 'rxjs';
import { DeliveryStatus, FoundStatus, GetLostAndFoundListQuery, GuestStatus, LostAndFoundClient, LostAndFoundListItem, LostAndFoundModel, OtherStatus, TypeOfLoss } from '../core/autogenerated-clients/api-client';
import * as moment from 'moment';
import { LoadingService } from '../core/services/loading.service';
import { ToastrService } from 'ngx-toastr';
import {  HotelItemData,} from 'src/app/core/autogenerated-clients/api-client';
import { HotelService } from '../core/services/hotel.service';

@Component({
  selector: 'app-found',
  templateUrl: './found.component.html',
  styleUrls: ['./found.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class FoundComponent implements OnInit {

  filterForm: FormGroup;
  itemsList: BehaviorSubject<LostAndFoundListItem[]> = new BehaviorSubject<LostAndFoundListItem[]>(null);
  selectedItem: BehaviorSubject<LostAndFoundModel> = new BehaviorSubject<LostAndFoundModel>(null);
  areDetailsDisplayed$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);

  loadedNumber$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  totalNumber$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  showLoadMore$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  hotels: HotelItemData[] = [];


  public foundStatuses: any;
  public guestStatuses: any;
  public deliveryStatuses: any;
  public otherStatuses: any;

  foundStatusMappings: { [index: number]: string } = {};
  guestStatusMappings: { [index: number]: string } = {};
  deliveryStatusMappings: { [index: number]: string } = {};
  otherStatusMappings: { [index: number]: string } = {};

  constructor(
    private formBuilder: FormBuilder,
    public loading: LoadingService,
    private lostAndFoundClient: LostAndFoundClient,
    private toastr: ToastrService,    
    public hotelService: HotelService,  
    ) {     
      this.hotels = hotelService.getHotels();  
    }

  ngOnInit(): void {
    this.filterForm = this.formBuilder.group({
      keywords: [''],
      dateFrom: [''],
      dateTo: ['']
    });

    this.filterForm.valueChanges.subscribe(
      value => {
        this.reloadList(true);
      }
    );

    this.reloadList(true);

    this.foundStatusMappings = {};
    this.foundStatusMappings[FoundStatus.Unknown] = "";
    this.foundStatusMappings[FoundStatus.WaitingRoomMaid] = "Waiting Room Maid";
    this.foundStatusMappings[FoundStatus.Received] = "Received";
    this.foundStatuses = FoundStatus;

    this.guestStatusMappings = {};
    this.guestStatusMappings[GuestStatus.Unknown] = "";
    this.guestStatusMappings[GuestStatus.Unclaimed] = "Unclaimed";
    this.guestStatusMappings[GuestStatus.ClientContactedByEmail] = "Client Contacted By Email";
    this.guestStatusMappings[GuestStatus.ClientContactedByPhone] = "Client Contacted By Phone";
    this.guestStatusMappings[GuestStatus.ClientUndecided] = "Client Undecided";
    this.guestStatusMappings[GuestStatus.WaitingForClientReturn] = "Waiting For Client Return";
    this.guestStatuses = GuestStatus;
    
    this.deliveryStatusMappings = {};
    this.deliveryStatusMappings[DeliveryStatus.Unknown] = "";
    this.deliveryStatusMappings[DeliveryStatus.WaitingForShipment] = "Waiting For Shipment";
    this.deliveryStatusMappings[DeliveryStatus.OTShipped] = "OT Shipped";
    this.deliveryStatusMappings[DeliveryStatus.WaitingForHandDelivered] = "Waiting For Hand Delivered";
    this.deliveryStatusMappings[DeliveryStatus.HandDelivered] = "Hand Delivered";
    this.deliveryStatuses = DeliveryStatus;

    this.otherStatusMappings = {};
    this.otherStatusMappings[OtherStatus.Unknown] = "";
    this.otherStatusMappings[OtherStatus.Expired] = "Expired";
    this.otherStatusMappings[OtherStatus.RefusedByTheClient] = "Refused By The Client";
    this.otherStatusMappings[OtherStatus.BadReferencing] = "Bad Referencing";
    this.otherStatusMappings[OtherStatus.Destroy] = "Détruit";
    this.otherStatusMappings[OtherStatus.ReturnedToInventor] = "Rendu à l’inventeur";
    this.otherStatusMappings[OtherStatus.GivenToAnotherPerson] = "Donné à une autre personne";
    this.otherStatusMappings[OtherStatus.DisappearedOrLost] = "Disparu/Perdu";
    this.otherStatuses = OtherStatus;
  }

  createNewFound() {
    const item = new LostAndFoundModel({
      id: null,
      lostOn: moment(),
      foundStatus: FoundStatus.WaitingRoomMaid,
      guestStatus: GuestStatus.Unclaimed,
      deliveryStatus: DeliveryStatus.Unknown,
      otherStatus: OtherStatus.Unknown,
      typeOfLoss: TypeOfLoss.Customer,
      address: '',
      firstName: '',
      lastName: '',
      phoneNumber: '',
      referenceNumber: '',
      description: '',
      roomId: null,
      reservationId: null
    });
    this.selectedItem.next(item);
    this.areDetailsDisplayed$.next(false);
    this.areDetailsDisplayed$.next(true);
  }


  reloadList(reload: boolean) {
    if (reload) {
      this.loadedNumber$.next(0);
    }

    this.areDetailsDisplayed$.next(false);

    this.loading.start();
    this.lostAndFoundClient.getList(new GetLostAndFoundListQuery({
      skip: this.loadedNumber$.value,
      take: 20,
      dateFrom: this.filterForm.controls.dateFrom.value,
      dateTo: this.filterForm.controls.dateTo.value,
      keyword: this.filterForm.controls.keywords.value,
      loadFoundItems: true,
      loadLostItems: false,
    })).subscribe((response) => {
      if (response.isSuccess) {

        this.itemsList.next(response.data.items);
        this.totalNumber$.next(response.data.totalNumberOfItems);
        this.loadedNumber$.next(this.loadedNumber$.value + 20);
        this.showLoadMore$.next(this.loadedNumber$.value < this.totalNumber$.value);
      } else {
        this.toastr.error(response.message);
      }
      this.loading.stop();
    },
      (error) => {
        this.toastr.error(error);
        this.loading.stop();
      });
  }

  selectItem(item: LostAndFoundListItem) {
    this.lostAndFoundClient.getById(item.id).subscribe(
      (response) => {
        if (response.isSuccess) {
          this.selectedItem.next(response.data);
          this.areDetailsDisplayed$.next(true);
        } else {
          this.toastr.error('Error loading item.');
        }
      },
      (error) => {
        this.toastr.error(error);
      }
    );
  }

  onItemEditCancelled() {
    this.areDetailsDisplayed$.next(false);
    this.selectedItem.next(null);
  }

}
