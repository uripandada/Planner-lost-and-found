import { Component, OnInit, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { FormBuilder, FormGroup, ValidationErrors, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
import { BehaviorSubject } from 'rxjs';
import { CleaningPlanClient, CleaningTimelineItemData, CreateCustomPlannableCleaningsCommand, InsertRoomCategoryCommand, IProcessResponseOfIEnumerableOfCleaningTimelineItemData, ProcessResponse, ProcessResponseOfGuid, RoomCategoryDetailsViewModel, RoomCategoryManagementClient, TaskWhereData, UpdateRoomCategoryCommand } from '../../core/autogenerated-clients/api-client';
import { LoadingService } from '../../core/services/loading.service';
import moment, { Moment } from 'moment';
import { MomentDateHelper } from '../../shared/helpers/moment-date.helper';

@Component({
  selector: 'app-create-custom-cleanings-form',
  templateUrl: './create-custom-cleanings-form.component.html',
  styleUrls: ['./create-custom-cleanings-form.component.scss']
})
export class CreateCustomCleaningsFormComponent implements OnInit, OnChanges {

  @Input() allWheres: Array<TaskWhereData> = [];
  @Input() cleaningDate: Moment = moment();
  @Input() cleaningPlanId: string = null;

  @Output() saved: EventEmitter<CleaningTimelineItemData[]> = new EventEmitter<CleaningTimelineItemData[]>();
  @Output() cancelled: EventEmitter<boolean> = new EventEmitter<boolean>();

  isSaving$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);

  createCustomCleaningsForm: FormGroup;
  loading: LoadingService;

  constructor(
    private _router: Router,
    private _toastr: ToastrService,
    private _formBuilder: FormBuilder,
    private _cleaningPlanClient: CleaningPlanClient
  ) {
    this.loading = new LoadingService();
  }

  ngOnInit(): void {
    this.createCustomCleaningsForm = this._formBuilder.group({
      wheres: [[]],
      description: ['', [Validators.required]],
      credits: [0, [Validators.required]],
    });
  }

  ngOnChanges(changes: SimpleChanges): void {
    //if (changes.category && !changes.category.firstChange) {
    //  this._setCreateNewStatus(); 
    //  this._setCategoryFormData();
    //}
  }

  cancel() {
    this.cancelled.next(true);
  }

  save() {
    if (!this.createCustomCleaningsForm.valid) {
      this.createCustomCleaningsForm.markAllAsTouched();
      this.createCustomCleaningsForm.markAsDirty({ onlySelf: false });
      this._toastr.error("You have to fix form errors before you can continue.");
      return;
    }

    this.loading.start();

    let formValues = this.createCustomCleaningsForm.getRawValue();
    let isToday: boolean = this.cleaningDate.isSame(moment(), "day");

    let createRequest: CreateCustomPlannableCleaningsCommand = new CreateCustomPlannableCleaningsCommand({
      //cleaningDateString: MomentDateHelper.getIsoDate(this.cleaningDate),
      isToday: isToday,
      cleaningPlanId: this.cleaningPlanId,
      credits: +formValues.credits,
      description: formValues.description,
      wheres: formValues.wheres.map(w => new TaskWhereData({
        referenceId: w.referenceId,
        referenceName: w.referenceName,
        typeDescription: w.typeDescription,
        typeKey: w.typeKey
      }))
    });

    this._cleaningPlanClient.createCustomPlannableCleanings(createRequest).subscribe(
      (response: IProcessResponseOfIEnumerableOfCleaningTimelineItemData) => {
        if (response.hasError) {
          this._toastr.error(response.message);
          this.loading.stop();
          return;
        }

        this._toastr.success(response.message);
        this.saved.next(response.data);
      },
      (error: Error) => {
        this._toastr.error(error.message);
        this.loading.stop();
      },
      () => {
        this.loading.stop();
      }
    );
  }
}
