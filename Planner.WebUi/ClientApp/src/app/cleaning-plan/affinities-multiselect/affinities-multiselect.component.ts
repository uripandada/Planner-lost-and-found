import { Component, Input, OnInit } from '@angular/core';
import { FormArray, FormBuilder, FormGroup } from '@angular/forms';
import { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';
import { ToastrService } from 'ngx-toastr';
import { Observable } from 'rxjs';
import { map, startWith } from 'rxjs/operators';
import { AffinityData2, AffinityGroup, CleaningPlanGroupAffinityType } from '../../core/autogenerated-clients/api-client';

@Component({
  selector: 'app-affinities-multiselect',
  templateUrl: './affinities-multiselect.component.html',
  styleUrls: ['./affinities-multiselect.component.scss']
})
export class AffinitiesMultiselectComponent implements OnInit {

  @Input() elementId: string = "default-affinities-input-1";
  @Input() affinityGroups: Array<AffinityGroup> = [];
  @Input() affinitiesFormArray: FormArray;

  filterAffinitiesForm: FormGroup;

  filteredAffinityGroups$: Observable<Array<AffinityGroup>>;

  constructor(private _formBuilder: FormBuilder, private _toastr: ToastrService) {
  }

  ngOnInit(): void {
    this.filterAffinitiesForm = this._formBuilder.group({
      keywords: ['']
    });

    this.filteredAffinityGroups$ = this.filterAffinitiesForm.controls.keywords.valueChanges
      .pipe(
        startWith(''),
        map(value => this._filter(value))
      );
  }

  remove(affinityIndex: number) {
    this.affinitiesFormArray.removeAt(affinityIndex);
  }

  private _filter(value: any): AffinityGroup[] {
    if (!value) {
      return this.affinityGroups;
    }

    if (typeof value === "string") {
      let valueParameter = value.toLowerCase();

      let groups: AffinityGroup[] = [];
      for (let group of this.affinityGroups) {
        let graffs = group.affinities.filter(a => a.referenceName.toLowerCase().indexOf(valueParameter) >= 0);
        if (graffs.length > 0) {
          groups.push(new AffinityGroup({
            affinityType: group.affinityType,
            affinityGroupName: group.affinityGroupName,
            affinities: graffs,
          }));
        }
      }

      return groups;
    }

    return this.affinityGroups;
  }

  selected(eventData: MatAutocompleteSelectedEvent) {
    let referenceId = eventData.option.value;
    let groupId = eventData.option.group.label;

    let group = this.affinityGroups.find(g => g.affinityGroupName === groupId);

    if (!this._isAffinityAlreadyAdded(referenceId, group.affinityType)) {
      let affinity = group.affinities.find(a => a.referenceId === referenceId);
      this.affinitiesFormArray.push(this._createAffinityFormGroup(affinity, group.affinityType));
    }


    this.filterAffinitiesForm.controls.keywords.setValue('');
    (<any>document.getElementById(this.elementId)).blur();
  }

  private _isAffinityAlreadyAdded(referenceId: string, type: CleaningPlanGroupAffinityType): boolean {
    return !!this.affinitiesFormArray.getRawValue().find(a => a.referenceId === referenceId && a.type === type);
  }

  private _createAffinityFormGroup(a: AffinityData2, type: CleaningPlanGroupAffinityType): FormGroup {
    return this._formBuilder.group({
      referenceDescription: a.referenceDescription,
      referenceId: a.referenceId,
      referenceName: a.referenceName,
      type: type,
    });
  }
}
