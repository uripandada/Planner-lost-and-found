import { ChangeDetectionStrategy, Component, ComponentRef, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';
import { CleaningTimelineTooltipService } from '../../core/services/cleaning-timeline-tooltip.service';
import { CleaningProcessStatus, IPlannedCleaningTimelineItemData } from '../../core/autogenerated-clients/api-client';

@Component({
  selector: 'app-cleaning-timeline-item',
  templateUrl: './cleaning-timeline-item.component.html',
  styleUrls: ['./cleaning-timeline-item.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class CleaningTimelineItemComponent implements OnInit, OnChanges {

  @ViewChild('cleaningItem', { static: true }) itemElement: ElementRef;
  @Input() data: IPlannedCleaningTimelineItemData;

  _component: ComponentRef<CleaningTimelineItemComponent>;

  itemClass: string = "";
  statusIconClass: string = "";
  priorityIconClass: string = "";

  isDnd: boolean = false;
  isOutOfService: boolean = false;
  isOutOfOrder: boolean = false;
  isChangeSheets: boolean = false;
  hasVipReservation: boolean = false;

  isCleaningSent: boolean = false;
  isCleaningInProgress: boolean = false;
  isCleaningPaused: boolean = false;
  isCleaningFinished: boolean = false;
  isCleaningCancelled: boolean = false;
  isCleaningDelayed: boolean = false;
  isCleaningRefused: boolean = false;
  isPostponed: boolean = false;
  isPriority: boolean = false;

  isInspectionFinished: boolean = false;

  constructor(private _tooltipService: CleaningTimelineTooltipService) {
  }

  ngOnInit(): void {
    this.isDnd = this.data.isDoNotDisturb;
    this.isOutOfOrder = this.data.isOutOfOrder;
    this.isChangeSheets = this.data.isChangeSheets;
    this.hasVipReservation = this.data.hasVipReservation;
    this.isPostponed = this.data.isPostponed;
    this.isPriority = this.data.isPriority;
    this.isInspectionFinished = this.data.isInspected;

    this._setStatusIcon();
    this._setItemStyleClass();
  }

  ngOnChanges(changes: SimpleChanges): void {
  }

  private _setItemStyleClass(): void {
    let itemClasses: string = "";

    if (!this.data.isRoomAssigned) {
      itemClasses += "room-not-assigned ";
    }

    if (this.data.isOccupied) {
      itemClasses += "room-occupied ";
    }

    if (this.data.isInspected) {
      itemClasses += "room-inspected ";
    }
    else if (this.data.isClean) {
      itemClasses += "room-clean ";
    }
    else {
      itemClasses += "room-dirty ";
    }

    if (this.data.isOutOfOrder) {
      itemClasses += "room-out-of-order ";
    }

    if (this.data.isPostponed) {
      itemClasses += "room-cleaning-postponed ";
    }

    if (!this.data.isActive) {
      itemClasses += "room-cleaning-inactive ";
    }

    if (this.isCleaningInProgress) {
      itemClasses += "rc-prog ";
    }

    if (this.data.isFilteredOut) {
      itemClasses += "semtrans "
    }

    this.itemClass = itemClasses;
  }

  ngOnDestroy(): void {
    if (this._component) {
      this._component.destroy();
    }
  }

  edit() {

  }

  drag() {
  }

  private _setStatusIcon() {
    let showSentIcon: boolean = false;
    switch (this.data.cleaningStatus) {
      case CleaningProcessStatus.CLEANING_CANCELLED_BY_ADMIN:
      case CleaningProcessStatus.CLEANING_CANCELLED_BY_CLEANER:
      case CleaningProcessStatus.CLEANING_CANCELLED_BY_SYSTEM:
        this.isCleaningCancelled = true;
        break;
      case CleaningProcessStatus.DELAYED:
        this.isCleaningDelayed = true;
        break;
      case CleaningProcessStatus.DO_NOT_DISTURB:
        this.isDnd = true;
        break;
      case CleaningProcessStatus.DRAFT:
        showSentIcon = true;
        break;
      case CleaningProcessStatus.FINISHED:
        this.isCleaningFinished = true;
        break;
      case CleaningProcessStatus.INSPECTION_FAILED:
        break;
      case CleaningProcessStatus.INSPECTION_FINISHED:
        this.isInspectionFinished = true;
        break;
      case CleaningProcessStatus.INSPECTION_STARTED:
        break;
      case CleaningProcessStatus.IN_PROGRESS:
        this.isCleaningInProgress = true;
        break;
      case CleaningProcessStatus.NEW:
        showSentIcon = true;
        break;
      case CleaningProcessStatus.PAUSED:
        this.isCleaningPaused = true;
        break;
      case CleaningProcessStatus.REFUSED:
        this.isCleaningRefused = true;
        break;
      case CleaningProcessStatus.REQUIRES_INSPECTION:
        break;
      case CleaningProcessStatus.SEEN_INSPECTION_FAILED:
        break;
      case CleaningProcessStatus.SEEN_NEW:
        showSentIcon = true;
        break;
      case CleaningProcessStatus.UNKNOWN:
        break;
      default:
        break;
    }

    this.isCleaningSent = this.data.isSent;

    let cleaningStatusIcon = "no-cleaning-status-icon";
    if (this.data.isSent) {
      cleaningStatusIcon = "icofont-send-mail"
    }

    this.statusIconClass = cleaningStatusIcon;

    let priorityStatusIcon = "no-cleaning-status-icon";
    if (this.data.isPriority) {
      priorityStatusIcon = "icofont-star";
    }

    this.priorityIconClass = priorityStatusIcon;
  }
}
