import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output, SimpleChanges } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { CpsatPlannerConfigurationData } from 'src/app/core/autogenerated-clients/api-client';

@Component({
  selector: 'app-extended-cpsat-configuration',
  templateUrl: './extended-cpsat-configuration.component.html',
  styleUrls: ['./extended-cpsat-configuration.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class ExtendedCpsatConfigurationComponent implements OnInit {

  @Input() cpsatConfiguration: CpsatPlannerConfigurationData;

  @Output() saved: EventEmitter<CpsatPlannerConfigurationData> = new EventEmitter<CpsatPlannerConfigurationData>();
  @Output() cancelled: EventEmitter<boolean> = new EventEmitter<boolean>();

  cpsatConfigurationForm: FormGroup;

  constructor(private readonly _formBuilder: FormBuilder, private readonly _toastr: ToastrService) { }

  ngOnInit(): void {
    this.cpsatConfigurationForm = this._createCpsatConfigurationForm(this.cpsatConfiguration);

    this._updateBuildingMovementStatus(this.cpsatConfiguration.doesBuildingMovementReduceCredits);
    this._updateLevelMovementStatus(this.cpsatConfiguration.doesLevelMovementReduceCredits);
  }

  ngOnChanges(changes: SimpleChanges): void {
    if (this.cpsatConfigurationForm && this.cpsatConfiguration) {
      this._setCpsatConfigurationFormData(this.cpsatConfigurationForm, this.cpsatConfiguration);
    }
  }

  cancel(): void {
    this.cancelled.next(true);
  }

  private _createCpsatConfigurationForm(c: CpsatPlannerConfigurationData): FormGroup {
    //let c: CpsatPlannerConfigurationData = config ? config : this._createDefaultCpsatConfigurationData();

    let form: FormGroup = this._formBuilder.group({
      solverRunTime: [c.solverRunTime],

      planningStrategyTypeKey: [c.planningStrategyTypeKey, [Validators.required]], // BALANCE_BY_ROOMS, BALANCE_BY_CREDITS_STRICT, BALANCE_BY_CREDITS_WITH_AFFINITIES, TARGET_BY_ROOMS, TARGET_BY_CREDITS

      balanceByRoomsMinRooms: [c.balanceByRoomsMinRooms],
      balanceByRoomsMaxRooms: [c.balanceByRoomsMaxRooms],

      balanceByCreditsStrictMinCredits: [c.balanceByCreditsStrictMinCredits],
      balanceByCreditsStrictMaxCredits: [c.balanceByCreditsStrictMaxCredits],

      balanceByCreditsWithAffinitiesMinCredits: [c.balanceByCreditsWithAffinitiesMinCredits],
      balanceByCreditsWithAffinitiesMaxCredits: [c.balanceByCreditsWithAffinitiesMaxCredits],

      targetByRoomsValue: [c.targetByRoomsValue], // value is set if PlanningStrategyTypeKey = TARGET_BY_ROOMS

      targetByCreditsValue: [c.targetByCreditsValue], // value is set if PlanningStrategyTypeKey = TARGET_BY_CREDITS

      maxNumberOfBuildingsPerAttendant: [c.maxNumberOfBuildingsPerAttendant, [Validators.required]],
      maxBuildingTravelTime: [c.maxBuildingTravelTime, [Validators.required]],
      doesBuildingMovementReduceCredits: [c.doesBuildingMovementReduceCredits, [Validators.required]],
      buildingMovementCreditsReduction: [c.buildingMovementCreditsReduction, [Validators.required]],

      maxNumberOfLevelsPerAttendant: [c.maxNumberOfLevelsPerAttendant, [Validators.required]],
      doesLevelMovementReduceCredits: [c.doesLevelMovementReduceCredits, [Validators.required]],
      levelMovementCreditsReduction: [c.levelMovementCreditsReduction, [Validators.required]],
      applyLevelMovementCreditReductionAfterNumberOfLevels: [c.applyLevelMovementCreditReductionAfterNumberOfLevels, [Validators.required]],



      maxDeparturesReducesCredits: [c.maxDeparturesReducesCredits, [Validators.required]],
      maxDeparturesEquivalentCredits: [c.maxDeparturesEquivalentCredits, [Validators.required]],
      maxDeparturesReductionThreshold: [c.maxDeparturesReductionThreshold, [Validators.required]],
      maxStaysIncreasesCredits: [c.maxStaysIncreasesCredits, [Validators.required]],
      maxStaysEquivalentCredits: [c.maxStaysEquivalentCredits, [Validators.required]],
      maxStaysIncreaseThreshold: [c.maxStaysIncreaseThreshold, [Validators.required]],

      maxStay: [c.maxStay, [Validators.required]],
      maxDeparture: [c.maxDeparture, [Validators.required]],
      doBalanceStaysAndDepartures: [c.doBalanceStaysAndDepartures, [Validators.required]],
      weightEpsilonStayDeparture: [c.weightEpsilonStayDeparture, [Validators.required]],


      //maxTravelTime: [c.maxTravelTime, [Validators.required]],
      //roomAward: [c.roomAward, [Validators.required]],
      //levelAward: [c.levelAward, [Validators.required]],
      //buildingAward: [c.buildingAward, [Validators.required]],
      //travelTimeWeight: [c.weightTravelTime],
      //cleaningTimeWeight: [c.weightCredits],
      //cleaningPriorityKey: [c.cleaningPriorityKey, [Validators.required]],
      //doUsePrePlan: [c.doUsePrePlan, [Validators.required]],
      //doUsePreAffinity: [c.doUsePreAffinity, [Validators.required]],
      //doCompleteProposedPlanOnUsePreplan: [c.doCompleteProposedPlanOnUsePreplan, [Validators.required]],
      //arePreferredLevelsExclusive: [c.arePreferredLevelsExclusive, [Validators.required]],
      //buildingsDistanceMatrix: [c.buildingsDistanceMatrix],
      //levelsDistanceMatrix: [c.levelsDistanceMatrix],

    });

    form.controls.doesLevelMovementReduceCredits.valueChanges.subscribe((doesIt: boolean) => {
      this._updateLevelMovementStatus(doesIt);
    });

    form.controls.doesBuildingMovementReduceCredits.valueChanges.subscribe((doesIt: boolean) => {
      this._updateBuildingMovementStatus(doesIt);
    });

    return form;
  }

  private _setCpsatConfigurationFormData(form: FormGroup, config: CpsatPlannerConfigurationData): void {
    form.patchValue(config);

    this._updateBuildingMovementStatus(config.doesBuildingMovementReduceCredits);
    this._updateLevelMovementStatus(config.doesLevelMovementReduceCredits);

    form.markAsUntouched({ onlySelf: false });
    form.markAsPristine({ onlySelf: false });
  }

  save() {
    if (!this.cpsatConfigurationForm.valid) {
      this.cpsatConfigurationForm.markAllAsTouched();
      this.cpsatConfigurationForm.markAsDirty({ onlySelf: false });
      this._toastr.error("You have to fix form errors before you can continue.");
      return;
    }

    let formValues = this.cpsatConfigurationForm.getRawValue();
    let config: CpsatPlannerConfigurationData = new CpsatPlannerConfigurationData({
      solverRunTime: +formValues.solverRunTime,
      planningStrategyTypeKey: formValues.planningStrategyTypeKey,
      balanceByRoomsMinRooms: formValues.balanceByRoomsMinRooms,
      balanceByRoomsMaxRooms: formValues.balanceByRoomsMaxRooms,
      balanceByCreditsStrictMinCredits: formValues.balanceByCreditsStrictMinCredits,
      balanceByCreditsStrictMaxCredits: formValues.balanceByCreditsStrictMaxCredits,
      balanceByCreditsWithAffinitiesMinCredits: formValues.balanceByCreditsWithAffinitiesMinCredits,
      balanceByCreditsWithAffinitiesMaxCredits: formValues.balanceByCreditsWithAffinitiesMaxCredits,
      targetByRoomsValue: formValues.targetByRoomsValue,
      targetByCreditsValue: formValues.targetByCreditsValue,
      maxNumberOfBuildingsPerAttendant: formValues.maxNumberOfBuildingsPerAttendant,
      maxBuildingTravelTime: formValues.maxBuildingTravelTime,
      doesBuildingMovementReduceCredits: formValues.doesBuildingMovementReduceCredits,
      buildingMovementCreditsReduction: formValues.buildingMovementCreditsReduction,
      maxNumberOfLevelsPerAttendant: formValues.maxNumberOfLevelsPerAttendant,
      doesLevelMovementReduceCredits: formValues.doesLevelMovementReduceCredits,
      levelMovementCreditsReduction: formValues.levelMovementCreditsReduction,
      applyLevelMovementCreditReductionAfterNumberOfLevels: formValues.applyLevelMovementCreditReductionAfterNumberOfLevels,


      weightEpsilonStayDeparture: formValues.weightEpsilonStayDeparture,
      doBalanceStaysAndDepartures: formValues.doBalanceStaysAndDepartures,

      maxDeparture: formValues.maxDeparture,
      maxDeparturesEquivalentCredits: formValues.maxDeparturesEquivalentCredits,
      maxDeparturesReducesCredits: formValues.maxDeparturesReducesCredits,
      maxDeparturesReductionThreshold: formValues.maxDeparturesReductionThreshold,
      maxStay: formValues.maxStay,
      maxStaysEquivalentCredits: formValues.maxStaysEquivalentCredits,
      maxStaysIncreasesCredits: formValues.maxStaysIncreasesCredits,
      maxStaysIncreaseThreshold: formValues.maxStaysIncreaseThreshold,


      minCreditsForMultipleCleanersCleaning: this.cpsatConfiguration.minCreditsForMultipleCleanersCleaning,
      minutesPerCredit: this.cpsatConfiguration.minutesPerCredit,


      id: this.cpsatConfiguration.id,
      arePreferredLevelsExclusive: this.cpsatConfiguration.arePreferredLevelsExclusive,
      doUsePreAffinity: this.cpsatConfiguration.doUsePreAffinity,
      doUsePrePlan: this.cpsatConfiguration.doUsePrePlan,
      doCompleteProposedPlanOnUsePreplan: this.cpsatConfiguration.doCompleteProposedPlanOnUsePreplan,
      cleaningPriorityKey: this.cpsatConfiguration.cleaningPriorityKey,



      levelsDistanceMatrix: this.cpsatConfiguration.levelsDistanceMatrix,
      weightCredits: this.cpsatConfiguration.weightCredits,
      weightTravelTime: this.cpsatConfiguration.weightTravelTime,
      buildingsDistanceMatrix: this.cpsatConfiguration.buildingsDistanceMatrix,
      roomAward: this.cpsatConfiguration.roomAward,
      maxTravelTime: this.cpsatConfiguration.maxTravelTime,
      levelAward: this.cpsatConfiguration.levelAward,
      buildingAward: this.cpsatConfiguration.buildingAward,
      limitAttendantsPerLevel: this.cpsatConfiguration.limitAttendantsPerLevel,
      weightRoomsCleaned: this.cpsatConfiguration.weightRoomsCleaned,
      weightLevelChange: this.cpsatConfiguration.weightLevelChange,


      


    });

    this.saved.next(config);
  }

  private _updateLevelMovementStatus(doEnable: boolean) {
    if (doEnable) {
      this.cpsatConfigurationForm.controls.levelMovementCreditsReduction.enable();
      this.cpsatConfigurationForm.controls.applyLevelMovementCreditReductionAfterNumberOfLevels.enable();
    }
    else {
      this.cpsatConfigurationForm.controls.levelMovementCreditsReduction.disable();
      this.cpsatConfigurationForm.controls.applyLevelMovementCreditReductionAfterNumberOfLevels.disable();
    }
  }

  private _updateBuildingMovementStatus(doEnable: boolean) {
    if (doEnable) {
      this.cpsatConfigurationForm.controls.buildingMovementCreditsReduction.enable();
    }
    else {
      this.cpsatConfigurationForm.controls.buildingMovementCreditsReduction.disable();
    }
  }
}
