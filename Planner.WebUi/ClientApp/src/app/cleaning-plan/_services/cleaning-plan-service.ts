//import { Injectable, EventEmitter } from "@angular/core";
//import { FormBuilder, FormGroup } from '@angular/forms';
//import { BehaviorSubject } from "rxjs";
//import { CleaningPlanClient, CleaningTimelineGroupData, CleaningTimelineItemData, GetCleaningPlanDetailsQuery, ICleaningPlanData, PlannedCleaningTimelineItemData, CleanerData, AddRemoveCleaningPlanGroupsCommand, ProcessResponseOfAddRemoveCleaningPlanGroupsResult, CleaningPlanOptions, TimeIntervalData, ICleaningTimelineGroupData } from '../../core/autogenerated-clients/api-client';
//import { CleaningTimelineGroup, CleaningTimelineItem } from '../../core/services/cleaning-timeline.service';
//import { HotelService } from '../../core/services/hotel.service';
//import { LoadingService } from '../../core/services/loading.service';
//import { DateHelper } from '../../shared/helpers/date.helper';
//import { ToastrService } from 'ngx-toastr';
//import moment, { Moment } from 'moment';

//@Injectable({ providedIn: 'root' })
//export class CleaningPlanService {

//  //isPlanLoaded$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
//  //plan$: BehaviorSubject<ICleaningPlanData> = new BehaviorSubject<ICleaningPlanData>(null);

//  //// Available cleanings are all cleanings that are not added to the timeline
//  //availableCleanings$: BehaviorSubject<CleaningTimelineItemData[]> = new BehaviorSubject<CleaningTimelineItemData[]>([]);
//  //filteredAvailableCleanings$: BehaviorSubject<CleaningTimelineItemData[]> = new BehaviorSubject<CleaningTimelineItemData[]>([]);
//  //// Planned groups are the timeline groups
//  //plannedGroups$: BehaviorSubject<Array<CleaningTimelineGroup>> = new BehaviorSubject<Array<CleaningTimelineGroup>>([]);
//  //// Backgrounds with availability for timeline groups
//  //plannedGroupsAvailabilities$: BehaviorSubject<Array<CleaningTimelineItem>> = new BehaviorSubject<Array<CleaningTimelineItem>>([]);
//  //// Planned cleanings are the timeline items
//  //plannedCleanings$: BehaviorSubject<Array<CleaningTimelineItem>> = new BehaviorSubject<Array<CleaningTimelineItem>>([]);
//  //plannedCleanerIds$: BehaviorSubject<Array<string>> = new BehaviorSubject<Array<string>>([]);
//  //plannedNonEventTasks$: BehaviorSubject<Array<CleaningTimelineItem>> = new BehaviorSubject<Array<CleaningTimelineItem>>([]);

//  //get allTimelineItems(): Array<CleaningTimelineItem> {
//  //  return [...this.plannedCleanings$.value, ...this.plannedGroupsAvailabilities$.value, ...this.plannedNonEventTasks$.value];
//  //}

//  //selectPlanForm: FormGroup;
//  //filterCleaningsForm: FormGroup;

//  //cleaningGroupsSaved: EventEmitter<string> = new EventEmitter<string>();

//  //constructor(
//  //  private _cleaningPlanClient: CleaningPlanClient,
//  //  private _loading: LoadingService,
//  //  private _hotelService: HotelService,
//  //  private _formBuilder: FormBuilder,
//  //  private _toastr: ToastrService
//  //) {
//  //  this.selectPlanForm = this._createSelectPlanForm();
//  //  this.filterCleaningsForm = this._createFilterCleaningsForm();
//  //}

//  //loadPlan() {
//  //  this._loading.start();

//  //  let hotelId: string = this.selectPlanForm.controls.hotelId.value;
//  //  let dateString: string = DateHelper.getDateString(this.selectPlanForm.controls.date.value);

//  //  this._cleaningPlanClient.getDetails(new GetCleaningPlanDetailsQuery({ hotelId: hotelId, dateString: dateString })).subscribe(
//  //    (plan: ICleaningPlanData) => {
//  //      this._setPlan(plan);
//  //      this.isPlanLoaded$.next(true);
//  //    },
//  //    (error: Error) => {
//  //    },
//  //    () => {
//  //      this._loading.stop();
//  //    }
//  //  );
//  //}

//  //selectCleaners(cleanerIds: Array<string>): void {
//  //  let planId: string = this.plan$.value.id;

//  //  // if the cleaning group is newly added, the server should return the fully formed new group, including floor affinities and availability intervals
//  //  this._cleaningPlanClient.addRemoveCleaningPlanGroups(new AddRemoveCleaningPlanGroupsCommand({ planId: planId, cleanerIds: cleanerIds })).subscribe((response: ProcessResponseOfAddRemoveCleaningPlanGroupsResult) => {
//  //    if (response.hasError) {
//  //      this._toastr.error(response.message);
//  //      return;
//  //    }

//  //    if (response.data.hasAnyChanges) {
//  //      let selectedCleaners = this.plan$.value.allCleaners.filter(c => cleanerIds.indexOf(c.id) >= 0);
//  //      let selectedGroups = [];

//  //      // 1. take existing, already selected groups
//  //      for (let existingGroup of this.plannedGroups$.value) {
//  //        let selectedCleaner = selectedCleaners.find(c => c.id === existingGroup.groupData.cleaner.id);
//  //        if (selectedCleaner) {
//  //          selectedGroups.push(existingGroup);
//  //        }
//  //      }

//  //      // 2. append newly selected groups
//  //      for (let g of response.data.insertedGroups) {
//  //        let item = <CleaningTimelineGroup>{
//  //          groupData: g,
//  //          content: null,
//  //          id: g.id,
//  //          treeLevel: 0
//  //        };
//  //        selectedGroups.push(item);
//  //      }

//  //      this._setPlannedGroups(selectedGroups);
//  //      this.cleaningGroupsSaved.next("Success");
//  //      this._toastr.success(response.message);
//  //    }
//  //    else {
//  //      this._toastr.info("No changes.");
//  //    }
//  //  },
//  //    (error: Error) => { this._toastr.error(error.message); },
//  //    () => { }
//  //  );
//  //}


//  //changeCleaningGroupData(groupData: ICleaningTimelineGroupData): void {
//  //  let group = this._createPlannedGroup(groupData);
//  //  let groups = this.plannedGroups$.value;
//  //  let existingGroup = null;
//  //  let groupIndex = -1;
//  //  for (let index = 0; index < groups.length; index++) {
//  //    if (group.id === groups[index].id) {
//  //      existingGroup = groups[index];
//  //      groupIndex = index;
//  //      break;
//  //    }
//  //  }

//  //  if (existingGroup) {
//  //    groups.splice(groupIndex, 1, group);
//  //  }

//  //  this.plannedGroups$.next(groups);
//  //  // FIND ALL BACKGROUND ITEMS FROM THIS GROUP AND REGENERATE THEM
//  //  let remainingItems = this.plannedGroupsAvailabilities$.value.filter(c => c.group !== groupData.id || (c.group === groupData.id && c.type !== "background"));

    

//  //  let sortedIntervals = group.groupData.cleaner.availabilityIntervals.filter(i => i.fromTimeString < i.toTimeString || i.toTimeString === "00:00").sort((a, b) => { return a.fromTimeString > b.fromTimeString ? 1 : -1; });
//  //  if (sortedIntervals.length > 0) {
//  //    for (let i = 0; i < sortedIntervals.length; i++) {
//  //      let start: Moment = null;
//  //      let end: Moment = null;

//  //      if (i === 0) {
//  //        if (sortedIntervals[i].fromTimeString === "00:00")
//  //          continue;

//  //        start = DateHelper.addMomentTime(this.plan$.value.date, "00:00");
//  //        end = DateHelper.addMomentTime(this.plan$.value.date, sortedIntervals[i].fromTimeString);
//  //      }
//  //      else {
//  //        start = DateHelper.addMomentTime(this.plan$.value.date, sortedIntervals[i - 1].toTimeString);
//  //        end = DateHelper.addMomentTime(this.plan$.value.date, sortedIntervals[i].fromTimeString);
//  //      }

//  //      remainingItems.push(<CleaningTimelineItem>{
//  //        cleaning: null,
//  //        id: groupData.id + "_" + i,
//  //        start: start.toDate(),
//  //        end: end.toDate(),
//  //        className: "disabled-vis-background-item",
//  //        group: group.id,
//  //        type: "background",
//  //        content: "<div></div>"
//  //      });
//  //    }

//  //    let lastInterval = sortedIntervals[sortedIntervals.length - 1];
//  //    if (lastInterval.toTimeString !== "00:00") {
//  //      let start = DateHelper.addMomentTime(this.plan$.value.date, lastInterval.toTimeString);
//  //      let end = DateHelper.addMomentTime(this.plan$.value.date, "23:59");
//  //      remainingItems.push(<CleaningTimelineItem>{
//  //        cleaning: null,
//  //        id: groupData.id + "_" + remainingItems.length,
//  //        start: start.toDate(),
//  //        end: end.toDate(),
//  //        className: "disabled-vis-background-item",
//  //        editable: false,
//  //        group: group.id,
//  //        selectable: false,
//  //        title: null,
//  //        align: "auto",
//  //        style: null,
//  //        type: "background"
//  //      });
//  //    }

//  //  }

    









//  //  this.plannedGroupsAvailabilities$.next([...remainingItems]);
//  //}

//  //removeAvailableItems(itemIds: string[]) {
//  //  this.availableCleanings$.next(
//  //    this.availableCleanings$.value.filter(c => itemIds.indexOf(c.id) < 0)
//  //  );
//  //  this._filterAvailableCleanings();
//  //}

//  //toggleAvailableFilterStatus(statusKey: string) {
//  //  switch (statusKey) {
//  //    case "PLANNABLE":
//  //      this.filterCleaningsForm.controls.plannableStatusSelected.setValue(!this.filterCleaningsForm.controls.plannableStatusSelected.value);
//  //      break;
//  //    case "OTHER":
//  //      this.filterCleaningsForm.controls.otherStatusSelected.setValue(!this.filterCleaningsForm.controls.otherStatusSelected.value);
//  //      break;
//  //    case "POSTPONED":
//  //      this.filterCleaningsForm.controls.postponedStatusSelected.setValue(!this.filterCleaningsForm.controls.postponedStatusSelected.value);
//  //      break;
//  //  }
//  //}

//  //addPlannedCleanings(cleanings: Array<PlannedCleaningTimelineItemData>) {
//  //  this._setPlannedCleanings([...this.plannedCleanings$.value, ...cleanings.map(c => this._createPlannedCleaning(c))]);
//  //}

//  //movePlannedItems(items: Array<PlannedCleaningTimelineItemData>) {
//  //  let plannedItems = this.plannedCleanings$.value;
//  //  for (let plannedItem of plannedItems) {
//  //    let movedItem = items.find(i => i.id === plannedItem.id);
//  //    if (movedItem) {
//  //      plannedItem.group = movedItem.cleaningPlanGroupId;
//  //      plannedItem.start = movedItem.start.toDate();
//  //      plannedItem.end = movedItem.end.toDate();
//  //    }
//  //  }

//  //  this._setPlannedCleanings(plannedItems);
//  //}

//  //removePlannedItems(items: Array<PlannedCleaningTimelineItemData>) {
//  //  let plannedItems = this.plannedCleanings$.value;
//  //  let availableItems: Array<CleaningTimelineItemData> = this.availableCleanings$.value;

//  //  let removedItemIds = items.map(i => i.id);
//  //  let remainingItems = plannedItems.filter(pi => removedItemIds.indexOf(pi.id.toString()) < 0);
//  //  for (let item of items) {
//  //    availableItems.push(item);
//  //  }

//  //  this._setPlannedCleanings(remainingItems);
//  //  this._setAvailableCleanings(availableItems);
//  //  this._filterAvailableCleanings();
//  //}

//  //private _setPlan(plan: ICleaningPlanData): void {

//  //  this.plan$.next(plan);
//  //  this.isPlanLoaded$.next(true);

//  //  let plannedGroups = plan.plannedGroups.map(g => this._createPlannedGroup(g));
//  //  this._setPlannedGroups(plannedGroups);

//  //  let plannedCleanings = plan.plannedCleanings.filter(pc => pc.itemTypeKey === "CLEANING").map(c => this._createPlannedCleaning(c));
//  //  this._setPlannedCleanings(plannedCleanings);

//  //  let plannedTasks = plan.plannedCleanings.filter(pc => pc.itemTypeKey === "TASK").map(pc => this._createPlannedTask(pc));
//  //  this._setPlannedTasks(plannedTasks);

//  //  let availableCleanings = plan.allCleanings.map(c => this._createAvailableCleaning(c));
//  //  this._setAvailableCleanings(availableCleanings);
//  //  this.filteredAvailableCleanings$.next(availableCleanings);
//  //}

//  //private _createSelectPlanForm(): FormGroup {
//  //  let form: FormGroup = this._formBuilder.group({
//  //    date: [new Date(new Date().toDateString())],
//  //    hotelId: [this._hotelService.getSelectedHotelId()]
//  //  });

//  //  form.controls.hotelId.valueChanges.subscribe((hotelId: string) => {
//  //    this._hotelService.selectHotelId(hotelId);
//  //    this.loadPlan();
//  //  });

//  //  form.controls.date.valueChanges.subscribe(() => {
//  //    this.loadPlan();
//  //  });

//  //  return form;
//  //}

//  //private _createFilterCleaningsForm(): FormGroup {
//  //  let form: FormGroup = this._formBuilder.group({
//  //    keywords: [''],
//  //    plannableStatusSelected: [true],
//  //    otherStatusSelected: [false],
//  //    postponedStatusSelected: [false]
//  //  });

//  //  form.valueChanges.subscribe((formValue: any) => {
//  //    this._filterAvailableCleanings();
//  //  });

//  //  return form;
//  //}

//  //private _filterAvailableCleanings() {
//  //  let formValues = this.filterCleaningsForm.getRawValue();
//  //  let keywordsValue = formValues.keywords.toString().toLowerCase();

//  //  let cleanings: Array<CleaningTimelineItemData> = [];
//  //  if (!keywordsValue) {
//  //    cleanings = this.availableCleanings$.value;
//  //  }
//  //  else {
//  //    cleanings = this.availableCleanings$.value.filter(c => c.title.toLowerCase().indexOf(keywordsValue) > -1);
//  //  }

//  //  if (formValues.plannableStatusSelected) {
//  //    // TODO: THIS LOGIC IS MISSING IN THE APP IN GENERAL. REIMPLEMENT WHEN EVERYTHING IS IN.
//  //    cleanings = cleanings.filter(c => c.reservationId !== null && c.reservationId !== undefined);
//  //  }

//  //  if (formValues.otherStatusSelected) {
//  //    cleanings = cleanings.filter(c => c.reservationId === null || c.reservationId === undefined);
//  //  }

//  //  if (formValues.postponedStatusSelected) {
//  //    cleanings = cleanings.filter(c => c.isPostponed);
//  //  }

//  //  this.filteredAvailableCleanings$.next(cleanings);
//  //}

//  //private _resetFilterCleaningsForm(): void {
//  //  this.filterCleaningsForm.controls.keywords.setValue('');
//  //  this.filterCleaningsForm.controls.plannableStatusSelected.setValue(false);
//  //  this.filterCleaningsForm.controls.otherStatusSelected.setValue(false);
//  //  this.filterCleaningsForm.controls.postponedStatusSelected.setValue(false);
//  //}

//  //private _setPlannedGroups(groups: CleaningTimelineGroup[]): void {
//  //  this.plannedCleanerIds$.next(groups.map(i => i.groupData.cleaner.id));

//  //  let backgroundIdIndex: number = -1;
//  //  let plannedGroupsAvailabilities: Array<CleaningTimelineItem> = [];
//  //  for (let group of groups) {
//  //    if (!group.groupData.cleaner.availabilityIntervals || group.groupData.cleaner.availabilityIntervals.length === 0)
//  //      continue;

//  //    let sortedIntervals = group.groupData.cleaner.availabilityIntervals.filter(i => i.fromTimeString < i.toTimeString || i.toTimeString === "00:00").sort((a, b) => { return a.fromTimeString > b.fromTimeString ? 1 : -1; });
//  //    if (sortedIntervals.length === 0)
//  //      continue;

//  //    for (let i = 0; i < sortedIntervals.length; i++) {
//  //      let start: Moment = null;
//  //      let end: Moment = null;

//  //      if (i === 0) {
//  //        if (sortedIntervals[i].fromTimeString === "00:00")
//  //          continue;

//  //        start = DateHelper.addMomentTime(this.plan$.value.date, "00:00");
//  //        end = DateHelper.addMomentTime(this.plan$.value.date, sortedIntervals[i].fromTimeString);
//  //      }
//  //      else {
//  //        start = DateHelper.addMomentTime(this.plan$.value.date, sortedIntervals[i - 1].toTimeString);
//  //        end = DateHelper.addMomentTime(this.plan$.value.date, sortedIntervals[i].fromTimeString);
//  //      }

//  //      plannedGroupsAvailabilities.push(<CleaningTimelineItem>{
//  //        cleaning: null,
//  //        id: backgroundIdIndex.toString(),
//  //        start: start.toDate(),
//  //        end: end.toDate(),
//  //        className: "disabled-vis-background-item",
//  //        group: group.id,
//  //        type: "background",
//  //        content: "<div></div>"
//  //      });
//  //      backgroundIdIndex--;
//  //    }

//  //    let lastInterval = sortedIntervals[sortedIntervals.length - 1];
//  //    if (lastInterval.toTimeString !== "00:00") {
//  //      let start = DateHelper.addMomentTime(this.plan$.value.date, lastInterval.toTimeString);
//  //      let end = DateHelper.addMomentTime(this.plan$.value.date, "23:59");
//  //      plannedGroupsAvailabilities.push(<CleaningTimelineItem>{
//  //        cleaning: null,
//  //        id: backgroundIdIndex.toString(),
//  //        start: start.toDate(),
//  //        end: end.toDate(),
//  //        className: "disabled-vis-background-item",
//  //        editable: false,
//  //        group: group.id,
//  //        selectable: false,
//  //        title: null,
//  //        align: "auto",
//  //        style: null,
//  //        type: "background"
//  //      });
//  //      backgroundIdIndex--;
//  //    }
//  //  }

//  //  this.plannedGroupsAvailabilities$.next(plannedGroupsAvailabilities);
//  //  this.plannedGroups$.next(groups);
//  //}

//  //private _setPlannedCleanings(items: CleaningTimelineItem[]): void {
//  //  this.plannedCleanings$.next(items);
//  //}
//  //private _setPlannedTasks(items: CleaningTimelineItem[]): void {
//  //  this.plannedNonEventTasks$.next(items);
//  //}

//  //private _setAvailableCleanings(items: CleaningTimelineItemData[]): void {
//  //  this.availableCleanings$.next(items);
//  //}

//  //private _createPlannedGroup(groupData: ICleaningTimelineGroupData): CleaningTimelineGroup {
//  //  return <CleaningTimelineGroup>{
//  //    groupData: groupData,
//  //    id: groupData.id,
//  //    treeLevel: 0,
//  //    content: null
//  //  };
//  //}

//  //private _createPlannedCleaning(itemData: PlannedCleaningTimelineItemData): CleaningTimelineItem {
//  //  let group = this.plannedGroups$.value.find(g => g.groupData.id === itemData.cleaningPlanGroupId);
//  //  return <CleaningTimelineItem>{
//  //    cleaning: itemData,
//  //    content: null,
//  //    id: itemData.id,
//  //    type: "range",
//  //    start: itemData.start.toDate(),
//  //    align: "auto",
//  //    end: itemData.end.toDate(),
//  //    group: group.id,
//  //  };
//  //}

//  //private _createPlannedTask(itemData: PlannedCleaningTimelineItemData): CleaningTimelineItem {
//  //  let group = this.plannedGroups$.value.find(g => g.groupData.id === itemData.cleaningPlanGroupId);
//  //  return <CleaningTimelineItem>{
//  //    cleaning: itemData,
//  //    content: null,
//  //    id: itemData.id,
//  //    type: "point",
//  //    start: itemData.start.toDate(),
//  //    align: "auto",
//  //    end: itemData.end.toDate(),
//  //    group: group.id,
//  //    editable: false
//  //  };
//  //}

//  //private _createAvailableCleaning(itemData: CleaningTimelineItemData): CleaningTimelineItemData {
//  //  return itemData;
//  //}

//  //private _createPlannedGroupForCleaner(cleaner: CleanerData, options: CleaningPlanOptions): CleaningTimelineGroup {
//  //  return this._createPlannedGroup(new CleaningTimelineGroupData({
//  //    id: null,
//  //    hasSecondaryCleaner: false,
//  //    cleaner: new CleanerData({
//  //      ...cleaner,
//  //      availabilityIntervals: [new TimeIntervalData({
//  //        id: "N/A",
//  //        fromTimeString: options.defaultAttendantStartTime,
//  //        toTimeString: options.defaultAttendantEndTime
//  //      })]
//  //    }),
//  //    secondaryCleaner: null,
//  //    secondaryCleanerId: null
//  //  }));
//  //}
//}
