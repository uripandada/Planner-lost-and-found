import { Injectable, EventEmitter } from "@angular/core";
import { FormArray, FormBuilder, FormGroup } from '@angular/forms';
import { BehaviorSubject } from "rxjs";
import { debounceTime } from 'rxjs/operators';
import { CleanerData, ICleanerData } from '../../core/autogenerated-clients/api-client';

@Injectable({ providedIn: 'root' })
export class SelectCleanersService {
  cleaners$: BehaviorSubject<CleanerData[]> = new BehaviorSubject<CleanerData[]>([]);
  isPopupShown$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  numberOfCleaners$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  numberOfFilteredCleaners$: BehaviorSubject<number> = new BehaviorSubject<number>(0);

  cleanersSelectionConfirmed: EventEmitter<string[]> = new EventEmitter<string[]>();

  cleanersForm: FormGroup;

  get cleanersFormArray(): FormArray {
    return this.cleanersForm.get("cleaners") as FormArray;
  }

  constructor(private _formBuilder: FormBuilder) {
    this.cleanersForm = this._createCleanersForm([], []);
  }

  setCleaners(cleaners: CleanerData[], selectedCleanerIds: string[]) {
    this.cleaners$.next(cleaners);
    this._setCleanersFormValues(cleaners, selectedCleanerIds);

    this.numberOfCleaners$.next(cleaners.length);
    this.numberOfFilteredCleaners$.next(cleaners.length);
  }

  addSelectedCleaner(cleaner: CleanerData) {
    this.cleaners$.next([...this.cleaners$.value, cleaner]);

    let selectedCleanerIds = this.cleanersFormArray.getRawValue().filter(c => c.isSelected).map(c => c.id);
    this._setCleanersFormValues(this.cleaners$.value, [...selectedCleanerIds, cleaner.id]);
    this.numberOfCleaners$.next(this.cleaners$.value.length);
    this.numberOfFilteredCleaners$.next(this.cleaners$.value.length);

    this.cleanersSelectionConfirmed.next(selectedCleanerIds);
  }

  selectAll() {
    for (let cleanerFormControl of this.cleanersFormArray.controls) {
      let cleanerFormGroup: FormGroup = cleanerFormControl as FormGroup;
      cleanerFormGroup.controls.isSelected.setValue(true);
    }
  }

  selectFiltered() {
    for (let cleanerFormControl of this.cleanersFormArray.controls) {
      let cleanerFormGroup: FormGroup = cleanerFormControl as FormGroup;
      if ((cleanerFormGroup.controls.isVisible.value as boolean) === true) {
        cleanerFormGroup.controls.isSelected.setValue(true);
      }
    }
  }

  deselectAll() {
    for (let cleanerFormControl of this.cleanersFormArray.controls) {
      let cleanerFormGroup: FormGroup = cleanerFormControl as FormGroup;
      cleanerFormGroup.controls.isSelected.setValue(false);
    }
  }

  deselectFiltered() {
    for (let cleanerFormControl of this.cleanersFormArray.controls) {
      let cleanerFormGroup: FormGroup = cleanerFormControl as FormGroup;
      if ((cleanerFormGroup.controls.isVisible.value as boolean) === true) {
        cleanerFormGroup.controls.isSelected.setValue(false);
      }
    }
  }

  filter() {
    let keywords: string = this.cleanersForm.controls.keywords.value ? (this.cleanersForm.controls.keywords.value as string).toLowerCase() : '';
    let numberOfFilteredCleaners: number = 0;

    for (let cleanerFormControl of this.cleanersFormArray.controls) {
      let cleanerFormGroup: FormGroup = cleanerFormControl as FormGroup;
      let formValues = cleanerFormGroup.getRawValue();

      let isVisible: boolean = keywords === ''
        || (formValues.name as string).toLowerCase().indexOf(keywords) >= 0
        || (formValues.username as string).toLowerCase().indexOf(keywords) >= 0
        || (formValues.groupName && (formValues.groupName as string).toLowerCase().indexOf(keywords) >= 0)
        || (formValues.subGroupName && (formValues.subGroupName as string).toLowerCase().indexOf(keywords) >= 0);

      cleanerFormGroup.controls.isVisible.setValue(isVisible);
      if (isVisible) {
        numberOfFilteredCleaners++;
      }
    }

    this.numberOfFilteredCleaners$.next(numberOfFilteredCleaners);
  }

  showPopup(cleaners: CleanerData[], selectedCleanerIds: string[]) {
    this.setCleaners(cleaners, selectedCleanerIds);
    this.isPopupShown$.next(true);
  }

  hidePopup(): void {
    this.isPopupShown$.next(false);
  }

  cancelSelection(): void {
    this.hidePopup();
  }

  saveSelection(): void {
    let selectedCleanerIds: Array<string> = this.cleanersFormArray.value.filter(f => f.isSelected).map(f => f.id);
    this.cleanersSelectionConfirmed.next(selectedCleanerIds);
  }

  private _setCleanersFormValues(cleaners: CleanerData[], selectedCleanerIds: string[]) {
    this.cleanersForm.controls.keywords.setValue('');
    this.cleanersForm.controls.cleaners = this._createCleanersFormArray(cleaners, selectedCleanerIds);
  }

  private _createCleanersForm(cleaners: CleanerData[], selectedCleanerIds: string[]): FormGroup {
    let form = this._formBuilder.group({
      keywords: [''],
      cleaners: this._createCleanersFormArray(cleaners, selectedCleanerIds)
    });

    form.controls.keywords.valueChanges
      .pipe(
        debounceTime(300)
      )
      .subscribe(() => {
        this.filter();
      });

    return form;
  }

  private _createCleanersFormArray(cleaners: Array<ICleanerData>, selectedCleanerIds: string[]): FormArray {
    return new FormArray(this._createCleanerFormGroups(cleaners, selectedCleanerIds));
  }

  private _createCleanerFormGroups(cleaners: Array<ICleanerData>, selectedCleanerIds: string[]): Array<FormGroup> {
    return cleaners.map(a => this._createCleanerFormGroup(a, selectedCleanerIds));
  }

  private _createCleanerFormGroup(a: ICleanerData, selectedCleanerIds: string[]): FormGroup {
    let isSelected: boolean = selectedCleanerIds.find(id => id === a.id) !== undefined;

    return this._formBuilder.group({
      id: [a.id],
      name: [a.name ? a.name : ''],
      username: [a.username ? a.username : ''],
      groupName: [a.groupName],
      subGroupName: [a.subGroupName],
      isSelected: [isSelected],
      isVisible: [true],
      fullNameInitials: [{ value: a.fullNameInitials, disabled: true }],
      avatarUrl: [{ value: a.avatarUrl, disabled: true }],
    });
  }
}
