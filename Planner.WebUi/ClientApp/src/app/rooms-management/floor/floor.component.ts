import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';
import { FormGroup, FormArray, FormBuilder } from '@angular/forms';
import { BehaviorSubject } from 'rxjs';
import { RoomManagementClient, InsertFloorCommand, ProcessResponseOfInsertFloorResponse, UpdateFloorCommand, ProcessResponseOfUpdateFloorResponse, FullRoomHierarchyFloorData } from '../../core/autogenerated-clients/api-client';
import { ToastrService } from 'ngx-toastr';
import { Router } from '@angular/router';
import { HotelService } from '../../core/services/hotel.service';
import { LoadingService } from '../../core/services/loading.service';
import moment, { Moment } from 'moment';

@Component({
  selector: 'app-floor',
  templateUrl: './floor.component.html',
  styleUrls: ['./floor.component.scss']
})
export class FloorComponent implements OnInit {

  @Input() floorIndex: number;
  @Input() floorForm: FormGroup;
  @Input() buildingId: string;
  @Input() buildingTypeKey: string;

  @Output() unsavedFloorRemoved: EventEmitter<number> = new EventEmitter<number>();
  @Output() floorDeleted: EventEmitter<number> = new EventEmitter<number>();
  @Output() roomAdded: EventEmitter<{ floorId: string, buildingId: string }> = new EventEmitter<{ floorId: string, buildingId: string }>();
  @Output() floorAdded: EventEmitter<FullRoomHierarchyFloorData> = new EventEmitter<FullRoomHierarchyFloorData>();
  @Output() floorUpdated: EventEmitter<FullRoomHierarchyFloorData> = new EventEmitter<FullRoomHierarchyFloorData>();

  numberOfRooms$: BehaviorSubject<number> = new BehaviorSubject<number>(0);

  isEditMode$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  isFloorCollapsed$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);

  get roomsFormArray(): FormArray {
    return this.floorForm.controls.rooms as FormArray;
  }
  get warehousesFormArray(): FormArray {
    return this.floorForm.controls.warehouses as FormArray;
  }

  hotelId: string;

  constructor(private _toastr: ToastrService, private _roomManagementClient: RoomManagementClient, private _router: Router, private _hotelService: HotelService, public loading: LoadingService) {
    this.hotelId = this._hotelService.getSelectedHotelId();
  }

  ngOnInit(): void {
    this.isEditMode$.next(this.floorForm.controls.id.value === null);

    this.numberOfRooms$.next(this.roomsFormArray.length);

    this.roomsFormArray.valueChanges.subscribe(() => {
      this.numberOfRooms$.next(this.roomsFormArray.length);
    });
  }

  toggleFloorCollapse() {
    this.isFloorCollapsed$.next(!this.isFloorCollapsed$.value);
  }

  saveFloor() {
    this.loading.start();

    this.isEditMode$.next(false);

    let isInsert: boolean = this.floorForm.controls.id.value === null;
    let buildingFormValue = this.floorForm.value;

    if (isInsert) {
      let insertRequest: InsertFloorCommand = new InsertFloorCommand({
        name: buildingFormValue.name,
        ordinalNumber: +(buildingFormValue.ordinalNumber),
        number: +(buildingFormValue.number),
        buildingId: buildingFormValue.buildingId,
        hotelId: this.hotelId,
      });

      this._roomManagementClient.insertFloor(insertRequest).subscribe(
        (response: ProcessResponseOfInsertFloorResponse) => {
          if (response.hasError) {
            this._toastr.error(response.message);
            return;
          }

          this.floorForm.controls.id.setValue(response.data.id);
          this._toastr.success(response.message);

          var floor: FullRoomHierarchyFloorData = new FullRoomHierarchyFloorData({
            createdAt: moment(new Date()),
            id: response.data.id,
            number: insertRequest.number,
            ordinalNumber: insertRequest.ordinalNumber,
            name: insertRequest.name,
            rooms: [],
            warehouses: [],
          });

          this.floorAdded.next(floor);
        },
        (error: Error) => {
          this._toastr.error(error.message);
        },
        () => {
          this.loading.stop();
        }
      );
    }
    else {
      let updateRequest: UpdateFloorCommand = new UpdateFloorCommand({
        id: buildingFormValue.id,
        name: buildingFormValue.name,
        ordinalNumber: +(buildingFormValue.ordinalNumber),
        number: +(buildingFormValue.number),
        buildingId: buildingFormValue.buildingId,
        hotelId: this._hotelService.getSelectedHotelId(),
      });

      this._roomManagementClient.updateFloor(updateRequest).subscribe(
        (response: ProcessResponseOfUpdateFloorResponse) => {
          if (response.hasError) {
            this._toastr.error(response.message);
            return;
          }

          this._toastr.success(response.message);

          var floor: FullRoomHierarchyFloorData = new FullRoomHierarchyFloorData({
            createdAt: moment(new Date()),
            id: updateRequest.id,
            number: updateRequest.number,
            ordinalNumber: updateRequest.ordinalNumber,
            name: updateRequest.name,
            rooms: [],
            warehouses: [],
          });

          this.floorAdded.next(floor);
        },
        (error: Error) => {
          this._toastr.error(error.message);
        },
        () => {
          this.loading.stop();
        }
      );
    }
  }

  editFloor() {
    this.isEditMode$.next(true);
  }

  cancelSaveFloor() {
    this.isEditMode$.next(false);

    if (!this.floorForm.controls.id.value) {
      this.unsavedFloorRemoved.next(this.floorIndex);
    }
  }

  deleteFloor() {
    this.floorDeleted.next(this.floorIndex);
  }

  addNewRoom() {
    this.roomAdded.next({
      floorId: this.floorForm.controls.id.value,
      buildingId: this.buildingId
    });
  }

  roomDetails(roomId: string) {
    this._router.navigate(['rooms-management', 'room-details'], { queryParams: { roomId: roomId } });
  }

  goToWarehouseDetails(warehouseId: string) {
    this._router.navigate(['/warehouses', 'warehouse-details', warehouseId]);
  }

}
