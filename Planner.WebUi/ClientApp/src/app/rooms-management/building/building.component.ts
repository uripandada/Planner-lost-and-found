import { Component, OnInit, Input, EventEmitter, Output, OnChanges, SimpleChanges } from '@angular/core';
import { FormGroup, FormArray, FormBuilder, Validators } from '@angular/forms';
import { BehaviorSubject, Observable } from 'rxjs';
import { ToastrService } from 'ngx-toastr';
import { RoomManagementClient, InsertBuildingCommand, UpdateBuildingCommand, ProcessResponse, FullRoomHierarchyAreaData, ProcessResponseOfInsertBuildingResponse, ProcessResponseOfUpdateBuildingResponse, FullRoomHierarchyFloorData, FullRoomHierarchyBuildingData } from '../../core/autogenerated-clients/api-client';
import { startWith, map } from 'rxjs/operators';
import { AreasService } from '../services/areas.service';
import { HotelService } from '../../core/services/hotel.service';
import moment, { Moment } from 'moment';

@Component({
  selector: 'app-building',
  templateUrl: './building.component.html',
  styleUrls: ['./building.component.scss']
})
export class BuildingComponent implements OnInit, OnChanges {

  @Input() buildingIndex: number;
  @Input() buildingForm: FormGroup;

  @Output() unsavedBuildingRemoved: EventEmitter<number> = new EventEmitter<number>();
  @Output() buildingDeleted: EventEmitter<number> = new EventEmitter<number>();
  @Output() roomAdded: EventEmitter<{ floorId: string, buildingId: string }> = new EventEmitter<{ floorId: string, buildingId: string }>();
  @Output() buildingAdded: EventEmitter<FullRoomHierarchyBuildingData> = new EventEmitter<FullRoomHierarchyBuildingData>();
  @Output() buildingUpdated: EventEmitter<FullRoomHierarchyBuildingData> = new EventEmitter<FullRoomHierarchyBuildingData>();
  @Output() floorAdded: EventEmitter<FullRoomHierarchyFloorData> = new EventEmitter<FullRoomHierarchyFloorData>();
  @Output() floorUpdated: EventEmitter<FullRoomHierarchyFloorData> = new EventEmitter<FullRoomHierarchyFloorData>();

  areas: Array<FullRoomHierarchyAreaData>;
  isEditMode$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  isBuildingCollapsed$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  filteredAreas$: Observable<Array<FullRoomHierarchyAreaData>>;

  numberOfFloors$: BehaviorSubject<number> = new BehaviorSubject<number>(0);
  numberOfRooms$: BehaviorSubject<number> = new BehaviorSubject<number>(0);

  get floorsFormArray(): FormArray {
    return this.buildingForm.controls.floors as FormArray;
  }

  constructor(private _toastr: ToastrService, private _roomManagementClient: RoomManagementClient, private _areasService: AreasService, private _formBuilder: FormBuilder, private _hotelService: HotelService) { }
    ngOnChanges(changes: SimpleChanges): void {
    }

  displayAreaName(area) {
    if (area && typeof(area) === "object") {
      return area.name;
    }
    return "";
  }

  ngOnInit(): void {

    this.isEditMode$.next(this.buildingForm.controls.id.value === null);

    this._areasService.areas.subscribe((areas: Array<FullRoomHierarchyAreaData>) => {
      this.areas = areas;
    });

    this.filteredAreas$ = this.buildingForm.controls.area.valueChanges
      .pipe(
        startWith(''),
        map(value => this._filter(value))
    );

    this._setTotalNumbers();

    this.floorsFormArray.valueChanges.subscribe(() => {
      this._setTotalNumbers();
    });
  }

  private _setTotalNumbers() {
    this.numberOfFloors$.next(this.floorsFormArray.length);

    let numberOfRooms: number = 0;
    for (let floorFormGroupControl of this.floorsFormArray.controls) {
      let fg: FormGroup = floorFormGroupControl as FormGroup;
      let roomsFa: FormArray = fg.controls.rooms as FormArray;
      numberOfRooms += roomsFa.length;
    }

    this.numberOfRooms$.next(numberOfRooms);
  }

  private _filter(value) {
    if (typeof (value) === "string") {
      const filterValue = value.toLowerCase();
      return this.areas.filter(a => a.name.toLowerCase().indexOf(filterValue) >= 0);
    }
    else {
      return this.areas;
    }
  }

  onFloorAdded(floor: FullRoomHierarchyFloorData) {
    this.floorAdded.next(floor);
  }

  onFloorUpdated(floor: FullRoomHierarchyFloorData) {
    this.floorUpdated.next(floor);
  }

  onRoomAdded(data: { floorId: string, buildingId: string }) {
    this.roomAdded.next(data);
  }

  toggleBuildingCollapse() {
    this.isBuildingCollapsed$.next(!this.isBuildingCollapsed$.value);
  }

  editBuilding() {
    this.isEditMode$.next(true);
  }

  saveBuilding() {
    this.isEditMode$.next(false);

    let isInsert: boolean = this.buildingForm.controls.id.value === null;
    let buildingFormValue = this.buildingForm.value;
    let hotelId = this._hotelService.getSelectedHotelId();

    if (isInsert) {
      let insertRequest: InsertBuildingCommand = new InsertBuildingCommand({
        address: buildingFormValue.address,
        latitude: buildingFormValue.latitude ? +(buildingFormValue.latitude) : null,
        longitude: buildingFormValue.longitude ? +(buildingFormValue.longitude) : null,
        name: buildingFormValue.name,
        ordinalNumber: buildingFormValue.ordinalNumber ? +(buildingFormValue.ordinalNumber) : -1,
        areaId: null,
        areaName: null,
        typeKey: buildingFormValue.typeKey,
        hotelId: hotelId
      });

      if (buildingFormValue.area) {
        const areaDataType: string = typeof (buildingFormValue.area);
        if (areaDataType === "string") {
          insertRequest.areaName = buildingFormValue.area;
        }
        else if (areaDataType === "object") {
          insertRequest.areaId = buildingFormValue.area.id;
        }
      }

      this._roomManagementClient.insertBuilding(insertRequest).subscribe(
        (response: ProcessResponseOfInsertBuildingResponse) => {
          if (response.hasError) {
            this._toastr.error(response.message);
            return;
          }

          this.buildingForm.controls.id.setValue(response.data.id);
          this._toastr.success(response.message);

          if (response.data.wasAreaInserted) {
            let newArea: FullRoomHierarchyAreaData = new FullRoomHierarchyAreaData(response.data.area);
            this._areasService.addArea(newArea);
            this.buildingForm.controls.area.setValue(newArea);
          }

          let buildingData: FullRoomHierarchyBuildingData = new FullRoomHierarchyBuildingData({
            createdAt: moment(new Date()),
            id: response.data.id,
            ordinalNumber: insertRequest.ordinalNumber,
            address: insertRequest.address,
            areaId: insertRequest.areaId,
            areaName: insertRequest.areaName,
            floors: [],
            latitude: insertRequest.latitude,
            longitude: insertRequest.longitude,
            name: insertRequest.name,
            typeKey: insertRequest.typeKey,
          });

          this.buildingAdded.next(buildingData);
        },
        (error: Error) => {
          this._toastr.error(error.message);
        },
        () => {
        }
      );
    }
    else {
      let updateRequest: UpdateBuildingCommand = new UpdateBuildingCommand({
        address: buildingFormValue.address,
        latitude: buildingFormValue.latitude ? +(buildingFormValue.latitude) : null,
        longitude: buildingFormValue.longitude ? +(buildingFormValue.longitude) : null,
        name: buildingFormValue.name,
        ordinalNumber: buildingFormValue.ordinalNumber ? +(buildingFormValue.ordinalNumber) : -1,
        areaId: null,
        areaName: null,
        typeKey: buildingFormValue.typeKey,
        id: buildingFormValue.id,
        hotelId: hotelId
      });

      if (buildingFormValue.area) {
        const areaDataType: string = typeof (buildingFormValue.area);
        if (areaDataType === "string") {
          updateRequest.areaName = buildingFormValue.area;
        }
        else if (areaDataType === "object") {
          updateRequest.areaId = buildingFormValue.area.id;
        }
      }

      this._roomManagementClient.updateBuilding(updateRequest).subscribe(
        (response: ProcessResponseOfUpdateBuildingResponse) => {
          if (response.hasError) {
            this._toastr.error(response.message);
            return;
          }

          this._toastr.success(response.message);

          if (response.data.wasAreaInserted) {
            let newArea: FullRoomHierarchyAreaData = new FullRoomHierarchyAreaData(response.data.area);
            this._areasService.addArea(newArea);
            this.buildingForm.controls.area.setValue(newArea);
          }

          let buildingData: FullRoomHierarchyBuildingData = new FullRoomHierarchyBuildingData({
            createdAt: moment(new Date()),
            id: updateRequest.id,
            ordinalNumber: updateRequest.ordinalNumber,
            address: updateRequest.address,
            areaId: updateRequest.areaId,
            areaName: updateRequest.areaName,
            floors: [],
            latitude: updateRequest.latitude,
            longitude: updateRequest.longitude,
            name: updateRequest.name,
            typeKey: updateRequest.typeKey,
          });

          this.buildingUpdated.next(buildingData);
        },
        (error: Error) => {
          this._toastr.error(error.message);
        },
        () => {
        }
      );
    }
  }

  cancelSaveBuilding() {
    this.isEditMode$.next(false);

    if (!this.buildingForm.controls.id.value) {
      this.unsavedBuildingRemoved.next(this.buildingIndex);
    }
  }

  deleteBuilding() {
    this.buildingDeleted.next(this.buildingIndex);
  }

  addNewFloor() {
    let floorsFormArrayValue = this.floorsFormArray.value;
    let maxNumber: number = 0;
    for (let f of floorsFormArrayValue) {
      if (maxNumber < +(f.number)) maxNumber = +(f.number);
    }

    let floorNumber: number = maxNumber + 1;
    this.floorsFormArray.push(this._formBuilder.group({
      id: null,
      name: ['Floor ' + floorNumber, Validators.required],
      number: [floorNumber, Validators.required],
      rooms: this._formBuilder.array([]),
      ordinalNumber: floorNumber,
      buildingId: this.buildingForm.controls.id.value,
      warehouses: this._formBuilder.array([]),
    }));
  }

  //private _generateWarehousesFormArray(floor: FullRoomHierarchyFloorData): FormArray {
  //  const warehouses: Array<FormGroup> = [];

  //  for (const warehouse of floor.warehouses) {
  //    warehouses.push(this._formBuilder.group({
  //      id: warehouse.id,
  //      name: warehouse.name,
  //    }));
  //  }

  //  return this._formBuilder.array(warehouses);
  //}

  removeFloorForm(formIndex: number) {
    this.floorsFormArray.removeAt(formIndex);
  }

  deleteFloor(formIndex: number) {
    this.floorsFormArray.removeAt(formIndex);
  }
}
