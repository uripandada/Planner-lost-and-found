using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Planner.Common.Enums;
using Planner.Domain.Entities;
using System;

namespace Planner.Persistence.Configurations
{
	public class RoomBedConfiguration : IEntityTypeConfiguration<RoomBed>
	{
		public void Configure(EntityTypeBuilder<RoomBed> builder)
		{
			builder.HasKey(a => a.Id);

			builder.Property(a => a.Id)
				.HasColumnName(nameof(RoomBed.Id))
				.IsRequired();

			builder.Property(a => a.Name)
				.HasColumnName(nameof(RoomBed.Name))
				.IsRequired();

			builder.Property(a => a.ExternalId)
				.HasColumnName(nameof(RoomBed.ExternalId));

			builder.Property(a => a.RoomId)
				.HasColumnName(nameof(RoomBed.RoomId))
				.IsRequired();

			builder.Property(a => a.IsOccupied)
					.HasColumnName(nameof(RoomBed.IsOccupied))
					.IsRequired();

			builder.Property(a => a.IsClean)
					.HasColumnName(nameof(RoomBed.IsClean))
					.IsRequired();

			builder.Property(a => a.IsOutOfOrder)
				.HasColumnName(nameof(RoomBed.IsOutOfOrder))
				.IsRequired();

			builder.Property(a => a.IsOutOfService)
				.HasColumnName(nameof(RoomBed.IsOutOfService))
				.IsRequired();

			builder.Property(a => a.IsDoNotDisturb)
				.HasColumnName(nameof(RoomBed.IsDoNotDisturb))
				.IsRequired();

			builder.Property(a => a.IsCleaningInProgress)
				.HasColumnName(nameof(RoomBed.IsCleaningInProgress))
				.IsRequired();

			builder.Property(a => a.IsAutogeneratedFromReservationSync)
				.HasColumnName(nameof(RoomBed.IsAutogeneratedFromReservationSync))
				.IsRequired();

			builder.Property(a => a.IsGuestCurrentlyIn)
				.HasColumnName(nameof(RoomBed.IsGuestCurrentlyIn))
				.IsRequired();
			
			builder.Property(a => a.IsCleaningPriority)
				.HasColumnName(nameof(RoomBed.IsCleaningPriority))
				.IsRequired();

			builder.Property(a => a.IsInspected)
				.HasColumnName(nameof(RoomBed.IsInspected))
				.IsRequired();

			builder
				.HasOne(bed => bed.Room)
				.WithMany(room => room.RoomBeds)
				.HasForeignKey(bed => bed.RoomId)
				.OnDelete(DeleteBehavior.Restrict);

			builder
				.HasMany(bed => bed.Reservations)
				.WithOne(reservation => reservation.RoomBed)
				.HasForeignKey(reservation => reservation.RoomBedId)
				.OnDelete(DeleteBehavior.Restrict);

			builder
				.HasMany(bed => bed.Cleanings)
				.WithOne(cleaning => cleaning.RoomBed)
				.HasForeignKey(cleaning => cleaning.RoomBedId)
				.OnDelete(DeleteBehavior.Restrict);

			builder
				.HasMany(r => r.RoomHistoryEvents)
				.WithOne(a => a.RoomBed)
				.HasForeignKey(a => a.RoomBedId)
				.OnDelete(DeleteBehavior.Restrict);

			builder.Property(a => a.RccHousekeepingStatus)
				.HasColumnName(nameof(RoomBed.RccHousekeepingStatus))
				.HasConversion(a => a.HasValue ? a.ToString() : null, a => a == null ? null : (RccHousekeepingStatusCode)Enum.Parse(typeof(RccHousekeepingStatusCode), a));

			builder.Property(a => a.RccRoomStatus)
				.HasColumnName(nameof(RoomBed.RccRoomStatus))
				.HasConversion(a => a.HasValue ? a.ToString() : null, a => a == null ? null : (RccRoomStatusCode)Enum.Parse(typeof(RccRoomStatusCode), a));

		}
	}
}
