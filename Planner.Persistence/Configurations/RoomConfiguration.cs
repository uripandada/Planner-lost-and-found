using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Planner.Common.Enums;
using Planner.Domain.Entities;
using System;

namespace Planner.Persistence.Configurations
{
	public class RoomConfiguration : IEntityTypeConfiguration<Room>
	{
		public void Configure(EntityTypeBuilder<Room> builder)
		{
			builder.ConfigureChangeTrackingBaseEntity();

			builder.HasKey(a => a.Id);

			builder.Property(a => a.Id)
				.HasColumnName(nameof(Room.Id))
				.IsRequired();

			builder.Property(a => a.Name)
				.HasColumnName(nameof(Room.Name))
				.IsRequired();

			builder.Property(a => a.ExternalId)
				.HasColumnName(nameof(Room.ExternalId));

			builder.Property(a => a.FloorSectionName)
				.HasColumnName(nameof(Room.FloorSectionName));

			builder.Property(a => a.FloorSubSectionName)
				.HasColumnName(nameof(Room.FloorSubSectionName));

			builder.Property(a => a.TypeKey)
				.HasColumnName(nameof(Room.TypeKey))
				.IsRequired();

			builder.Property(a => a.OrdinalNumber)
				.HasColumnName(nameof(Room.OrdinalNumber))
				.IsRequired()
				.HasDefaultValue(0);

			builder.Property(a => a.AreaId)
				.HasColumnName(nameof(Room.AreaId));

			builder.Property(a => a.BuildingId)
				.HasColumnName(nameof(Room.BuildingId));

			builder.Property(a => a.FloorId)
				.HasColumnName(nameof(Room.FloorId));

			builder.Property(a => a.CategoryId)
				.HasColumnName(nameof(Room.CategoryId));

			builder.Property(a => a.IsAutogeneratedFromReservationSync)
				.HasColumnName(nameof(Room.IsAutogeneratedFromReservationSync));

			builder.Property(a => a.IsOccupied)
				.HasColumnName(nameof(Room.IsOccupied))
				.IsRequired();

			builder.Property(a => a.IsClean)
				.HasColumnName(nameof(Room.IsClean))
				.IsRequired();

			builder.Property(a => a.IsOutOfOrder)
				.HasColumnName(nameof(Room.IsOutOfOrder))
				.IsRequired();

			builder.Property(a => a.IsOutOfService)
				.HasColumnName(nameof(Room.IsOutOfService))
				.IsRequired();

			builder.Property(a => a.IsDoNotDisturb)
				.HasColumnName(nameof(Room.IsDoNotDisturb))
				.IsRequired();

			builder.Property(a => a.IsCleaningInProgress)
				.HasColumnName(nameof(Room.IsCleaningInProgress))
				.IsRequired()
				.HasDefaultValue(false);

			builder.Property(a => a.IsInspected)
				.HasColumnName(nameof(Room.IsInspected))
				.IsRequired();
			
			builder.Property(a => a.IsGuestCurrentlyIn)
				.HasColumnName(nameof(Room.IsGuestCurrentlyIn))
				.IsRequired();
			
			builder.Property(a => a.IsCleaningPriority)
				.HasColumnName(nameof(Room.IsCleaningPriority))
				.IsRequired();

			builder
				.HasMany(r => r.Reservations)
				.WithOne(res => res.Room)
				.HasForeignKey(res => res.RoomId)
				.OnDelete(DeleteBehavior.Restrict);

			builder
				.HasOne(a => a.Floor)
				.WithMany(f => f.Rooms)
				.HasForeignKey(f => f.FloorId)
				.OnDelete(DeleteBehavior.Restrict);

			builder
				.HasOne(a => a.Building)
				.WithMany(b => b.Rooms)
				.HasForeignKey(b => b.BuildingId)
				.OnDelete(DeleteBehavior.Restrict);

			builder
				.HasOne(a => a.Area)
				.WithMany(f => f.Rooms)
				.HasForeignKey(f => f.AreaId)
				.OnDelete(DeleteBehavior.Restrict);

			builder
				.HasOne(r => r.Category)
				.WithMany(c => c.Rooms)
				.HasForeignKey(c => c.CategoryId)
				.OnDelete(DeleteBehavior.Restrict);

			builder.Property(e => e.HotelId)
				.HasColumnName(nameof(BaseEntity.HotelId))
				.IsRequired();

			builder
				.HasOne(x => x.Hotel)
				.WithMany(r => r.Rooms)
				.HasForeignKey(x => x.HotelId)
				.OnDelete(DeleteBehavior.Restrict);

			builder
				.HasIndex(r => new { r.HotelId, r.ExternalId })
				.IsUnique();

			builder
				.HasIndex(r => new { r.HotelId, r.Name })
				.IsUnique();

			builder
				.HasMany(r => r.AssetUsages)
				.WithOne(au => au.Room)
				.HasForeignKey(au => au.RoomId)
				.OnDelete(DeleteBehavior.Restrict);


			builder
				.HasMany(r => r.RoomNotes)
				.WithOne(a => a.Room)
				.HasForeignKey(a => a.RoomId)
				.OnDelete(DeleteBehavior.Restrict);

			builder
				.HasMany(r => r.CleaningHistoryEvents)
				.WithOne(a => a.Room)
				.HasForeignKey(a => a.RoomId)
				.OnDelete(DeleteBehavior.Restrict);

			builder
				.HasMany(r => r.RoomHistoryEvents)
				.WithOne(a => a.Room)
				.HasForeignKey(a => a.RoomId)
				.OnDelete(DeleteBehavior.Restrict);

			builder
				.HasMany(room => room.RoomBeds)
				.WithOne(bed => bed.Room)
				.HasForeignKey(bed => bed.RoomId)
				.OnDelete(DeleteBehavior.Restrict);
			
			builder
				.HasMany(room => room.Cleanings)
				.WithOne(cleaning => cleaning.Room)
				.HasForeignKey(cleaning => cleaning.RoomId)
				.OnDelete(DeleteBehavior.Restrict);

			builder.Property(a => a.RccHousekeepingStatus)
				.HasColumnName(nameof(Room.RccHousekeepingStatus))
				.HasConversion(a => a.HasValue ? a.ToString() : null, a => a == null ? null : (RccHousekeepingStatusCode)Enum.Parse(typeof(RccHousekeepingStatusCode), a));

			builder.Property(a => a.RccRoomStatus)
				.HasColumnName(nameof(Room.RccRoomStatus))
				.HasConversion(a => a.HasValue ? a.ToString() : null, a => a == null ? null : (RccRoomStatusCode)Enum.Parse(typeof(RccRoomStatusCode), a));


		}
	}
}
