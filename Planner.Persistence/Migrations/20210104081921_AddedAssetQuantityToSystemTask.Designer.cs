// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Planner.Domain.Entities;
using Planner.Persistence;

namespace Planner.Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210104081921_AddedAssetQuantityToSystemTask")]
    partial class AddedAssetQuantityToSystemTask
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnName("user_code")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnName("client_id")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("creation_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnName("data")
                        .HasColumnType("character varying(50000)")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnName("device_code")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnName("expiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SubjectId")
                        .HasColumnName("subject_id")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("UserCode")
                        .HasName("pk_device_codes");

                    b.HasIndex("DeviceCode")
                        .IsUnique()
                        .HasName("ix_device_codes_device_code");

                    b.HasIndex("Expiration")
                        .HasName("ix_device_codes_expiration");

                    b.ToTable("device_codes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnName("key")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnName("client_id")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("creation_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnName("data")
                        .HasColumnType("character varying(50000)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnName("expiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SubjectId")
                        .HasColumnName("subject_id")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Key")
                        .HasName("pk_persisted_grants");

                    b.HasIndex("Expiration")
                        .HasName("ix_persisted_grants_expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type")
                        .HasName("ix_persisted_grants_subject_id_client_id_type");

                    b.ToTable("persisted_grants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasName("ix_asp_net_role_claims_role_id");

                    b.ToTable("asp_net_role_claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasName("ix_asp_net_user_claims_user_id");

                    b.ToTable("asp_net_user_claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnName("provider_key")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("provider_display_name")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasName("ix_asp_net_user_logins_user_id");

                    b.ToTable("asp_net_user_logins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasName("ix_asp_net_user_roles_role_id");

                    b.ToTable("asp_net_user_roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("asp_net_user_tokens");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnName("created_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("HotelId")
                        .IsRequired()
                        .HasColumnName("hotel_id")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnName("modified_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_areas");

                    b.HasIndex("CreatedById")
                        .HasName("ix_areas_created_by_id");

                    b.HasIndex("HotelId")
                        .HasName("ix_areas_hotel_id");

                    b.HasIndex("ModifiedById")
                        .HasName("ix_areas_modified_by_id");

                    b.ToTable("areas");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<int>("AvailableQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("available_quantity")
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnName("created_by_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAvailableToHousekeeping")
                        .HasColumnName("is_available_to_housekeeping")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvailableToMaintenance")
                        .HasColumnName("is_available_to_maintenance")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnName("modified_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<bool>("UsesModels")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("uses_models")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("Id")
                        .HasName("pk_assets");

                    b.HasIndex("CreatedById")
                        .HasName("ix_assets_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasName("ix_assets_modified_by_id");

                    b.ToTable("assets");
                });

            modelBuilder.Entity("Planner.Domain.Entities.AssetAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssetId")
                        .HasColumnName("asset_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssetModelId")
                        .HasColumnName("asset_model_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnName("created_by_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBlocking")
                        .HasColumnName("is_blocking")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHighPriority")
                        .HasColumnName("is_high_priority")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnName("modified_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_asset_actions");

                    b.HasIndex("AssetId")
                        .HasName("ix_asset_actions_asset_id");

                    b.HasIndex("AssetModelId")
                        .HasName("ix_asset_actions_asset_model_id");

                    b.HasIndex("CreatedById")
                        .HasName("ix_asset_actions_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasName("ix_asset_actions_modified_by_id");

                    b.ToTable("asset_actions");
                });

            modelBuilder.Entity("Planner.Domain.Entities.AssetFile", b =>
                {
                    b.Property<Guid>("AssetId")
                        .HasColumnName("asset_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnName("file_id")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsPrimaryImage")
                        .IsRequired()
                        .HasColumnName("is_primary_image")
                        .HasColumnType("boolean");

                    b.HasKey("AssetId", "FileId")
                        .HasName("pk_asset_files");

                    b.HasIndex("FileId")
                        .HasName("ix_asset_files_file_id");

                    b.ToTable("asset_files");
                });

            modelBuilder.Entity("Planner.Domain.Entities.AssetModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssetId")
                        .HasColumnName("asset_id")
                        .HasColumnType("uuid");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnName("available_quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnName("created_by_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnName("modified_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_asset_models");

                    b.HasIndex("AssetId")
                        .HasName("ix_asset_models_asset_id");

                    b.HasIndex("CreatedById")
                        .HasName("ix_asset_models_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasName("ix_asset_models_modified_by_id");

                    b.ToTable("asset_models");
                });

            modelBuilder.Entity("Planner.Domain.Entities.AssetTag", b =>
                {
                    b.Property<Guid>("AssetId")
                        .HasColumnName("asset_id")
                        .HasColumnType("uuid");

                    b.Property<string>("TagKey")
                        .HasColumnName("tag_key")
                        .HasColumnType("text");

                    b.HasKey("AssetId", "TagKey")
                        .HasName("pk_asset_tags");

                    b.HasIndex("TagKey")
                        .HasName("ix_asset_tags_tag_key");

                    b.ToTable("asset_tags");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("text");

                    b.Property<Guid?>("AreaId")
                        .HasColumnName("area_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnName("created_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("HotelId")
                        .IsRequired()
                        .HasColumnName("hotel_id")
                        .HasColumnType("text");

                    b.Property<long?>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("bigint");

                    b.Property<long?>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnName("modified_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("OrdinalNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ordinal_number")
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("TypeKey")
                        .IsRequired()
                        .HasColumnName("type_key")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_buildings");

                    b.HasIndex("AreaId")
                        .HasName("ix_buildings_area_id");

                    b.HasIndex("CreatedById")
                        .HasName("ix_buildings_created_by_id");

                    b.HasIndex("HotelId")
                        .HasName("ix_buildings_hotel_id");

                    b.HasIndex("ModifiedById")
                        .HasName("ix_buildings_modified_by_id");

                    b.ToTable("buildings");
                });

            modelBuilder.Entity("Planner.Domain.Entities.CleaningPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnName("created_by_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("date");

                    b.Property<string>("HotelId")
                        .IsRequired()
                        .HasColumnName("hotel_id")
                        .HasColumnType("text");

                    b.Property<bool>("IsSent")
                        .HasColumnName("is_sent")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnName("modified_by_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnName("sent_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("pk_cleaning_plans");

                    b.HasIndex("CreatedById")
                        .HasName("ix_cleaning_plans_created_by_id");

                    b.HasIndex("HotelId")
                        .HasName("ix_cleaning_plans_hotel_id");

                    b.HasIndex("ModifiedById")
                        .HasName("ix_cleaning_plans_modified_by_id");

                    b.ToTable("cleaning_plans");
                });

            modelBuilder.Entity("Planner.Domain.Entities.CleaningPlanGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CleanerId")
                        .HasColumnName("cleaner_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CleaningPlanId")
                        .HasColumnName("cleaning_plan_id")
                        .HasColumnType("uuid");

                    b.Property<int?>("MaxCredits")
                        .HasColumnName("max_credits")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxDepartures")
                        .HasColumnName("max_departures")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxTwins")
                        .HasColumnName("max_twins")
                        .HasColumnType("integer");

                    b.Property<bool>("MustFillAllCredits")
                        .HasColumnName("must_fill_all_credits")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("SecondaryCleanerId")
                        .HasColumnName("secondary_cleaner_id")
                        .HasColumnType("uuid");

                    b.Property<int?>("WeeklyHours")
                        .HasColumnName("weekly_hours")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_cleaning_plan_groups");

                    b.HasIndex("CleanerId")
                        .HasName("ix_cleaning_plan_groups_cleaner_id");

                    b.HasIndex("CleaningPlanId")
                        .HasName("ix_cleaning_plan_groups_cleaning_plan_id");

                    b.HasIndex("SecondaryCleanerId")
                        .HasName("ix_cleaning_plan_groups_secondary_cleaner_id");

                    b.ToTable("cleaning_plan_groups");
                });

            modelBuilder.Entity("Planner.Domain.Entities.CleaningPlanGroupAvailabilityInterval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CleaningPlanGroupId")
                        .HasColumnName("cleaning_plan_group_id")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("From")
                        .HasColumnName("from")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("To")
                        .HasColumnName("to")
                        .HasColumnType("time");

                    b.HasKey("Id")
                        .HasName("pk_cleaning_plan_group_availability_intervals");

                    b.HasIndex("CleaningPlanGroupId")
                        .HasName("ix_cleaning_plan_group_availability_intervals_cleaning_plan_gr~");

                    b.ToTable("cleaning_plan_group_availability_intervals");
                });

            modelBuilder.Entity("Planner.Domain.Entities.CleaningPlanGroupFloorAffinity", b =>
                {
                    b.Property<Guid>("FloorId")
                        .HasColumnName("floor_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CleaningPlanGroupId")
                        .HasColumnName("cleaning_plan_group_id")
                        .HasColumnType("uuid");

                    b.HasKey("FloorId", "CleaningPlanGroupId")
                        .HasName("pk_cleaning_plan_group_floor_affinities");

                    b.HasIndex("CleaningPlanGroupId")
                        .HasName("ix_cleaning_plan_group_floor_affinities_cleaning_plan_group_id");

                    b.ToTable("cleaning_plan_group_floor_affinities");
                });

            modelBuilder.Entity("Planner.Domain.Entities.CleaningPlanItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CleaningPlanGroupId")
                        .HasColumnName("cleaning_plan_group_id")
                        .HasColumnType("uuid");

                    b.Property<int>("DurationSec")
                        .HasColumnName("duration_sec")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnName("ends_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReservationId")
                        .HasColumnName("reservation_id")
                        .HasColumnType("text");

                    b.Property<Guid>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnName("starts_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("pk_cleaning_plan_items");

                    b.HasIndex("CleaningPlanGroupId")
                        .HasName("ix_cleaning_plan_items_cleaning_plan_group_id");

                    b.HasIndex("RoomId")
                        .HasName("ix_cleaning_plan_items_room_id");

                    b.ToTable("cleaning_plan_items");
                });

            modelBuilder.Entity("Planner.Domain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnName("created_by_id")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnName("file_data")
                        .HasColumnType("bytea");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnName("file_name")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnName("modified_by_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_files");

                    b.HasIndex("CreatedById")
                        .HasName("ix_files_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasName("ix_files_modified_by_id");

                    b.ToTable("files");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingId")
                        .HasColumnName("building_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnName("created_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("HotelId")
                        .IsRequired()
                        .HasColumnName("hotel_id")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnName("modified_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnName("number")
                        .HasColumnType("integer");

                    b.Property<int>("OrdinalNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ordinal_number")
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id")
                        .HasName("pk_floors");

                    b.HasIndex("BuildingId")
                        .HasName("ix_floors_building_id");

                    b.HasIndex("CreatedById")
                        .HasName("ix_floors_created_by_id");

                    b.HasIndex("HotelId")
                        .HasName("ix_floors_hotel_id");

                    b.HasIndex("ModifiedById")
                        .HasName("ix_floors_modified_by_id");

                    b.ToTable("floors");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Hotel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_hotels");

                    b.ToTable("hotels");
                });

            modelBuilder.Entity("Planner.Domain.Entities.HotelPlugin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("HotelId")
                        .IsRequired()
                        .HasColumnName("hotel_id")
                        .HasColumnType("text");

                    b.Property<string>("PluginData")
                        .HasColumnName("plugin_data")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("PluginId")
                        .HasColumnName("plugin_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_hotel_plugin");

                    b.HasIndex("HotelId")
                        .HasName("ix_hotel_plugin_hotel_id");

                    b.HasIndex("PluginId")
                        .HasName("ix_hotel_plugin_plugin_id");

                    b.ToTable("hotel_plugin");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Plugin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("FullyQualifiedCsharpTypeName")
                        .IsRequired()
                        .HasColumnName("fully_qualified_csharp_type_name")
                        .HasColumnType("text");

                    b.Property<bool>("IsUsedByDefault")
                        .HasColumnName("is_used_by_default")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("TypeKey")
                        .IsRequired()
                        .HasColumnName("type_key")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_plugin");

                    b.ToTable("plugin");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("normalized_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("role_name_index");

                    b.ToTable("asp_net_roles");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AreaId")
                        .HasColumnName("area_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BuildingId")
                        .HasColumnName("building_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnName("created_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("ExternalId")
                        .HasColumnName("external_id")
                        .HasColumnType("text");

                    b.Property<Guid?>("FloorId")
                        .HasColumnName("floor_id")
                        .HasColumnType("uuid");

                    b.Property<string>("HotelId")
                        .IsRequired()
                        .HasColumnName("hotel_id")
                        .HasColumnType("text");

                    b.Property<string>("HotelId1")
                        .HasColumnName("hotel_id1")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnName("modified_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("OrdinalNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ordinal_number")
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("TypeKey")
                        .IsRequired()
                        .HasColumnName("type_key")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_rooms");

                    b.HasIndex("AreaId")
                        .HasName("ix_rooms_area_id");

                    b.HasIndex("BuildingId")
                        .HasName("ix_rooms_building_id");

                    b.HasIndex("CreatedById")
                        .HasName("ix_rooms_created_by_id");

                    b.HasIndex("FloorId")
                        .HasName("ix_rooms_floor_id");

                    b.HasIndex("HotelId")
                        .HasName("ix_rooms_hotel_id");

                    b.HasIndex("HotelId1")
                        .HasName("ix_rooms_hotel_id1");

                    b.HasIndex("ModifiedById")
                        .HasName("ix_rooms_modified_by_id");

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("Planner.Domain.Entities.RoomAsset", b =>
                {
                    b.Property<Guid>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssetId")
                        .HasColumnName("asset_id")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("integer");

                    b.HasKey("RoomId", "AssetId")
                        .HasName("pk_room_assets");

                    b.HasIndex("AssetId")
                        .HasName("ix_room_assets_asset_id");

                    b.ToTable("room_assets");
                });

            modelBuilder.Entity("Planner.Domain.Entities.RoomAssetModel", b =>
                {
                    b.Property<Guid>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssetModelId")
                        .HasColumnName("asset_model_id")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("integer");

                    b.HasKey("RoomId", "AssetModelId")
                        .HasName("pk_room_asset_models");

                    b.HasIndex("AssetModelId")
                        .HasName("ix_room_asset_models_asset_model_id");

                    b.ToTable("room_asset_models");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Settings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowPostponeCleanings")
                        .HasColumnName("allow_postpone_cleanings")
                        .HasColumnType("boolean");

                    b.Property<bool>("CleanArrivals")
                        .HasColumnName("clean_arrivals")
                        .HasColumnType("boolean");

                    b.Property<bool>("CleanDepartures")
                        .HasColumnName("clean_departures")
                        .HasColumnType("boolean");

                    b.Property<bool>("CleanOnlyDirtyRooms")
                        .HasColumnName("clean_only_dirty_rooms")
                        .HasColumnType("boolean");

                    b.Property<bool>("CleanStays")
                        .HasColumnName("clean_stays")
                        .HasColumnType("boolean");

                    b.Property<bool>("CleanVacants")
                        .HasColumnName("clean_vacants")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnName("created_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("DefaultAttendantEndTime")
                        .IsRequired()
                        .HasColumnName("default_attendant_end_time")
                        .HasColumnType("text");

                    b.Property<int>("DefaultAttendantMaxCredits")
                        .HasColumnName("default_attendant_max_credits")
                        .HasColumnType("integer");

                    b.Property<string>("DefaultAttendantStartTime")
                        .IsRequired()
                        .HasColumnName("default_attendant_start_time")
                        .HasColumnType("text");

                    b.Property<string>("DefaultCheckInTime")
                        .IsRequired()
                        .HasColumnName("default_check_in_time")
                        .HasColumnType("text");

                    b.Property<string>("DefaultCheckOutTime")
                        .IsRequired()
                        .HasColumnName("default_check_out_time")
                        .HasColumnType("text");

                    b.Property<string>("EmailAddressesForSendingPlan")
                        .IsRequired()
                        .HasColumnName("email_addresses_for_sending_plan")
                        .HasColumnType("text");

                    b.Property<bool>("FixPlannedActivitiesWhileFiltering")
                        .HasColumnName("fix_planned_activities_while_filtering")
                        .HasColumnType("boolean");

                    b.Property<string>("FromEmailAddress")
                        .IsRequired()
                        .HasColumnName("from_email_address")
                        .HasColumnType("text");

                    b.Property<string>("HotelId")
                        .HasColumnName("hotel_id")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnName("modified_by_id")
                        .HasColumnType("uuid");

                    b.Property<int>("ReserveBetweenCleanings")
                        .HasColumnName("reserve_between_cleanings")
                        .HasColumnType("integer");

                    b.Property<bool>("SendPlanToAttendantsByEmail")
                        .HasColumnName("send_plan_to_attendants_by_email")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowCleaningDelays")
                        .HasColumnName("show_cleaning_delays")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowHoursInWorkerPlanner")
                        .HasColumnName("show_hours_in_worker_planner")
                        .HasColumnType("boolean");

                    b.Property<int>("TravelReserve")
                        .HasColumnName("travel_reserve")
                        .HasColumnType("integer");

                    b.Property<bool>("UseGroups")
                        .HasColumnName("use_groups")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseOrderInPlanning")
                        .HasColumnName("use_order_in_planning")
                        .HasColumnType("boolean");

                    b.HasKey("Id")
                        .HasName("pk_settings");

                    b.HasIndex("CreatedById")
                        .HasName("ix_settings_created_by_id");

                    b.HasIndex("HotelId")
                        .IsUnique()
                        .HasName("ix_settings_hotel_id");

                    b.HasIndex("ModifiedById")
                        .HasName("ix_settings_modified_by_id");

                    b.ToTable("settings");
                });

            modelBuilder.Entity("Planner.Domain.Entities.SystemTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnName("action_name")
                        .HasColumnType("text");

                    b.Property<Guid>("AssetId")
                        .HasColumnName("asset_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssetModelId")
                        .HasColumnName("asset_model_id")
                        .HasColumnType("uuid");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasColumnName("asset_name")
                        .HasColumnType("text");

                    b.Property<int>("AssetQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("asset_quantity")
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid?>("BuildingId")
                        .HasColumnName("building_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnName("created_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("EventKey")
                        .HasColumnName("event_key")
                        .HasColumnType("text");

                    b.Property<string>("EventModifierKey")
                        .HasColumnName("event_modifier_key")
                        .HasColumnType("text");

                    b.Property<string>("EventTimeKey")
                        .HasColumnName("event_time_key")
                        .HasColumnType("text");

                    b.Property<Guid?>("FloorId")
                        .HasColumnName("floor_id")
                        .HasColumnType("uuid");

                    b.Property<string>("HotelId")
                        .IsRequired()
                        .HasColumnName("hotel_id")
                        .HasColumnType("text");

                    b.Property<bool>("IsManuallyModified")
                        .HasColumnName("is_manually_modified")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnName("modified_by_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("MustBeFinishedByAllWhos")
                        .HasColumnName("must_be_finished_by_all_whos")
                        .HasColumnType("boolean");

                    b.Property<string>("RecurringTypeKey")
                        .HasColumnName("recurring_type_key")
                        .HasColumnType("text");

                    b.Property<string>("RepeatsForKey")
                        .HasColumnName("repeats_for_key")
                        .HasColumnType("text");

                    b.Property<string>("ReservationId")
                        .HasColumnName("reservation_id")
                        .HasColumnType("text");

                    b.Property<Guid?>("RoomId")
                        .HasColumnName("room_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnName("starts_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StatusKey")
                        .IsRequired()
                        .HasColumnName("status_key")
                        .HasColumnType("text");

                    b.Property<Guid>("SystemTaskConfigurationId")
                        .HasColumnName("system_task_configuration_id")
                        .HasColumnType("uuid");

                    b.Property<string>("TypeKey")
                        .IsRequired()
                        .HasColumnName("type_key")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("WhereTypeKey")
                        .IsRequired()
                        .HasColumnName("where_type_key")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_system_tasks");

                    b.HasIndex("BuildingId")
                        .HasName("ix_system_tasks_building_id");

                    b.HasIndex("CreatedById")
                        .HasName("ix_system_tasks_created_by_id");

                    b.HasIndex("FloorId")
                        .HasName("ix_system_tasks_floor_id");

                    b.HasIndex("HotelId")
                        .HasName("ix_system_tasks_hotel_id");

                    b.HasIndex("ModifiedById")
                        .HasName("ix_system_tasks_modified_by_id");

                    b.HasIndex("RoomId")
                        .HasName("ix_system_tasks_room_id");

                    b.HasIndex("SystemTaskConfigurationId")
                        .HasName("ix_system_tasks_system_task_configuration_id");

                    b.HasIndex("UserId")
                        .HasName("ix_system_tasks_user_id");

                    b.ToTable("system_tasks");
                });

            modelBuilder.Entity("Planner.Domain.Entities.SystemTaskConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnName("created_by_id")
                        .HasColumnType("uuid");

                    b.Property<SystemTaskConfigurationData>("Data")
                        .IsRequired()
                        .HasColumnName("data")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnName("modified_by_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_system_task_configurations");

                    b.HasIndex("CreatedById")
                        .HasName("ix_system_task_configurations_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasName("ix_system_task_configurations_modified_by_id");

                    b.ToTable("system_task_configurations");
                });

            modelBuilder.Entity("Planner.Domain.Entities.SystemTaskHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("ChangedByKey")
                        .IsRequired()
                        .HasColumnName("changed_by_key")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnName("created_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnName("message")
                        .HasColumnType("text");

                    b.Property<SystemTaskHistoryData>("NewData")
                        .IsRequired()
                        .HasColumnName("new_data")
                        .HasColumnType("jsonb");

                    b.Property<SystemTaskHistoryData>("OldData")
                        .IsRequired()
                        .HasColumnName("old_data")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("SystemTaskId")
                        .HasColumnName("system_task_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_system_task_historys");

                    b.HasIndex("CreatedById")
                        .HasName("ix_system_task_historys_created_by_id");

                    b.HasIndex("SystemTaskId")
                        .HasName("ix_system_task_historys_system_task_id");

                    b.ToTable("system_task_historys");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Tag", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnName("key")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnName("created_by_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnName("modified_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("Key")
                        .HasName("pk_tags");

                    b.HasIndex("CreatedById")
                        .HasName("ix_tags_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasName("ix_tags_modified_by_id");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("Planner.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("access_failed_count")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasColumnType("text");

                    b.Property<string>("ConnectionName")
                        .HasColumnName("connection_name")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("email_confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .HasColumnName("language")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("lockout_enabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnName("lockout_end")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("normalized_email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("normalized_user_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("OriginalHotel")
                        .HasColumnName("original_hotel")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnName("password_hash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("phone_number_confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnName("registration_number")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("security_stamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("two_factor_enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<Guid?>("UserSubGroupID")
                        .HasColumnName("user_sub_group_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasName("email_index");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("user_name_index");

                    b.HasIndex("UserSubGroupID")
                        .HasName("ix_asp_net_users_user_sub_group_id");

                    b.ToTable("asp_net_users");
                });

            modelBuilder.Entity("Planner.Domain.Entities.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnName("created_by_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnName("modified_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_user_groups");

                    b.HasIndex("CreatedById")
                        .HasName("ix_user_groups_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasName("ix_user_groups_modified_by_id");

                    b.ToTable("user_groups");
                });

            modelBuilder.Entity("Planner.Domain.Entities.UserSubGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnName("created_by_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnName("modified_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<Guid>("UserGroupId")
                        .HasColumnName("user_group_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_user_sub_groups");

                    b.HasIndex("CreatedById")
                        .HasName("ix_user_sub_groups_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasName("ix_user_sub_groups_modified_by_id");

                    b.HasIndex("UserGroupId")
                        .HasName("ix_user_sub_groups_user_group_id");

                    b.ToTable("user_sub_groups");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.Area", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_areas_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .HasConstraintName("fk_areas_hotels_hotel_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_areas_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.Asset", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_assets_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_assets_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.AssetAction", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Asset", "Asset")
                        .WithMany("Actions")
                        .HasForeignKey("AssetId")
                        .HasConstraintName("fk_asset_actions_assets_asset_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.AssetModel", "AssetModel")
                        .WithMany("Actions")
                        .HasForeignKey("AssetModelId")
                        .HasConstraintName("fk_asset_actions_asset_models_asset_model_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_asset_actions_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_asset_actions_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.AssetFile", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Asset", "Asset")
                        .WithMany("AssetFiles")
                        .HasForeignKey("AssetId")
                        .HasConstraintName("fk_asset_files_assets_asset_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .HasConstraintName("fk_asset_files_files_file_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.AssetModel", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Asset", "Asset")
                        .WithMany("Models")
                        .HasForeignKey("AssetId")
                        .HasConstraintName("fk_asset_models_assets_asset_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_asset_models_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_asset_models_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.AssetTag", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Asset", "Asset")
                        .WithMany("AssetTags")
                        .HasForeignKey("AssetId")
                        .HasConstraintName("fk_asset_tags_assets_asset_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagKey")
                        .HasConstraintName("fk_asset_tags_tags_tag_key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.Building", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Area", "Area")
                        .WithMany("Buildings")
                        .HasForeignKey("AreaId")
                        .HasConstraintName("fk_buildings_areas_area_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_buildings_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .HasConstraintName("fk_buildings_hotels_hotel_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_buildings_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.CleaningPlan", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_cleaning_plans_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .HasConstraintName("fk_cleaning_plans_hotels_hotel_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_cleaning_plans_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.CleaningPlanGroup", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "Cleaner")
                        .WithMany()
                        .HasForeignKey("CleanerId")
                        .HasConstraintName("fk_cleaning_plan_groups_asp_net_users_cleaner_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.CleaningPlan", "CleaningPlan")
                        .WithMany("Groups")
                        .HasForeignKey("CleaningPlanId")
                        .HasConstraintName("fk_cleaning_plan_groups_cleaning_plans_cleaning_plan_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "SecondaryCleaner")
                        .WithMany()
                        .HasForeignKey("SecondaryCleanerId")
                        .HasConstraintName("fk_cleaning_plan_groups_asp_net_users_secondary_cleaner_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Planner.Domain.Entities.CleaningPlanGroupAvailabilityInterval", b =>
                {
                    b.HasOne("Planner.Domain.Entities.CleaningPlanGroup", "CleaningPlanGroup")
                        .WithMany("AvailabilityIntervals")
                        .HasForeignKey("CleaningPlanGroupId")
                        .HasConstraintName("fk_cleaning_plan_group_availability_intervals_cleaning_plan_gr~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.CleaningPlanGroupFloorAffinity", b =>
                {
                    b.HasOne("Planner.Domain.Entities.CleaningPlanGroup", "CleaningPlanGroup")
                        .WithMany("FloorAffinities")
                        .HasForeignKey("CleaningPlanGroupId")
                        .HasConstraintName("fk_cleaning_plan_group_floor_affinities_cleaning_plan_groups_c~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorId")
                        .HasConstraintName("fk_cleaning_plan_group_floor_affinities_floors_floor_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.CleaningPlanItem", b =>
                {
                    b.HasOne("Planner.Domain.Entities.CleaningPlanGroup", "CleaningPlanGroup")
                        .WithMany("Items")
                        .HasForeignKey("CleaningPlanGroupId")
                        .HasConstraintName("fk_cleaning_plan_items_cleaning_plan_groups_cleaning_plan_grou~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .HasConstraintName("fk_cleaning_plan_items_rooms_room_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.File", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_files_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_files_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.Floor", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("fk_floors_buildings_building_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_floors_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .HasConstraintName("fk_floors_hotels_hotel_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_floors_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.HotelPlugin", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Hotel", "Hotel")
                        .WithMany("HotelPlugins")
                        .HasForeignKey("HotelId")
                        .HasConstraintName("fk_hotel_plugin_hotels_hotel_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Plugin", "Plugin")
                        .WithMany("HotelPlugins")
                        .HasForeignKey("PluginId")
                        .HasConstraintName("fk_hotel_plugin_plugin_plugin_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.Room", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Area", "Area")
                        .WithMany("Rooms")
                        .HasForeignKey("AreaId")
                        .HasConstraintName("fk_rooms_areas_area_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.Building", "Building")
                        .WithMany("Rooms")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("fk_rooms_buildings_building_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_rooms_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .HasConstraintName("fk_rooms_floors_floor_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .HasConstraintName("fk_rooms_hotels_hotel_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Hotel", null)
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId1")
                        .HasConstraintName("fk_rooms_hotels_hotel_id1");

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_rooms_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.RoomAsset", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Asset", "Asset")
                        .WithMany("RoomAssets")
                        .HasForeignKey("AssetId")
                        .HasConstraintName("fk_room_assets_assets_asset_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Room", "Room")
                        .WithMany("RoomAssets")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("fk_room_assets_rooms_room_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.RoomAssetModel", b =>
                {
                    b.HasOne("Planner.Domain.Entities.AssetModel", "AssetModel")
                        .WithMany("RoomAssetModels")
                        .HasForeignKey("AssetModelId")
                        .HasConstraintName("fk_room_asset_models_asset_models_asset_model_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Room", "Room")
                        .WithMany("RoomAssetModels")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("fk_room_asset_models_rooms_room_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.Settings", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_settings_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Hotel", "Hotel")
                        .WithOne("Settings")
                        .HasForeignKey("Planner.Domain.Entities.Settings", "HotelId")
                        .HasConstraintName("fk_settings_hotels_hotel_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_settings_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.SystemTask", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("fk_system_tasks_buildings_building_id");

                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_system_tasks_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorId")
                        .HasConstraintName("fk_system_tasks_floors_floor_id");

                    b.HasOne("Planner.Domain.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .HasConstraintName("fk_system_tasks_hotels_hotel_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_system_tasks_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .HasConstraintName("fk_system_tasks_rooms_room_id");

                    b.HasOne("Planner.Domain.Entities.SystemTaskConfiguration", "SystemTaskConfiguration")
                        .WithMany("Tasks")
                        .HasForeignKey("SystemTaskConfigurationId")
                        .HasConstraintName("fk_system_tasks_system_task_configurations_system_task_configura~")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_system_tasks_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.SystemTaskConfiguration", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_system_task_configurations_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_system_task_configurations_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.SystemTaskHistory", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_system_task_historys_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.SystemTask", "SystemTask")
                        .WithMany("History")
                        .HasForeignKey("SystemTaskId")
                        .HasConstraintName("fk_system_task_historys_system_tasks_system_task_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.Tag", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_tags_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_tags_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.User", b =>
                {
                    b.HasOne("Planner.Domain.Entities.UserSubGroup", "UserSubGroup")
                        .WithMany("Users")
                        .HasForeignKey("UserSubGroupID")
                        .HasConstraintName("fk_asp_net_users_user_sub_groups_user_sub_group_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Planner.Domain.Entities.UserGroup", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_user_groups_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_user_groups_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.UserSubGroup", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_user_sub_groups_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_user_sub_groups_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.UserGroup", "UserGroup")
                        .WithMany("UserSubGroups")
                        .HasForeignKey("UserGroupId")
                        .HasConstraintName("fk_user_sub_groups_user_groups_user_group_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
