// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Planner.Persistence;

namespace Planner.Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200911004036_AddedOrdinalNumbersToStructureHierarchyElements")]
    partial class AddedOrdinalNumbersToStructureHierarchyElements
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnName("user_code")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnName("client_id")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("creation_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnName("data")
                        .HasColumnType("character varying(50000)")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnName("device_code")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnName("expiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SubjectId")
                        .HasColumnName("subject_id")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("UserCode")
                        .HasName("pk_device_codes");

                    b.HasIndex("DeviceCode")
                        .IsUnique()
                        .HasName("ix_device_codes_device_code");

                    b.HasIndex("Expiration")
                        .HasName("ix_device_codes_expiration");

                    b.ToTable("device_codes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnName("key")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnName("client_id")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("creation_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnName("data")
                        .HasColumnType("character varying(50000)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnName("expiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SubjectId")
                        .HasColumnName("subject_id")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Key")
                        .HasName("pk_persisted_grants");

                    b.HasIndex("Expiration")
                        .HasName("ix_persisted_grants_expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type")
                        .HasName("ix_persisted_grants_subject_id_client_id_type");

                    b.ToTable("persisted_grants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasName("ix_asp_net_role_claims_role_id");

                    b.ToTable("asp_net_role_claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasName("ix_asp_net_user_claims_user_id");

                    b.ToTable("asp_net_user_claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnName("provider_key")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("provider_display_name")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasName("ix_asp_net_user_logins_user_id");

                    b.ToTable("asp_net_user_logins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasName("ix_asp_net_user_roles_role_id");

                    b.ToTable("asp_net_user_roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("asp_net_user_tokens");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Area", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 11, 0, 40, 35, 890, DateTimeKind.Unspecified).AddTicks(9256), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<Guid>("CreatedByID")
                        .HasColumnName("created_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("HotelID")
                        .HasColumnName("hotel_id")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 11, 0, 40, 35, 891, DateTimeKind.Unspecified).AddTicks(8047), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<Guid>("ModifiedByID")
                        .HasColumnName("modified_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("ID")
                        .HasName("pk_areas");

                    b.HasIndex("CreatedByID")
                        .HasName("ix_areas_created_by_id");

                    b.HasIndex("HotelID")
                        .HasName("ix_areas_hotel_id");

                    b.HasIndex("ModifiedByID")
                        .HasName("ix_areas_modified_by_id");

                    b.ToTable("areas");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Building", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("text");

                    b.Property<Guid?>("AreaID")
                        .HasColumnName("area_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 11, 0, 40, 35, 893, DateTimeKind.Unspecified).AddTicks(9152), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<Guid>("CreatedByID")
                        .HasColumnName("created_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("HotelID")
                        .HasColumnName("hotel_id")
                        .HasColumnType("text");

                    b.Property<long?>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("bigint");

                    b.Property<long?>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 11, 0, 40, 35, 893, DateTimeKind.Unspecified).AddTicks(9520), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<Guid>("ModifiedByID")
                        .HasColumnName("modified_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnName("ordinal_number")
                        .HasColumnType("integer");

                    b.HasKey("ID")
                        .HasName("pk_buildings");

                    b.HasIndex("AreaID")
                        .HasName("ix_buildings_area_id");

                    b.HasIndex("CreatedByID")
                        .HasName("ix_buildings_created_by_id");

                    b.HasIndex("HotelID")
                        .HasName("ix_buildings_hotel_id");

                    b.HasIndex("ModifiedByID")
                        .HasName("ix_buildings_modified_by_id");

                    b.ToTable("buildings");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Floor", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingID")
                        .HasColumnName("building_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 11, 0, 40, 35, 894, DateTimeKind.Unspecified).AddTicks(6557), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<Guid>("CreatedByID")
                        .HasColumnName("created_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("HotelID")
                        .HasColumnName("hotel_id")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 11, 0, 40, 35, 894, DateTimeKind.Unspecified).AddTicks(6935), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<Guid>("ModifiedByID")
                        .HasColumnName("modified_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnName("number")
                        .HasColumnType("integer");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnName("ordinal_number")
                        .HasColumnType("integer");

                    b.HasKey("ID")
                        .HasName("pk_floors");

                    b.HasIndex("BuildingID")
                        .HasName("ix_floors_building_id");

                    b.HasIndex("CreatedByID")
                        .HasName("ix_floors_created_by_id");

                    b.HasIndex("HotelID")
                        .HasName("ix_floors_hotel_id");

                    b.HasIndex("ModifiedByID")
                        .HasName("ix_floors_modified_by_id");

                    b.ToTable("floors");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Hotel", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("ID")
                        .HasName("pk_hotels");

                    b.ToTable("hotels");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("normalized_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("role_name_index");

                    b.ToTable("asp_net_roles");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AreaID")
                        .HasColumnName("area_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BuildingID")
                        .HasColumnName("building_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 11, 0, 40, 35, 898, DateTimeKind.Unspecified).AddTicks(3736), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<Guid>("CreatedByID")
                        .HasColumnName("created_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("ExternalID")
                        .HasColumnName("external_id")
                        .HasColumnType("text");

                    b.Property<Guid?>("FloorID")
                        .HasColumnName("floor_id")
                        .HasColumnType("uuid");

                    b.Property<string>("HotelID")
                        .HasColumnName("hotel_id")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 11, 0, 40, 35, 898, DateTimeKind.Unspecified).AddTicks(4132), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<Guid>("ModifiedByID")
                        .HasColumnName("modified_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnName("ordinal_number")
                        .HasColumnType("integer");

                    b.Property<string>("TypeKey")
                        .HasColumnName("type_key")
                        .HasColumnType("text");

                    b.HasKey("ID")
                        .HasName("pk_rooms");

                    b.HasIndex("AreaID")
                        .HasName("ix_rooms_area_id");

                    b.HasIndex("BuildingID")
                        .HasName("ix_rooms_building_id");

                    b.HasIndex("CreatedByID")
                        .HasName("ix_rooms_created_by_id");

                    b.HasIndex("FloorID")
                        .HasName("ix_rooms_floor_id");

                    b.HasIndex("HotelID")
                        .HasName("ix_rooms_hotel_id");

                    b.HasIndex("ModifiedByID")
                        .HasName("ix_rooms_modified_by_id");

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("Planner.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("access_failed_count")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasColumnType("text");

                    b.Property<string>("ConnectionName")
                        .HasColumnName("connection_name")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("email_confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("text");

                    b.Property<string>("HotelID")
                        .HasColumnName("hotel_id")
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .HasColumnName("language")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("lockout_enabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnName("lockout_end")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("normalized_email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("normalized_user_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("OriginalHotel")
                        .HasColumnName("original_hotel")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnName("password_hash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("phone_number_confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnName("registration_number")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("security_stamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("two_factor_enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasName("email_index");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("user_name_index");

                    b.ToTable("asp_net_users");
                });

            modelBuilder.Entity("Planner.Domain.Entities.UserGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 11, 0, 40, 35, 899, DateTimeKind.Unspecified).AddTicks(907), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<Guid>("CreatedByID")
                        .HasColumnName("created_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("HotelID")
                        .HasColumnName("hotel_id")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 11, 0, 40, 35, 899, DateTimeKind.Unspecified).AddTicks(1270), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<Guid>("ModifiedByID")
                        .HasColumnName("modified_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("ID")
                        .HasName("pk_user_groups");

                    b.HasIndex("CreatedByID")
                        .HasName("ix_user_groups_created_by_id");

                    b.HasIndex("HotelID")
                        .HasName("ix_user_groups_hotel_id");

                    b.HasIndex("ModifiedByID")
                        .HasName("ix_user_groups_modified_by_id");

                    b.ToTable("user_groups");
                });

            modelBuilder.Entity("Planner.Domain.Entities.UserSubGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 11, 0, 40, 35, 899, DateTimeKind.Unspecified).AddTicks(8062), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<Guid>("CreatedByID")
                        .HasColumnName("created_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("HotelID")
                        .HasColumnName("hotel_id")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("modified_at")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2020, 9, 11, 0, 40, 35, 899, DateTimeKind.Unspecified).AddTicks(8407), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<Guid>("ModifiedByID")
                        .HasColumnName("modified_by_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<Guid>("UserGroupID")
                        .HasColumnName("user_group_id")
                        .HasColumnType("uuid");

                    b.HasKey("ID")
                        .HasName("pk_user_sub_groups");

                    b.HasIndex("CreatedByID")
                        .HasName("ix_user_sub_groups_created_by_id");

                    b.HasIndex("HotelID")
                        .HasName("ix_user_sub_groups_hotel_id");

                    b.HasIndex("ModifiedByID")
                        .HasName("ix_user_sub_groups_modified_by_id");

                    b.HasIndex("UserGroupID")
                        .HasName("ix_user_sub_groups_user_group_id");

                    b.ToTable("user_sub_groups");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.Area", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .HasConstraintName("fk_areas_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelID")
                        .HasConstraintName("fk_areas_hotels_hotel_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .HasConstraintName("fk_areas_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.Building", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Area", "Area")
                        .WithMany("Buildings")
                        .HasForeignKey("AreaID")
                        .HasConstraintName("fk_buildings_areas_area_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .HasConstraintName("fk_buildings_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelID")
                        .HasConstraintName("fk_buildings_hotels_hotel_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .HasConstraintName("fk_buildings_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.Floor", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingID")
                        .HasConstraintName("fk_floors_buildings_building_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .HasConstraintName("fk_floors_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelID")
                        .HasConstraintName("fk_floors_hotels_hotel_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .HasConstraintName("fk_floors_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.Room", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Area", "Area")
                        .WithMany("Rooms")
                        .HasForeignKey("AreaID")
                        .HasConstraintName("fk_rooms_areas_area_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.Building", "Building")
                        .WithMany("Rooms")
                        .HasForeignKey("BuildingID")
                        .HasConstraintName("fk_rooms_buildings_building_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .HasConstraintName("fk_rooms_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorID")
                        .HasConstraintName("fk_rooms_floors_floor_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelID")
                        .HasConstraintName("fk_rooms_hotels_hotel_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .HasConstraintName("fk_rooms_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.UserGroup", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .HasConstraintName("fk_user_groups_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelID")
                        .HasConstraintName("fk_user_groups_hotels_hotel_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .HasConstraintName("fk_user_groups_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.UserSubGroup", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByID")
                        .HasConstraintName("fk_user_sub_groups_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelID")
                        .HasConstraintName("fk_user_sub_groups_hotels_hotel_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByID")
                        .HasConstraintName("fk_user_sub_groups_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.UserGroup", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupID")
                        .HasConstraintName("fk_user_sub_groups_user_groups_user_group_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
