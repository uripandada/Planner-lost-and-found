// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Planner.Domain.Entities;
using Planner.Persistence;

namespace Planner.Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210613223123_ExtendedAssetActionsWithSystemDefinedData1")]
    partial class ExtendedAssetActionsWithSystemDefinedData1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("user_code");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_time");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("device_code");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expiration");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("session_id");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("subject_id");

                    b.HasKey("UserCode")
                        .HasName("pk_device_codes");

                    b.HasIndex("DeviceCode")
                        .IsUnique()
                        .HasDatabaseName("ix_device_codes_device_code");

                    b.HasIndex("Expiration")
                        .HasDatabaseName("ix_device_codes_expiration");

                    b.ToTable("device_codes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("key");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("consumed_time");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("creation_time");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expiration");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("session_id");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("subject_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("Key")
                        .HasName("pk_persisted_grants");

                    b.HasIndex("Expiration")
                        .HasDatabaseName("ix_persisted_grants_expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type")
                        .HasDatabaseName("ix_persisted_grants_subject_id_client_id_type");

                    b.HasIndex("SubjectId", "SessionId", "Type")
                        .HasDatabaseName("ix_persisted_grants_subject_id_session_id_type");

                    b.ToTable("persisted_grants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("asp_net_role_claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("asp_net_user_claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("asp_net_user_logins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("asp_net_user_roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("asp_net_user_tokens");
                });

            modelBuilder.Entity("Planner.Domain.Entities.ApplicationUserAvatar", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("File")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("file");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text")
                        .HasColumnName("file_url");

                    b.HasKey("Id")
                        .HasName("pk_application_user_avatar");

                    b.ToTable("application_user_avatar");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<string>("HotelId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hotel_id");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_areas");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_areas_created_by_id");

                    b.HasIndex("HotelId")
                        .HasDatabaseName("ix_areas_hotel_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_areas_modified_by_id");

                    b.ToTable("areas");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AssetGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("asset_group_id");

                    b.Property<Guid?>("AssetSubGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("asset_sub_group_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<bool>("IsBulk")
                        .HasColumnType("boolean")
                        .HasColumnName("is_bulk");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text")
                        .HasColumnName("serial_number");

                    b.HasKey("Id")
                        .HasName("pk_assets");

                    b.HasIndex("AssetGroupId")
                        .HasDatabaseName("ix_assets_asset_group_id");

                    b.HasIndex("AssetSubGroupId")
                        .HasDatabaseName("ix_assets_asset_sub_group_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_assets_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_assets_modified_by_id");

                    b.ToTable("assets");
                });

            modelBuilder.Entity("Planner.Domain.Entities.AssetAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AssetGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("asset_group_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<int?>("Credits")
                        .HasColumnType("integer")
                        .HasColumnName("credits");

                    b.Property<Guid?>("DefaultAssignedToUserGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("default_assigned_to_user_group_id");

                    b.Property<Guid?>("DefaultAssignedToUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("default_assigned_to_user_id");

                    b.Property<Guid?>("DefaultAssignedToUserSubGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("default_assigned_to_user_sub_group_id");

                    b.Property<bool>("IsSystemDefined")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system_defined");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("PriorityKey")
                        .HasColumnType("text")
                        .HasColumnName("priority_key");

                    b.Property<string>("QuickOrTimedKey")
                        .HasColumnType("text")
                        .HasColumnName("quick_or_timed_key");

                    b.Property<string>("SystemAssetActionMoveTypeKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("system_asset_action_move_type_key");

                    b.HasKey("Id")
                        .HasName("pk_asset_actions");

                    b.HasIndex("AssetGroupId")
                        .HasDatabaseName("ix_asset_actions_asset_group_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_asset_actions_created_by_id");

                    b.HasIndex("DefaultAssignedToUserGroupId")
                        .HasDatabaseName("ix_asset_actions_default_assigned_to_user_group_id");

                    b.HasIndex("DefaultAssignedToUserId")
                        .HasDatabaseName("ix_asset_actions_default_assigned_to_user_id");

                    b.HasIndex("DefaultAssignedToUserSubGroupId")
                        .HasDatabaseName("ix_asset_actions_default_assigned_to_user_sub_group_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_asset_actions_modified_by_id");

                    b.ToTable("asset_actions");
                });

            modelBuilder.Entity("Planner.Domain.Entities.AssetFile", b =>
                {
                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid")
                        .HasColumnName("asset_id");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_id");

                    b.Property<bool>("IsPrimaryImage")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary_image");

                    b.Property<bool>("IsQrCodeImage")
                        .HasColumnType("boolean")
                        .HasColumnName("is_qr_code_image");

                    b.HasKey("AssetId", "FileId")
                        .HasName("pk_asset_files");

                    b.HasIndex("FileId")
                        .HasDatabaseName("ix_asset_files_file_id");

                    b.ToTable("asset_files");
                });

            modelBuilder.Entity("Planner.Domain.Entities.AssetGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentAssetGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_asset_group_id");

                    b.Property<string>("TypeKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_key");

                    b.HasKey("Id")
                        .HasName("pk_asset_groups");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_asset_groups_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_asset_groups_modified_by_id");

                    b.HasIndex("ParentAssetGroupId")
                        .HasDatabaseName("ix_asset_groups_parent_asset_group_id");

                    b.ToTable("asset_groups");
                });

            modelBuilder.Entity("Planner.Domain.Entities.AssetModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid")
                        .HasColumnName("asset_id");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("available_quantity");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_asset_models");

                    b.HasIndex("AssetId")
                        .HasDatabaseName("ix_asset_models_asset_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_asset_models_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_asset_models_modified_by_id");

                    b.ToTable("asset_models");
                });

            modelBuilder.Entity("Planner.Domain.Entities.AssetTag", b =>
                {
                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid")
                        .HasColumnName("asset_id");

                    b.Property<string>("TagKey")
                        .HasColumnType("text")
                        .HasColumnName("tag_key");

                    b.HasKey("AssetId", "TagKey")
                        .HasName("pk_asset_tags");

                    b.HasIndex("TagKey")
                        .HasDatabaseName("ix_asset_tags_tag_key");

                    b.ToTable("asset_tags");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<Guid?>("AreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("area_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<string>("HotelId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hotel_id");

                    b.Property<long?>("Latitude")
                        .HasColumnType("bigint")
                        .HasColumnName("latitude");

                    b.Property<long?>("Longitude")
                        .HasColumnType("bigint")
                        .HasColumnName("longitude");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OrdinalNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("ordinal_number");

                    b.Property<string>("TypeKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_key");

                    b.HasKey("Id")
                        .HasName("pk_buildings");

                    b.HasIndex("AreaId")
                        .HasDatabaseName("ix_buildings_area_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_buildings_created_by_id");

                    b.HasIndex("HotelId")
                        .HasDatabaseName("ix_buildings_hotel_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_buildings_modified_by_id");

                    b.ToTable("buildings");
                });

            modelBuilder.Entity("Planner.Domain.Entities.CleaningPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("HotelId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hotel_id");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sent");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.HasKey("Id")
                        .HasName("pk_cleaning_plans");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_cleaning_plans_created_by_id");

                    b.HasIndex("HotelId")
                        .HasDatabaseName("ix_cleaning_plans_hotel_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_cleaning_plans_modified_by_id");

                    b.ToTable("cleaning_plans");
                });

            modelBuilder.Entity("Planner.Domain.Entities.CleaningPlanGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CleanerId")
                        .HasColumnType("uuid")
                        .HasColumnName("cleaner_id");

                    b.Property<Guid>("CleaningPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("cleaning_plan_id");

                    b.Property<int?>("MaxCredits")
                        .HasColumnType("integer")
                        .HasColumnName("max_credits");

                    b.Property<int?>("MaxDepartures")
                        .HasColumnType("integer")
                        .HasColumnName("max_departures");

                    b.Property<int?>("MaxTwins")
                        .HasColumnType("integer")
                        .HasColumnName("max_twins");

                    b.Property<bool>("MustFillAllCredits")
                        .HasColumnType("boolean")
                        .HasColumnName("must_fill_all_credits");

                    b.Property<Guid?>("SecondaryCleanerId")
                        .HasColumnType("uuid")
                        .HasColumnName("secondary_cleaner_id");

                    b.Property<int?>("WeeklyHours")
                        .HasColumnType("integer")
                        .HasColumnName("weekly_hours");

                    b.HasKey("Id")
                        .HasName("pk_cleaning_plan_groups");

                    b.HasIndex("CleanerId")
                        .HasDatabaseName("ix_cleaning_plan_groups_cleaner_id");

                    b.HasIndex("CleaningPlanId")
                        .HasDatabaseName("ix_cleaning_plan_groups_cleaning_plan_id");

                    b.HasIndex("SecondaryCleanerId")
                        .HasDatabaseName("ix_cleaning_plan_groups_secondary_cleaner_id");

                    b.ToTable("cleaning_plan_groups");
                });

            modelBuilder.Entity("Planner.Domain.Entities.CleaningPlanGroupAvailabilityInterval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CleaningPlanGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("cleaning_plan_group_id");

                    b.Property<TimeSpan>("From")
                        .HasColumnType("time")
                        .HasColumnName("from");

                    b.Property<TimeSpan>("To")
                        .HasColumnType("time")
                        .HasColumnName("to");

                    b.HasKey("Id")
                        .HasName("pk_cleaning_plan_group_availability_intervals");

                    b.HasIndex("CleaningPlanGroupId")
                        .HasDatabaseName("ix_cleaning_plan_group_availability_intervals_cleaning_plan_gr~");

                    b.ToTable("cleaning_plan_group_availability_intervals");
                });

            modelBuilder.Entity("Planner.Domain.Entities.CleaningPlanGroupFloorAffinity", b =>
                {
                    b.Property<Guid>("FloorId")
                        .HasColumnType("uuid")
                        .HasColumnName("floor_id");

                    b.Property<Guid>("CleaningPlanGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("cleaning_plan_group_id");

                    b.HasKey("FloorId", "CleaningPlanGroupId")
                        .HasName("pk_cleaning_plan_group_floor_affinities");

                    b.HasIndex("CleaningPlanGroupId")
                        .HasDatabaseName("ix_cleaning_plan_group_floor_affinities_cleaning_plan_group_id");

                    b.ToTable("cleaning_plan_group_floor_affinities");
                });

            modelBuilder.Entity("Planner.Domain.Entities.CleaningPlanItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CleaningPlanGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("cleaning_plan_group_id");

                    b.Property<Guid?>("CleaningPluginId")
                        .HasColumnType("uuid")
                        .HasColumnName("cleaning_plugin_id");

                    b.Property<string>("CleaningPluginName")
                        .HasColumnType("text")
                        .HasColumnName("cleaning_plugin_name");

                    b.Property<int?>("Credits")
                        .HasColumnType("integer")
                        .HasColumnName("credits");

                    b.Property<int>("DurationSec")
                        .HasColumnType("integer")
                        .HasColumnName("duration_sec");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ends_at");

                    b.Property<string>("Key")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("UNKNOWN")
                        .HasColumnName("key");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid")
                        .HasColumnName("room_id");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starts_at");

                    b.HasKey("Id")
                        .HasName("pk_cleaning_plan_items");

                    b.HasIndex("CleaningPlanGroupId")
                        .HasDatabaseName("ix_cleaning_plan_items_cleaning_plan_group_id");

                    b.HasIndex("CleaningPluginId")
                        .HasDatabaseName("ix_cleaning_plan_items_cleaning_plugin_id");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("ix_cleaning_plan_items_room_id");

                    b.ToTable("cleaning_plan_items");
                });

            modelBuilder.Entity("Planner.Domain.Entities.CleaningPlugin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<CleaningPluginJson>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("HotelId")
                        .HasColumnType("text")
                        .HasColumnName("hotel_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsTopRule")
                        .HasColumnType("boolean")
                        .HasColumnName("is_top_rule");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("integer")
                        .HasColumnName("ordinal_number");

                    b.HasKey("Id")
                        .HasName("pk_cleaning_plugins");

                    b.HasIndex("HotelId")
                        .HasDatabaseName("ix_cleaning_plugins_hotel_id");

                    b.ToTable("cleaning_plugins");
                });

            modelBuilder.Entity("Planner.Domain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("file_data");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("FileTypeKey")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("UNKNOWN")
                        .HasColumnName("file_type_key");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.HasKey("Id")
                        .HasName("pk_files");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_files_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_files_modified_by_id");

                    b.ToTable("files");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid")
                        .HasColumnName("building_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<string>("HotelId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hotel_id");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<int>("OrdinalNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("ordinal_number");

                    b.HasKey("Id")
                        .HasName("pk_floors");

                    b.HasIndex("BuildingId")
                        .HasDatabaseName("ix_floors_building_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_floors_created_by_id");

                    b.HasIndex("HotelId")
                        .HasDatabaseName("ix_floors_hotel_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_floors_modified_by_id");

                    b.ToTable("floors");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Hotel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("IanaTimeZoneId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Etc/GMT")
                        .HasColumnName("iana_time_zone_id");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("WindowsTimeZoneId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("GMT Standard Time")
                        .HasColumnName("windows_time_zone_id");

                    b.HasKey("Id")
                        .HasName("pk_hotels");

                    b.ToTable("hotels");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id")
                        .HasName("pk_inventories");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_inventories_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_inventories_modified_by_id");

                    b.HasIndex("WarehouseId")
                        .HasDatabaseName("ix_inventories_warehouse_id");

                    b.ToTable("inventories");
                });

            modelBuilder.Entity("Planner.Domain.Entities.InventoryAssetStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid")
                        .HasColumnName("asset_id");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("inventory_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_inventory_asset_statuses");

                    b.HasIndex("AssetId")
                        .HasDatabaseName("ix_inventory_asset_statuses_asset_id");

                    b.HasIndex("InventoryId")
                        .HasDatabaseName("ix_inventory_asset_statuses_inventory_id");

                    b.ToTable("inventory_asset_statuses");
                });

            modelBuilder.Entity("Planner.Domain.Entities.LostAndFound", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("ItemName")
                        .HasColumnType("text")
                        .HasColumnName("item_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("LostOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("lost_on");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("Place")
                        .HasColumnType("text")
                        .HasColumnName("place");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("text")
                        .HasColumnName("reference_number");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("TypeOfLoss")
                        .HasColumnType("integer")
                        .HasColumnName("type_of_loss");

                    b.HasKey("Id")
                        .HasName("pk_lost_and_founds");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_lost_and_founds_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_lost_and_founds_modified_by_id");

                    b.ToTable("lost_and_founds");
                });

            modelBuilder.Entity("Planner.Domain.Entities.LostAndFoundFile", b =>
                {
                    b.Property<Guid>("LostAndFoundId")
                        .HasColumnType("uuid")
                        .HasColumnName("lost_and_found_id");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_id");

                    b.HasKey("LostAndFoundId", "FileId")
                        .HasName("pk_lost_and_found_files");

                    b.HasIndex("FileId")
                        .HasDatabaseName("ix_lost_and_found_files_file_id");

                    b.ToTable("lost_and_found_files");
                });

            modelBuilder.Entity("Planner.Domain.Entities.NumberOfTasksPerUser", b =>
                {
                    b.Property<int>("Day")
                        .HasColumnType("integer")
                        .HasColumnName("day");

                    b.Property<int>("Month")
                        .HasColumnType("integer")
                        .HasColumnName("month");

                    b.Property<int>("NumberOfTasks")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_tasks");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.ToView("ViewNumberOfTasksPerUserConfiguration");
                });

            modelBuilder.Entity("Planner.Domain.Entities.OnGuard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("Identification")
                        .HasColumnType("text")
                        .HasColumnName("identification");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("text")
                        .HasColumnName("reference_number");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_on_guards");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_on_guards_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_on_guards_modified_by_id");

                    b.ToTable("on_guards");
                });

            modelBuilder.Entity("Planner.Domain.Entities.OnGuardFile", b =>
                {
                    b.Property<Guid>("OnGuardId")
                        .HasColumnType("uuid")
                        .HasColumnName("on_guard_id");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_id");

                    b.HasKey("OnGuardId", "FileId")
                        .HasName("pk_on_guard_files");

                    b.HasIndex("FileId")
                        .HasDatabaseName("ix_on_guard_files_file_id");

                    b.ToTable("on_guard_files");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Reservation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ActualCheckIn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("actual_check_in");

                    b.Property<DateTime?>("ActualCheckOut")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("actual_check_out");

                    b.Property<DateTime?>("CheckIn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("check_in");

                    b.Property<DateTime?>("CheckOut")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("check_out");

                    b.Property<string>("GuestName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("guest_name");

                    b.Property<string>("HotelId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hotel_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsSynchronizedFromRcc")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synchronized_from_rcc");

                    b.Property<DateTime?>("LastTimeModifiedBySynchronization")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_time_modified_by_synchronization");

                    b.Property<int>("NumberOfAdults")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_adults");

                    b.Property<int>("NumberOfChildren")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_children");

                    b.Property<int>("NumberOfInfants")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_infants");

                    b.Property<ReservationOtherProperty[]>("OtherProperties")
                        .HasColumnType("jsonb")
                        .HasColumnName("other_properties");

                    b.Property<string>("PMSRoomName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pmsroom_name");

                    b.Property<string>("PmsNote")
                        .HasColumnType("text")
                        .HasColumnName("pms_note");

                    b.Property<string>("RccReservationStatusKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rcc_reservation_status_key");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid")
                        .HasColumnName("room_id");

                    b.Property<string>("RoomName")
                        .HasColumnType("text")
                        .HasColumnName("room_name");

                    b.Property<DateTime?>("SynchronizedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("synchronized_at");

                    b.Property<string>("Vip")
                        .HasColumnType("text")
                        .HasColumnName("vip");

                    b.HasKey("Id")
                        .HasName("pk_reservations");

                    b.HasIndex("HotelId")
                        .HasDatabaseName("ix_reservations_hotel_id");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("ix_reservations_room_id");

                    b.ToTable("reservations");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("HotelAccessTypeKey")
                        .HasColumnType("text")
                        .HasColumnName("hotel_access_type_key");

                    b.Property<bool>("IsSystemRole")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system_role");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("role_name_index");

                    b.ToTable("asp_net_roles");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("area_id");

                    b.Property<Guid?>("BuildingId")
                        .HasColumnType("uuid")
                        .HasColumnName("building_id");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text")
                        .HasColumnName("external_id");

                    b.Property<Guid?>("FloorId")
                        .HasColumnType("uuid")
                        .HasColumnName("floor_id");

                    b.Property<string>("FloorSectionName")
                        .HasColumnType("text")
                        .HasColumnName("floor_section_name");

                    b.Property<string>("FloorSubSectionName")
                        .HasColumnType("text")
                        .HasColumnName("floor_sub_section_name");

                    b.Property<string>("HotelId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hotel_id");

                    b.Property<bool?>("IsAutogeneratedFromReservationSync")
                        .HasColumnType("boolean")
                        .HasColumnName("is_autogenerated_from_reservation_sync");

                    b.Property<bool>("IsClean")
                        .HasColumnType("boolean")
                        .HasColumnName("is_clean");

                    b.Property<bool>("IsDoNotDisturb")
                        .HasColumnType("boolean")
                        .HasColumnName("is_do_not_disturb");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("boolean")
                        .HasColumnName("is_occupied");

                    b.Property<bool>("IsOutOfOrder")
                        .HasColumnType("boolean")
                        .HasColumnName("is_out_of_order");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OrdinalNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("ordinal_number");

                    b.Property<string>("TypeKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_key");

                    b.HasKey("Id")
                        .HasName("pk_rooms");

                    b.HasIndex("AreaId")
                        .HasDatabaseName("ix_rooms_area_id");

                    b.HasIndex("BuildingId")
                        .HasDatabaseName("ix_rooms_building_id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_rooms_category_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_rooms_created_by_id");

                    b.HasIndex("FloorId")
                        .HasDatabaseName("ix_rooms_floor_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_rooms_modified_by_id");

                    b.HasIndex("HotelId", "ExternalId")
                        .IsUnique()
                        .HasDatabaseName("ix_rooms_hotel_id_external_id");

                    b.HasIndex("HotelId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_rooms_hotel_id_name");

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("Planner.Domain.Entities.RoomAssetModel", b =>
                {
                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid")
                        .HasColumnName("room_id");

                    b.Property<Guid>("AssetModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("asset_model_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("RoomId", "AssetModelId")
                        .HasName("pk_room_asset_models");

                    b.HasIndex("AssetModelId")
                        .HasDatabaseName("ix_room_asset_models_asset_model_id");

                    b.ToTable("room_asset_models");
                });

            modelBuilder.Entity("Planner.Domain.Entities.RoomAssetUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid")
                        .HasColumnName("asset_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid")
                        .HasColumnName("room_id");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_room_asset_usages");

                    b.HasIndex("AssetId")
                        .HasDatabaseName("ix_room_asset_usages_asset_id");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("ix_room_asset_usages_room_id");

                    b.ToTable("room_asset_usages");
                });

            modelBuilder.Entity("Planner.Domain.Entities.RoomCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_private");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_room_categorys");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_room_categorys_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_room_categorys_modified_by_id");

                    b.ToTable("room_categorys");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Settings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("AllowPostponeCleanings")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_postpone_cleanings");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<string>("DefaultAttendantEndTime")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("default_attendant_end_time");

                    b.Property<int?>("DefaultAttendantMaxCredits")
                        .HasColumnType("integer")
                        .HasColumnName("default_attendant_max_credits");

                    b.Property<string>("DefaultAttendantStartTime")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("default_attendant_start_time");

                    b.Property<string>("DefaultCheckInTime")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("default_check_in_time");

                    b.Property<string>("DefaultCheckOutTime")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("default_check_out_time");

                    b.Property<string>("EmailAddressesForSendingPlan")
                        .HasColumnType("text")
                        .HasColumnName("email_addresses_for_sending_plan");

                    b.Property<string>("FromEmailAddress")
                        .HasColumnType("text")
                        .HasColumnName("from_email_address");

                    b.Property<string>("HotelId")
                        .HasColumnType("text")
                        .HasColumnName("hotel_id");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<int?>("ReserveBetweenCleanings")
                        .HasColumnType("integer")
                        .HasColumnName("reserve_between_cleanings");

                    b.Property<bool>("SendPlanToAttendantsByEmail")
                        .HasColumnType("boolean")
                        .HasColumnName("send_plan_to_attendants_by_email");

                    b.Property<bool>("ShowCleaningDelays")
                        .HasColumnType("boolean")
                        .HasColumnName("show_cleaning_delays");

                    b.Property<bool>("ShowHoursInWorkerPlanner")
                        .HasColumnType("boolean")
                        .HasColumnName("show_hours_in_worker_planner");

                    b.Property<int?>("TravelReserve")
                        .HasColumnType("integer")
                        .HasColumnName("travel_reserve");

                    b.Property<bool>("UseGroups")
                        .HasColumnType("boolean")
                        .HasColumnName("use_groups");

                    b.Property<bool>("UseOrderInPlanning")
                        .HasColumnType("boolean")
                        .HasColumnName("use_order_in_planning");

                    b.HasKey("Id")
                        .HasName("pk_settings");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_settings_created_by_id");

                    b.HasIndex("HotelId")
                        .IsUnique()
                        .HasDatabaseName("ix_settings_hotel_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_settings_modified_by_id");

                    b.ToTable("settings");
                });

            modelBuilder.Entity("Planner.Domain.Entities.SystemTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BuildingId")
                        .HasColumnType("uuid")
                        .HasColumnName("building_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<int>("Credits")
                        .HasColumnType("integer")
                        .HasColumnName("credits");

                    b.Property<string>("EventKey")
                        .HasColumnType("text")
                        .HasColumnName("event_key");

                    b.Property<string>("EventModifierKey")
                        .HasColumnType("text")
                        .HasColumnName("event_modifier_key");

                    b.Property<string>("EventTimeKey")
                        .HasColumnType("text")
                        .HasColumnName("event_time_key");

                    b.Property<Guid?>("FloorId")
                        .HasColumnType("uuid")
                        .HasColumnName("floor_id");

                    b.Property<string>("HotelId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hotel_id");

                    b.Property<bool>("IsBlockingCleaningUntilFinished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_blocking_cleaning_until_finished");

                    b.Property<bool>("IsGuestRequest")
                        .HasColumnType("boolean")
                        .HasColumnName("is_guest_request");

                    b.Property<bool>("IsMajorNotificationRaisedWhenFinished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_major_notification_raised_when_finished");

                    b.Property<bool>("IsManuallyModified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_manually_modified");

                    b.Property<bool>("IsRescheduledEveryDayUntilFinished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_rescheduled_every_day_until_finished");

                    b.Property<bool>("IsShownInNewsFeed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_shown_in_news_feed");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<bool>("MustBeFinishedByAllWhos")
                        .HasColumnType("boolean")
                        .HasColumnName("must_be_finished_by_all_whos");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("PriorityKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("priority_key");

                    b.Property<string>("RecurringTypeKey")
                        .HasColumnType("text")
                        .HasColumnName("recurring_type_key");

                    b.Property<string>("RepeatsForKey")
                        .HasColumnType("text")
                        .HasColumnName("repeats_for_key");

                    b.Property<string>("ReservationId")
                        .HasColumnType("text")
                        .HasColumnName("reservation_id");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uuid")
                        .HasColumnName("room_id");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("starts_at");

                    b.Property<string>("StatusKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status_key");

                    b.Property<Guid>("SystemTaskConfigurationId")
                        .HasColumnType("uuid")
                        .HasColumnName("system_task_configuration_id");

                    b.Property<string>("TypeKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_key");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("WhereTypeKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("where_type_key");

                    b.HasKey("Id")
                        .HasName("pk_system_tasks");

                    b.HasIndex("BuildingId")
                        .HasDatabaseName("ix_system_tasks_building_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_system_tasks_created_by_id");

                    b.HasIndex("FloorId")
                        .HasDatabaseName("ix_system_tasks_floor_id");

                    b.HasIndex("HotelId")
                        .HasDatabaseName("ix_system_tasks_hotel_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_system_tasks_modified_by_id");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("ix_system_tasks_room_id");

                    b.HasIndex("SystemTaskConfigurationId")
                        .HasDatabaseName("ix_system_tasks_system_task_configuration_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_system_tasks_user_id");

                    b.ToTable("system_tasks");
                });

            modelBuilder.Entity("Planner.Domain.Entities.SystemTaskAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action_name");

                    b.Property<Guid>("AssetGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("asset_group_id");

                    b.Property<string>("AssetGroupName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("asset_group_name");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid")
                        .HasColumnName("asset_id");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("asset_name");

                    b.Property<int>("AssetQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("asset_quantity");

                    b.Property<Guid>("SystemTaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("system_task_id");

                    b.HasKey("Id")
                        .HasName("pk_system_task_actions");

                    b.HasIndex("SystemTaskId")
                        .HasDatabaseName("ix_system_task_actions_system_task_id");

                    b.ToTable("system_task_actions");
                });

            modelBuilder.Entity("Planner.Domain.Entities.SystemTaskConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<SystemTaskConfigurationData>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.HasKey("Id")
                        .HasName("pk_system_task_configurations");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_system_task_configurations_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_system_task_configurations_modified_by_id");

                    b.ToTable("system_task_configurations");
                });

            modelBuilder.Entity("Planner.Domain.Entities.SystemTaskHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ChangedByKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("changed_by_key");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<SystemTaskHistoryData>("NewData")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("new_data");

                    b.Property<SystemTaskHistoryData>("OldData")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("old_data");

                    b.Property<Guid>("SystemTaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("system_task_id");

                    b.HasKey("Id")
                        .HasName("pk_system_task_historys");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_system_task_historys_created_by_id");

                    b.HasIndex("SystemTaskId")
                        .HasDatabaseName("ix_system_task_historys_system_task_id");

                    b.ToTable("system_task_historys");
                });

            modelBuilder.Entity("Planner.Domain.Entities.SystemTaskMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<Guid>("SystemTaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("system_task_id");

                    b.HasKey("Id")
                        .HasName("pk_system_task_messages");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_system_task_messages_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_system_task_messages_modified_by_id");

                    b.HasIndex("SystemTaskId")
                        .HasDatabaseName("ix_system_task_messages_system_task_id");

                    b.ToTable("system_task_messages");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Tag", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Key")
                        .HasName("pk_tags");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_tags_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_tags_modified_by_id");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("Planner.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("ConnectionName")
                        .HasColumnType("text")
                        .HasColumnName("connection_name");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsSubGroupLeader")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sub_group_leader");

                    b.Property<string>("Language")
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("OriginalHotel")
                        .HasColumnType("text")
                        .HasColumnName("original_hotel");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("text")
                        .HasColumnName("registration_number");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_group_id");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.Property<Guid?>("UserSubGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_sub_group_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("email_index");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("user_name_index");

                    b.HasIndex("UserGroupId")
                        .HasDatabaseName("ix_asp_net_users_user_group_id");

                    b.HasIndex("UserSubGroupId")
                        .HasDatabaseName("ix_asp_net_users_user_sub_group_id");

                    b.ToTable("asp_net_users");
                });

            modelBuilder.Entity("Planner.Domain.Entities.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_user_groups");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_user_groups_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_user_groups_modified_by_id");

                    b.ToTable("user_groups");
                });

            modelBuilder.Entity("Planner.Domain.Entities.UserSubGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("UserGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_group_id");

                    b.HasKey("Id")
                        .HasName("pk_user_sub_groups");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_user_sub_groups_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_user_sub_groups_modified_by_id");

                    b.HasIndex("UserGroupId")
                        .HasDatabaseName("ix_user_sub_groups_user_group_id");

                    b.ToTable("user_sub_groups");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<Guid?>("FloorId")
                        .HasColumnType("uuid")
                        .HasColumnName("floor_id");

                    b.Property<string>("HotelId")
                        .HasColumnType("text")
                        .HasColumnName("hotel_id");

                    b.Property<bool>("IsCentral")
                        .HasColumnType("boolean")
                        .HasColumnName("is_central");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_warehouses");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_warehouses_created_by_id");

                    b.HasIndex("FloorId")
                        .HasDatabaseName("ix_warehouses_floor_id");

                    b.HasIndex("HotelId")
                        .HasDatabaseName("ix_warehouses_hotel_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_warehouses_modified_by_id");

                    b.ToTable("warehouses");
                });

            modelBuilder.Entity("Planner.Domain.Entities.WarehouseAssetAvailability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid")
                        .HasColumnName("asset_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int>("ReservedQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("reserved_quantity");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("warehouse_id");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_warehouse_asset_availabilities");

                    b.HasIndex("AssetId")
                        .HasDatabaseName("ix_warehouse_asset_availabilities_asset_id");

                    b.HasIndex("WarehouseId")
                        .HasDatabaseName("ix_warehouse_asset_availabilities_warehouse_id");

                    b.ToTable("warehouse_asset_availabilities");
                });

            modelBuilder.Entity("Planner.Domain.Entities.WarehouseDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid")
                        .HasColumnName("asset_id");

                    b.Property<int>("AvailableQuantityBeforeChange")
                        .HasColumnType("integer")
                        .HasColumnName("available_quantity_before_change");

                    b.Property<int>("AvailableQuantityChange")
                        .HasColumnType("integer")
                        .HasColumnName("available_quantity_change");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int>("ReservedQuantityBeforeChange")
                        .HasColumnType("integer")
                        .HasColumnName("reserved_quantity_before_change");

                    b.Property<int>("ReservedQuantityChange")
                        .HasColumnType("integer")
                        .HasColumnName("reserved_quantity_change");

                    b.Property<string>("TypeKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_key");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id")
                        .HasName("pk_warehouse_documents");

                    b.HasIndex("AssetId")
                        .HasDatabaseName("ix_warehouse_documents_asset_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_warehouse_documents_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_warehouse_documents_modified_by_id");

                    b.HasIndex("WarehouseId")
                        .HasDatabaseName("ix_warehouse_documents_warehouse_id");

                    b.ToTable("warehouse_documents");
                });

            modelBuilder.Entity("Planner.Domain.Entities.WarehouseDocumentArchive", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid")
                        .HasColumnName("asset_id");

                    b.Property<int>("AvailableQuantityBeforeChange")
                        .HasColumnType("integer")
                        .HasColumnName("available_quantity_before_change");

                    b.Property<int>("AvailableQuantityChange")
                        .HasColumnType("integer")
                        .HasColumnName("available_quantity_change");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_id");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int>("ReservedQuantityBeforeChange")
                        .HasColumnType("integer")
                        .HasColumnName("reserved_quantity_before_change");

                    b.Property<int>("ReservedQuantityChange")
                        .HasColumnType("integer")
                        .HasColumnName("reserved_quantity_change");

                    b.Property<string>("TypeKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_key");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id")
                        .HasName("pk_warehouse_document_archives");

                    b.HasIndex("AssetId")
                        .HasDatabaseName("ix_warehouse_document_archives_asset_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_warehouse_document_archives_created_by_id");

                    b.HasIndex("ModifiedById")
                        .HasDatabaseName("ix_warehouse_document_archives_modified_by_id");

                    b.HasIndex("WarehouseId")
                        .HasDatabaseName("ix_warehouse_document_archives_warehouse_id");

                    b.ToTable("warehouse_document_archives");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Planner.Domain.Entities.ApplicationUserAvatar", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "User")
                        .WithOne("Avatar")
                        .HasForeignKey("Planner.Domain.Entities.ApplicationUserAvatar", "Id")
                        .HasConstraintName("fk_application_user_avatar_asp_net_users_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Area", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_areas_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .HasConstraintName("fk_areas_hotels_hotel_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_areas_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Hotel");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Asset", b =>
                {
                    b.HasOne("Planner.Domain.Entities.AssetGroup", "AssetGroup")
                        .WithMany("GroupAssets")
                        .HasForeignKey("AssetGroupId")
                        .HasConstraintName("fk_assets_asset_groups_asset_group_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.AssetGroup", "AssetSubGroup")
                        .WithMany("SubGroupAssets")
                        .HasForeignKey("AssetSubGroupId")
                        .HasConstraintName("fk_assets_asset_groups_asset_sub_group_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_assets_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_assets_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssetGroup");

                    b.Navigation("AssetSubGroup");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Planner.Domain.Entities.AssetAction", b =>
                {
                    b.HasOne("Planner.Domain.Entities.AssetGroup", "AssetGroup")
                        .WithMany("AssetActions")
                        .HasForeignKey("AssetGroupId")
                        .HasConstraintName("fk_asset_actions_asset_groups_asset_group_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_asset_actions_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.UserGroup", "DefaultAssignedToUserGroup")
                        .WithMany()
                        .HasForeignKey("DefaultAssignedToUserGroupId")
                        .HasConstraintName("fk_asset_actions_user_groups_default_assigned_to_user_group_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.User", "DefaultAssignedToUser")
                        .WithMany()
                        .HasForeignKey("DefaultAssignedToUserId")
                        .HasConstraintName("fk_asset_actions_asp_net_users_default_assigned_to_user_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.UserSubGroup", "DefaultAssignedToUserSubGroup")
                        .WithMany()
                        .HasForeignKey("DefaultAssignedToUserSubGroupId")
                        .HasConstraintName("fk_asset_actions_user_sub_groups_default_assigned_to_user_sub_gr~")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_asset_actions_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssetGroup");

                    b.Navigation("CreatedBy");

                    b.Navigation("DefaultAssignedToUser");

                    b.Navigation("DefaultAssignedToUserGroup");

                    b.Navigation("DefaultAssignedToUserSubGroup");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Planner.Domain.Entities.AssetFile", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Asset", "Asset")
                        .WithMany("AssetFiles")
                        .HasForeignKey("AssetId")
                        .HasConstraintName("fk_asset_files_assets_asset_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .HasConstraintName("fk_asset_files_files_file_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Planner.Domain.Entities.AssetGroup", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_asset_groups_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_asset_groups_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.AssetGroup", "ParentAssetGroup")
                        .WithMany("ChildAssetGroups")
                        .HasForeignKey("ParentAssetGroupId")
                        .HasConstraintName("fk_asset_groups_asset_groups_parent_asset_group_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("ParentAssetGroup");
                });

            modelBuilder.Entity("Planner.Domain.Entities.AssetModel", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .HasConstraintName("fk_asset_models_assets_asset_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_asset_models_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_asset_models_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Planner.Domain.Entities.AssetTag", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Asset", "Asset")
                        .WithMany("AssetTags")
                        .HasForeignKey("AssetId")
                        .HasConstraintName("fk_asset_tags_assets_asset_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagKey")
                        .HasConstraintName("fk_asset_tags_tags_tag_key")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Building", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Area", "Area")
                        .WithMany("Buildings")
                        .HasForeignKey("AreaId")
                        .HasConstraintName("fk_buildings_areas_area_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_buildings_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .HasConstraintName("fk_buildings_hotels_hotel_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_buildings_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("CreatedBy");

                    b.Navigation("Hotel");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Planner.Domain.Entities.CleaningPlan", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_cleaning_plans_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .HasConstraintName("fk_cleaning_plans_hotels_hotel_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_cleaning_plans_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Hotel");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Planner.Domain.Entities.CleaningPlanGroup", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "Cleaner")
                        .WithMany()
                        .HasForeignKey("CleanerId")
                        .HasConstraintName("fk_cleaning_plan_groups_asp_net_users_cleaner_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.CleaningPlan", "CleaningPlan")
                        .WithMany("Groups")
                        .HasForeignKey("CleaningPlanId")
                        .HasConstraintName("fk_cleaning_plan_groups_cleaning_plans_cleaning_plan_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "SecondaryCleaner")
                        .WithMany()
                        .HasForeignKey("SecondaryCleanerId")
                        .HasConstraintName("fk_cleaning_plan_groups_asp_net_users_secondary_cleaner_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Cleaner");

                    b.Navigation("CleaningPlan");

                    b.Navigation("SecondaryCleaner");
                });

            modelBuilder.Entity("Planner.Domain.Entities.CleaningPlanGroupAvailabilityInterval", b =>
                {
                    b.HasOne("Planner.Domain.Entities.CleaningPlanGroup", "CleaningPlanGroup")
                        .WithMany("AvailabilityIntervals")
                        .HasForeignKey("CleaningPlanGroupId")
                        .HasConstraintName("fk_cleaning_plan_group_availability_intervals_cleaning_plan_gr~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CleaningPlanGroup");
                });

            modelBuilder.Entity("Planner.Domain.Entities.CleaningPlanGroupFloorAffinity", b =>
                {
                    b.HasOne("Planner.Domain.Entities.CleaningPlanGroup", "CleaningPlanGroup")
                        .WithMany("FloorAffinities")
                        .HasForeignKey("CleaningPlanGroupId")
                        .HasConstraintName("fk_cleaning_plan_group_floor_affinities_cleaning_plan_groups_c~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorId")
                        .HasConstraintName("fk_cleaning_plan_group_floor_affinities_floors_floor_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CleaningPlanGroup");

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("Planner.Domain.Entities.CleaningPlanItem", b =>
                {
                    b.HasOne("Planner.Domain.Entities.CleaningPlanGroup", "CleaningPlanGroup")
                        .WithMany("Items")
                        .HasForeignKey("CleaningPlanGroupId")
                        .HasConstraintName("fk_cleaning_plan_items_cleaning_plan_groups_cleaning_plan_grou~")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.CleaningPlugin", "CleaningPlugin")
                        .WithMany()
                        .HasForeignKey("CleaningPluginId")
                        .HasConstraintName("fk_cleaning_plan_items_cleaning_plugins_cleaning_plugin_id");

                    b.HasOne("Planner.Domain.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .HasConstraintName("fk_cleaning_plan_items_rooms_room_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CleaningPlanGroup");

                    b.Navigation("CleaningPlugin");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Planner.Domain.Entities.CleaningPlugin", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Hotel", "Hotel")
                        .WithMany("CleaningPlugins")
                        .HasForeignKey("HotelId")
                        .HasConstraintName("fk_cleaning_plugins_hotels_hotel_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Planner.Domain.Entities.File", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_files_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_files_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Floor", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("fk_floors_buildings_building_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_floors_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .HasConstraintName("fk_floors_hotels_hotel_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_floors_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("CreatedBy");

                    b.Navigation("Hotel");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Inventory", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_inventories_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_inventories_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("Inventories")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("fk_inventories_warehouses_warehouse_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Planner.Domain.Entities.InventoryAssetStatus", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Asset", "Asset")
                        .WithMany("InventoryStatuses")
                        .HasForeignKey("AssetId")
                        .HasConstraintName("fk_inventory_asset_statuses_assets_asset_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Inventory", "Inventory")
                        .WithMany("AssetStatuses")
                        .HasForeignKey("InventoryId")
                        .HasConstraintName("fk_inventory_asset_statuses_inventories_inventory_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("Planner.Domain.Entities.LostAndFound", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_lost_and_founds_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_lost_and_founds_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Planner.Domain.Entities.LostAndFoundFile", b =>
                {
                    b.HasOne("Planner.Domain.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .HasConstraintName("fk_lost_and_found_files_files_file_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.LostAndFound", "LostAndFound")
                        .WithMany("Files")
                        .HasForeignKey("LostAndFoundId")
                        .HasConstraintName("fk_lost_and_found_files_lost_and_founds_lost_and_found_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("LostAndFound");
                });

            modelBuilder.Entity("Planner.Domain.Entities.OnGuard", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_on_guards_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_on_guards_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Planner.Domain.Entities.OnGuardFile", b =>
                {
                    b.HasOne("Planner.Domain.Entities.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .HasConstraintName("fk_on_guard_files_files_file_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.OnGuard", "OnGuard")
                        .WithMany("Files")
                        .HasForeignKey("OnGuardId")
                        .HasConstraintName("fk_on_guard_files_on_guards_on_guard_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("OnGuard");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .HasConstraintName("fk_reservations_hotels_hotel_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Room", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("fk_reservations_rooms_room_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Hotel");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Room", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Area", "Area")
                        .WithMany("Rooms")
                        .HasForeignKey("AreaId")
                        .HasConstraintName("fk_rooms_areas_area_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.Building", "Building")
                        .WithMany("Rooms")
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("fk_rooms_buildings_building_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.RoomCategory", "Category")
                        .WithMany("Rooms")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_rooms_room_categorys_category_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_rooms_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .HasConstraintName("fk_rooms_floors_floor_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .HasConstraintName("fk_rooms_hotels_hotel_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_rooms_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Building");

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");

                    b.Navigation("Floor");

                    b.Navigation("Hotel");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Planner.Domain.Entities.RoomAssetModel", b =>
                {
                    b.HasOne("Planner.Domain.Entities.AssetModel", "AssetModel")
                        .WithMany("RoomAssetModels")
                        .HasForeignKey("AssetModelId")
                        .HasConstraintName("fk_room_asset_models_asset_models_asset_model_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Room", "Room")
                        .WithMany("RoomAssetModels")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("fk_room_asset_models_rooms_room_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssetModel");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Planner.Domain.Entities.RoomAssetUsage", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Asset", "Asset")
                        .WithMany("RoomUsages")
                        .HasForeignKey("AssetId")
                        .HasConstraintName("fk_room_asset_usages_assets_asset_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Room", "Room")
                        .WithMany("AssetUsages")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("fk_room_asset_usages_rooms_room_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Planner.Domain.Entities.RoomCategory", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_room_categorys_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_room_categorys_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Settings", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_settings_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Hotel", "Hotel")
                        .WithOne("Settings")
                        .HasForeignKey("Planner.Domain.Entities.Settings", "HotelId")
                        .HasConstraintName("fk_settings_hotels_hotel_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_settings_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Hotel");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Planner.Domain.Entities.SystemTask", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .HasConstraintName("fk_system_tasks_buildings_building_id");

                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_system_tasks_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorId")
                        .HasConstraintName("fk_system_tasks_floors_floor_id");

                    b.HasOne("Planner.Domain.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .HasConstraintName("fk_system_tasks_hotels_hotel_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_system_tasks_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .HasConstraintName("fk_system_tasks_rooms_room_id");

                    b.HasOne("Planner.Domain.Entities.SystemTaskConfiguration", "SystemTaskConfiguration")
                        .WithMany("Tasks")
                        .HasForeignKey("SystemTaskConfigurationId")
                        .HasConstraintName("fk_system_tasks_system_task_configurations_system_task_configura~")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_system_tasks_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("CreatedBy");

                    b.Navigation("Floor");

                    b.Navigation("Hotel");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Room");

                    b.Navigation("SystemTaskConfiguration");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Planner.Domain.Entities.SystemTaskAction", b =>
                {
                    b.HasOne("Planner.Domain.Entities.SystemTask", "SystemTask")
                        .WithMany("Actions")
                        .HasForeignKey("SystemTaskId")
                        .HasConstraintName("fk_system_task_actions_system_tasks_system_task_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SystemTask");
                });

            modelBuilder.Entity("Planner.Domain.Entities.SystemTaskConfiguration", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_system_task_configurations_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_system_task_configurations_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Planner.Domain.Entities.SystemTaskHistory", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_system_task_historys_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.SystemTask", "SystemTask")
                        .WithMany("History")
                        .HasForeignKey("SystemTaskId")
                        .HasConstraintName("fk_system_task_historys_system_tasks_system_task_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("SystemTask");
                });

            modelBuilder.Entity("Planner.Domain.Entities.SystemTaskMessage", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_system_task_messages_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_system_task_messages_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.SystemTask", "SystemTask")
                        .WithMany("Messages")
                        .HasForeignKey("SystemTaskId")
                        .HasConstraintName("fk_system_task_messages_system_tasks_system_task_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("SystemTask");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Tag", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_tags_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_tags_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Planner.Domain.Entities.User", b =>
                {
                    b.HasOne("Planner.Domain.Entities.UserGroup", "UserGroup")
                        .WithMany("Users")
                        .HasForeignKey("UserGroupId")
                        .HasConstraintName("fk_asp_net_users_user_groups_user_group_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.UserSubGroup", "UserSubGroup")
                        .WithMany("Users")
                        .HasForeignKey("UserSubGroupId")
                        .HasConstraintName("fk_asp_net_users_user_sub_groups_user_sub_group_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("UserGroup");

                    b.Navigation("UserSubGroup");
                });

            modelBuilder.Entity("Planner.Domain.Entities.UserGroup", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_user_groups_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_user_groups_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Planner.Domain.Entities.UserSubGroup", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_user_sub_groups_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_user_sub_groups_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.UserGroup", "UserGroup")
                        .WithMany("UserSubGroups")
                        .HasForeignKey("UserGroupId")
                        .HasConstraintName("fk_user_sub_groups_user_groups_user_group_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Warehouse", b =>
                {
                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_warehouses_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Floor", "Floor")
                        .WithMany("Warehouses")
                        .HasForeignKey("FloorId")
                        .HasConstraintName("fk_warehouses_floors_floor_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .HasConstraintName("fk_warehouses_hotels_hotel_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_warehouses_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Floor");

                    b.Navigation("Hotel");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Planner.Domain.Entities.WarehouseAssetAvailability", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Asset", "Asset")
                        .WithMany("WarehouseAvailabilities")
                        .HasForeignKey("AssetId")
                        .HasConstraintName("fk_warehouse_asset_availabilities_assets_asset_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("AssetAvailabilities")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("fk_warehouse_asset_availabilities_warehouses_warehouse_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Planner.Domain.Entities.WarehouseDocument", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Asset", "Asset")
                        .WithMany("WarehouseDocuments")
                        .HasForeignKey("AssetId")
                        .HasConstraintName("fk_warehouse_documents_assets_asset_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_warehouse_documents_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_warehouse_documents_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("WarehouseDocuments")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("fk_warehouse_documents_warehouses_warehouse_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Planner.Domain.Entities.WarehouseDocumentArchive", b =>
                {
                    b.HasOne("Planner.Domain.Entities.Asset", "Asset")
                        .WithMany("WarehouseDocumentArchives")
                        .HasForeignKey("AssetId")
                        .HasConstraintName("fk_warehouse_document_archives_assets_asset_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_warehouse_document_archives_asp_net_users_created_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .HasConstraintName("fk_warehouse_document_archives_asp_net_users_modified_by_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Planner.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany("WarehouseDocumentArchives")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("fk_warehouse_document_archives_warehouses_warehouse_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Area", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Asset", b =>
                {
                    b.Navigation("AssetFiles");

                    b.Navigation("AssetTags");

                    b.Navigation("InventoryStatuses");

                    b.Navigation("RoomUsages");

                    b.Navigation("WarehouseAvailabilities");

                    b.Navigation("WarehouseDocumentArchives");

                    b.Navigation("WarehouseDocuments");
                });

            modelBuilder.Entity("Planner.Domain.Entities.AssetGroup", b =>
                {
                    b.Navigation("AssetActions");

                    b.Navigation("ChildAssetGroups");

                    b.Navigation("GroupAssets");

                    b.Navigation("SubGroupAssets");
                });

            modelBuilder.Entity("Planner.Domain.Entities.AssetModel", b =>
                {
                    b.Navigation("RoomAssetModels");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Building", b =>
                {
                    b.Navigation("Floors");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Planner.Domain.Entities.CleaningPlan", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Planner.Domain.Entities.CleaningPlanGroup", b =>
                {
                    b.Navigation("AvailabilityIntervals");

                    b.Navigation("FloorAffinities");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Floor", b =>
                {
                    b.Navigation("Rooms");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Hotel", b =>
                {
                    b.Navigation("CleaningPlugins");

                    b.Navigation("Rooms");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Inventory", b =>
                {
                    b.Navigation("AssetStatuses");
                });

            modelBuilder.Entity("Planner.Domain.Entities.LostAndFound", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Planner.Domain.Entities.OnGuard", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Room", b =>
                {
                    b.Navigation("AssetUsages");

                    b.Navigation("Reservations");

                    b.Navigation("RoomAssetModels");
                });

            modelBuilder.Entity("Planner.Domain.Entities.RoomCategory", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Planner.Domain.Entities.SystemTask", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("History");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Planner.Domain.Entities.SystemTaskConfiguration", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Planner.Domain.Entities.User", b =>
                {
                    b.Navigation("Avatar");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Planner.Domain.Entities.UserGroup", b =>
                {
                    b.Navigation("Users");

                    b.Navigation("UserSubGroups");
                });

            modelBuilder.Entity("Planner.Domain.Entities.UserSubGroup", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Planner.Domain.Entities.Warehouse", b =>
                {
                    b.Navigation("AssetAvailabilities");

                    b.Navigation("Inventories");

                    b.Navigation("WarehouseDocumentArchives");

                    b.Navigation("WarehouseDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
